(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from3, except, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/@esbuild-plugins/node-globals-polyfill/process.js
  function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
  }
  function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
  }
  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }
    try {
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e2) {
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }
  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }
    try {
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        return cachedClearTimeout.call(null, marker);
      } catch (e2) {
        return cachedClearTimeout.call(this, marker);
      }
    }
  }
  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }
  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }
  function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  }
  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  function noop() {
  }
  function binding(name2) {
    throw new Error("process.binding is not supported");
  }
  function cwd() {
    return "/";
  }
  function chdir(dir) {
    throw new Error("process.chdir is not supported");
  }
  function umask() {
    return 0;
  }
  function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds < 0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds, nanoseconds];
  }
  function uptime() {
    var currentTime = /* @__PURE__ */ new Date();
    var dif = currentTime - startTime;
    return dif / 1e3;
  }
  var cachedSetTimeout, cachedClearTimeout, queue, draining, currentQueue, queueIndex, title, platform, browser, env, argv, version, versions, release, config, on, addListener, once, off, removeListener, removeAllListeners, emit, performance, performanceNow, startTime, process, defines;
  var init_process = __esm({
    "node_modules/@esbuild-plugins/node-globals-polyfill/process.js"() {
      cachedSetTimeout = defaultSetTimout;
      cachedClearTimeout = defaultClearTimeout;
      if (typeof window.setTimeout === "function") {
        cachedSetTimeout = setTimeout;
      }
      if (typeof window.clearTimeout === "function") {
        cachedClearTimeout = clearTimeout;
      }
      queue = [];
      draining = false;
      queueIndex = -1;
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      title = "browser";
      platform = "browser";
      browser = true;
      env = {};
      argv = [];
      version = "";
      versions = {};
      release = {};
      config = {};
      on = noop;
      addListener = noop;
      once = noop;
      off = noop;
      removeListener = noop;
      removeAllListeners = noop;
      emit = noop;
      performance = window.performance || {};
      performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
        return (/* @__PURE__ */ new Date()).getTime();
      };
      startTime = /* @__PURE__ */ new Date();
      process = {
        nextTick,
        title,
        browser,
        env,
        argv,
        version,
        versions,
        on,
        addListener,
        once,
        off,
        removeListener,
        removeAllListeners,
        emit,
        binding,
        cwd,
        chdir,
        umask,
        hrtime,
        platform,
        release,
        config,
        uptime
      };
      defines = {};
      Object.keys(defines).forEach((key) => {
        const segs = key.split(".");
        let target = process;
        for (let i = 0; i < segs.length; i++) {
          const seg = segs[i];
          if (i === segs.length - 1) {
            target[seg] = defines[key];
          } else {
            target = target[seg] || (target[seg] = {});
          }
        }
      });
    }
  });

  // node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js
  function init() {
    inited = true;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
  }
  function base64toByteArray(b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
    arr = new Arr(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;
    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 255;
      arr[L++] = tmp >> 8 & 255;
      arr[L++] = tmp & 255;
    }
    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 255;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 255;
      arr[L++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function base64fromByteArray(uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = "";
    var parts = [];
    var maxChunkLength = 16383;
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(
        encodeChunk(
          uint8,
          i,
          i + maxChunkLength > len2 ? len2 : i + maxChunkLength
        )
      );
    }
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 63];
      output += "==";
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 63];
      output += lookup[tmp << 2 & 63];
      output += "=";
    }
    parts.push(output);
    return parts.join("");
  }
  function kMaxLength() {
    return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
  }
  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError("Invalid typed array length");
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      that = new Uint8Array(length);
      that.__proto__ = Buffer2.prototype;
    } else {
      if (that === null) {
        that = new Buffer2(length);
      }
      that.length = length;
    }
    return that;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
      return new Buffer2(arg, encodingOrOffset, length);
    }
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new Error(
          "If encoding is specified then the first argument must be a string"
        );
      }
      return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
  }
  function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") {
      throw new TypeError('"value" argument must not be a number');
    }
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }
    if (typeof value === "string") {
      return fromString(that, value, encodingOrOffset);
    }
    return fromObject(that, value);
  }
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }
  function alloc(that, size, fill3, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size);
    }
    if (fill3 !== void 0) {
      return typeof encoding === "string" ? createBuffer(that, size).fill(fill3, encoding) : createBuffer(that, size).fill(fill3);
    }
    return createBuffer(that, size);
  }
  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer2.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that;
  }
  function fromString(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }
    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) {
      that = that.slice(0, actual);
    }
    return that;
  }
  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength;
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError("'offset' is out of bounds");
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError("'length' is out of bounds");
    }
    if (byteOffset === void 0 && length === void 0) {
      array = new Uint8Array(array);
    } else if (length === void 0) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      that = array;
      that.__proto__ = Buffer2.prototype;
    } else {
      that = fromArrayLike(that, array);
    }
    return that;
  }
  function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);
      if (that.length === 0) {
        return that;
      }
      obj.copy(that, 0, 0, len);
      return that;
    }
    if (obj) {
      if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
        if (typeof obj.length !== "number" || isnan(obj.length)) {
          return createBuffer(that, 0);
        }
        return fromArrayLike(that, obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }
    throw new TypeError(
      "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
    );
  }
  function checked(length) {
    if (length >= kMaxLength()) {
      throw new RangeError(
        "Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes"
      );
    }
    return length | 0;
  }
  function internalIsBuffer(b) {
    return !!(b != null && b._isBuffer);
  }
  function byteLength(string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length;
    }
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      string = "" + string;
    }
    var len = string.length;
    if (len === 0) return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
        case void 0:
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding) encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (isNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (internalIsBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(
            buffer,
            val,
            byteOffset
          );
        } else {
          return Uint8Array.prototype.lastIndexOf.call(
            buffer,
            val,
            byteOffset
          );
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read2(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read2(arr, i + j) !== read2(val, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(
      utf8ToBytes(string, buf.length - offset),
      buf,
      offset,
      length
    );
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(
      utf16leToBytes(string, buf.length - offset),
      buf,
      offset,
      length
    );
  }
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64fromByteArray(buf);
    } else {
      return base64fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
  }
  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 65535 + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }
  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 4294967295 + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
    }
  }
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(
        buf,
        value,
        offset,
        4,
        34028234663852886e22,
        -34028234663852886e22
      );
    }
    ieee754write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(
        buf,
        value,
        offset,
        8,
        17976931348623157e292,
        -17976931348623157e292
      );
    }
    ieee754write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  function base64clean(str) {
    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
    if (str.length < 2) return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
  }
  function toHex(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0) break;
        bytes.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0) break;
        bytes.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  function isnan(val) {
    return val !== val;
  }
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
  }
  function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
  }
  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
  }
  function ieee754read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  }
  function ieee754write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
    }
    buffer[offset + i - d] |= s * 128;
  }
  var lookup, revLookup, Arr, inited, MAX_ARGUMENTS_LENGTH, INVALID_BASE64_RE;
  var init_Buffer = __esm({
    "node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js"() {
      init_process();
      init_buffer();
      lookup = [];
      revLookup = [];
      Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      inited = false;
      Buffer2.TYPED_ARRAY_SUPPORT = window.TYPED_ARRAY_SUPPORT !== void 0 ? window.TYPED_ARRAY_SUPPORT : true;
      Buffer2.poolSize = 8192;
      Buffer2._augment = function(arr) {
        arr.__proto__ = Buffer2.prototype;
        return arr;
      };
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      Buffer2.kMaxLength = kMaxLength();
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        Buffer2.prototype.__proto__ = Uint8Array.prototype;
        Buffer2.__proto__ = Uint8Array;
        if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
        }
      }
      Buffer2.alloc = function(size, fill3, encoding) {
        return alloc(null, size, fill3, encoding);
      };
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer2.isBuffer = isBuffer;
      Buffer2.compare = function compare(a, b) {
        if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
          throw new TypeError("Arguments must be Buffers");
        }
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        var i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        var buffer = Buffer2.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!internalIsBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      Buffer2.byteLength = byteLength;
      Buffer2.prototype._isBuffer = true;
      Buffer2.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        var length = this.length | 0;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.equals = function equals(b) {
        if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
        if (!internalIsBuffer(target)) {
          throw new TypeError("Argument must be a Buffer");
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset | 0;
          if (isFinite(length)) {
            length = length | 0;
            if (encoding === void 0) encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        var remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding) encoding = "utf8";
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
              return asciiWrite(this, string, offset, length);
            case "latin1":
            case "binary":
              return latin1Write(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      MAX_ARGUMENTS_LENGTH = 4096;
      Buffer2.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        var newBuf;
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer2.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer2(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }
        return newBuf;
      };
      Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset(offset, byteLength3, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          checkOffset(offset, byteLength3, this.length);
        }
        var val = this[offset + --byteLength3];
        var mul = 1;
        while (byteLength3 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength3] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset(offset, byteLength3, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset(offset, byteLength3, this.length);
        var i = byteLength3;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754read(this, offset, false, 52, 8);
      };
      Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset, byteLength3, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset, byteLength3, maxBytes, 0);
        }
        var i = byteLength3 - 1;
        var mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
        if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset, byteLength3, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset, byteLength3, limit - 1, -limit);
        }
        var i = byteLength3 - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) {
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, start + len),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) {
              val = code;
            }
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
        } else if (typeof val === "number") {
          val = val & 255;
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    }
  });

  // node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js
  var init_buffer = __esm({
    "node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js"() {
      init_Buffer();
    }
  });

  // node_modules/underscore/underscore.js
  var require_underscore = __commonJS({
    "node_modules/underscore/underscore.js"(exports, module) {
      init_process();
      init_buffer();
      (function() {
        var root = typeof self == "object" && self.self === self && self || typeof window == "object" && window.global === window && window || this || {};
        var previousUnderscore = root._;
        var ArrayProto = Array.prototype, ObjProto = Object.prototype;
        var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
        var push = ArrayProto.push, slice3 = ArrayProto.slice, toString4 = ObjProto.toString, hasOwnProperty3 = ObjProto.hasOwnProperty;
        var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeCreate = Object.create;
        var Ctor = function() {
        };
        var _ = function(obj) {
          if (obj instanceof _) return obj;
          if (!(this instanceof _)) return new _(obj);
          this._wrapped = obj;
        };
        if (typeof exports != "undefined" && !exports.nodeType) {
          if (typeof module != "undefined" && !module.nodeType && module.exports) {
            exports = module.exports = _;
          }
          exports._ = _;
        } else {
          root._ = _;
        }
        _.VERSION = "1.9.1";
        var optimizeCb = function(func, context, argCount) {
          if (context === void 0) return func;
          switch (argCount == null ? 3 : argCount) {
            case 1:
              return function(value) {
                return func.call(context, value);
              };
            // The 2-argument case is omitted because we’re not using it.
            case 3:
              return function(value, index, collection) {
                return func.call(context, value, index, collection);
              };
            case 4:
              return function(accumulator, value, index, collection) {
                return func.call(context, accumulator, value, index, collection);
              };
          }
          return function() {
            return func.apply(context, arguments);
          };
        };
        var builtinIteratee;
        var cb = function(value, context, argCount) {
          if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
          if (value == null) return _.identity;
          if (_.isFunction(value)) return optimizeCb(value, context, argCount);
          if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
          return _.property(value);
        };
        _.iteratee = builtinIteratee = function(value, context) {
          return cb(value, context, Infinity);
        };
        var restArguments = function(func, startIndex) {
          startIndex = startIndex == null ? func.length - 1 : +startIndex;
          return function() {
            var length = Math.max(arguments.length - startIndex, 0), rest = Array(length), index = 0;
            for (; index < length; index++) {
              rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
              case 0:
                return func.call(this, rest);
              case 1:
                return func.call(this, arguments[0], rest);
              case 2:
                return func.call(this, arguments[0], arguments[1], rest);
            }
            var args = Array(startIndex + 1);
            for (index = 0; index < startIndex; index++) {
              args[index] = arguments[index];
            }
            args[startIndex] = rest;
            return func.apply(this, args);
          };
        };
        var baseCreate = function(prototype) {
          if (!_.isObject(prototype)) return {};
          if (nativeCreate) return nativeCreate(prototype);
          Ctor.prototype = prototype;
          var result = new Ctor();
          Ctor.prototype = null;
          return result;
        };
        var shallowProperty = function(key) {
          return function(obj) {
            return obj == null ? void 0 : obj[key];
          };
        };
        var has = function(obj, path) {
          return obj != null && hasOwnProperty3.call(obj, path);
        };
        var deepGet = function(obj, path) {
          var length = path.length;
          for (var i = 0; i < length; i++) {
            if (obj == null) return void 0;
            obj = obj[path[i]];
          }
          return length ? obj : void 0;
        };
        var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
        var getLength = shallowProperty("length");
        var isArrayLike = function(collection) {
          var length = getLength(collection);
          return typeof length == "number" && length >= 0 && length <= MAX_ARRAY_INDEX;
        };
        _.each = _.forEach = function(obj, iteratee, context) {
          iteratee = optimizeCb(iteratee, context);
          var i, length;
          if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; i++) {
              iteratee(obj[i], i, obj);
            }
          } else {
            var keys2 = _.keys(obj);
            for (i = 0, length = keys2.length; i < length; i++) {
              iteratee(obj[keys2[i]], keys2[i], obj);
            }
          }
          return obj;
        };
        _.map = _.collect = function(obj, iteratee, context) {
          iteratee = cb(iteratee, context);
          var keys2 = !isArrayLike(obj) && _.keys(obj), length = (keys2 || obj).length, results = Array(length);
          for (var index = 0; index < length; index++) {
            var currentKey = keys2 ? keys2[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
          }
          return results;
        };
        var createReduce = function(dir) {
          var reducer = function(obj, iteratee, memo, initial) {
            var keys2 = !isArrayLike(obj) && _.keys(obj), length = (keys2 || obj).length, index = dir > 0 ? 0 : length - 1;
            if (!initial) {
              memo = obj[keys2 ? keys2[index] : index];
              index += dir;
            }
            for (; index >= 0 && index < length; index += dir) {
              var currentKey = keys2 ? keys2[index] : index;
              memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
          };
          return function(obj, iteratee, memo, context) {
            var initial = arguments.length >= 3;
            return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
          };
        };
        _.reduce = _.foldl = _.inject = createReduce(1);
        _.reduceRight = _.foldr = createReduce(-1);
        _.find = _.detect = function(obj, predicate, context) {
          var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
          var key = keyFinder(obj, predicate, context);
          if (key !== void 0 && key !== -1) return obj[key];
        };
        _.filter = _.select = function(obj, predicate, context) {
          var results = [];
          predicate = cb(predicate, context);
          _.each(obj, function(value, index, list) {
            if (predicate(value, index, list)) results.push(value);
          });
          return results;
        };
        _.reject = function(obj, predicate, context) {
          return _.filter(obj, _.negate(cb(predicate)), context);
        };
        _.every = _.all = function(obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys2 = !isArrayLike(obj) && _.keys(obj), length = (keys2 || obj).length;
          for (var index = 0; index < length; index++) {
            var currentKey = keys2 ? keys2[index] : index;
            if (!predicate(obj[currentKey], currentKey, obj)) return false;
          }
          return true;
        };
        _.some = _.any = function(obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys2 = !isArrayLike(obj) && _.keys(obj), length = (keys2 || obj).length;
          for (var index = 0; index < length; index++) {
            var currentKey = keys2 ? keys2[index] : index;
            if (predicate(obj[currentKey], currentKey, obj)) return true;
          }
          return false;
        };
        _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
          if (!isArrayLike(obj)) obj = _.values(obj);
          if (typeof fromIndex != "number" || guard) fromIndex = 0;
          return _.indexOf(obj, item, fromIndex) >= 0;
        };
        _.invoke = restArguments(function(obj, path, args) {
          var contextPath, func;
          if (_.isFunction(path)) {
            func = path;
          } else if (_.isArray(path)) {
            contextPath = path.slice(0, -1);
            path = path[path.length - 1];
          }
          return _.map(obj, function(context) {
            var method = func;
            if (!method) {
              if (contextPath && contextPath.length) {
                context = deepGet(context, contextPath);
              }
              if (context == null) return void 0;
              method = context[path];
            }
            return method == null ? method : method.apply(context, args);
          });
        });
        _.pluck = function(obj, key) {
          return _.map(obj, _.property(key));
        };
        _.where = function(obj, attrs) {
          return _.filter(obj, _.matcher(attrs));
        };
        _.findWhere = function(obj, attrs) {
          return _.find(obj, _.matcher(attrs));
        };
        _.max = function(obj, iteratee, context) {
          var result = -Infinity, lastComputed = -Infinity, value, computed;
          if (iteratee == null || typeof iteratee == "number" && typeof obj[0] != "object" && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
              value = obj[i];
              if (value != null && value > result) {
                result = value;
              }
            }
          } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(v, index, list) {
              computed = iteratee(v, index, list);
              if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                result = v;
                lastComputed = computed;
              }
            });
          }
          return result;
        };
        _.min = function(obj, iteratee, context) {
          var result = Infinity, lastComputed = Infinity, value, computed;
          if (iteratee == null || typeof iteratee == "number" && typeof obj[0] != "object" && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
              value = obj[i];
              if (value != null && value < result) {
                result = value;
              }
            }
          } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(v, index, list) {
              computed = iteratee(v, index, list);
              if (computed < lastComputed || computed === Infinity && result === Infinity) {
                result = v;
                lastComputed = computed;
              }
            });
          }
          return result;
        };
        _.shuffle = function(obj) {
          return _.sample(obj, Infinity);
        };
        _.sample = function(obj, n, guard) {
          if (n == null || guard) {
            if (!isArrayLike(obj)) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
          }
          var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
          var length = getLength(sample);
          n = Math.max(Math.min(n, length), 0);
          var last = length - 1;
          for (var index = 0; index < n; index++) {
            var rand = _.random(index, last);
            var temp = sample[index];
            sample[index] = sample[rand];
            sample[rand] = temp;
          }
          return sample.slice(0, n);
        };
        _.sortBy = function(obj, iteratee, context) {
          var index = 0;
          iteratee = cb(iteratee, context);
          return _.pluck(_.map(obj, function(value, key, list) {
            return {
              value,
              index: index++,
              criteria: iteratee(value, key, list)
            };
          }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
              if (a > b || a === void 0) return 1;
              if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
          }), "value");
        };
        var group = function(behavior, partition) {
          return function(obj, iteratee, context) {
            var result = partition ? [[], []] : {};
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index) {
              var key = iteratee(value, index, obj);
              behavior(result, value, key);
            });
            return result;
          };
        };
        _.groupBy = group(function(result, value, key) {
          if (has(result, key)) result[key].push(value);
          else result[key] = [value];
        });
        _.indexBy = group(function(result, value, key) {
          result[key] = value;
        });
        _.countBy = group(function(result, value, key) {
          if (has(result, key)) result[key]++;
          else result[key] = 1;
        });
        var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
        _.toArray = function(obj) {
          if (!obj) return [];
          if (_.isArray(obj)) return slice3.call(obj);
          if (_.isString(obj)) {
            return obj.match(reStrSymbol);
          }
          if (isArrayLike(obj)) return _.map(obj, _.identity);
          return _.values(obj);
        };
        _.size = function(obj) {
          if (obj == null) return 0;
          return isArrayLike(obj) ? obj.length : _.keys(obj).length;
        };
        _.partition = group(function(result, value, pass) {
          result[pass ? 0 : 1].push(value);
        }, true);
        _.first = _.head = _.take = function(array, n, guard) {
          if (array == null || array.length < 1) return n == null ? void 0 : [];
          if (n == null || guard) return array[0];
          return _.initial(array, array.length - n);
        };
        _.initial = function(array, n, guard) {
          return slice3.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
        };
        _.last = function(array, n, guard) {
          if (array == null || array.length < 1) return n == null ? void 0 : [];
          if (n == null || guard) return array[array.length - 1];
          return _.rest(array, Math.max(0, array.length - n));
        };
        _.rest = _.tail = _.drop = function(array, n, guard) {
          return slice3.call(array, n == null || guard ? 1 : n);
        };
        _.compact = function(array) {
          return _.filter(array, Boolean);
        };
        var flatten = function(input, shallow, strict, output) {
          output = output || [];
          var idx = output.length;
          for (var i = 0, length = getLength(input); i < length; i++) {
            var value = input[i];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
              if (shallow) {
                var j = 0, len = value.length;
                while (j < len) output[idx++] = value[j++];
              } else {
                flatten(value, shallow, strict, output);
                idx = output.length;
              }
            } else if (!strict) {
              output[idx++] = value;
            }
          }
          return output;
        };
        _.flatten = function(array, shallow) {
          return flatten(array, shallow, false);
        };
        _.without = restArguments(function(array, otherArrays) {
          return _.difference(array, otherArrays);
        });
        _.uniq = _.unique = function(array, isSorted, iteratee, context) {
          if (!_.isBoolean(isSorted)) {
            context = iteratee;
            iteratee = isSorted;
            isSorted = false;
          }
          if (iteratee != null) iteratee = cb(iteratee, context);
          var result = [];
          var seen = [];
          for (var i = 0, length = getLength(array); i < length; i++) {
            var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
            if (isSorted && !iteratee) {
              if (!i || seen !== computed) result.push(value);
              seen = computed;
            } else if (iteratee) {
              if (!_.contains(seen, computed)) {
                seen.push(computed);
                result.push(value);
              }
            } else if (!_.contains(result, value)) {
              result.push(value);
            }
          }
          return result;
        };
        _.union = restArguments(function(arrays) {
          return _.uniq(flatten(arrays, true, true));
        });
        _.intersection = function(array) {
          var result = [];
          var argsLength = arguments.length;
          for (var i = 0, length = getLength(array); i < length; i++) {
            var item = array[i];
            if (_.contains(result, item)) continue;
            var j;
            for (j = 1; j < argsLength; j++) {
              if (!_.contains(arguments[j], item)) break;
            }
            if (j === argsLength) result.push(item);
          }
          return result;
        };
        _.difference = restArguments(function(array, rest) {
          rest = flatten(rest, true, true);
          return _.filter(array, function(value) {
            return !_.contains(rest, value);
          });
        });
        _.unzip = function(array) {
          var length = array && _.max(array, getLength).length || 0;
          var result = Array(length);
          for (var index = 0; index < length; index++) {
            result[index] = _.pluck(array, index);
          }
          return result;
        };
        _.zip = restArguments(_.unzip);
        _.object = function(list, values) {
          var result = {};
          for (var i = 0, length = getLength(list); i < length; i++) {
            if (values) {
              result[list[i]] = values[i];
            } else {
              result[list[i][0]] = list[i][1];
            }
          }
          return result;
        };
        var createPredicateIndexFinder = function(dir) {
          return function(array, predicate, context) {
            predicate = cb(predicate, context);
            var length = getLength(array);
            var index = dir > 0 ? 0 : length - 1;
            for (; index >= 0 && index < length; index += dir) {
              if (predicate(array[index], index, array)) return index;
            }
            return -1;
          };
        };
        _.findIndex = createPredicateIndexFinder(1);
        _.findLastIndex = createPredicateIndexFinder(-1);
        _.sortedIndex = function(array, obj, iteratee, context) {
          iteratee = cb(iteratee, context, 1);
          var value = iteratee(obj);
          var low = 0, high = getLength(array);
          while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (iteratee(array[mid]) < value) low = mid + 1;
            else high = mid;
          }
          return low;
        };
        var createIndexFinder = function(dir, predicateFind, sortedIndex) {
          return function(array, item, idx) {
            var i = 0, length = getLength(array);
            if (typeof idx == "number") {
              if (dir > 0) {
                i = idx >= 0 ? idx : Math.max(idx + length, i);
              } else {
                length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
              }
            } else if (sortedIndex && idx && length) {
              idx = sortedIndex(array, item);
              return array[idx] === item ? idx : -1;
            }
            if (item !== item) {
              idx = predicateFind(slice3.call(array, i, length), _.isNaN);
              return idx >= 0 ? idx + i : -1;
            }
            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
              if (array[idx] === item) return idx;
            }
            return -1;
          };
        };
        _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
        _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
        _.range = function(start, stop, step) {
          if (stop == null) {
            stop = start || 0;
            start = 0;
          }
          if (!step) {
            step = stop < start ? -1 : 1;
          }
          var length = Math.max(Math.ceil((stop - start) / step), 0);
          var range = Array(length);
          for (var idx = 0; idx < length; idx++, start += step) {
            range[idx] = start;
          }
          return range;
        };
        _.chunk = function(array, count) {
          if (count == null || count < 1) return [];
          var result = [];
          var i = 0, length = array.length;
          while (i < length) {
            result.push(slice3.call(array, i, i += count));
          }
          return result;
        };
        var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
          if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
          var self2 = baseCreate(sourceFunc.prototype);
          var result = sourceFunc.apply(self2, args);
          if (_.isObject(result)) return result;
          return self2;
        };
        _.bind = restArguments(function(func, context, args) {
          if (!_.isFunction(func)) throw new TypeError("Bind must be called on a function");
          var bound = restArguments(function(callArgs) {
            return executeBound(func, bound, context, this, args.concat(callArgs));
          });
          return bound;
        });
        _.partial = restArguments(function(func, boundArgs) {
          var placeholder = _.partial.placeholder;
          var bound = function() {
            var position = 0, length = boundArgs.length;
            var args = Array(length);
            for (var i = 0; i < length; i++) {
              args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
            }
            while (position < arguments.length) args.push(arguments[position++]);
            return executeBound(func, bound, this, this, args);
          };
          return bound;
        });
        _.partial.placeholder = _;
        _.bindAll = restArguments(function(obj, keys2) {
          keys2 = flatten(keys2, false, false);
          var index = keys2.length;
          if (index < 1) throw new Error("bindAll must be passed function names");
          while (index--) {
            var key = keys2[index];
            obj[key] = _.bind(obj[key], obj);
          }
        });
        _.memoize = function(func, hasher) {
          var memoize = function(key) {
            var cache = memoize.cache;
            var address = "" + (hasher ? hasher.apply(this, arguments) : key);
            if (!has(cache, address)) cache[address] = func.apply(this, arguments);
            return cache[address];
          };
          memoize.cache = {};
          return memoize;
        };
        _.delay = restArguments(function(func, wait, args) {
          return setTimeout(function() {
            return func.apply(null, args);
          }, wait);
        });
        _.defer = _.partial(_.delay, _, 1);
        _.throttle = function(func, wait, options) {
          var timeout, context, args, result;
          var previous = 0;
          if (!options) options = {};
          var later = function() {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          };
          var throttled = function() {
            var now = _.now();
            if (!previous && options.leading === false) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
              if (timeout) {
                clearTimeout(timeout);
                timeout = null;
              }
              previous = now;
              result = func.apply(context, args);
              if (!timeout) context = args = null;
            } else if (!timeout && options.trailing !== false) {
              timeout = setTimeout(later, remaining);
            }
            return result;
          };
          throttled.cancel = function() {
            clearTimeout(timeout);
            previous = 0;
            timeout = context = args = null;
          };
          return throttled;
        };
        _.debounce = function(func, wait, immediate) {
          var timeout, result;
          var later = function(context, args) {
            timeout = null;
            if (args) result = func.apply(context, args);
          };
          var debounced = restArguments(function(args) {
            if (timeout) clearTimeout(timeout);
            if (immediate) {
              var callNow = !timeout;
              timeout = setTimeout(later, wait);
              if (callNow) result = func.apply(this, args);
            } else {
              timeout = _.delay(later, wait, this, args);
            }
            return result;
          });
          debounced.cancel = function() {
            clearTimeout(timeout);
            timeout = null;
          };
          return debounced;
        };
        _.wrap = function(func, wrapper) {
          return _.partial(wrapper, func);
        };
        _.negate = function(predicate) {
          return function() {
            return !predicate.apply(this, arguments);
          };
        };
        _.compose = function() {
          var args = arguments;
          var start = args.length - 1;
          return function() {
            var i = start;
            var result = args[start].apply(this, arguments);
            while (i--) result = args[i].call(this, result);
            return result;
          };
        };
        _.after = function(times, func) {
          return function() {
            if (--times < 1) {
              return func.apply(this, arguments);
            }
          };
        };
        _.before = function(times, func) {
          var memo;
          return function() {
            if (--times > 0) {
              memo = func.apply(this, arguments);
            }
            if (times <= 1) func = null;
            return memo;
          };
        };
        _.once = _.partial(_.before, 2);
        _.restArguments = restArguments;
        var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
        var nonEnumerableProps = [
          "valueOf",
          "isPrototypeOf",
          "toString",
          "propertyIsEnumerable",
          "hasOwnProperty",
          "toLocaleString"
        ];
        var collectNonEnumProps = function(obj, keys2) {
          var nonEnumIdx = nonEnumerableProps.length;
          var constructor = obj.constructor;
          var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
          var prop = "constructor";
          if (has(obj, prop) && !_.contains(keys2, prop)) keys2.push(prop);
          while (nonEnumIdx--) {
            prop = nonEnumerableProps[nonEnumIdx];
            if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys2, prop)) {
              keys2.push(prop);
            }
          }
        };
        _.keys = function(obj) {
          if (!_.isObject(obj)) return [];
          if (nativeKeys) return nativeKeys(obj);
          var keys2 = [];
          for (var key in obj) if (has(obj, key)) keys2.push(key);
          if (hasEnumBug) collectNonEnumProps(obj, keys2);
          return keys2;
        };
        _.allKeys = function(obj) {
          if (!_.isObject(obj)) return [];
          var keys2 = [];
          for (var key in obj) keys2.push(key);
          if (hasEnumBug) collectNonEnumProps(obj, keys2);
          return keys2;
        };
        _.values = function(obj) {
          var keys2 = _.keys(obj);
          var length = keys2.length;
          var values = Array(length);
          for (var i = 0; i < length; i++) {
            values[i] = obj[keys2[i]];
          }
          return values;
        };
        _.mapObject = function(obj, iteratee, context) {
          iteratee = cb(iteratee, context);
          var keys2 = _.keys(obj), length = keys2.length, results = {};
          for (var index = 0; index < length; index++) {
            var currentKey = keys2[index];
            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
          }
          return results;
        };
        _.pairs = function(obj) {
          var keys2 = _.keys(obj);
          var length = keys2.length;
          var pairs = Array(length);
          for (var i = 0; i < length; i++) {
            pairs[i] = [keys2[i], obj[keys2[i]]];
          }
          return pairs;
        };
        _.invert = function(obj) {
          var result = {};
          var keys2 = _.keys(obj);
          for (var i = 0, length = keys2.length; i < length; i++) {
            result[obj[keys2[i]]] = keys2[i];
          }
          return result;
        };
        _.functions = _.methods = function(obj) {
          var names = [];
          for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
          }
          return names.sort();
        };
        var createAssigner = function(keysFunc, defaults) {
          return function(obj) {
            var length = arguments.length;
            if (defaults) obj = Object(obj);
            if (length < 2 || obj == null) return obj;
            for (var index = 1; index < length; index++) {
              var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
              for (var i = 0; i < l; i++) {
                var key = keys2[i];
                if (!defaults || obj[key] === void 0) obj[key] = source[key];
              }
            }
            return obj;
          };
        };
        _.extend = createAssigner(_.allKeys);
        _.extendOwn = _.assign = createAssigner(_.keys);
        _.findKey = function(obj, predicate, context) {
          predicate = cb(predicate, context);
          var keys2 = _.keys(obj), key;
          for (var i = 0, length = keys2.length; i < length; i++) {
            key = keys2[i];
            if (predicate(obj[key], key, obj)) return key;
          }
        };
        var keyInObj = function(value, key, obj) {
          return key in obj;
        };
        _.pick = restArguments(function(obj, keys2) {
          var result = {}, iteratee = keys2[0];
          if (obj == null) return result;
          if (_.isFunction(iteratee)) {
            if (keys2.length > 1) iteratee = optimizeCb(iteratee, keys2[1]);
            keys2 = _.allKeys(obj);
          } else {
            iteratee = keyInObj;
            keys2 = flatten(keys2, false, false);
            obj = Object(obj);
          }
          for (var i = 0, length = keys2.length; i < length; i++) {
            var key = keys2[i];
            var value = obj[key];
            if (iteratee(value, key, obj)) result[key] = value;
          }
          return result;
        });
        _.omit = restArguments(function(obj, keys2) {
          var iteratee = keys2[0], context;
          if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
            if (keys2.length > 1) context = keys2[1];
          } else {
            keys2 = _.map(flatten(keys2, false, false), String);
            iteratee = function(value, key) {
              return !_.contains(keys2, key);
            };
          }
          return _.pick(obj, iteratee, context);
        });
        _.defaults = createAssigner(_.allKeys, true);
        _.create = function(prototype, props) {
          var result = baseCreate(prototype);
          if (props) _.extendOwn(result, props);
          return result;
        };
        _.clone = function(obj) {
          if (!_.isObject(obj)) return obj;
          return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.tap = function(obj, interceptor) {
          interceptor(obj);
          return obj;
        };
        _.isMatch = function(object, attrs) {
          var keys2 = _.keys(attrs), length = keys2.length;
          if (object == null) return !length;
          var obj = Object(object);
          for (var i = 0; i < length; i++) {
            var key = keys2[i];
            if (attrs[key] !== obj[key] || !(key in obj)) return false;
          }
          return true;
        };
        var eq, deepEq;
        eq = function(a, b, aStack, bStack) {
          if (a === b) return a !== 0 || 1 / a === 1 / b;
          if (a == null || b == null) return false;
          if (a !== a) return b !== b;
          var type2 = typeof a;
          if (type2 !== "function" && type2 !== "object" && typeof b != "object") return false;
          return deepEq(a, b, aStack, bStack);
        };
        deepEq = function(a, b, aStack, bStack) {
          if (a instanceof _) a = a._wrapped;
          if (b instanceof _) b = b._wrapped;
          var className = toString4.call(a);
          if (className !== toString4.call(b)) return false;
          switch (className) {
            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
            case "[object RegExp]":
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
            case "[object String]":
              return "" + a === "" + b;
            case "[object Number]":
              if (+a !== +a) return +b !== +b;
              return +a === 0 ? 1 / +a === 1 / b : +a === +b;
            case "[object Date]":
            case "[object Boolean]":
              return +a === +b;
            case "[object Symbol]":
              return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
          }
          var areArrays = className === "[object Array]";
          if (!areArrays) {
            if (typeof a != "object" || typeof b != "object") return false;
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
              return false;
            }
          }
          aStack = aStack || [];
          bStack = bStack || [];
          var length = aStack.length;
          while (length--) {
            if (aStack[length] === a) return bStack[length] === b;
          }
          aStack.push(a);
          bStack.push(b);
          if (areArrays) {
            length = a.length;
            if (length !== b.length) return false;
            while (length--) {
              if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
          } else {
            var keys2 = _.keys(a), key;
            length = keys2.length;
            if (_.keys(b).length !== length) return false;
            while (length--) {
              key = keys2[length];
              if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
          }
          aStack.pop();
          bStack.pop();
          return true;
        };
        _.isEqual = function(a, b) {
          return eq(a, b);
        };
        _.isEmpty = function(obj) {
          if (obj == null) return true;
          if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
          return _.keys(obj).length === 0;
        };
        _.isElement = function(obj) {
          return !!(obj && obj.nodeType === 1);
        };
        _.isArray = nativeIsArray || function(obj) {
          return toString4.call(obj) === "[object Array]";
        };
        _.isObject = function(obj) {
          var type2 = typeof obj;
          return type2 === "function" || type2 === "object" && !!obj;
        };
        _.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error", "Symbol", "Map", "WeakMap", "Set", "WeakSet"], function(name2) {
          _["is" + name2] = function(obj) {
            return toString4.call(obj) === "[object " + name2 + "]";
          };
        });
        if (!_.isArguments(arguments)) {
          _.isArguments = function(obj) {
            return has(obj, "callee");
          };
        }
        var nodelist = root.document && root.document.childNodes;
        if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
          _.isFunction = function(obj) {
            return typeof obj == "function" || false;
          };
        }
        _.isFinite = function(obj) {
          return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
        };
        _.isNaN = function(obj) {
          return _.isNumber(obj) && isNaN(obj);
        };
        _.isBoolean = function(obj) {
          return obj === true || obj === false || toString4.call(obj) === "[object Boolean]";
        };
        _.isNull = function(obj) {
          return obj === null;
        };
        _.isUndefined = function(obj) {
          return obj === void 0;
        };
        _.has = function(obj, path) {
          if (!_.isArray(path)) {
            return has(obj, path);
          }
          var length = path.length;
          for (var i = 0; i < length; i++) {
            var key = path[i];
            if (obj == null || !hasOwnProperty3.call(obj, key)) {
              return false;
            }
            obj = obj[key];
          }
          return !!length;
        };
        _.noConflict = function() {
          root._ = previousUnderscore;
          return this;
        };
        _.identity = function(value) {
          return value;
        };
        _.constant = function(value) {
          return function() {
            return value;
          };
        };
        _.noop = function() {
        };
        _.property = function(path) {
          if (!_.isArray(path)) {
            return shallowProperty(path);
          }
          return function(obj) {
            return deepGet(obj, path);
          };
        };
        _.propertyOf = function(obj) {
          if (obj == null) {
            return function() {
            };
          }
          return function(path) {
            return !_.isArray(path) ? obj[path] : deepGet(obj, path);
          };
        };
        _.matcher = _.matches = function(attrs) {
          attrs = _.extendOwn({}, attrs);
          return function(obj) {
            return _.isMatch(obj, attrs);
          };
        };
        _.times = function(n, iteratee, context) {
          var accum = Array(Math.max(0, n));
          iteratee = optimizeCb(iteratee, context, 1);
          for (var i = 0; i < n; i++) accum[i] = iteratee(i);
          return accum;
        };
        _.random = function(min, max) {
          if (max == null) {
            max = min;
            min = 0;
          }
          return min + Math.floor(Math.random() * (max - min + 1));
        };
        _.now = Date.now || function() {
          return (/* @__PURE__ */ new Date()).getTime();
        };
        var escapeMap = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
        };
        var unescapeMap = _.invert(escapeMap);
        var createEscaper = function(map3) {
          var escaper = function(match) {
            return map3[match];
          };
          var source = "(?:" + _.keys(map3).join("|") + ")";
          var testRegexp = RegExp(source);
          var replaceRegexp = RegExp(source, "g");
          return function(string) {
            string = string == null ? "" : "" + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
          };
        };
        _.escape = createEscaper(escapeMap);
        _.unescape = createEscaper(unescapeMap);
        _.result = function(obj, path, fallback) {
          if (!_.isArray(path)) path = [path];
          var length = path.length;
          if (!length) {
            return _.isFunction(fallback) ? fallback.call(obj) : fallback;
          }
          for (var i = 0; i < length; i++) {
            var prop = obj == null ? void 0 : obj[path[i]];
            if (prop === void 0) {
              prop = fallback;
              i = length;
            }
            obj = _.isFunction(prop) ? prop.call(obj) : prop;
          }
          return obj;
        };
        var idCounter = 0;
        _.uniqueId = function(prefix) {
          var id = ++idCounter + "";
          return prefix ? prefix + id : id;
        };
        _.templateSettings = {
          evaluate: /<%([\s\S]+?)%>/g,
          interpolate: /<%=([\s\S]+?)%>/g,
          escape: /<%-([\s\S]+?)%>/g
        };
        var noMatch = /(.)^/;
        var escapes = {
          "'": "'",
          "\\": "\\",
          "\r": "r",
          "\n": "n",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
        var escapeChar = function(match) {
          return "\\" + escapes[match];
        };
        _.template = function(text, settings, oldSettings) {
          if (!settings && oldSettings) settings = oldSettings;
          settings = _.defaults({}, settings, _.templateSettings);
          var matcher = RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
          ].join("|") + "|$", "g");
          var index = 0;
          var source = "__p+='";
          text.replace(matcher, function(match, escape2, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
            index = offset + match.length;
            if (escape2) {
              source += "'+\n((__t=(" + escape2 + "))==null?'':_.escape(__t))+\n'";
            } else if (interpolate) {
              source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            } else if (evaluate) {
              source += "';\n" + evaluate + "\n__p+='";
            }
            return match;
          });
          source += "';\n";
          if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
          source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
          var render;
          try {
            render = new Function(settings.variable || "obj", "_", source);
          } catch (e) {
            e.source = source;
            throw e;
          }
          var template = function(data) {
            return render.call(this, data, _);
          };
          var argument = settings.variable || "obj";
          template.source = "function(" + argument + "){\n" + source + "}";
          return template;
        };
        _.chain = function(obj) {
          var instance = _(obj);
          instance._chain = true;
          return instance;
        };
        var chainResult = function(instance, obj) {
          return instance._chain ? _(obj).chain() : obj;
        };
        _.mixin = function(obj) {
          _.each(_.functions(obj), function(name2) {
            var func = _[name2] = obj[name2];
            _.prototype[name2] = function() {
              var args = [this._wrapped];
              push.apply(args, arguments);
              return chainResult(this, func.apply(_, args));
            };
          });
          return _;
        };
        _.mixin(_);
        _.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name2) {
          var method = ArrayProto[name2];
          _.prototype[name2] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name2 === "shift" || name2 === "splice") && obj.length === 0) delete obj[0];
            return chainResult(this, obj);
          };
        });
        _.each(["concat", "join", "slice"], function(name2) {
          var method = ArrayProto[name2];
          _.prototype[name2] = function() {
            return chainResult(this, method.apply(this._wrapped, arguments));
          };
        });
        _.prototype.value = function() {
          return this._wrapped;
        };
        _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
        _.prototype.toString = function() {
          return String(this._wrapped);
        };
        if (typeof define == "function" && define.amd) {
          define("underscore", [], function() {
            return _;
          });
        }
      })();
    }
  });

  // node-modules-polyfills:buffer
  var buffer_exports = {};
  __export(buffer_exports, {
    Buffer: () => Buffer3,
    INSPECT_MAX_BYTES: () => INSPECT_MAX_BYTES,
    SlowBuffer: () => SlowBuffer,
    isBuffer: () => isBuffer2,
    kMaxLength: () => _kMaxLength
  });
  function init2() {
    inited2 = true;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup2[i] = code[i];
      revLookup2[code.charCodeAt(i)] = i;
    }
    revLookup2["-".charCodeAt(0)] = 62;
    revLookup2["_".charCodeAt(0)] = 63;
  }
  function toByteArray(b64) {
    if (!inited2) {
      init2();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
    arr = new Arr2(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;
    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = revLookup2[b64.charCodeAt(i)] << 18 | revLookup2[b64.charCodeAt(i + 1)] << 12 | revLookup2[b64.charCodeAt(i + 2)] << 6 | revLookup2[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 255;
      arr[L++] = tmp >> 8 & 255;
      arr[L++] = tmp & 255;
    }
    if (placeHolders === 2) {
      tmp = revLookup2[b64.charCodeAt(i)] << 2 | revLookup2[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 255;
    } else if (placeHolders === 1) {
      tmp = revLookup2[b64.charCodeAt(i)] << 10 | revLookup2[b64.charCodeAt(i + 1)] << 4 | revLookup2[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 255;
      arr[L++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase642(num) {
    return lookup2[num >> 18 & 63] + lookup2[num >> 12 & 63] + lookup2[num >> 6 & 63] + lookup2[num & 63];
  }
  function encodeChunk2(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase642(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    if (!inited2) {
      init2();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = "";
    var parts = [];
    var maxChunkLength = 16383;
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk2(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup2[tmp >> 2];
      output += lookup2[tmp << 4 & 63];
      output += "==";
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup2[tmp >> 10];
      output += lookup2[tmp >> 4 & 63];
      output += lookup2[tmp << 2 & 63];
      output += "=";
    }
    parts.push(output);
    return parts.join("");
  }
  function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  }
  function write2(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
    }
    buffer[offset + i - d] |= s * 128;
  }
  function kMaxLength2() {
    return Buffer3.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
  }
  function createBuffer2(that, length) {
    if (kMaxLength2() < length) {
      throw new RangeError("Invalid typed array length");
    }
    if (Buffer3.TYPED_ARRAY_SUPPORT) {
      that = new Uint8Array(length);
      that.__proto__ = Buffer3.prototype;
    } else {
      if (that === null) {
        that = new Buffer3(length);
      }
      that.length = length;
    }
    return that;
  }
  function Buffer3(arg, encodingOrOffset, length) {
    if (!Buffer3.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer3)) {
      return new Buffer3(arg, encodingOrOffset, length);
    }
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new Error(
          "If encoding is specified then the first argument must be a string"
        );
      }
      return allocUnsafe2(this, arg);
    }
    return from2(this, arg, encodingOrOffset, length);
  }
  function from2(that, value, encodingOrOffset, length) {
    if (typeof value === "number") {
      throw new TypeError('"value" argument must not be a number');
    }
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
      return fromArrayBuffer2(that, value, encodingOrOffset, length);
    }
    if (typeof value === "string") {
      return fromString2(that, value, encodingOrOffset);
    }
    return fromObject2(that, value);
  }
  function assertSize2(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }
  function alloc2(that, size, fill3, encoding) {
    assertSize2(size);
    if (size <= 0) {
      return createBuffer2(that, size);
    }
    if (fill3 !== void 0) {
      return typeof encoding === "string" ? createBuffer2(that, size).fill(fill3, encoding) : createBuffer2(that, size).fill(fill3);
    }
    return createBuffer2(that, size);
  }
  function allocUnsafe2(that, size) {
    assertSize2(size);
    that = createBuffer2(that, size < 0 ? 0 : checked2(size) | 0);
    if (!Buffer3.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that;
  }
  function fromString2(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer3.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }
    var length = byteLength2(string, encoding) | 0;
    that = createBuffer2(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) {
      that = that.slice(0, actual);
    }
    return that;
  }
  function fromArrayLike2(that, array) {
    var length = array.length < 0 ? 0 : checked2(array.length) | 0;
    that = createBuffer2(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that;
  }
  function fromArrayBuffer2(that, array, byteOffset, length) {
    array.byteLength;
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError("'offset' is out of bounds");
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError("'length' is out of bounds");
    }
    if (byteOffset === void 0 && length === void 0) {
      array = new Uint8Array(array);
    } else if (length === void 0) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }
    if (Buffer3.TYPED_ARRAY_SUPPORT) {
      that = array;
      that.__proto__ = Buffer3.prototype;
    } else {
      that = fromArrayLike2(that, array);
    }
    return that;
  }
  function fromObject2(that, obj) {
    if (internalIsBuffer2(obj)) {
      var len = checked2(obj.length) | 0;
      that = createBuffer2(that, len);
      if (that.length === 0) {
        return that;
      }
      obj.copy(that, 0, 0, len);
      return that;
    }
    if (obj) {
      if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
        if (typeof obj.length !== "number" || isnan2(obj.length)) {
          return createBuffer2(that, 0);
        }
        return fromArrayLike2(that, obj);
      }
      if (obj.type === "Buffer" && isArray(obj.data)) {
        return fromArrayLike2(that, obj.data);
      }
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
  }
  function checked2(length) {
    if (length >= kMaxLength2()) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength2().toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer3.alloc(+length);
  }
  function internalIsBuffer2(b) {
    return !!(b != null && b._isBuffer);
  }
  function byteLength2(string, encoding) {
    if (internalIsBuffer2(string)) {
      return string.length;
    }
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      string = "" + string;
    }
    var len = string.length;
    if (len === 0) return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
        case void 0:
          return utf8ToBytes2(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes2(string).length;
        default:
          if (loweredCase) return utf8ToBytes2(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  function slowToString2(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding) encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice2(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice2(this, start, end);
        case "ascii":
          return asciiSlice2(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice2(this, start, end);
        case "base64":
          return base64Slice2(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice2(this, start, end);
        default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  function swap2(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  function bidirectionalIndexOf2(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0) return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (isNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1;
    }
    if (typeof val === "string") {
      val = Buffer3.from(val, encoding);
    }
    if (internalIsBuffer2(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf2(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (Buffer3.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
      return arrayIndexOf2(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf2(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read2(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read2(arr, i + j) !== read2(val, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  function hexWrite2(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write2(buf, string, offset, length) {
    return blitBuffer2(utf8ToBytes2(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite2(buf, string, offset, length) {
    return blitBuffer2(asciiToBytes2(string), buf, offset, length);
  }
  function latin1Write2(buf, string, offset, length) {
    return asciiWrite2(buf, string, offset, length);
  }
  function base64Write2(buf, string, offset, length) {
    return blitBuffer2(base64ToBytes2(string), buf, offset, length);
  }
  function ucs2Write2(buf, string, offset, length) {
    return blitBuffer2(utf16leToBytes2(string, buf.length - offset), buf, offset, length);
  }
  function base64Slice2(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf);
    } else {
      return fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice2(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray2(res);
  }
  function decodeCodePointsArray2(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH2) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH2)
      );
    }
    return res;
  }
  function asciiSlice2(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 127);
    }
    return ret;
  }
  function latin1Slice2(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice2(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for (var i = start; i < end; ++i) {
      out += toHex2(buf[i]);
    }
    return out;
  }
  function utf16leSlice2(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  function checkOffset2(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
  }
  function checkInt2(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer2(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
  }
  function objectWriteUInt162(buf, value, offset, littleEndian) {
    if (value < 0) value = 65535 + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }
  function objectWriteUInt322(buf, value, offset, littleEndian) {
    if (value < 0) value = 4294967295 + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
    }
  }
  function checkIEEE7542(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
  }
  function writeFloat2(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE7542(buf, value, offset, 4);
    }
    write2(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  function writeDouble2(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE7542(buf, value, offset, 8);
    }
    write2(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  function base64clean2(str) {
    str = stringtrim2(str).replace(INVALID_BASE64_RE2, "");
    if (str.length < 2) return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function stringtrim2(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
  }
  function toHex2(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
  }
  function utf8ToBytes2(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0) break;
        bytes.push(
          codePoint >> 6 | 192,
          codePoint & 63 | 128
        );
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0) break;
        bytes.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0) break;
        bytes.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes2(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes2(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes2(str) {
    return toByteArray(base64clean2(str));
  }
  function blitBuffer2(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }
  function isnan2(val) {
    return val !== val;
  }
  function isBuffer2(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer2(obj) || isSlowBuffer2(obj));
  }
  function isFastBuffer2(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
  }
  function isSlowBuffer2(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer2(obj.slice(0, 0));
  }
  var lookup2, revLookup2, Arr2, inited2, toString2, isArray, INSPECT_MAX_BYTES, _kMaxLength, MAX_ARGUMENTS_LENGTH2, INVALID_BASE64_RE2;
  var init_buffer2 = __esm({
    "node-modules-polyfills:buffer"() {
      init_process();
      init_buffer();
      lookup2 = [];
      revLookup2 = [];
      Arr2 = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      inited2 = false;
      toString2 = {}.toString;
      isArray = Array.isArray || function(arr) {
        return toString2.call(arr) == "[object Array]";
      };
      INSPECT_MAX_BYTES = 50;
      Buffer3.TYPED_ARRAY_SUPPORT = window.TYPED_ARRAY_SUPPORT !== void 0 ? window.TYPED_ARRAY_SUPPORT : true;
      _kMaxLength = kMaxLength2();
      Buffer3.poolSize = 8192;
      Buffer3._augment = function(arr) {
        arr.__proto__ = Buffer3.prototype;
        return arr;
      };
      Buffer3.from = function(value, encodingOrOffset, length) {
        return from2(null, value, encodingOrOffset, length);
      };
      if (Buffer3.TYPED_ARRAY_SUPPORT) {
        Buffer3.prototype.__proto__ = Uint8Array.prototype;
        Buffer3.__proto__ = Uint8Array;
      }
      Buffer3.alloc = function(size, fill3, encoding) {
        return alloc2(null, size, fill3, encoding);
      };
      Buffer3.allocUnsafe = function(size) {
        return allocUnsafe2(null, size);
      };
      Buffer3.allocUnsafeSlow = function(size) {
        return allocUnsafe2(null, size);
      };
      Buffer3.isBuffer = isBuffer2;
      Buffer3.compare = function compare3(a, b) {
        if (!internalIsBuffer2(a) || !internalIsBuffer2(b)) {
          throw new TypeError("Arguments must be Buffers");
        }
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer3.isEncoding = function isEncoding2(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer3.concat = function concat2(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer3.alloc(0);
        }
        var i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        var buffer = Buffer3.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!internalIsBuffer2(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      Buffer3.byteLength = byteLength2;
      Buffer3.prototype._isBuffer = true;
      Buffer3.prototype.swap16 = function swap162() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (var i = 0; i < len; i += 2) {
          swap2(this, i, i + 1);
        }
        return this;
      };
      Buffer3.prototype.swap32 = function swap322() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (var i = 0; i < len; i += 4) {
          swap2(this, i, i + 3);
          swap2(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer3.prototype.swap64 = function swap642() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (var i = 0; i < len; i += 8) {
          swap2(this, i, i + 7);
          swap2(this, i + 1, i + 6);
          swap2(this, i + 2, i + 5);
          swap2(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer3.prototype.toString = function toString3() {
        var length = this.length | 0;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice2(this, 0, length);
        return slowToString2.apply(this, arguments);
      };
      Buffer3.prototype.equals = function equals2(b) {
        if (!internalIsBuffer2(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return Buffer3.compare(this, b) === 0;
      };
      Buffer3.prototype.inspect = function inspect() {
        var str = "";
        var max = INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
          if (this.length > max) str += " ... ";
        }
        return "<Buffer " + str + ">";
      };
      Buffer3.prototype.compare = function compare4(target, start, end, thisStart, thisEnd) {
        if (!internalIsBuffer2(target)) {
          throw new TypeError("Argument must be a Buffer");
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer3.prototype.includes = function includes2(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer3.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
        return bidirectionalIndexOf2(this, val, byteOffset, encoding, true);
      };
      Buffer3.prototype.lastIndexOf = function lastIndexOf2(val, byteOffset, encoding) {
        return bidirectionalIndexOf2(this, val, byteOffset, encoding, false);
      };
      Buffer3.prototype.write = function write3(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset | 0;
          if (isFinite(length)) {
            length = length | 0;
            if (encoding === void 0) encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        var remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding) encoding = "utf8";
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite2(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write2(this, string, offset, length);
            case "ascii":
              return asciiWrite2(this, string, offset, length);
            case "latin1":
            case "binary":
              return latin1Write2(this, string, offset, length);
            case "base64":
              return base64Write2(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write2(this, string, offset, length);
            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer3.prototype.toJSON = function toJSON2() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      MAX_ARGUMENTS_LENGTH2 = 4096;
      Buffer3.prototype.slice = function slice2(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        var newBuf;
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer3.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer3(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }
        return newBuf;
      };
      Buffer3.prototype.readUIntLE = function readUIntLE2(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset2(offset, byteLength3, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUIntBE = function readUIntBE2(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          checkOffset2(offset, byteLength3, this.length);
        }
        var val = this[offset + --byteLength3];
        var mul = 1;
        while (byteLength3 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength3] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUInt8 = function readUInt82(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 1, this.length);
        return this[offset];
      };
      Buffer3.prototype.readUInt16LE = function readUInt16LE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer3.prototype.readUInt16BE = function readUInt16BE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer3.prototype.readUInt32LE = function readUInt32LE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer3.prototype.readUInt32BE = function readUInt32BE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer3.prototype.readIntLE = function readIntLE2(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset2(offset, byteLength3, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer3.prototype.readIntBE = function readIntBE2(offset, byteLength3, noAssert) {
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) checkOffset2(offset, byteLength3, this.length);
        var i = byteLength3;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer3.prototype.readInt8 = function readInt82(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer3.prototype.readInt16LE = function readInt16LE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt16BE = function readInt16BE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt32LE = function readInt32LE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer3.prototype.readInt32BE = function readInt32BE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer3.prototype.readFloatLE = function readFloatLE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return read(this, offset, true, 23, 4);
      };
      Buffer3.prototype.readFloatBE = function readFloatBE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 4, this.length);
        return read(this, offset, false, 23, 4);
      };
      Buffer3.prototype.readDoubleLE = function readDoubleLE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 8, this.length);
        return read(this, offset, true, 52, 8);
      };
      Buffer3.prototype.readDoubleBE = function readDoubleBE2(offset, noAssert) {
        if (!noAssert) checkOffset2(offset, 8, this.length);
        return read(this, offset, false, 52, 8);
      };
      Buffer3.prototype.writeUIntLE = function writeUIntLE2(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt2(this, value, offset, byteLength3, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer3.prototype.writeUIntBE = function writeUIntBE2(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength3 = byteLength3 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt2(this, value, offset, byteLength3, maxBytes, 0);
        }
        var i = byteLength3 - 1;
        var mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer3.prototype.writeUInt8 = function writeUInt82(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 1, 255, 0);
        if (!Buffer3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeUInt16LE = function writeUInt16LE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 2, 65535, 0);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt162(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer3.prototype.writeUInt16BE = function writeUInt16BE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 2, 65535, 0);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt162(this, value, offset, false);
        }
        return offset + 2;
      };
      Buffer3.prototype.writeUInt32LE = function writeUInt32LE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 4, 4294967295, 0);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 255;
        } else {
          objectWriteUInt322(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer3.prototype.writeUInt32BE = function writeUInt32BE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 4, 4294967295, 0);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt322(this, value, offset, false);
        }
        return offset + 4;
      };
      Buffer3.prototype.writeIntLE = function writeIntLE2(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt2(this, value, offset, byteLength3, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer3.prototype.writeIntBE = function writeIntBE2(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt2(this, value, offset, byteLength3, limit - 1, -limit);
        }
        var i = byteLength3 - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer3.prototype.writeInt8 = function writeInt82(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 1, 127, -128);
        if (!Buffer3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeInt16LE = function writeInt16LE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 2, 32767, -32768);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt162(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer3.prototype.writeInt16BE = function writeInt16BE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 2, 32767, -32768);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt162(this, value, offset, false);
        }
        return offset + 2;
      };
      Buffer3.prototype.writeInt32LE = function writeInt32LE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt322(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer3.prototype.writeInt32BE = function writeInt32BE2(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt2(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        if (Buffer3.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt322(this, value, offset, false);
        }
        return offset + 4;
      };
      Buffer3.prototype.writeFloatLE = function writeFloatLE2(value, offset, noAssert) {
        return writeFloat2(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeFloatBE = function writeFloatBE2(value, offset, noAssert) {
        return writeFloat2(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.writeDoubleLE = function writeDoubleLE2(value, offset, noAssert) {
        return writeDouble2(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeDoubleBE = function writeDoubleBE2(value, offset, noAssert) {
        return writeDouble2(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.copy = function copy2(target, targetStart, start, end) {
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) {
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1e3 || !Buffer3.TYPED_ARRAY_SUPPORT) {
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, start + len),
            targetStart
          );
        }
        return len;
      };
      Buffer3.prototype.fill = function fill2(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) {
              val = code;
            }
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
        } else if (typeof val === "number") {
          val = val & 255;
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = internalIsBuffer2(val) ? val : utf8ToBytes2(new Buffer3(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      INVALID_BASE64_RE2 = /[^+\/0-9A-Za-z-_]/g;
    }
  });

  // node-modules-polyfills-commonjs:buffer
  var require_buffer = __commonJS({
    "node-modules-polyfills-commonjs:buffer"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_buffer2(), __toCommonJS(buffer_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          Buffer4 = require_buffer().Buffer;
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
          }
          if (base2 === 16) {
            this._parseHex(number, start);
          } else {
            this._parseBase(number, base2, start);
          }
          if (number[0] === "-") {
            this.negative = 1;
          }
          this.strip();
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex(str, start, end) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            if (c >= 49 && c <= 54) {
              r |= c - 49 + 10;
            } else if (c >= 17 && c <= 22) {
              r |= c - 17 + 10;
            } else {
              r |= c & 15;
            }
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
            off3 += 24;
            if (off3 >= 26) {
              off3 -= 26;
              j++;
            }
          }
          if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            r.strip();
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/number-to-bn/node_modules/bn.js/lib/bn.js
  var require_bn2 = __commonJS({
    "node_modules/number-to-bn/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          Buffer4 = require_buffer().Buffer;
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
          }
          if (base2 === 16) {
            this._parseHex(number, start);
          } else {
            this._parseBase(number, base2, start);
          }
          if (number[0] === "-") {
            this.negative = 1;
          }
          this.strip();
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex(str, start, end) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            if (c >= 49 && c <= 54) {
              r |= c - 49 + 10;
            } else if (c >= 17 && c <= 22) {
              r |= c - 17 + 10;
            } else {
              r |= c & 15;
            }
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
            off3 += 24;
            if (off3 >= 26) {
              off3 -= 26;
              j++;
            }
          }
          if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            r.strip();
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/is-hex-prefixed/src/index.js
  var require_src = __commonJS({
    "node_modules/is-hex-prefixed/src/index.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = function isHexPrefixed(str) {
        if (typeof str !== "string") {
          throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
        }
        return str.slice(0, 2) === "0x";
      };
    }
  });

  // node_modules/strip-hex-prefix/src/index.js
  var require_src2 = __commonJS({
    "node_modules/strip-hex-prefix/src/index.js"(exports, module) {
      init_process();
      init_buffer();
      var isHexPrefixed = require_src();
      module.exports = function stripHexPrefix(str) {
        if (typeof str !== "string") {
          return str;
        }
        return isHexPrefixed(str) ? str.slice(2) : str;
      };
    }
  });

  // node_modules/number-to-bn/src/index.js
  var require_src3 = __commonJS({
    "node_modules/number-to-bn/src/index.js"(exports, module) {
      init_process();
      init_buffer();
      var BN = require_bn2();
      var stripHexPrefix = require_src2();
      module.exports = function numberToBN(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          var multiplier = new BN(1);
          var formattedString = String(arg).toLowerCase().trim();
          var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
          var stringArg = stripHexPrefix(formattedString);
          if (stringArg.substr(0, 1) === "-") {
            stringArg = stripHexPrefix(stringArg.slice(1));
            multiplier = new BN(-1, 10);
          }
          stringArg = stringArg === "" ? "0" : stringArg;
          if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
            return new BN(stringArg, 16).mul(multiplier);
          }
          if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
            return new BN(stringArg, 10).mul(multiplier);
          }
        } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
          if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
            return new BN(arg.toString(10), 10);
          }
        }
        throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
      };
    }
  });

  // node_modules/ethjs-unit/lib/index.js
  var require_lib = __commonJS({
    "node_modules/ethjs-unit/lib/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn();
      var numberToBN = require_src3();
      var zero3 = new BN(0);
      var negative1 = new BN(-1);
      var unitMap = {
        "noether": "0",
        // eslint-disable-line
        "wei": "1",
        // eslint-disable-line
        "kwei": "1000",
        // eslint-disable-line
        "Kwei": "1000",
        // eslint-disable-line
        "babbage": "1000",
        // eslint-disable-line
        "femtoether": "1000",
        // eslint-disable-line
        "mwei": "1000000",
        // eslint-disable-line
        "Mwei": "1000000",
        // eslint-disable-line
        "lovelace": "1000000",
        // eslint-disable-line
        "picoether": "1000000",
        // eslint-disable-line
        "gwei": "1000000000",
        // eslint-disable-line
        "Gwei": "1000000000",
        // eslint-disable-line
        "shannon": "1000000000",
        // eslint-disable-line
        "nanoether": "1000000000",
        // eslint-disable-line
        "nano": "1000000000",
        // eslint-disable-line
        "szabo": "1000000000000",
        // eslint-disable-line
        "microether": "1000000000000",
        // eslint-disable-line
        "micro": "1000000000000",
        // eslint-disable-line
        "finney": "1000000000000000",
        // eslint-disable-line
        "milliether": "1000000000000000",
        // eslint-disable-line
        "milli": "1000000000000000",
        // eslint-disable-line
        "ether": "1000000000000000000",
        // eslint-disable-line
        "kether": "1000000000000000000000",
        // eslint-disable-line
        "grand": "1000000000000000000000",
        // eslint-disable-line
        "mether": "1000000000000000000000000",
        // eslint-disable-line
        "gether": "1000000000000000000000000000",
        // eslint-disable-line
        "tether": "1000000000000000000000000000000"
      };
      function getValueOfUnit(unitInput) {
        var unit = unitInput ? unitInput.toLowerCase() : "ether";
        var unitValue = unitMap[unit];
        if (typeof unitValue !== "string") {
          throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
        }
        return new BN(unitValue, 10);
      }
      function numberToString(arg) {
        if (typeof arg === "string") {
          if (!arg.match(/^-?[0-9.]+$/)) {
            throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
          }
          return arg;
        } else if (typeof arg === "number") {
          return String(arg);
        } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
          if (arg.toPrecision) {
            return String(arg.toPrecision());
          } else {
            return arg.toString(10);
          }
        }
        throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
      }
      function fromWei(weiInput, unit, optionsInput) {
        var wei = numberToBN(weiInput);
        var negative = wei.lt(zero3);
        var base2 = getValueOfUnit(unit);
        var baseLength = unitMap[unit].length - 1 || 1;
        var options = optionsInput || {};
        if (negative) {
          wei = wei.mul(negative1);
        }
        var fraction = wei.mod(base2).toString(10);
        while (fraction.length < baseLength) {
          fraction = "0" + fraction;
        }
        if (!options.pad) {
          fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        }
        var whole = wei.div(base2).toString(10);
        if (options.commify) {
          whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
        if (negative) {
          value = "-" + value;
        }
        return value;
      }
      function toWei(etherInput, unit) {
        var ether = numberToString(etherInput);
        var base2 = getValueOfUnit(unit);
        var baseLength = unitMap[unit].length - 1 || 1;
        var negative = ether.substring(0, 1) === "-";
        if (negative) {
          ether = ether.substring(1);
        }
        if (ether === ".") {
          throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
        }
        var comps = ether.split(".");
        if (comps.length > 2) {
          throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
        }
        var whole = comps[0], fraction = comps[1];
        if (!whole) {
          whole = "0";
        }
        if (!fraction) {
          fraction = "0";
        }
        if (fraction.length > baseLength) {
          throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
        }
        while (fraction.length < baseLength) {
          fraction += "0";
        }
        whole = new BN(whole);
        fraction = new BN(fraction);
        var wei = whole.mul(base2).add(fraction);
        if (negative) {
          wei = wei.mul(negative1);
        }
        return new BN(wei.toString(10), 10);
      }
      module.exports = {
        unitMap,
        numberToString,
        getValueOfUnit,
        fromWei,
        toWei
      };
    }
  });

  // node_modules/web3-utils/node_modules/bn.js/lib/bn.js
  var require_bn3 = __commonJS({
    "node_modules/web3-utils/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          Buffer4 = require_buffer().Buffer;
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
          }
          if (base2 === 16) {
            this._parseHex(number, start);
          } else {
            this._parseBase(number, base2, start);
          }
          if (number[0] === "-") {
            this.negative = 1;
          }
          this.strip();
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex(str, start, end) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            if (c >= 49 && c <= 54) {
              r |= c - 49 + 10;
            } else if (c >= 17 && c <= 22) {
              r |= c - 17 + 10;
            } else {
              r |= c & 15;
            }
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
            off3 += 24;
            if (off3 >= 26) {
              off3 -= 26;
              j++;
            }
          }
          if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= w << off3 & 67108863;
            this.words[j + 1] |= w >>> 26 - off3 & 4194303;
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            r.strip();
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/utf8/utf8.js
  var require_utf8 = __commonJS({
    "node_modules/utf8/utf8.js"(exports) {
      init_process();
      init_buffer();
      (function(root) {
        var stringFromCharCode2 = String.fromCharCode;
        function ucs2decode2(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          var value;
          var extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        function ucs2encode(array) {
          var length = array.length;
          var index = -1;
          var value;
          var output = "";
          while (++index < length) {
            value = array[index];
            if (value > 65535) {
              value -= 65536;
              output += stringFromCharCode2(value >>> 10 & 1023 | 55296);
              value = 56320 | value & 1023;
            }
            output += stringFromCharCode2(value);
          }
          return output;
        }
        function checkScalarValue(codePoint) {
          if (codePoint >= 55296 && codePoint <= 57343) {
            throw Error(
              "Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value"
            );
          }
        }
        function createByte(codePoint, shift) {
          return stringFromCharCode2(codePoint >> shift & 63 | 128);
        }
        function encodeCodePoint(codePoint) {
          if ((codePoint & 4294967168) == 0) {
            return stringFromCharCode2(codePoint);
          }
          var symbol = "";
          if ((codePoint & 4294965248) == 0) {
            symbol = stringFromCharCode2(codePoint >> 6 & 31 | 192);
          } else if ((codePoint & 4294901760) == 0) {
            checkScalarValue(codePoint);
            symbol = stringFromCharCode2(codePoint >> 12 & 15 | 224);
            symbol += createByte(codePoint, 6);
          } else if ((codePoint & 4292870144) == 0) {
            symbol = stringFromCharCode2(codePoint >> 18 & 7 | 240);
            symbol += createByte(codePoint, 12);
            symbol += createByte(codePoint, 6);
          }
          symbol += stringFromCharCode2(codePoint & 63 | 128);
          return symbol;
        }
        function utf8encode(string) {
          var codePoints = ucs2decode2(string);
          var length = codePoints.length;
          var index = -1;
          var codePoint;
          var byteString = "";
          while (++index < length) {
            codePoint = codePoints[index];
            byteString += encodeCodePoint(codePoint);
          }
          return byteString;
        }
        function readContinuationByte() {
          if (byteIndex >= byteCount) {
            throw Error("Invalid byte index");
          }
          var continuationByte = byteArray[byteIndex] & 255;
          byteIndex++;
          if ((continuationByte & 192) == 128) {
            return continuationByte & 63;
          }
          throw Error("Invalid continuation byte");
        }
        function decodeSymbol() {
          var byte1;
          var byte2;
          var byte3;
          var byte4;
          var codePoint;
          if (byteIndex > byteCount) {
            throw Error("Invalid byte index");
          }
          if (byteIndex == byteCount) {
            return false;
          }
          byte1 = byteArray[byteIndex] & 255;
          byteIndex++;
          if ((byte1 & 128) == 0) {
            return byte1;
          }
          if ((byte1 & 224) == 192) {
            byte2 = readContinuationByte();
            codePoint = (byte1 & 31) << 6 | byte2;
            if (codePoint >= 128) {
              return codePoint;
            } else {
              throw Error("Invalid continuation byte");
            }
          }
          if ((byte1 & 240) == 224) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
            if (codePoint >= 2048) {
              checkScalarValue(codePoint);
              return codePoint;
            } else {
              throw Error("Invalid continuation byte");
            }
          }
          if ((byte1 & 248) == 240) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            byte4 = readContinuationByte();
            codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
            if (codePoint >= 65536 && codePoint <= 1114111) {
              return codePoint;
            }
          }
          throw Error("Invalid UTF-8 detected");
        }
        var byteArray;
        var byteCount;
        var byteIndex;
        function utf8decode(byteString) {
          byteArray = ucs2decode2(byteString);
          byteCount = byteArray.length;
          byteIndex = 0;
          var codePoints = [];
          var tmp;
          while ((tmp = decodeSymbol()) !== false) {
            codePoints.push(tmp);
          }
          return ucs2encode(codePoints);
        }
        root.version = "3.0.0";
        root.encode = utf8encode;
        root.decode = utf8decode;
      })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
    }
  });

  // node_modules/web3-utils/node_modules/eth-lib/lib/hash.js
  var require_hash = __commonJS({
    "node_modules/web3-utils/node_modules/eth-lib/lib/hash.js"(exports, module) {
      init_process();
      init_buffer();
      var HEX_CHARS = "0123456789abcdef".split("");
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var Keccak = function Keccak2(bits) {
        return {
          blocks: [],
          reset: true,
          block: 0,
          start: 0,
          blockCount: 1600 - (bits << 1) >> 5,
          outputBlocks: bits >> 5,
          s: (function(s) {
            return [].concat(s, s, s, s, s);
          })([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        };
      };
      var update = function update2(state, message) {
        var length = message.length, blocks = state.blocks, byteCount = state.blockCount << 2, blockCount = state.blockCount, outputBlocks = state.outputBlocks, s = state.s, index = 0, i, code;
        while (index < length) {
          if (state.reset) {
            state.reset = false;
            blocks[0] = state.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (typeof message !== "string") {
            for (i = state.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = state.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 2048) {
                blocks[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
              }
            }
          }
          state.lastByteIndex = i;
          if (i >= byteCount) {
            state.start = i - byteCount;
            state.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            state.reset = true;
          } else {
            state.start = i;
          }
        }
        i = state.lastByteIndex;
        blocks[i >> 2] |= KECCAK_PADDING[i & 3];
        if (state.lastByteIndex === byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        var hex = "", i = 0, j = 0, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        return "0x" + hex;
      };
      var f = function f2(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      var keccak = function keccak2(bits) {
        return function(str) {
          var msg;
          if (str.slice(0, 2) === "0x") {
            msg = [];
            for (var i = 2, l = str.length; i < l; i += 2) {
              msg.push(parseInt(str.slice(i, i + 2), 16));
            }
          } else {
            msg = str;
          }
          return update(Keccak(bits, bits), msg);
        };
      };
      module.exports = {
        keccak256: keccak(256),
        keccak512: keccak(512),
        keccak256s: keccak(256),
        keccak512s: keccak(512)
      };
    }
  });

  // node_modules/@noble/hashes/_u64.js
  var require_u64 = __commonJS({
    "node_modules/@noble/hashes/_u64.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toBig = exports.shrSL = exports.shrSH = exports.rotrSL = exports.rotrSH = exports.rotrBL = exports.rotrBH = exports.rotr32L = exports.rotr32H = exports.rotlSL = exports.rotlSH = exports.rotlBL = exports.rotlBH = exports.add5L = exports.add5H = exports.add4L = exports.add4H = exports.add3L = exports.add3H = void 0;
      exports.add = add;
      exports.fromBig = fromBig;
      exports.split = split;
      var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      var _32n = /* @__PURE__ */ BigInt(32);
      function fromBig(n, le = false) {
        if (le)
          return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
        return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
      }
      function split(lst, le = false) {
        const len = lst.length;
        let Ah = new Uint32Array(len);
        let Al = new Uint32Array(len);
        for (let i = 0; i < len; i++) {
          const { h, l } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
      }
      var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
      exports.toBig = toBig;
      var shrSH = (h, _l, s) => h >>> s;
      exports.shrSH = shrSH;
      var shrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.shrSL = shrSL;
      var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
      exports.rotrSH = rotrSH;
      var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.rotrSL = rotrSL;
      var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
      exports.rotrBH = rotrBH;
      var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
      exports.rotrBL = rotrBL;
      var rotr32H = (_h, l) => l;
      exports.rotr32H = rotr32H;
      var rotr32L = (h, _l) => h;
      exports.rotr32L = rotr32L;
      var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
      exports.rotlSH = rotlSH;
      var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
      exports.rotlSL = rotlSL;
      var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
      exports.rotlBH = rotlBH;
      var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
      exports.rotlBL = rotlBL;
      function add(Ah, Al, Bh, Bl) {
        const l = (Al >>> 0) + (Bl >>> 0);
        return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
      }
      var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
      exports.add3L = add3L;
      var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
      exports.add3H = add3H;
      var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
      exports.add4L = add4L;
      var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
      exports.add4H = add4H;
      var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
      exports.add5L = add5L;
      var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
      exports.add5H = add5H;
      var u64 = {
        fromBig,
        split,
        toBig,
        shrSH,
        shrSL,
        rotrSH,
        rotrSL,
        rotrBH,
        rotrBL,
        rotr32H,
        rotr32L,
        rotlSH,
        rotlSL,
        rotlBH,
        rotlBL,
        add,
        add3L,
        add3H,
        add4L,
        add4H,
        add5H,
        add5L
      };
      exports.default = u64;
    }
  });

  // node_modules/@noble/hashes/crypto.js
  var require_crypto = __commonJS({
    "node_modules/@noble/hashes/crypto.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.crypto = void 0;
      exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    }
  });

  // node_modules/@noble/hashes/utils.js
  var require_utils = __commonJS({
    "node_modules/@noble/hashes/utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.Hash = exports.nextTick = exports.swap32IfBE = exports.byteSwapIfBE = exports.swap8IfBE = exports.isLE = void 0;
      exports.isBytes = isBytes;
      exports.anumber = anumber;
      exports.abytes = abytes;
      exports.ahash = ahash;
      exports.aexists = aexists;
      exports.aoutput = aoutput;
      exports.u8 = u8;
      exports.u32 = u32;
      exports.clean = clean;
      exports.createView = createView;
      exports.rotr = rotr;
      exports.rotl = rotl;
      exports.byteSwap = byteSwap;
      exports.byteSwap32 = byteSwap32;
      exports.bytesToHex = bytesToHex;
      exports.hexToBytes = hexToBytes;
      exports.asyncLoop = asyncLoop;
      exports.utf8ToBytes = utf8ToBytes3;
      exports.bytesToUtf8 = bytesToUtf8;
      exports.toBytes = toBytes;
      exports.kdfInputToBytes = kdfInputToBytes;
      exports.concatBytes = concatBytes;
      exports.checkOpts = checkOpts;
      exports.createHasher = createHasher;
      exports.createOptHasher = createOptHasher;
      exports.createXOFer = createXOFer;
      exports.randomBytes = randomBytes;
      var crypto_1 = require_crypto();
      function isBytes(a) {
        return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
      }
      function anumber(n) {
        if (!Number.isSafeInteger(n) || n < 0)
          throw new Error("positive integer expected, got " + n);
      }
      function abytes(b, ...lengths) {
        if (!isBytes(b))
          throw new Error("Uint8Array expected");
        if (lengths.length > 0 && !lengths.includes(b.length))
          throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
      }
      function ahash(h) {
        if (typeof h !== "function" || typeof h.create !== "function")
          throw new Error("Hash should be wrapped by utils.createHasher");
        anumber(h.outputLen);
        anumber(h.blockLen);
      }
      function aexists(instance, checkFinished = true) {
        if (instance.destroyed)
          throw new Error("Hash instance has been destroyed");
        if (checkFinished && instance.finished)
          throw new Error("Hash#digest() has already been called");
      }
      function aoutput(out, instance) {
        abytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
          throw new Error("digestInto() expects output buffer of length at least " + min);
        }
      }
      function u8(arr) {
        return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
      }
      function u32(arr) {
        return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
      }
      function clean(...arrays) {
        for (let i = 0; i < arrays.length; i++) {
          arrays[i].fill(0);
        }
      }
      function createView(arr) {
        return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
      }
      function rotr(word, shift) {
        return word << 32 - shift | word >>> shift;
      }
      function rotl(word, shift) {
        return word << shift | word >>> 32 - shift >>> 0;
      }
      exports.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
      function byteSwap(word) {
        return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
      }
      exports.swap8IfBE = exports.isLE ? (n) => n : (n) => byteSwap(n);
      exports.byteSwapIfBE = exports.swap8IfBE;
      function byteSwap32(arr) {
        for (let i = 0; i < arr.length; i++) {
          arr[i] = byteSwap(arr[i]);
        }
        return arr;
      }
      exports.swap32IfBE = exports.isLE ? (u) => u : byteSwap32;
      var hasHexBuiltin = /* @__PURE__ */ (() => (
        // @ts-ignore
        typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
      ))();
      var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      function bytesToHex(bytes) {
        abytes(bytes);
        if (hasHexBuiltin)
          return bytes.toHex();
        let hex = "";
        for (let i = 0; i < bytes.length; i++) {
          hex += hexes[bytes[i]];
        }
        return hex;
      }
      var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
      function asciiToBase16(ch) {
        if (ch >= asciis._0 && ch <= asciis._9)
          return ch - asciis._0;
        if (ch >= asciis.A && ch <= asciis.F)
          return ch - (asciis.A - 10);
        if (ch >= asciis.a && ch <= asciis.f)
          return ch - (asciis.a - 10);
        return;
      }
      function hexToBytes(hex) {
        if (typeof hex !== "string")
          throw new Error("hex string expected, got " + typeof hex);
        if (hasHexBuiltin)
          return Uint8Array.fromHex(hex);
        const hl = hex.length;
        const al = hl / 2;
        if (hl % 2)
          throw new Error("hex string expected, got unpadded hex of length " + hl);
        const array = new Uint8Array(al);
        for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
          const n1 = asciiToBase16(hex.charCodeAt(hi));
          const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
          if (n1 === void 0 || n2 === void 0) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
          }
          array[ai] = n1 * 16 + n2;
        }
        return array;
      }
      var nextTick3 = async () => {
      };
      exports.nextTick = nextTick3;
      async function asyncLoop(iters, tick, cb) {
        let ts = Date.now();
        for (let i = 0; i < iters; i++) {
          cb(i);
          const diff = Date.now() - ts;
          if (diff >= 0 && diff < tick)
            continue;
          await (0, exports.nextTick)();
          ts += diff;
        }
      }
      function utf8ToBytes3(str) {
        if (typeof str !== "string")
          throw new Error("string expected");
        return new Uint8Array(new TextEncoder().encode(str));
      }
      function bytesToUtf8(bytes) {
        return new TextDecoder().decode(bytes);
      }
      function toBytes(data) {
        if (typeof data === "string")
          data = utf8ToBytes3(data);
        abytes(data);
        return data;
      }
      function kdfInputToBytes(data) {
        if (typeof data === "string")
          data = utf8ToBytes3(data);
        abytes(data);
        return data;
      }
      function concatBytes(...arrays) {
        let sum = 0;
        for (let i = 0; i < arrays.length; i++) {
          const a = arrays[i];
          abytes(a);
          sum += a.length;
        }
        const res = new Uint8Array(sum);
        for (let i = 0, pad2 = 0; i < arrays.length; i++) {
          const a = arrays[i];
          res.set(a, pad2);
          pad2 += a.length;
        }
        return res;
      }
      function checkOpts(defaults, opts) {
        if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
          throw new Error("options should be object or undefined");
        const merged = Object.assign(defaults, opts);
        return merged;
      }
      var Hash = class {
      };
      exports.Hash = Hash;
      function createHasher(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
      }
      function createOptHasher(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      function createXOFer(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      exports.wrapConstructor = createHasher;
      exports.wrapConstructorWithOpts = createOptHasher;
      exports.wrapXOFConstructorWithOpts = createXOFer;
      function randomBytes(bytesLength = 32) {
        if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
          return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
        }
        if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
          return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));
        }
        throw new Error("crypto.getRandomValues must be defined");
      }
    }
  });

  // node_modules/@noble/hashes/sha3.js
  var require_sha3 = __commonJS({
    "node_modules/@noble/hashes/sha3.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = void 0;
      exports.keccakP = keccakP;
      var _u64_ts_1 = require_u64();
      var utils_ts_1 = require_utils();
      var _0n = BigInt(0);
      var _1n = BigInt(1);
      var _2n = BigInt(2);
      var _7n = BigInt(7);
      var _256n = BigInt(256);
      var _0x71n = BigInt(113);
      var SHA3_PI = [];
      var SHA3_ROTL = [];
      var _SHA3_IOTA = [];
      for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
        let t = _0n;
        for (let j = 0; j < 7; j++) {
          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
          if (R & _2n)
            t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
        }
        _SHA3_IOTA.push(t);
      }
      var IOTAS = (0, _u64_ts_1.split)(_SHA3_IOTA, true);
      var SHA3_IOTA_H = IOTAS[0];
      var SHA3_IOTA_L = IOTAS[1];
      var rotlH = (h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBH)(h, l, s) : (0, _u64_ts_1.rotlSH)(h, l, s);
      var rotlL = (h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBL)(h, l, s) : (0, _u64_ts_1.rotlSL)(h, l, s);
      function keccakP(s, rounds = 24) {
        const B = new Uint32Array(5 * 2);
        for (let round = 24 - rounds; round < 24; round++) {
          for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
          for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
              s[x + y] ^= Th;
              s[x + y + 1] ^= Tl;
            }
          }
          let curH = s[2];
          let curL = s[3];
          for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
          }
          for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
              B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
              s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
          }
          s[0] ^= SHA3_IOTA_H[round];
          s[1] ^= SHA3_IOTA_L[round];
        }
        (0, utils_ts_1.clean)(B);
      }
      var Keccak = class _Keccak extends utils_ts_1.Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          this.enableXOF = false;
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          (0, utils_ts_1.anumber)(outputLen);
          if (!(0 < blockLen && blockLen < 200))
            throw new Error("only keccak-f1600 function is supported");
          this.state = new Uint8Array(200);
          this.state32 = (0, utils_ts_1.u32)(this.state);
        }
        clone() {
          return this._cloneInto();
        }
        keccak() {
          (0, utils_ts_1.swap32IfBE)(this.state32);
          keccakP(this.state32, this.rounds);
          (0, utils_ts_1.swap32IfBE)(this.state32);
          this.posOut = 0;
          this.pos = 0;
        }
        update(data) {
          (0, utils_ts_1.aexists)(this);
          data = (0, utils_ts_1.toBytes)(data);
          (0, utils_ts_1.abytes)(data);
          const { blockLen, state } = this;
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
              state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
              this.keccak();
          }
          return this;
        }
        finish() {
          if (this.finished)
            return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          state[pos] ^= suffix;
          if ((suffix & 128) !== 0 && pos === blockLen - 1)
            this.keccak();
          state[blockLen - 1] ^= 128;
          this.keccak();
        }
        writeInto(out) {
          (0, utils_ts_1.aexists)(this, false);
          (0, utils_ts_1.abytes)(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len; ) {
            if (this.posOut >= blockLen)
              this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
          }
          return out;
        }
        xofInto(out) {
          if (!this.enableXOF)
            throw new Error("XOF is not possible for this instance");
          return this.writeInto(out);
        }
        xof(bytes) {
          (0, utils_ts_1.anumber)(bytes);
          return this.xofInto(new Uint8Array(bytes));
        }
        digestInto(out) {
          (0, utils_ts_1.aoutput)(out, this);
          if (this.finished)
            throw new Error("digest() was already called");
          this.writeInto(out);
          this.destroy();
          return out;
        }
        digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
          this.destroyed = true;
          (0, utils_ts_1.clean)(this.state);
        }
        _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
        }
      };
      exports.Keccak = Keccak;
      var gen = (suffix, blockLen, outputLen) => (0, utils_ts_1.createHasher)(() => new Keccak(blockLen, suffix, outputLen));
      exports.sha3_224 = (() => gen(6, 144, 224 / 8))();
      exports.sha3_256 = (() => gen(6, 136, 256 / 8))();
      exports.sha3_384 = (() => gen(6, 104, 384 / 8))();
      exports.sha3_512 = (() => gen(6, 72, 512 / 8))();
      exports.keccak_224 = (() => gen(1, 144, 224 / 8))();
      exports.keccak_256 = (() => gen(1, 136, 256 / 8))();
      exports.keccak_384 = (() => gen(1, 104, 384 / 8))();
      exports.keccak_512 = (() => gen(1, 72, 512 / 8))();
      var genShake = (suffix, blockLen, outputLen) => (0, utils_ts_1.createXOFer)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
      exports.shake128 = (() => genShake(31, 168, 128 / 8))();
      exports.shake256 = (() => genShake(31, 136, 256 / 8))();
    }
  });

  // node_modules/ethereum-bloom-filters/dist/utils.js
  var require_utils2 = __commonJS({
    "node_modules/ethereum-bloom-filters/dist/utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var sha3_1 = require_sha3();
      var utils_1 = require_utils();
      function keccak256(data) {
        return bytesToHex(sha3_1.keccak_256(toByteArray2(data)));
      }
      exports.keccak256 = keccak256;
      exports.padLeft = (value, chars) => {
        const hasPrefix = /^0x/i.test(value) || typeof value === "number";
        value = value.toString().replace(/^0x/i, "");
        const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
        return (hasPrefix ? "0x" : "") + new Array(padding).join("0") + value;
      };
      function bytesToHex(bytes) {
        return "0x" + utils_1.bytesToHex(bytes);
      }
      exports.bytesToHex = bytesToHex;
      function toByteArray2(value) {
        if (value == null) {
          throw new Error("cannot convert null value to array");
        }
        if (typeof value === "string") {
          const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
            throw new Error("invalid hexidecimal string");
          }
          if (match[1] !== "0x") {
            throw new Error("hex string must have 0x prefix");
          }
          value = value.substring(2);
          if (value.length % 2) {
            value = "0" + value;
          }
          const result = [];
          for (let i = 0; i < value.length; i += 2) {
            result.push(parseInt(value.substr(i, 2), 16));
          }
          return addSlice(new Uint8Array(result));
        }
        if (isByteArray(value)) {
          return addSlice(new Uint8Array(value));
        }
        throw new Error("invalid arrayify value");
      }
      exports.toByteArray = toByteArray2;
      function isByteArray(value) {
        if (!value || // tslint:disable-next-line: radix
        parseInt(String(value.length)) != value.length || typeof value === "string") {
          return false;
        }
        for (let i = 0; i < value.length; i++) {
          const v = value[i];
          if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
            return false;
          }
        }
        return true;
      }
      function addSlice(array) {
        if (array.slice !== void 0) {
          return array;
        }
        array.slice = () => {
          const args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
      }
    }
  });

  // node_modules/ethereum-bloom-filters/dist/index.js
  var require_dist = __commonJS({
    "node_modules/ethereum-bloom-filters/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils_1 = require_utils2();
      function isBloom(bloom) {
        if (typeof bloom !== "string") {
          return false;
        }
        if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
        }
        if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
        }
        return false;
      }
      exports.isBloom = isBloom;
      function isInBloom(bloom, value) {
        if (typeof value === "object" && value.constructor === Uint8Array) {
          value = utils_1.bytesToHex(value);
        }
        const hash = utils_1.keccak256(value).replace("0x", "");
        for (let i = 0; i < 12; i += 4) {
          const bitpos = (parseInt(hash.substr(i, 2), 16) << 8) + parseInt(hash.substr(i + 2, 2), 16) & 2047;
          const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
          const offset = 1 << bitpos % 4;
          if ((code & offset) !== offset) {
            return false;
          }
        }
        return true;
      }
      exports.isInBloom = isInBloom;
      function codePointToInt(codePoint) {
        if (codePoint >= 48 && codePoint <= 57) {
          return codePoint - 48;
        }
        if (codePoint >= 65 && codePoint <= 70) {
          return codePoint - 55;
        }
        if (codePoint >= 97 && codePoint <= 102) {
          return codePoint - 87;
        }
        throw new Error("invalid bloom");
      }
      function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
        if (!isBloom(bloom)) {
          throw new Error("Invalid bloom given");
        }
        if (!isAddress(ethereumAddress)) {
          throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
        }
        const address = utils_1.padLeft(ethereumAddress, 64);
        return isInBloom(bloom, address);
      }
      exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
      function isContractAddressInBloom(bloom, contractAddress) {
        if (!isBloom(bloom)) {
          throw new Error("Invalid bloom given");
        }
        if (!isAddress(contractAddress)) {
          throw new Error(`Invalid contract address given: "${contractAddress}"`);
        }
        return isInBloom(bloom, contractAddress);
      }
      exports.isContractAddressInBloom = isContractAddressInBloom;
      function isTopicInBloom(bloom, topic) {
        if (!isBloom(bloom)) {
          throw new Error("Invalid bloom given");
        }
        if (!isTopic(topic)) {
          throw new Error("Invalid topic");
        }
        return isInBloom(bloom, topic);
      }
      exports.isTopicInBloom = isTopicInBloom;
      function isTopic(topic) {
        if (typeof topic !== "string") {
          return false;
        }
        if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
        } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
        }
        return false;
      }
      exports.isTopic = isTopic;
      function isAddress(address) {
        if (typeof address !== "string") {
          return false;
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          return true;
        }
        if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          return true;
        }
        return false;
      }
      exports.isAddress = isAddress;
    }
  });

  // node_modules/web3-utils/src/utils.js
  var require_utils3 = __commonJS({
    "node_modules/web3-utils/src/utils.js"(exports, module) {
      init_process();
      init_buffer();
      var _ = require_underscore();
      var BN = require_bn3();
      var numberToBN = require_src3();
      var utf8 = require_utf8();
      var Hash = require_hash();
      var ethereumBloomFilters = require_dist();
      var isBN = function(object) {
        return BN.isBN(object);
      };
      var isBigNumber = function(object) {
        return object && object.constructor && object.constructor.name === "BigNumber";
      };
      var toBN = function(number) {
        try {
          return numberToBN.apply(null, arguments);
        } catch (e) {
          throw new Error(e + ' Given value: "' + number + '"');
        }
      };
      var toTwosComplement = function(number) {
        return "0x" + toBN(number).toTwos(256).toString(16, 64);
      };
      var isAddress = function(address) {
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
        } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
          return true;
        } else {
          return checkAddressChecksum(address);
        }
      };
      var checkAddressChecksum = function(address) {
        address = address.replace(/^0x/i, "");
        var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, "");
        for (var i = 0; i < 40; i++) {
          if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
            return false;
          }
        }
        return true;
      };
      var leftPad = function(string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === "number";
        string = string.toString(16).replace(/^0x/i, "");
        var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
        return (hasPrefix ? "0x" : "") + new Array(padding).join(sign ? sign : "0") + string;
      };
      var rightPad = function(string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === "number";
        string = string.toString(16).replace(/^0x/i, "");
        var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
        return (hasPrefix ? "0x" : "") + string + new Array(padding).join(sign ? sign : "0");
      };
      var utf8ToHex = function(str) {
        str = utf8.encode(str);
        var hex = "";
        str = str.replace(/^(?:\u0000)*/, "");
        str = str.split("").reverse().join("");
        str = str.replace(/^(?:\u0000)*/, "");
        str = str.split("").reverse().join("");
        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? "0" + n : n;
        }
        return "0x" + hex;
      };
      var hexToUtf8 = function(hex) {
        if (!isHexStrict(hex))
          throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
        var str = "";
        var code = 0;
        hex = hex.replace(/^0x/i, "");
        hex = hex.replace(/^(?:00)*/, "");
        hex = hex.split("").reverse().join("");
        hex = hex.replace(/^(?:00)*/, "");
        hex = hex.split("").reverse().join("");
        var l = hex.length;
        for (var i = 0; i < l; i += 2) {
          code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
        }
        return utf8.decode(str);
      };
      var hexToNumber = function(value) {
        if (!value) {
          return value;
        }
        if (_.isString(value) && !isHexStrict(value)) {
          throw new Error('Given value "' + value + '" is not a valid hex string.');
        }
        return toBN(value).toNumber();
      };
      var hexToNumberString = function(value) {
        if (!value) return value;
        if (_.isString(value) && !isHexStrict(value)) {
          throw new Error('Given value "' + value + '" is not a valid hex string.');
        }
        return toBN(value).toString(10);
      };
      var numberToHex = function(value) {
        if (_.isNull(value) || _.isUndefined(value)) {
          return value;
        }
        if (!isFinite(value) && !isHexStrict(value)) {
          throw new Error('Given input "' + value + '" is not a number.');
        }
        var number = toBN(value);
        var result = number.toString(16);
        return number.lt(new BN(0)) ? "-0x" + result.substr(1) : "0x" + result;
      };
      var bytesToHex = function(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 15).toString(16));
        }
        return "0x" + hex.join("");
      };
      var hexToBytes = function(hex) {
        hex = hex.toString(16);
        if (!isHexStrict(hex)) {
          throw new Error('Given value "' + hex + '" is not a valid hex string.');
        }
        hex = hex.replace(/^0x/i, "");
        for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      };
      var toHex3 = function(value, returnType) {
        if (isAddress(value)) {
          return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
        }
        if (_.isBoolean(value)) {
          return returnType ? "bool" : value ? "0x01" : "0x00";
        }
        if (Buffer2.isBuffer(value)) {
          return "0x" + value.toString("hex");
        }
        if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {
          return returnType ? "string" : utf8ToHex(JSON.stringify(value));
        }
        if (_.isString(value)) {
          if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
            return returnType ? "int256" : numberToHex(value);
          } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
            return returnType ? "bytes" : value;
          } else if (!isFinite(value)) {
            return returnType ? "string" : utf8ToHex(value);
          }
        }
        return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
      };
      var isHexStrict = function(hex) {
        return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);
      };
      var isHex = function(hex) {
        return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
      };
      var isBloom = function(bloom) {
        return ethereumBloomFilters.isBloom(bloom);
      };
      var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {
        return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
      };
      var isContractAddressInBloom = function(bloom, contractAddress) {
        return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
      };
      var isTopic = function(topic) {
        return ethereumBloomFilters.isTopic(topic);
      };
      var isTopicInBloom = function(bloom, topic) {
        return ethereumBloomFilters.isTopicInBloom(bloom, topic);
      };
      var isInBloom = function(bloom, topic) {
        return ethereumBloomFilters.isInBloom(bloom, topic);
      };
      var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
      var sha3 = function(value) {
        if (isBN(value)) {
          value = value.toString();
        }
        if (isHexStrict(value) && /^0x/i.test(value.toString())) {
          value = hexToBytes(value);
        }
        var returnValue = Hash.keccak256(value);
        if (returnValue === SHA3_NULL_S) {
          return null;
        } else {
          return returnValue;
        }
      };
      sha3._Hash = Hash;
      var sha3Raw = function(value) {
        value = sha3(value);
        if (value === null) {
          return SHA3_NULL_S;
        }
        return value;
      };
      module.exports = {
        BN,
        isBN,
        isBigNumber,
        toBN,
        isAddress,
        isBloom,
        isUserEthereumAddressInBloom,
        isContractAddressInBloom,
        isTopic,
        isTopicInBloom,
        isInBloom,
        checkAddressChecksum,
        utf8ToHex,
        hexToUtf8,
        hexToNumber,
        hexToNumberString,
        numberToHex,
        toHex: toHex3,
        hexToBytes,
        bytesToHex,
        isHex,
        isHexStrict,
        leftPad,
        rightPad,
        toTwosComplement,
        sha3,
        sha3Raw
      };
    }
  });

  // node_modules/web3-utils/src/soliditySha3.js
  var require_soliditySha3 = __commonJS({
    "node_modules/web3-utils/src/soliditySha3.js"(exports, module) {
      init_process();
      init_buffer();
      var _ = require_underscore();
      var BN = require_bn3();
      var utils = require_utils3();
      var _elementaryName = function(name2) {
        if (name2.startsWith("int[")) {
          return "int256" + name2.slice(3);
        } else if (name2 === "int") {
          return "int256";
        } else if (name2.startsWith("uint[")) {
          return "uint256" + name2.slice(4);
        } else if (name2 === "uint") {
          return "uint256";
        } else if (name2.startsWith("fixed[")) {
          return "fixed128x128" + name2.slice(5);
        } else if (name2 === "fixed") {
          return "fixed128x128";
        } else if (name2.startsWith("ufixed[")) {
          return "ufixed128x128" + name2.slice(6);
        } else if (name2 === "ufixed") {
          return "ufixed128x128";
        }
        return name2;
      };
      var _parseTypeN = function(type2) {
        var typesize = /^\D+(\d+).*$/.exec(type2);
        return typesize ? parseInt(typesize[1], 10) : null;
      };
      var _parseTypeNArray = function(type2) {
        var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type2);
        return arraySize ? parseInt(arraySize[1], 10) : null;
      };
      var _parseNumber = function(arg) {
        var type2 = typeof arg;
        if (type2 === "string") {
          if (utils.isHexStrict(arg)) {
            return new BN(arg.replace(/0x/i, ""), 16);
          } else {
            return new BN(arg, 10);
          }
        } else if (type2 === "number") {
          return new BN(arg);
        } else if (utils.isBigNumber(arg)) {
          return new BN(arg.toString(10));
        } else if (utils.isBN(arg)) {
          return arg;
        } else {
          throw new Error(arg + " is not a number");
        }
      };
      var _solidityPack = function(type2, value, arraySize) {
        var size, num;
        type2 = _elementaryName(type2);
        if (type2 === "bytes") {
          if (value.replace(/^0x/i, "").length % 2 !== 0) {
            throw new Error("Invalid bytes characters " + value.length);
          }
          return value;
        } else if (type2 === "string") {
          return utils.utf8ToHex(value);
        } else if (type2 === "bool") {
          return value ? "01" : "00";
        } else if (type2.startsWith("address")) {
          if (arraySize) {
            size = 64;
          } else {
            size = 40;
          }
          if (!utils.isAddress(value)) {
            throw new Error(value + " is not a valid address, or the checksum is invalid.");
          }
          return utils.leftPad(value.toLowerCase(), size);
        }
        size = _parseTypeN(type2);
        if (type2.startsWith("bytes")) {
          if (!size) {
            throw new Error("bytes[] not yet supported in solidity");
          }
          if (arraySize) {
            size = 32;
          }
          if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
            throw new Error("Invalid bytes" + size + " for " + value);
          }
          return utils.rightPad(value, size * 2);
        } else if (type2.startsWith("uint")) {
          if (size % 8 || size < 8 || size > 256) {
            throw new Error("Invalid uint" + size + " size");
          }
          num = _parseNumber(value);
          if (num.bitLength() > size) {
            throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
          }
          if (num.lt(new BN(0))) {
            throw new Error("Supplied uint " + num.toString() + " is negative");
          }
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        } else if (type2.startsWith("int")) {
          if (size % 8 || size < 8 || size > 256) {
            throw new Error("Invalid int" + size + " size");
          }
          num = _parseNumber(value);
          if (num.bitLength() > size) {
            throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
          }
          if (num.lt(new BN(0))) {
            return num.toTwos(size).toString("hex");
          } else {
            return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
          }
        } else {
          throw new Error("Unsupported or invalid type: " + type2);
        }
      };
      var _processSoliditySha3Args = function(arg) {
        if (_.isArray(arg)) {
          throw new Error("Autodetection of array types is not supported.");
        }
        var type2, value = "";
        var hexArg, arraySize;
        if (_.isObject(arg) && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
          type2 = arg.hasOwnProperty("t") ? arg.t : arg.type;
          value = arg.hasOwnProperty("v") ? arg.v : arg.value;
        } else {
          type2 = utils.toHex(arg, true);
          value = utils.toHex(arg);
          if (!type2.startsWith("int") && !type2.startsWith("uint")) {
            type2 = "bytes";
          }
        }
        if ((type2.startsWith("int") || type2.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
          value = new BN(value);
        }
        if (_.isArray(value)) {
          arraySize = _parseTypeNArray(type2);
          if (arraySize && value.length !== arraySize) {
            throw new Error(type2 + " is not matching the given array " + JSON.stringify(value));
          } else {
            arraySize = value.length;
          }
        }
        if (_.isArray(value)) {
          hexArg = value.map(function(val) {
            return _solidityPack(type2, val, arraySize).toString("hex").replace("0x", "");
          });
          return hexArg.join("");
        } else {
          hexArg = _solidityPack(type2, value, arraySize);
          return hexArg.toString("hex").replace("0x", "");
        }
      };
      var soliditySha3 = function() {
        var args = Array.prototype.slice.call(arguments);
        var hexArgs = _.map(args, _processSoliditySha3Args);
        return utils.sha3("0x" + hexArgs.join(""));
      };
      var soliditySha3Raw = function() {
        return utils.sha3Raw("0x" + _.map(Array.prototype.slice.call(arguments), _processSoliditySha3Args).join(""));
      };
      module.exports = {
        soliditySha3,
        soliditySha3Raw
      };
    }
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      init_process();
      init_buffer();
      var buffer = require_buffer();
      var Buffer4 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer4.from && Buffer4.alloc && Buffer4.allocUnsafe && Buffer4.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer4(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer4.prototype);
      copyProps(Buffer4, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer4(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill3, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer4(size);
        if (fill3 !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill3, encoding);
          } else {
            buf.fill(fill3);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer4(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/randombytes/browser.js
  var require_browser = __commonJS({
    "node_modules/randombytes/browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var MAX_BYTES = 65536;
      var MAX_UINT32 = 4294967295;
      function oldBrowser() {
        throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
      }
      var Buffer4 = require_safe_buffer().Buffer;
      var crypto2 = window.crypto || window.msCrypto;
      if (crypto2 && crypto2.getRandomValues) {
        module.exports = randomBytes;
      } else {
        module.exports = oldBrowser;
      }
      function randomBytes(size, cb) {
        if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
        var bytes = Buffer4.allocUnsafe(size);
        if (size > 0) {
          if (size > MAX_BYTES) {
            for (var generated = 0; generated < size; generated += MAX_BYTES) {
              crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
            }
          } else {
            crypto2.getRandomValues(bytes);
          }
        }
        if (typeof cb === "function") {
          return process.nextTick(function() {
            cb(null, bytes);
          });
        }
        return bytes;
      }
    }
  });

  // node_modules/web3-utils/src/index.js
  var require_src4 = __commonJS({
    "node_modules/web3-utils/src/index.js"(exports, module) {
      init_process();
      init_buffer();
      var _ = require_underscore();
      var ethjsUnit = require_lib();
      var utils = require_utils3();
      var soliditySha3 = require_soliditySha3();
      var randombytes = require_browser();
      var _fireError = function(error2, emitter, reject, callback, optionalData) {
        if (_.isObject(error2) && !(error2 instanceof Error) && error2.data) {
          if (_.isObject(error2.data) || _.isArray(error2.data)) {
            error2.data = JSON.stringify(error2.data, null, 2);
          }
          error2 = error2.message + "\n" + error2.data;
        }
        if (_.isString(error2)) {
          error2 = new Error(error2);
        }
        if (_.isFunction(callback)) {
          callback(error2, optionalData);
        }
        if (_.isFunction(reject)) {
          if (emitter && (_.isFunction(emitter.listeners) && emitter.listeners("error").length) || _.isFunction(callback)) {
            emitter.catch(function() {
            });
          }
          setTimeout(function() {
            reject(error2);
          }, 1);
        }
        if (emitter && _.isFunction(emitter.emit)) {
          setTimeout(function() {
            emitter.emit("error", error2, optionalData);
            emitter.removeAllListeners();
          }, 1);
        }
        return emitter;
      };
      var _jsonInterfaceMethodToString = function(json) {
        if (_.isObject(json) && json.name && json.name.indexOf("(") !== -1) {
          return json.name;
        }
        return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
      };
      var _flattenTypes = function(includeTuple, puts) {
        var types = [];
        puts.forEach(function(param) {
          if (typeof param.components === "object") {
            if (param.type.substring(0, 5) !== "tuple") {
              throw new Error("components found but type is not tuple; report on GitHub");
            }
            var suffix = "";
            var arrayBracket = param.type.indexOf("[");
            if (arrayBracket >= 0) {
              suffix = param.type.substring(arrayBracket);
            }
            var result = _flattenTypes(includeTuple, param.components);
            if (_.isArray(result) && includeTuple) {
              types.push("tuple(" + result.join(",") + ")" + suffix);
            } else if (!includeTuple) {
              types.push("(" + result.join(",") + ")" + suffix);
            } else {
              types.push("(" + result + ")");
            }
          } else {
            types.push(param.type);
          }
        });
        return types;
      };
      var randomHex = function(size) {
        return "0x" + randombytes(size).toString("hex");
      };
      var hexToAscii = function(hex) {
        if (!utils.isHexStrict(hex))
          throw new Error("The parameter must be a valid HEX string.");
        var str = "";
        var i = 0, l = hex.length;
        if (hex.substring(0, 2) === "0x") {
          i = 2;
        }
        for (; i < l; i += 2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
        }
        return str;
      };
      var asciiToHex = function(str) {
        if (!str)
          return "0x00";
        var hex = "";
        for (var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? "0" + n : n;
        }
        return "0x" + hex;
      };
      var getUnitValue = function(unit) {
        unit = unit ? unit.toLowerCase() : "ether";
        if (!ethjsUnit.unitMap[unit]) {
          throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
        }
        return unit;
      };
      var fromWei = function(number, unit) {
        unit = getUnitValue(unit);
        if (!utils.isBN(number) && !_.isString(number)) {
          throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
        }
        return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
      };
      var toWei = function(number, unit) {
        unit = getUnitValue(unit);
        if (!utils.isBN(number) && !_.isString(number)) {
          throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
        }
        return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
      };
      var toChecksumAddress = function(address) {
        if (typeof address === "undefined") return "";
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
          throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
        address = address.toLowerCase().replace(/^0x/i, "");
        var addressHash = utils.sha3(address).replace(/^0x/i, "");
        var checksumAddress = "0x";
        for (var i = 0; i < address.length; i++) {
          if (parseInt(addressHash[i], 16) > 7) {
            checksumAddress += address[i].toUpperCase();
          } else {
            checksumAddress += address[i];
          }
        }
        return checksumAddress;
      };
      module.exports = {
        _fireError,
        _jsonInterfaceMethodToString,
        _flattenTypes,
        // extractDisplayName: extractDisplayName,
        // extractTypeName: extractTypeName,
        randomHex,
        _,
        BN: utils.BN,
        isBN: utils.isBN,
        isBigNumber: utils.isBigNumber,
        isHex: utils.isHex,
        isHexStrict: utils.isHexStrict,
        sha3: utils.sha3,
        sha3Raw: utils.sha3Raw,
        keccak256: utils.sha3,
        soliditySha3: soliditySha3.soliditySha3,
        soliditySha3Raw: soliditySha3.soliditySha3Raw,
        isAddress: utils.isAddress,
        checkAddressChecksum: utils.checkAddressChecksum,
        toChecksumAddress,
        toHex: utils.toHex,
        toBN: utils.toBN,
        bytesToHex: utils.bytesToHex,
        hexToBytes: utils.hexToBytes,
        hexToNumberString: utils.hexToNumberString,
        hexToNumber: utils.hexToNumber,
        toDecimal: utils.hexToNumber,
        // alias
        numberToHex: utils.numberToHex,
        fromDecimal: utils.numberToHex,
        // alias
        hexToUtf8: utils.hexToUtf8,
        hexToString: utils.hexToUtf8,
        toUtf8: utils.hexToUtf8,
        utf8ToHex: utils.utf8ToHex,
        stringToHex: utils.utf8ToHex,
        fromUtf8: utils.utf8ToHex,
        hexToAscii,
        toAscii: hexToAscii,
        asciiToHex,
        fromAscii: asciiToHex,
        unitMap: ethjsUnit.unitMap,
        toWei,
        fromWei,
        padLeft: utils.leftPad,
        leftPad: utils.leftPad,
        padRight: utils.rightPad,
        rightPad: utils.rightPad,
        toTwosComplement: utils.toTwosComplement,
        isBloom: utils.isBloom,
        isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
        isContractAddressInBloom: utils.isContractAddressInBloom,
        isTopic: utils.isTopic,
        isTopicInBloom: utils.isTopicInBloom,
        isInBloom: utils.isInBloom
      };
    }
  });

  // node_modules/ethers/node_modules/bn.js/lib/bn.js
  var require_bn4 = __commonJS({
    "node_modules/ethers/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/ethers/utils/types.js
  var require_types = __commonJS({
    "node_modules/ethers/utils/types.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var BigNumber = (
        /** @class */
        /* @__PURE__ */ (function() {
          function BigNumber2() {
          }
          return BigNumber2;
        })()
      );
      exports.BigNumber = BigNumber;
      var Indexed = (
        /** @class */
        /* @__PURE__ */ (function() {
          function Indexed2() {
          }
          return Indexed2;
        })()
      );
      exports.Indexed = Indexed;
      var MinimalProvider = (
        /** @class */
        /* @__PURE__ */ (function() {
          function MinimalProvider2() {
          }
          return MinimalProvider2;
        })()
      );
      exports.MinimalProvider = MinimalProvider;
      var Signer = (
        /** @class */
        /* @__PURE__ */ (function() {
          function Signer2() {
          }
          return Signer2;
        })()
      );
      exports.Signer = Signer;
      var HDNode = (
        /** @class */
        /* @__PURE__ */ (function() {
          function HDNode2() {
          }
          return HDNode2;
        })()
      );
      exports.HDNode = HDNode;
    }
  });

  // node_modules/ethers/utils/errors.js
  var require_errors = __commonJS({
    "node_modules/ethers/utils/errors.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UNKNOWN_ERROR = "UNKNOWN_ERROR";
      exports.NOT_IMPLEMENTED = "NOT_IMPLEMENTED";
      exports.MISSING_NEW = "MISSING_NEW";
      exports.CALL_EXCEPTION = "CALL_EXCEPTION";
      exports.INVALID_ARGUMENT = "INVALID_ARGUMENT";
      exports.MISSING_ARGUMENT = "MISSING_ARGUMENT";
      exports.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT";
      exports.NUMERIC_FAULT = "NUMERIC_FAULT";
      exports.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION";
      var _permanentCensorErrors = false;
      var _censorErrors = false;
      function throwError(message, code, params) {
        if (_censorErrors) {
          throw new Error("unknown error");
        }
        if (!code) {
          code = exports.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        var messageDetails = [];
        Object.keys(params).forEach(function(key) {
          try {
            messageDetails.push(key + "=" + JSON.stringify(params[key]));
          } catch (error3) {
            messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
          }
        });
        var reason = message;
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        var error2 = new Error(message);
        error2.reason = reason;
        error2.code = code;
        Object.keys(params).forEach(function(key) {
          error2[key] = params[key];
        });
        throw error2;
      }
      exports.throwError = throwError;
      function checkNew(self2, kind) {
        if (!(self2 instanceof kind)) {
          throwError("missing new", exports.MISSING_NEW, { name: kind.name });
        }
      }
      exports.checkNew = checkNew;
      function checkArgumentCount(count, expectedCount, suffix) {
        if (!suffix) {
          suffix = "";
        }
        if (count < expectedCount) {
          throwError("missing argument" + suffix, exports.MISSING_ARGUMENT, { count, expectedCount });
        }
        if (count > expectedCount) {
          throwError("too many arguments" + suffix, exports.UNEXPECTED_ARGUMENT, { count, expectedCount });
        }
      }
      exports.checkArgumentCount = checkArgumentCount;
      function setCensorship(censorship, permanent) {
        if (_permanentCensorErrors) {
          throwError("error censorship permanent", exports.UNSUPPORTED_OPERATION, { operation: "setCersorship" });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      exports.setCensorship = setCensorship;
    }
  });

  // node_modules/ethers/utils/bytes.js
  var require_bytes = __commonJS({
    "node_modules/ethers/utils/bytes.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var types_1 = require_types();
      var errors2 = require_errors();
      exports.AddressZero = "0x0000000000000000000000000000000000000000";
      exports.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
      function isBigNumber(value) {
        return value instanceof types_1.BigNumber;
      }
      function addSlice(array) {
        if (array.slice) {
          return array;
        }
        array.slice = function() {
          var args = Array.prototype.slice.call(arguments);
          return new Uint8Array(Array.prototype.slice.apply(array, args));
        };
        return array;
      }
      function isArrayish(value) {
        if (!value || parseInt(String(value.length)) != value.length || typeof value === "string") {
          return false;
        }
        for (var i = 0; i < value.length; i++) {
          var v = value[i];
          if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
            return false;
          }
        }
        return true;
      }
      exports.isArrayish = isArrayish;
      function arrayify(value) {
        if (value == null) {
          errors2.throwError("cannot convert null value to array", errors2.INVALID_ARGUMENT, { arg: "value", value });
        }
        if (isBigNumber(value)) {
          value = value.toHexString();
        }
        if (typeof value === "string") {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
            errors2.throwError("invalid hexidecimal string", errors2.INVALID_ARGUMENT, { arg: "value", value });
          }
          if (match[1] !== "0x") {
            errors2.throwError("hex string must have 0x prefix", errors2.INVALID_ARGUMENT, { arg: "value", value });
          }
          value = value.substring(2);
          if (value.length % 2) {
            value = "0" + value;
          }
          var result = [];
          for (var i = 0; i < value.length; i += 2) {
            result.push(parseInt(value.substr(i, 2), 16));
          }
          return addSlice(new Uint8Array(result));
        } else if (typeof value === "string") {
        }
        if (isArrayish(value)) {
          return addSlice(new Uint8Array(value));
        }
        errors2.throwError("invalid arrayify value", null, { arg: "value", value, type: typeof value });
        return null;
      }
      exports.arrayify = arrayify;
      function concat3(objects) {
        var arrays = [];
        var length = 0;
        for (var i = 0; i < objects.length; i++) {
          var object = arrayify(objects[i]);
          arrays.push(object);
          length += object.length;
        }
        var result = new Uint8Array(length);
        var offset = 0;
        for (var i = 0; i < arrays.length; i++) {
          result.set(arrays[i], offset);
          offset += arrays[i].length;
        }
        return addSlice(result);
      }
      exports.concat = concat3;
      function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
          return result;
        }
        var start = 0;
        while (result[start] === 0) {
          start++;
        }
        if (start) {
          result = result.slice(start);
        }
        return result;
      }
      exports.stripZeros = stripZeros;
      function padZeros(value, length) {
        value = arrayify(value);
        if (length < value.length) {
          throw new Error("cannot pad");
        }
        var result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
      }
      exports.padZeros = padZeros;
      function isHexString(value, length) {
        if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
        }
        if (length && value.length !== 2 + 2 * length) {
          return false;
        }
        return true;
      }
      exports.isHexString = isHexString;
      var HexCharacters = "0123456789abcdef";
      function hexlify(value) {
        if (isBigNumber(value)) {
          return value.toHexString();
        }
        if (typeof value === "number") {
          if (value < 0) {
            errors2.throwError("cannot hexlify negative value", errors2.INVALID_ARGUMENT, { arg: "value", value });
          }
          var hex = "";
          while (value) {
            hex = HexCharacters[value & 15] + hex;
            value = Math.floor(value / 16);
          }
          if (hex.length) {
            if (hex.length % 2) {
              hex = "0" + hex;
            }
            return "0x" + hex;
          }
          return "0x00";
        }
        if (typeof value === "string") {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
            errors2.throwError("invalid hexidecimal string", errors2.INVALID_ARGUMENT, { arg: "value", value });
          }
          if (match[1] !== "0x") {
            errors2.throwError("hex string must have 0x prefix", errors2.INVALID_ARGUMENT, { arg: "value", value });
          }
          if (value.length % 2) {
            value = "0x0" + value.substring(2);
          }
          return value;
        }
        if (isArrayish(value)) {
          var result = [];
          for (var i = 0; i < value.length; i++) {
            var v = value[i];
            result.push(HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15]);
          }
          return "0x" + result.join("");
        }
        errors2.throwError("invalid hexlify value", null, { arg: "value", value });
        return "never";
      }
      exports.hexlify = hexlify;
      function hexDataLength(data) {
        if (!isHexString(data) || data.length % 2 !== 0) {
          return null;
        }
        return (data.length - 2) / 2;
      }
      exports.hexDataLength = hexDataLength;
      function hexDataSlice(data, offset, length) {
        if (!isHexString(data)) {
          errors2.throwError("invalid hex data", errors2.INVALID_ARGUMENT, { arg: "value", value: data });
        }
        if (data.length % 2 !== 0) {
          errors2.throwError("hex data length must be even", errors2.INVALID_ARGUMENT, { arg: "value", value: data });
        }
        offset = 2 + 2 * offset;
        if (length != null) {
          return "0x" + data.substring(offset, offset + 2 * length);
        }
        return "0x" + data.substring(offset);
      }
      exports.hexDataSlice = hexDataSlice;
      function hexStripZeros(value) {
        if (!isHexString(value)) {
          errors2.throwError("invalid hex string", errors2.INVALID_ARGUMENT, { arg: "value", value });
        }
        while (value.length > 3 && value.substring(0, 3) === "0x0") {
          value = "0x" + value.substring(3);
        }
        return value;
      }
      exports.hexStripZeros = hexStripZeros;
      function hexZeroPad(value, length) {
        if (!isHexString(value)) {
          errors2.throwError("invalid hex string", errors2.INVALID_ARGUMENT, { arg: "value", value });
        }
        while (value.length < 2 * length + 2) {
          value = "0x0" + value.substring(2);
        }
        return value;
      }
      exports.hexZeroPad = hexZeroPad;
      function isSignature(value) {
        return value && value.r != null && value.s != null;
      }
      function splitSignature(signature) {
        var v = 0;
        var r = "0x", s = "0x";
        if (isSignature(signature)) {
          if (signature.v == null && signature.recoveryParam == null) {
            errors2.throwError("at least on of recoveryParam or v must be specified", errors2.INVALID_ARGUMENT, { argument: "signature", value: signature });
          }
          r = hexZeroPad(signature.r, 32);
          s = hexZeroPad(signature.s, 32);
          v = signature.v;
          if (typeof v === "string") {
            v = parseInt(v, 16);
          }
          var recoveryParam = signature.recoveryParam;
          if (recoveryParam == null && signature.v != null) {
            recoveryParam = 1 - v % 2;
          }
          v = 27 + recoveryParam;
        } else {
          var bytes = arrayify(signature);
          if (bytes.length !== 65) {
            throw new Error("invalid signature");
          }
          r = hexlify(bytes.slice(0, 32));
          s = hexlify(bytes.slice(32, 64));
          v = bytes[64];
          if (v !== 27 && v !== 28) {
            v = 27 + v % 2;
          }
        }
        return {
          r,
          s,
          recoveryParam: v - 27,
          v
        };
      }
      exports.splitSignature = splitSignature;
      function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat3([
          signature.r,
          signature.s,
          signature.recoveryParam ? "0x1c" : "0x1b"
        ]));
      }
      exports.joinSignature = joinSignature;
    }
  });

  // node_modules/js-sha3/src/sha3.js
  var require_sha32 = __commonJS({
    "node_modules/js-sha3/src/sha3.js"(exports, module) {
      init_process();
      init_buffer();
      (function() {
        "use strict";
        var root = typeof window === "object" ? window : {};
        var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root = window;
        }
        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1,
          0,
          32898,
          0,
          32906,
          2147483648,
          2147516416,
          2147483648,
          32907,
          0,
          2147483649,
          0,
          2147516545,
          2147483648,
          32777,
          2147483648,
          138,
          0,
          136,
          0,
          2147516425,
          0,
          2147483658,
          0,
          2147516555,
          0,
          139,
          2147483648,
          32905,
          2147483648,
          32771,
          2147483648,
          32770,
          2147483648,
          128,
          2147483648,
          32778,
          0,
          2147483658,
          2147483648,
          2147516545,
          2147483648,
          32896,
          2147483648,
          2147483649,
          0,
          2147516424,
          2147483648
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
        var createOutputMethod = function(bits2, padding, outputType) {
          return function(message) {
            return new Keccak(bits2, padding, bits2).update(message)[outputType]();
          };
        };
        var createShakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits) {
            return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
          };
        };
        var createMethod = function(bits2, padding) {
          var method = createOutputMethod(bits2, padding, "hex");
          method.create = function() {
            return new Keccak(bits2, padding, bits2);
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type2 = OUTPUT_TYPES[i2];
            method[type2] = createOutputMethod(bits2, padding, type2);
          }
          return method;
        };
        var createShakeMethod = function(bits2, padding) {
          var method = createShakeOutputMethod(bits2, padding, "hex");
          method.create = function(outputBits) {
            return new Keccak(bits2, padding, outputBits);
          };
          method.update = function(message, outputBits) {
            return method.create(outputBits).update(message);
          };
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type2 = OUTPUT_TYPES[i2];
            method[type2] = createShakeOutputMethod(bits2, padding, type2);
          }
          return method;
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod },
          { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
        ];
        var methods = {}, methodNames = [];
        for (var i = 0; i < algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j = 0; j < bits.length; ++j) {
            var methodName = algorithm.name + "_" + bits[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          }
        }
        function Keccak(bits2, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.block = 0;
          this.start = 0;
          this.blockCount = 1600 - (bits2 << 1) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for (var i2 = 0; i2 < 50; ++i2) {
            this.s[i2] = 0;
          }
        }
        Keccak.prototype.update = function(message) {
          var notString = typeof message !== "string";
          if (notString && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
          var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
          while (index < length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i2 = 1; i2 < blockCount + 1; ++i2) {
                blocks[i2] = 0;
              }
            }
            if (notString) {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
              }
            } else {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                }
              }
            }
            this.lastByteIndex = i2;
            if (i2 >= byteCount) {
              this.start = i2 - byteCount;
              this.block = blocks[blockCount];
              for (i2 = 0; i2 < blockCount; ++i2) {
                s[i2] ^= blocks[i2];
              }
              f(s);
              this.reset = true;
            } else {
              this.start = i2;
            }
          }
          return this;
        };
        Keccak.prototype.finalize = function() {
          var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
          blocks[i2 >> 2] |= this.padding[i2 & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i2 = 0; i2 < blockCount; ++i2) {
            s[i2] ^= blocks[i2];
          }
          f(s);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var hex = "", block;
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              block = s[i2];
              hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
            }
            if (j2 % blockCount === 0) {
              f(s);
              i2 = 0;
            }
          }
          if (extraBytes) {
            block = s[i2];
            if (extraBytes > 0) {
              hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
            }
            if (extraBytes > 1) {
              hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
            }
            if (extraBytes > 2) {
              hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
            }
          }
          return hex;
        };
        Keccak.prototype.arrayBuffer = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) {
            buffer = new ArrayBuffer(outputBlocks + 1 << 2);
          } else {
            buffer = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer);
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              array[j2] = s[i2];
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            array[i2] = s[i2];
            buffer = buffer.slice(0, bytes);
          }
          return buffer;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var array = [], offset, block;
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              offset = j2 << 2;
              block = s[i2];
              array[offset] = block & 255;
              array[offset + 1] = block >> 8 & 255;
              array[offset + 2] = block >> 16 & 255;
              array[offset + 3] = block >> 24 & 255;
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            offset = j2 << 2;
            block = s[i2];
            if (extraBytes > 0) {
              array[offset] = block & 255;
            }
            if (extraBytes > 1) {
              array[offset + 1] = block >> 8 & 255;
            }
            if (extraBytes > 2) {
              array[offset + 2] = block >> 16 & 255;
            }
          }
          return array;
        };
        var f = function(s) {
          var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
          for (n = 0; n < 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            h = c8 ^ (c2 << 1 | c3 >>> 31);
            l = c9 ^ (c3 << 1 | c2 >>> 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 << 1 | c5 >>> 31);
            l = c1 ^ (c5 << 1 | c4 >>> 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 << 1 | c7 >>> 31);
            l = c3 ^ (c7 << 1 | c6 >>> 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 << 1 | c9 >>> 31);
            l = c5 ^ (c9 << 1 | c8 >>> 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 << 1 | c1 >>> 31);
            l = c7 ^ (c1 << 1 | c0 >>> 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;
            b0 = s[0];
            b1 = s[1];
            b32 = s[11] << 4 | s[10] >>> 28;
            b33 = s[10] << 4 | s[11] >>> 28;
            b14 = s[20] << 3 | s[21] >>> 29;
            b15 = s[21] << 3 | s[20] >>> 29;
            b46 = s[31] << 9 | s[30] >>> 23;
            b47 = s[30] << 9 | s[31] >>> 23;
            b28 = s[40] << 18 | s[41] >>> 14;
            b29 = s[41] << 18 | s[40] >>> 14;
            b20 = s[2] << 1 | s[3] >>> 31;
            b21 = s[3] << 1 | s[2] >>> 31;
            b2 = s[13] << 12 | s[12] >>> 20;
            b3 = s[12] << 12 | s[13] >>> 20;
            b34 = s[22] << 10 | s[23] >>> 22;
            b35 = s[23] << 10 | s[22] >>> 22;
            b16 = s[33] << 13 | s[32] >>> 19;
            b17 = s[32] << 13 | s[33] >>> 19;
            b48 = s[42] << 2 | s[43] >>> 30;
            b49 = s[43] << 2 | s[42] >>> 30;
            b40 = s[5] << 30 | s[4] >>> 2;
            b41 = s[4] << 30 | s[5] >>> 2;
            b22 = s[14] << 6 | s[15] >>> 26;
            b23 = s[15] << 6 | s[14] >>> 26;
            b4 = s[25] << 11 | s[24] >>> 21;
            b5 = s[24] << 11 | s[25] >>> 21;
            b36 = s[34] << 15 | s[35] >>> 17;
            b37 = s[35] << 15 | s[34] >>> 17;
            b18 = s[45] << 29 | s[44] >>> 3;
            b19 = s[44] << 29 | s[45] >>> 3;
            b10 = s[6] << 28 | s[7] >>> 4;
            b11 = s[7] << 28 | s[6] >>> 4;
            b42 = s[17] << 23 | s[16] >>> 9;
            b43 = s[16] << 23 | s[17] >>> 9;
            b24 = s[26] << 25 | s[27] >>> 7;
            b25 = s[27] << 25 | s[26] >>> 7;
            b6 = s[36] << 21 | s[37] >>> 11;
            b7 = s[37] << 21 | s[36] >>> 11;
            b38 = s[47] << 24 | s[46] >>> 8;
            b39 = s[46] << 24 | s[47] >>> 8;
            b30 = s[8] << 27 | s[9] >>> 5;
            b31 = s[9] << 27 | s[8] >>> 5;
            b12 = s[18] << 20 | s[19] >>> 12;
            b13 = s[19] << 20 | s[18] >>> 12;
            b44 = s[29] << 7 | s[28] >>> 25;
            b45 = s[28] << 7 | s[29] >>> 25;
            b26 = s[38] << 8 | s[39] >>> 24;
            b27 = s[39] << 8 | s[38] >>> 24;
            b8 = s[48] << 14 | s[49] >>> 18;
            b9 = s[49] << 14 | s[48] >>> 18;
            s[0] = b0 ^ ~b2 & b4;
            s[1] = b1 ^ ~b3 & b5;
            s[10] = b10 ^ ~b12 & b14;
            s[11] = b11 ^ ~b13 & b15;
            s[20] = b20 ^ ~b22 & b24;
            s[21] = b21 ^ ~b23 & b25;
            s[30] = b30 ^ ~b32 & b34;
            s[31] = b31 ^ ~b33 & b35;
            s[40] = b40 ^ ~b42 & b44;
            s[41] = b41 ^ ~b43 & b45;
            s[2] = b2 ^ ~b4 & b6;
            s[3] = b3 ^ ~b5 & b7;
            s[12] = b12 ^ ~b14 & b16;
            s[13] = b13 ^ ~b15 & b17;
            s[22] = b22 ^ ~b24 & b26;
            s[23] = b23 ^ ~b25 & b27;
            s[32] = b32 ^ ~b34 & b36;
            s[33] = b33 ^ ~b35 & b37;
            s[42] = b42 ^ ~b44 & b46;
            s[43] = b43 ^ ~b45 & b47;
            s[4] = b4 ^ ~b6 & b8;
            s[5] = b5 ^ ~b7 & b9;
            s[14] = b14 ^ ~b16 & b18;
            s[15] = b15 ^ ~b17 & b19;
            s[24] = b24 ^ ~b26 & b28;
            s[25] = b25 ^ ~b27 & b29;
            s[34] = b34 ^ ~b36 & b38;
            s[35] = b35 ^ ~b37 & b39;
            s[44] = b44 ^ ~b46 & b48;
            s[45] = b45 ^ ~b47 & b49;
            s[6] = b6 ^ ~b8 & b0;
            s[7] = b7 ^ ~b9 & b1;
            s[16] = b16 ^ ~b18 & b10;
            s[17] = b17 ^ ~b19 & b11;
            s[26] = b26 ^ ~b28 & b20;
            s[27] = b27 ^ ~b29 & b21;
            s[36] = b36 ^ ~b38 & b30;
            s[37] = b37 ^ ~b39 & b31;
            s[46] = b46 ^ ~b48 & b40;
            s[47] = b47 ^ ~b49 & b41;
            s[8] = b8 ^ ~b0 & b2;
            s[9] = b9 ^ ~b1 & b3;
            s[18] = b18 ^ ~b10 & b12;
            s[19] = b19 ^ ~b11 & b13;
            s[28] = b28 ^ ~b20 & b22;
            s[29] = b29 ^ ~b21 & b23;
            s[38] = b38 ^ ~b30 & b32;
            s[39] = b39 ^ ~b31 & b33;
            s[48] = b48 ^ ~b40 & b42;
            s[49] = b49 ^ ~b41 & b43;
            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
          }
        };
        if (COMMON_JS) {
          module.exports = methods;
        } else {
          for (var i = 0; i < methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
        }
      })();
    }
  });

  // node_modules/ethers/utils/keccak256.js
  var require_keccak256 = __commonJS({
    "node_modules/ethers/utils/keccak256.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var sha3 = require_sha32();
      var bytes_1 = require_bytes();
      function keccak256(data) {
        return "0x" + sha3.keccak_256(bytes_1.arrayify(data));
      }
      exports.keccak256 = keccak256;
    }
  });

  // node_modules/ethers/utils/rlp.js
  var require_rlp = __commonJS({
    "node_modules/ethers/utils/rlp.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var bytes_1 = require_bytes();
      function arrayifyInteger(value) {
        var result = [];
        while (value) {
          result.unshift(value & 255);
          value >>= 8;
        }
        return result;
      }
      function unarrayifyInteger(data, offset, length) {
        var result = 0;
        for (var i = 0; i < length; i++) {
          result = result * 256 + data[offset + i];
        }
        return result;
      }
      function _encode(object) {
        if (Array.isArray(object)) {
          var payload = [];
          object.forEach(function(child) {
            payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
            payload.unshift(192 + payload.length);
            return payload;
          }
          var length = arrayifyInteger(payload.length);
          length.unshift(247 + length.length);
          return length.concat(payload);
        }
        var data = Array.prototype.slice.call(bytes_1.arrayify(object));
        if (data.length === 1 && data[0] <= 127) {
          return data;
        } else if (data.length <= 55) {
          data.unshift(128 + data.length);
          return data;
        }
        var length = arrayifyInteger(data.length);
        length.unshift(183 + length.length);
        return length.concat(data);
      }
      function encode2(object) {
        return bytes_1.hexlify(_encode(object));
      }
      exports.encode = encode2;
      function _decodeChildren(data, offset, childOffset, length) {
        var result = [];
        while (childOffset < offset + 1 + length) {
          var decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset + 1 + length) {
            throw new Error("invalid rlp");
          }
        }
        return { consumed: 1 + length, result };
      }
      function _decode(data, offset) {
        if (data.length === 0) {
          throw new Error("invalid rlp data");
        }
        if (data[offset] >= 248) {
          var lengthLength = data[offset] - 247;
          if (offset + 1 + lengthLength > data.length) {
            throw new Error("too short");
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
            throw new Error("to short");
          }
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        } else if (data[offset] >= 192) {
          var length = data[offset] - 192;
          if (offset + 1 + length > data.length) {
            throw new Error("invalid rlp data");
          }
          return _decodeChildren(data, offset, offset + 1, length);
        } else if (data[offset] >= 184) {
          var lengthLength = data[offset] - 183;
          if (offset + 1 + lengthLength > data.length) {
            throw new Error("invalid rlp data");
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
            throw new Error("invalid rlp data");
          }
          var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return { consumed: 1 + lengthLength + length, result };
        } else if (data[offset] >= 128) {
          var length = data[offset] - 128;
          if (offset + 1 + length > data.length) {
            throw new Error("invlaid rlp data");
          }
          var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));
          return { consumed: 1 + length, result };
        }
        return { consumed: 1, result: bytes_1.hexlify(data[offset]) };
      }
      function decode(data) {
        var bytes = bytes_1.arrayify(data);
        var decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
          throw new Error("invalid rlp data");
        }
        return decoded.result;
      }
      exports.decode = decode;
    }
  });

  // node_modules/ethers/utils/address.js
  var require_address = __commonJS({
    "node_modules/ethers/utils/address.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var bn_js_1 = __importDefault(require_bn4());
      var bytes_1 = require_bytes();
      var keccak256_1 = require_keccak256();
      var rlp_1 = require_rlp();
      var errors2 = require_errors();
      function getChecksumAddress(address) {
        if (typeof address !== "string" || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
          errors2.throwError("invalid address", errors2.INVALID_ARGUMENT, { arg: "address", value: address });
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split("");
        var hashed = new Uint8Array(40);
        for (var i_1 = 0; i_1 < 40; i_1++) {
          hashed[i_1] = chars[i_1].charCodeAt(0);
        }
        hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
        for (var i2 = 0; i2 < 40; i2 += 2) {
          if (hashed[i2 >> 1] >> 4 >= 8) {
            chars[i2] = chars[i2].toUpperCase();
          }
          if ((hashed[i2 >> 1] & 15) >= 8) {
            chars[i2 + 1] = chars[i2 + 1].toUpperCase();
          }
        }
        return "0x" + chars.join("");
      }
      var MAX_SAFE_INTEGER = 9007199254740991;
      function log10(x) {
        if (Math.log10) {
          return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
      }
      var ibanLookup = {};
      for (i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
      }
      var i;
      for (i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
      }
      var i;
      var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
      function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        var expanded = "";
        address.split("").forEach(function(c) {
          expanded += ibanLookup[c];
        });
        while (expanded.length >= safeDigits) {
          var block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - parseInt(expanded, 10) % 97);
        while (checksum.length < 2) {
          checksum = "0" + checksum;
        }
        return checksum;
      }
      function getAddress(address) {
        var result = null;
        if (typeof address !== "string") {
          errors2.throwError("invalid address", errors2.INVALID_ARGUMENT, { arg: "address", value: address });
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          if (address.substring(0, 2) !== "0x") {
            address = "0x" + address;
          }
          result = getChecksumAddress(address);
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            errors2.throwError("bad address checksum", errors2.INVALID_ARGUMENT, { arg: "address", value: address });
          }
        } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          if (address.substring(2, 4) !== ibanChecksum(address)) {
            errors2.throwError("bad icap checksum", errors2.INVALID_ARGUMENT, { arg: "address", value: address });
          }
          result = new bn_js_1.default.BN(address.substring(4), 36).toString(16);
          while (result.length < 40) {
            result = "0" + result;
          }
          result = getChecksumAddress("0x" + result);
        } else {
          errors2.throwError("invalid address", errors2.INVALID_ARGUMENT, { arg: "address", value: address });
        }
        return result;
      }
      exports.getAddress = getAddress;
      function getIcapAddress(address) {
        var base36 = new bn_js_1.default.BN(getAddress(address).substring(2), 16).toString(36).toUpperCase();
        while (base36.length < 30) {
          base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
      }
      exports.getIcapAddress = getIcapAddress;
      function getContractAddress(transaction) {
        if (!transaction.from) {
          throw new Error("missing from address");
        }
        var nonce = transaction.nonce;
        return getAddress("0x" + keccak256_1.keccak256(rlp_1.encode([
          getAddress(transaction.from),
          bytes_1.stripZeros(bytes_1.hexlify(nonce))
        ])).substring(26));
      }
      exports.getContractAddress = getContractAddress;
    }
  });

  // node_modules/ethers/utils/properties.js
  var require_properties = __commonJS({
    "node_modules/ethers/utils/properties.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      function defineReadOnly(object, name2, value) {
        Object.defineProperty(object, name2, {
          enumerable: true,
          value,
          writable: false
        });
      }
      exports.defineReadOnly = defineReadOnly;
      function defineFrozen(object, name2, value) {
        var frozen = JSON.stringify(value);
        Object.defineProperty(object, name2, {
          enumerable: true,
          get: function() {
            return JSON.parse(frozen);
          }
        });
      }
      exports.defineFrozen = defineFrozen;
      function resolveProperties(object) {
        var result = {};
        var promises = [];
        Object.keys(object).forEach(function(key) {
          var value = object[key];
          if (value instanceof Promise) {
            promises.push(value.then(function(value2) {
              result[key] = value2;
              return null;
            }));
          } else {
            result[key] = value;
          }
        });
        return Promise.all(promises).then(function() {
          return result;
        });
      }
      exports.resolveProperties = resolveProperties;
      function shallowCopy(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      exports.shallowCopy = shallowCopy;
      function jsonCopy(object) {
        return JSON.parse(JSON.stringify(object));
      }
      exports.jsonCopy = jsonCopy;
    }
  });

  // node_modules/ethers/utils/bignumber.js
  var require_bignumber = __commonJS({
    "node_modules/ethers/utils/bignumber.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || (function() {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return function(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var bn_js_1 = __importDefault(require_bn4());
      var bytes_1 = require_bytes();
      var properties_1 = require_properties();
      var types_1 = require_types();
      var errors2 = __importStar(require_errors());
      var BN_1 = new bn_js_1.default.BN(-1);
      function toHex3(bn) {
        var value = bn.toString(16);
        if (value[0] === "-") {
          if (value.length % 2 === 0) {
            return "-0x0" + value.substring(1);
          }
          return "-0x" + value.substring(1);
        }
        if (value.length % 2 === 1) {
          return "0x0" + value;
        }
        return "0x" + value;
      }
      function toBN(value) {
        return bigNumberify(value)._bn;
      }
      function toBigNumber(bn) {
        return new BigNumber(toHex3(bn));
      }
      var BigNumber = (
        /** @class */
        (function(_super) {
          __extends(BigNumber2, _super);
          function BigNumber2(value) {
            var _this = _super.call(this) || this;
            errors2.checkNew(_this, BigNumber2);
            if (typeof value === "string") {
              if (bytes_1.isHexString(value)) {
                if (value == "0x") {
                  value = "0x0";
                }
                properties_1.defineReadOnly(_this, "_hex", value);
              } else if (value[0] === "-" && bytes_1.isHexString(value.substring(1))) {
                properties_1.defineReadOnly(_this, "_hex", value);
              } else if (value.match(/^-?[0-9]*$/)) {
                if (value == "") {
                  value = "0";
                }
                properties_1.defineReadOnly(_this, "_hex", toHex3(new bn_js_1.default.BN(value)));
              } else {
                errors2.throwError("invalid BigNumber string value", errors2.INVALID_ARGUMENT, { arg: "value", value });
              }
            } else if (typeof value === "number") {
              if (parseInt(String(value)) !== value) {
                errors2.throwError("underflow", errors2.NUMERIC_FAULT, { operation: "setValue", fault: "underflow", value, outputValue: parseInt(String(value)) });
              }
              try {
                properties_1.defineReadOnly(_this, "_hex", toHex3(new bn_js_1.default.BN(value)));
              } catch (error2) {
                errors2.throwError("overflow", errors2.NUMERIC_FAULT, { operation: "setValue", fault: "overflow", details: error2.message });
              }
            } else if (value instanceof BigNumber2) {
              properties_1.defineReadOnly(_this, "_hex", value._hex);
            } else if (value.toHexString) {
              properties_1.defineReadOnly(_this, "_hex", toHex3(toBN(value.toHexString())));
            } else if (bytes_1.isArrayish(value)) {
              properties_1.defineReadOnly(_this, "_hex", toHex3(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
            } else {
              errors2.throwError("invalid BigNumber value", errors2.INVALID_ARGUMENT, { arg: "value", value });
            }
            return _this;
          }
          Object.defineProperty(BigNumber2.prototype, "_bn", {
            get: function() {
              if (this._hex[0] === "-") {
                return new bn_js_1.default.BN(this._hex.substring(3), 16).mul(BN_1);
              }
              return new bn_js_1.default.BN(this._hex.substring(2), 16);
            },
            enumerable: true,
            configurable: true
          });
          BigNumber2.prototype.fromTwos = function(value) {
            return toBigNumber(this._bn.fromTwos(value));
          };
          BigNumber2.prototype.toTwos = function(value) {
            return toBigNumber(this._bn.toTwos(value));
          };
          BigNumber2.prototype.add = function(other) {
            return toBigNumber(this._bn.add(toBN(other)));
          };
          BigNumber2.prototype.sub = function(other) {
            return toBigNumber(this._bn.sub(toBN(other)));
          };
          BigNumber2.prototype.div = function(other) {
            var o = bigNumberify(other);
            if (o.isZero()) {
              errors2.throwError("division by zero", errors2.NUMERIC_FAULT, { operation: "divide", fault: "division by zero" });
            }
            return toBigNumber(this._bn.div(toBN(other)));
          };
          BigNumber2.prototype.mul = function(other) {
            return toBigNumber(this._bn.mul(toBN(other)));
          };
          BigNumber2.prototype.mod = function(other) {
            return toBigNumber(this._bn.mod(toBN(other)));
          };
          BigNumber2.prototype.pow = function(other) {
            return toBigNumber(this._bn.pow(toBN(other)));
          };
          BigNumber2.prototype.maskn = function(value) {
            return toBigNumber(this._bn.maskn(value));
          };
          BigNumber2.prototype.eq = function(other) {
            return this._bn.eq(toBN(other));
          };
          BigNumber2.prototype.lt = function(other) {
            return this._bn.lt(toBN(other));
          };
          BigNumber2.prototype.lte = function(other) {
            return this._bn.lte(toBN(other));
          };
          BigNumber2.prototype.gt = function(other) {
            return this._bn.gt(toBN(other));
          };
          BigNumber2.prototype.gte = function(other) {
            return this._bn.gte(toBN(other));
          };
          BigNumber2.prototype.isZero = function() {
            return this._bn.isZero();
          };
          BigNumber2.prototype.toNumber = function() {
            try {
              return this._bn.toNumber();
            } catch (error2) {
              errors2.throwError("overflow", errors2.NUMERIC_FAULT, { operation: "setValue", fault: "overflow", details: error2.message });
            }
            return null;
          };
          BigNumber2.prototype.toString = function() {
            return this._bn.toString(10);
          };
          BigNumber2.prototype.toHexString = function() {
            return this._hex;
          };
          return BigNumber2;
        })(types_1.BigNumber)
      );
      function bigNumberify(value) {
        if (value instanceof BigNumber) {
          return value;
        }
        return new BigNumber(value);
      }
      exports.bigNumberify = bigNumberify;
      exports.ConstantNegativeOne = bigNumberify(-1);
      exports.ConstantZero = bigNumberify(0);
      exports.ConstantOne = bigNumberify(1);
      exports.ConstantTwo = bigNumberify(2);
      exports.ConstantWeiPerEther = bigNumberify("1000000000000000000");
    }
  });

  // node_modules/ethers/utils/utf8.js
  var require_utf82 = __commonJS({
    "node_modules/ethers/utils/utf8.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var bytes_1 = require_bytes();
      var UnicodeNormalizationForm;
      (function(UnicodeNormalizationForm2) {
        UnicodeNormalizationForm2["current"] = "";
        UnicodeNormalizationForm2["NFC"] = "NFC";
        UnicodeNormalizationForm2["NFD"] = "NFD";
        UnicodeNormalizationForm2["NFKC"] = "NFKC";
        UnicodeNormalizationForm2["NFKD"] = "NFKD";
      })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
      function toUtf8Bytes(str, form) {
        if (form === void 0) {
          form = UnicodeNormalizationForm.current;
        }
        if (form != UnicodeNormalizationForm.current) {
          str = str.normalize(form);
        }
        var result = [];
        var offset = 0;
        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
            result[offset++] = c;
          } else if (c < 2048) {
            result[offset++] = c >> 6 | 192;
            result[offset++] = c & 63 | 128;
          } else if ((c & 64512) == 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) == 56320) {
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            result[offset++] = c >> 18 | 240;
            result[offset++] = c >> 12 & 63 | 128;
            result[offset++] = c >> 6 & 63 | 128;
            result[offset++] = c & 63 | 128;
          } else {
            result[offset++] = c >> 12 | 224;
            result[offset++] = c >> 6 & 63 | 128;
            result[offset++] = c & 63 | 128;
          }
        }
        return bytes_1.arrayify(result);
      }
      exports.toUtf8Bytes = toUtf8Bytes;
      function toUtf8String(bytes) {
        bytes = bytes_1.arrayify(bytes);
        var result = "";
        var i = 0;
        while (i < bytes.length) {
          var c = bytes[i++];
          if (c >> 7 == 0) {
            result += String.fromCharCode(c);
            continue;
          }
          if (c >> 6 == 2) {
            continue;
          }
          var extraLength = null;
          if (c >> 5 == 6) {
            extraLength = 1;
          } else if (c >> 4 == 14) {
            extraLength = 2;
          } else if (c >> 3 == 30) {
            extraLength = 3;
          } else if (c >> 2 == 62) {
            extraLength = 4;
          } else if (c >> 1 == 126) {
            extraLength = 5;
          } else {
            continue;
          }
          if (i + extraLength > bytes.length) {
            for (; i < bytes.length; i++) {
              if (bytes[i] >> 6 != 2) {
                break;
              }
            }
            if (i != bytes.length)
              continue;
            return result;
          }
          var res = c & (1 << 8 - extraLength - 1) - 1;
          var count;
          for (count = 0; count < extraLength; count++) {
            var nextChar = bytes[i++];
            if (nextChar >> 6 != 2) {
              break;
            }
            ;
            res = res << 6 | nextChar & 63;
          }
          if (count != extraLength) {
            i--;
            continue;
          }
          if (res <= 65535) {
            result += String.fromCharCode(res);
            continue;
          }
          res -= 65536;
          result += String.fromCharCode((res >> 10 & 1023) + 55296, (res & 1023) + 56320);
        }
        return result;
      }
      exports.toUtf8String = toUtf8String;
    }
  });

  // node_modules/ethers/utils/abi-coder.js
  var require_abi_coder = __commonJS({
    "node_modules/ethers/utils/abi-coder.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || (function() {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return function(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var address_1 = require_address();
      var bignumber_1 = require_bignumber();
      var bytes_1 = require_bytes();
      var utf8_1 = require_utf82();
      var properties_1 = require_properties();
      var errors2 = __importStar(require_errors());
      var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
      var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
      var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
      exports.defaultCoerceFunc = function(type2, value) {
        var match = type2.match(paramTypeNumber);
        if (match && parseInt(match[2]) <= 48) {
          return value.toNumber();
        }
        return value;
      };
      var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
      var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
      function verifyType(type2) {
        if (type2.match(/^uint($|[^1-9])/)) {
          type2 = "uint256" + type2.substring(4);
        } else if (type2.match(/^int($|[^1-9])/)) {
          type2 = "int256" + type2.substring(3);
        }
        return type2;
      }
      function parseParam(param, allowIndexed) {
        function throwError(i2) {
          throw new Error('unexpected character "' + param[i2] + '" at position ' + i2 + ' in "' + param + '"');
        }
        var parent = { type: "", name: "", state: { allowType: true } };
        var node = parent;
        for (var i = 0; i < param.length; i++) {
          var c = param[i];
          switch (c) {
            case "(":
              if (!node.state.allowParams) {
                throwError(i);
              }
              node.state.allowType = false;
              node.type = verifyType(node.type);
              node.components = [{ type: "", name: "", parent: node, state: { allowType: true } }];
              node = node.components[0];
              break;
            case ")":
              delete node.state;
              if (allowIndexed && node.name === "indexed") {
                node.indexed = true;
                node.name = "";
              }
              node.type = verifyType(node.type);
              var child = node;
              node = node.parent;
              if (!node) {
                throwError(i);
              }
              delete child.parent;
              node.state.allowParams = false;
              node.state.allowName = true;
              node.state.allowArray = true;
              break;
            case ",":
              delete node.state;
              if (allowIndexed && node.name === "indexed") {
                node.indexed = true;
                node.name = "";
              }
              node.type = verifyType(node.type);
              var sibling = { type: "", name: "", parent: node.parent, state: { allowType: true } };
              node.parent.components.push(sibling);
              delete node.parent;
              node = sibling;
              break;
            // Hit a space...
            case " ":
              if (node.state.allowType) {
                if (node.type !== "") {
                  node.type = verifyType(node.type);
                  delete node.state.allowType;
                  node.state.allowName = true;
                  node.state.allowParams = true;
                }
              }
              if (node.state.allowName) {
                if (node.name !== "") {
                  if (allowIndexed && node.name === "indexed") {
                    node.indexed = true;
                    node.name = "";
                  } else {
                    node.state.allowName = false;
                  }
                }
              }
              break;
            case "[":
              if (!node.state.allowArray) {
                throwError(i);
              }
              node.type += c;
              node.state.allowArray = false;
              node.state.allowName = false;
              node.state.readArray = true;
              break;
            case "]":
              if (!node.state.readArray) {
                throwError(i);
              }
              node.type += c;
              node.state.readArray = false;
              node.state.allowArray = true;
              node.state.allowName = true;
              break;
            default:
              if (node.state.allowType) {
                node.type += c;
                node.state.allowParams = true;
                node.state.allowArray = true;
              } else if (node.state.allowName) {
                node.name += c;
                delete node.state.allowArray;
              } else if (node.state.readArray) {
                node.type += c;
              } else {
                throwError(i);
              }
          }
        }
        if (node.parent) {
          throw new Error("unexpected eof");
        }
        delete parent.state;
        if (allowIndexed && node.name === "indexed") {
          node.indexed = true;
          node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
      }
      function parseSignatureEvent(fragment) {
        var abi = {
          anonymous: false,
          inputs: [],
          name: "",
          type: "event"
        };
        var match = fragment.match(regexParen);
        if (!match) {
          throw new Error("invalid event: " + fragment);
        }
        abi.name = match[1].trim();
        splitNesting(match[2]).forEach(function(param) {
          param = parseParam(param, true);
          param.indexed = !!param.indexed;
          abi.inputs.push(param);
        });
        match[3].split(" ").forEach(function(modifier) {
          switch (modifier) {
            case "anonymous":
              abi.anonymous = true;
              break;
            case "":
              break;
            default:
              console.log("unknown modifier: " + modifier);
          }
        });
        if (abi.name && !abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + abi.name + '"');
        }
        return abi;
      }
      function parseSignatureFunction(fragment) {
        var abi = {
          constant: false,
          inputs: [],
          name: "",
          outputs: [],
          payable: false,
          stateMutability: null,
          type: "function"
        };
        var comps = fragment.split(" returns ");
        var left = comps[0].match(regexParen);
        if (!left) {
          throw new Error("invalid signature");
        }
        abi.name = left[1].trim();
        if (!abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + left[1] + '"');
        }
        splitNesting(left[2]).forEach(function(param) {
          abi.inputs.push(parseParam(param));
        });
        left[3].split(" ").forEach(function(modifier) {
          switch (modifier) {
            case "constant":
              abi.constant = true;
              break;
            case "payable":
              abi.payable = true;
              break;
            case "pure":
              abi.constant = true;
              abi.stateMutability = "pure";
              break;
            case "view":
              abi.constant = true;
              abi.stateMutability = "view";
              break;
            case "":
              break;
            default:
              console.log("unknown modifier: " + modifier);
          }
        });
        if (comps.length > 1) {
          var right = comps[1].match(regexParen);
          if (right[1].trim() != "" || right[3].trim() != "") {
            throw new Error("unexpected tokens");
          }
          splitNesting(right[2]).forEach(function(param) {
            abi.outputs.push(parseParam(param));
          });
        }
        return abi;
      }
      function parseParamType(type2) {
        return parseParam(type2, true);
      }
      exports.parseParamType = parseParamType;
      function formatParamType(paramType) {
        return getParamCoder(exports.defaultCoerceFunc, paramType).type;
      }
      exports.formatParamType = formatParamType;
      function formatSignature(fragment) {
        return fragment.name + "(" + fragment.inputs.map(function(i) {
          return formatParamType(i);
        }).join(",") + ")";
      }
      exports.formatSignature = formatSignature;
      function parseSignature(fragment) {
        if (typeof fragment === "string") {
          fragment = fragment.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
          fragment = fragment.trim();
          if (fragment.substring(0, 6) === "event ") {
            return parseSignatureEvent(fragment.substring(6).trim());
          } else {
            if (fragment.substring(0, 9) === "function ") {
              fragment = fragment.substring(9);
            }
            return parseSignatureFunction(fragment.trim());
          }
        }
        throw new Error("unknown signature");
      }
      exports.parseSignature = parseSignature;
      var Coder = (
        /** @class */
        /* @__PURE__ */ (function() {
          function Coder2(coerceFunc, name2, type2, localName, dynamic) {
            this.coerceFunc = coerceFunc;
            this.name = name2;
            this.type = type2;
            this.localName = localName;
            this.dynamic = dynamic;
          }
          return Coder2;
        })()
      );
      var CoderAnonymous = (
        /** @class */
        (function(_super) {
          __extends(CoderAnonymous2, _super);
          function CoderAnonymous2(coder) {
            var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, void 0, coder.dynamic) || this;
            properties_1.defineReadOnly(_this, "coder", coder);
            return _this;
          }
          CoderAnonymous2.prototype.encode = function(value) {
            return this.coder.encode(value);
          };
          CoderAnonymous2.prototype.decode = function(data, offset) {
            return this.coder.decode(data, offset);
          };
          return CoderAnonymous2;
        })(Coder)
      );
      var CoderNull = (
        /** @class */
        (function(_super) {
          __extends(CoderNull2, _super);
          function CoderNull2(coerceFunc, localName) {
            return _super.call(this, coerceFunc, "null", "", localName, false) || this;
          }
          CoderNull2.prototype.encode = function(value) {
            return bytes_1.arrayify([]);
          };
          CoderNull2.prototype.decode = function(data, offset) {
            if (offset > data.length) {
              throw new Error("invalid null");
            }
            return {
              consumed: 0,
              value: this.coerceFunc("null", void 0)
            };
          };
          return CoderNull2;
        })(Coder)
      );
      var CoderNumber = (
        /** @class */
        (function(_super) {
          __extends(CoderNumber2, _super);
          function CoderNumber2(coerceFunc, size, signed, localName) {
            var _this = this;
            var name2 = (signed ? "int" : "uint") + size * 8;
            _this = _super.call(this, coerceFunc, name2, name2, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
          }
          CoderNumber2.prototype.encode = function(value) {
            try {
              var v = bignumber_1.bigNumberify(value);
              v = v.toTwos(this.size * 8).maskn(this.size * 8);
              if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(256);
              }
              return bytes_1.padZeros(bytes_1.arrayify(v), 32);
            } catch (error2) {
              errors2.throwError("invalid number value", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value
              });
            }
            return null;
          };
          CoderNumber2.prototype.decode = function(data, offset) {
            if (data.length < offset + 32) {
              errors2.throwError("insufficient data for " + this.name + " type", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
            }
            var junkLength = 32 - this.size;
            var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
            if (this.signed) {
              value = value.fromTwos(this.size * 8);
            } else {
              value = value.maskn(this.size * 8);
            }
            return {
              consumed: 32,
              value: this.coerceFunc(this.name, value)
            };
          };
          return CoderNumber2;
        })(Coder)
      );
      var uint256Coder = new CoderNumber(function(type2, value) {
        return value;
      }, 32, false, "none");
      var CoderBoolean = (
        /** @class */
        (function(_super) {
          __extends(CoderBoolean2, _super);
          function CoderBoolean2(coerceFunc, localName) {
            return _super.call(this, coerceFunc, "bool", "bool", localName, false) || this;
          }
          CoderBoolean2.prototype.encode = function(value) {
            return uint256Coder.encode(!!value ? 1 : 0);
          };
          CoderBoolean2.prototype.decode = function(data, offset) {
            try {
              var result = uint256Coder.decode(data, offset);
            } catch (error2) {
              if (error2.reason === "insufficient data for uint256 type") {
                errors2.throwError("insufficient data for boolean type", errors2.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: "boolean",
                  value: error2.value
                });
              }
              throw error2;
            }
            return {
              consumed: result.consumed,
              value: this.coerceFunc("bool", !result.value.isZero())
            };
          };
          return CoderBoolean2;
        })(Coder)
      );
      var CoderFixedBytes = (
        /** @class */
        (function(_super) {
          __extends(CoderFixedBytes2, _super);
          function CoderFixedBytes2(coerceFunc, length, localName) {
            var _this = this;
            var name2 = "bytes" + length;
            _this = _super.call(this, coerceFunc, name2, name2, localName, false) || this;
            _this.length = length;
            return _this;
          }
          CoderFixedBytes2.prototype.encode = function(value) {
            var result = new Uint8Array(32);
            try {
              var data = bytes_1.arrayify(value);
              if (data.length > 32) {
                throw new Error();
              }
              result.set(data);
            } catch (error2) {
              errors2.throwError("invalid " + this.name + " value", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: error2.value || value
              });
            }
            return result;
          };
          CoderFixedBytes2.prototype.decode = function(data, offset) {
            if (data.length < offset + 32) {
              errors2.throwError("insufficient data for " + name + " type", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: this.name,
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
            }
            return {
              consumed: 32,
              value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
            };
          };
          return CoderFixedBytes2;
        })(Coder)
      );
      var CoderAddress = (
        /** @class */
        (function(_super) {
          __extends(CoderAddress2, _super);
          function CoderAddress2(coerceFunc, localName) {
            return _super.call(this, coerceFunc, "address", "address", localName, false) || this;
          }
          CoderAddress2.prototype.encode = function(value) {
            var result = new Uint8Array(32);
            try {
              result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
            } catch (error2) {
              errors2.throwError("invalid address", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "address",
                value
              });
            }
            return result;
          };
          CoderAddress2.prototype.decode = function(data, offset) {
            if (data.length < offset + 32) {
              errors2.throwError("insufficuent data for address type", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "address",
                value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
            }
            return {
              consumed: 32,
              value: this.coerceFunc("address", address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
            };
          };
          return CoderAddress2;
        })(Coder)
      );
      function _encodeDynamicBytes(value) {
        var dataLength = 32 * Math.ceil(value.length / 32);
        var padding = new Uint8Array(dataLength - value.length);
        return bytes_1.concat([
          uint256Coder.encode(value.length),
          value,
          padding
        ]);
      }
      function _decodeDynamicBytes(data, offset, localName) {
        if (data.length < offset + 32) {
          errors2.throwError("insufficient data for dynamicBytes length", errors2.INVALID_ARGUMENT, {
            arg: localName,
            coderType: "dynamicBytes",
            value: bytes_1.hexlify(data.slice(offset, offset + 32))
          });
        }
        var length = uint256Coder.decode(data, offset).value;
        try {
          length = length.toNumber();
        } catch (error2) {
          errors2.throwError("dynamic bytes count too large", errors2.INVALID_ARGUMENT, {
            arg: localName,
            coderType: "dynamicBytes",
            value: length.toString()
          });
        }
        if (data.length < offset + 32 + length) {
          errors2.throwError("insufficient data for dynamicBytes type", errors2.INVALID_ARGUMENT, {
            arg: localName,
            coderType: "dynamicBytes",
            value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
          });
        }
        return {
          consumed: 32 + 32 * Math.ceil(length / 32),
          value: data.slice(offset + 32, offset + 32 + length)
        };
      }
      var CoderDynamicBytes = (
        /** @class */
        (function(_super) {
          __extends(CoderDynamicBytes2, _super);
          function CoderDynamicBytes2(coerceFunc, localName) {
            return _super.call(this, coerceFunc, "bytes", "bytes", localName, true) || this;
          }
          CoderDynamicBytes2.prototype.encode = function(value) {
            try {
              return _encodeDynamicBytes(bytes_1.arrayify(value));
            } catch (error2) {
              errors2.throwError("invalid bytes value", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "bytes",
                value: error2.value
              });
            }
            return null;
          };
          CoderDynamicBytes2.prototype.decode = function(data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc("bytes", bytes_1.hexlify(result.value));
            return result;
          };
          return CoderDynamicBytes2;
        })(Coder)
      );
      var CoderString = (
        /** @class */
        (function(_super) {
          __extends(CoderString2, _super);
          function CoderString2(coerceFunc, localName) {
            return _super.call(this, coerceFunc, "string", "string", localName, true) || this;
          }
          CoderString2.prototype.encode = function(value) {
            if (typeof value !== "string") {
              errors2.throwError("invalid string value", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "string",
                value
              });
            }
            return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
          };
          CoderString2.prototype.decode = function(data, offset) {
            var result = _decodeDynamicBytes(data, offset, this.localName);
            result.value = this.coerceFunc("string", utf8_1.toUtf8String(result.value));
            return result;
          };
          return CoderString2;
        })(Coder)
      );
      function alignSize(size) {
        return 32 * Math.ceil(size / 32);
      }
      function pack(coders, values) {
        if (Array.isArray(values)) {
        } else if (values && typeof values === "object") {
          var arrayValues = [];
          coders.forEach(function(coder) {
            arrayValues.push(values[coder.localName]);
          });
          values = arrayValues;
        } else {
          errors2.throwError("invalid tuple value", errors2.INVALID_ARGUMENT, {
            coderType: "tuple",
            value: values
          });
        }
        if (coders.length !== values.length) {
          errors2.throwError("types/value length mismatch", errors2.INVALID_ARGUMENT, {
            coderType: "tuple",
            value: values
          });
        }
        var parts = [];
        coders.forEach(function(coder, index) {
          parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
        });
        var staticSize = 0, dynamicSize = 0;
        parts.forEach(function(part) {
          if (part.dynamic) {
            staticSize += 32;
            dynamicSize += alignSize(part.value.length);
          } else {
            staticSize += alignSize(part.value.length);
          }
        });
        var offset = 0, dynamicOffset = staticSize;
        var data = new Uint8Array(staticSize + dynamicSize);
        parts.forEach(function(part) {
          if (part.dynamic) {
            data.set(uint256Coder.encode(dynamicOffset), offset);
            offset += 32;
            data.set(part.value, dynamicOffset);
            dynamicOffset += alignSize(part.value.length);
          } else {
            data.set(part.value, offset);
            offset += alignSize(part.value.length);
          }
        });
        return data;
      }
      function unpack(coders, data, offset) {
        var baseOffset = offset;
        var consumed = 0;
        var value = [];
        coders.forEach(function(coder) {
          if (coder.dynamic) {
            var dynamicOffset = uint256Coder.decode(data, offset);
            var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
            result.consumed = dynamicOffset.consumed;
          } else {
            var result = coder.decode(data, offset);
          }
          if (result.value != void 0) {
            value.push(result.value);
          }
          offset += result.consumed;
          consumed += result.consumed;
        });
        coders.forEach(function(coder, index) {
          var name2 = coder.localName;
          if (!name2) {
            return;
          }
          if (name2 === "length") {
            name2 = "_length";
          }
          if (value[name2] != null) {
            return;
          }
          value[name2] = value[index];
        });
        return {
          value,
          consumed
        };
      }
      var CoderArray = (
        /** @class */
        (function(_super) {
          __extends(CoderArray2, _super);
          function CoderArray2(coerceFunc, coder, length, localName) {
            var _this = this;
            var type2 = coder.type + "[" + (length >= 0 ? length : "") + "]";
            var dynamic = length === -1 || coder.dynamic;
            _this = _super.call(this, coerceFunc, "array", type2, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
          }
          CoderArray2.prototype.encode = function(value) {
            if (!Array.isArray(value)) {
              errors2.throwError("expected array value", errors2.INVALID_ARGUMENT, {
                arg: this.localName,
                coderType: "array",
                value
              });
            }
            var count = this.length;
            var result = new Uint8Array(0);
            if (count === -1) {
              count = value.length;
              result = uint256Coder.encode(count);
            }
            errors2.checkArgumentCount(count, value.length, "in coder array" + (this.localName ? " " + this.localName : ""));
            var coders = [];
            for (var i = 0; i < value.length; i++) {
              coders.push(this.coder);
            }
            return bytes_1.concat([result, pack(coders, value)]);
          };
          CoderArray2.prototype.decode = function(data, offset) {
            var consumed = 0;
            var count = this.length;
            if (count === -1) {
              try {
                var decodedLength = uint256Coder.decode(data, offset);
              } catch (error2) {
                errors2.throwError("insufficient data for dynamic array length", errors2.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: "array",
                  value: error2.value
                });
              }
              try {
                count = decodedLength.value.toNumber();
              } catch (error2) {
                errors2.throwError("array count too large", errors2.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: "array",
                  value: decodedLength.value.toString()
                });
              }
              consumed += decodedLength.consumed;
              offset += decodedLength.consumed;
            }
            var coders = [];
            for (var i = 0; i < count; i++) {
              coders.push(new CoderAnonymous(this.coder));
            }
            var result = unpack(coders, data, offset);
            result.consumed += consumed;
            result.value = this.coerceFunc(this.type, result.value);
            return result;
          };
          return CoderArray2;
        })(Coder)
      );
      var CoderTuple = (
        /** @class */
        (function(_super) {
          __extends(CoderTuple2, _super);
          function CoderTuple2(coerceFunc, coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function(coder) {
              if (coder.dynamic) {
                dynamic = true;
              }
              types.push(coder.type);
            });
            var type2 = "tuple(" + types.join(",") + ")";
            _this = _super.call(this, coerceFunc, "tuple", type2, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
          }
          CoderTuple2.prototype.encode = function(value) {
            return pack(this.coders, value);
          };
          CoderTuple2.prototype.decode = function(data, offset) {
            var result = unpack(this.coders, data, offset);
            result.value = this.coerceFunc(this.type, result.value);
            return result;
          };
          return CoderTuple2;
        })(Coder)
      );
      function splitNesting(value) {
        var result = [];
        var accum = "";
        var depth = 0;
        for (var offset = 0; offset < value.length; offset++) {
          var c = value[offset];
          if (c === "," && depth === 0) {
            result.push(accum);
            accum = "";
          } else {
            accum += c;
            if (c === "(") {
              depth++;
            } else if (c === ")") {
              depth--;
              if (depth === -1) {
                throw new Error("unbalanced parenthsis");
              }
            }
          }
        }
        result.push(accum);
        return result;
      }
      var paramTypeSimple = {
        address: CoderAddress,
        bool: CoderBoolean,
        string: CoderString,
        bytes: CoderDynamicBytes
      };
      function getTupleParamCoder(coerceFunc, components, localName) {
        if (!components) {
          components = [];
        }
        var coders = [];
        components.forEach(function(component) {
          coders.push(getParamCoder(coerceFunc, component));
        });
        return new CoderTuple(coerceFunc, coders, localName);
      }
      function getParamCoder(coerceFunc, param) {
        var coder = paramTypeSimple[param.type];
        if (coder) {
          return new coder(coerceFunc, param.name);
        }
        var match = param.type.match(paramTypeNumber);
        if (match) {
          var size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            errors2.throwError("invalid " + match[1] + " bit length", errors2.INVALID_ARGUMENT, {
              arg: "param",
              value: param
            });
          }
          return new CoderNumber(coerceFunc, size / 8, match[1] === "int", param.name);
        }
        var match = param.type.match(paramTypeBytes);
        if (match) {
          var size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            errors2.throwError("invalid bytes length", errors2.INVALID_ARGUMENT, {
              arg: "param",
              value: param
            });
          }
          return new CoderFixedBytes(coerceFunc, size, param.name);
        }
        var match = param.type.match(paramTypeArray);
        if (match) {
          var size = parseInt(match[2] || "-1");
          param = properties_1.jsonCopy(param);
          param.type = match[1];
          return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
        }
        if (param.type.substring(0, 5) === "tuple") {
          return getTupleParamCoder(coerceFunc, param.components, param.name);
        }
        if (param.type === "") {
          return new CoderNull(coerceFunc, param.name);
        }
        errors2.throwError("invalid type", errors2.INVALID_ARGUMENT, {
          arg: "type",
          value: param.type
        });
        return null;
      }
      var AbiCoder = (
        /** @class */
        (function() {
          function AbiCoder2(coerceFunc) {
            errors2.checkNew(this, AbiCoder2);
            if (!coerceFunc) {
              coerceFunc = exports.defaultCoerceFunc;
            }
            properties_1.defineReadOnly(this, "coerceFunc", coerceFunc);
          }
          AbiCoder2.prototype.encode = function(types, values) {
            if (types.length !== values.length) {
              errors2.throwError("types/values length mismatch", errors2.INVALID_ARGUMENT, {
                count: { types: types.length, values: values.length },
                value: { types, values }
              });
            }
            var coders = [];
            types.forEach(function(type2) {
              var typeObject = null;
              if (typeof type2 === "string") {
                typeObject = parseParam(type2);
              } else {
                typeObject = type2;
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, "_").encode(values));
          };
          AbiCoder2.prototype.decode = function(types, data) {
            var coders = [];
            types.forEach(function(type2) {
              var typeObject = null;
              if (typeof type2 === "string") {
                typeObject = parseParam(type2);
              } else {
                typeObject = properties_1.jsonCopy(type2);
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
            }, this);
            return new CoderTuple(this.coerceFunc, coders, "_").decode(bytes_1.arrayify(data), 0).value;
          };
          return AbiCoder2;
        })()
      );
      exports.AbiCoder = AbiCoder;
      exports.defaultAbiCoder = new AbiCoder();
    }
  });

  // node_modules/web3-eth-abi/src/index.js
  var require_src5 = __commonJS({
    "node_modules/web3-eth-abi/src/index.js"(exports, module) {
      init_process();
      init_buffer();
      var _ = require_underscore();
      var utils = require_src4();
      var EthersAbi = require_abi_coder().AbiCoder;
      var ethersAbiCoder = new EthersAbi(function(type2, value) {
        if (type2.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== "BN")) {
          return value.toString();
        }
        return value;
      });
      function Result() {
      }
      var ABICoder = function() {
      };
      ABICoder.prototype.encodeFunctionSignature = function(functionName) {
        if (_.isObject(functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
        }
        return utils.sha3(functionName).slice(0, 10);
      };
      ABICoder.prototype.encodeEventSignature = function(functionName) {
        if (_.isObject(functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
        }
        return utils.sha3(functionName);
      };
      ABICoder.prototype.encodeParameter = function(type2, param) {
        return this.encodeParameters([type2], [param]);
      };
      ABICoder.prototype.encodeParameters = function(types, params) {
        return ethersAbiCoder.encode(
          this.mapTypes(types),
          params.map(function(param) {
            if (utils.isBN(param) || utils.isBigNumber(param)) {
              return param.toString(10);
            }
            return param;
          })
        );
      };
      ABICoder.prototype.mapTypes = function(types) {
        var self2 = this;
        var mappedTypes = [];
        types.forEach(function(type2) {
          if (self2.isSimplifiedStructFormat(type2)) {
            var structName = Object.keys(type2)[0];
            mappedTypes.push(
              Object.assign(
                self2.mapStructNameAndType(structName),
                {
                  components: self2.mapStructToCoderFormat(type2[structName])
                }
              )
            );
            return;
          }
          mappedTypes.push(type2);
        });
        return mappedTypes;
      };
      ABICoder.prototype.isSimplifiedStructFormat = function(type2) {
        return typeof type2 === "object" && typeof type2.components === "undefined" && typeof type2.name === "undefined";
      };
      ABICoder.prototype.mapStructNameAndType = function(structName) {
        var type2 = "tuple";
        if (structName.indexOf("[]") > -1) {
          type2 = "tuple[]";
          structName = structName.slice(0, -2);
        }
        return { type: type2, name: structName };
      };
      ABICoder.prototype.mapStructToCoderFormat = function(struct) {
        var self2 = this;
        var components = [];
        Object.keys(struct).forEach(function(key) {
          if (typeof struct[key] === "object") {
            components.push(
              Object.assign(
                self2.mapStructNameAndType(key),
                {
                  components: self2.mapStructToCoderFormat(struct[key])
                }
              )
            );
            return;
          }
          components.push({
            name: key,
            type: struct[key]
          });
        });
        return components;
      };
      ABICoder.prototype.encodeFunctionCall = function(jsonInterface, params) {
        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace("0x", "");
      };
      ABICoder.prototype.decodeParameter = function(type2, bytes) {
        return this.decodeParameters([type2], bytes)[0];
      };
      ABICoder.prototype.decodeParameters = function(outputs, bytes) {
        if (outputs.length > 0 && (!bytes || bytes === "0x" || bytes === "0X")) {
          throw new Error(
            "Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced."
          );
        }
        var res = ethersAbiCoder.decode(this.mapTypes(outputs), "0x" + bytes.replace(/0x/i, ""));
        var returnValue = new Result();
        returnValue.__length__ = 0;
        outputs.forEach(function(output, i) {
          var decodedValue = res[returnValue.__length__];
          decodedValue = decodedValue === "0x" ? null : decodedValue;
          returnValue[i] = decodedValue;
          if (_.isObject(output) && output.name) {
            returnValue[output.name] = decodedValue;
          }
          returnValue.__length__++;
        });
        return returnValue;
      };
      ABICoder.prototype.decodeLog = function(inputs, data, topics) {
        var _this = this;
        topics = _.isArray(topics) ? topics : [topics];
        data = data || "";
        var notIndexedInputs = [];
        var indexedParams = [];
        var topicCount = 0;
        inputs.forEach(function(input, i) {
          if (input.indexed) {
            indexedParams[i] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function(staticType) {
              return input.type.indexOf(staticType) !== -1;
            }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];
            topicCount++;
          } else {
            notIndexedInputs[i] = input;
          }
        });
        var nonIndexedData = data;
        var notIndexedParams = nonIndexedData ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];
        var returnValue = new Result();
        returnValue.__length__ = 0;
        inputs.forEach(function(res, i) {
          returnValue[i] = res.type === "string" ? "" : null;
          if (typeof notIndexedParams[i] !== "undefined") {
            returnValue[i] = notIndexedParams[i];
          }
          if (typeof indexedParams[i] !== "undefined") {
            returnValue[i] = indexedParams[i];
          }
          if (res.name) {
            returnValue[res.name] = returnValue[i];
          }
          returnValue.__length__++;
        });
        return returnValue;
      };
      var coder = new ABICoder();
      module.exports = coder;
    }
  });

  // node_modules/abi-decoder/index.js
  var require_abi_decoder = __commonJS({
    "node_modules/abi-decoder/index.js"(exports, module) {
      init_process();
      init_buffer();
      var { sha3, BN } = require_src4();
      var abiCoder = require_src5();
      var state = {
        savedABIs: [],
        methodIDs: {},
        keepNonDecodedLogs: false
      };
      function _getABIs() {
        return state.savedABIs;
      }
      function _typeToString(input) {
        if (input.type === "tuple") {
          return "(" + input.components.map(_typeToString).join(",") + ")";
        }
        return input.type;
      }
      function _addABI(abiArray) {
        if (Array.isArray(abiArray)) {
          abiArray.map(function(abi) {
            if (abi.name) {
              const signature = sha3(
                abi.name + "(" + abi.inputs.map(_typeToString).join(",") + ")"
              );
              if (abi.type === "event") {
                state.methodIDs[signature.slice(2)] = abi;
              } else {
                state.methodIDs[signature.slice(2, 10)] = abi;
              }
            }
          });
          state.savedABIs = state.savedABIs.concat(abiArray);
        } else {
          throw new Error("Expected ABI array, got " + typeof abiArray);
        }
      }
      function _removeABI(abiArray) {
        if (Array.isArray(abiArray)) {
          abiArray.map(function(abi) {
            if (abi.name) {
              const signature = sha3(
                abi.name + "(" + abi.inputs.map(function(input) {
                  return input.type;
                }).join(",") + ")"
              );
              if (abi.type === "event") {
                if (state.methodIDs[signature.slice(2)]) {
                  delete state.methodIDs[signature.slice(2)];
                }
              } else {
                if (state.methodIDs[signature.slice(2, 10)]) {
                  delete state.methodIDs[signature.slice(2, 10)];
                }
              }
            }
          });
        } else {
          throw new Error("Expected ABI array, got " + typeof abiArray);
        }
      }
      function _getMethodIDs() {
        return state.methodIDs;
      }
      function _decodeMethod(data) {
        const methodID = data.slice(2, 10);
        const abiItem = state.methodIDs[methodID];
        if (abiItem) {
          let decoded = abiCoder.decodeParameters(abiItem.inputs, data.slice(10));
          let retData = {
            name: abiItem.name,
            params: []
          };
          for (let i = 0; i < decoded.__length__; i++) {
            let param = decoded[i];
            let parsedParam = param;
            const isUint = abiItem.inputs[i].type.indexOf("uint") === 0;
            const isInt = abiItem.inputs[i].type.indexOf("int") === 0;
            const isAddress = abiItem.inputs[i].type.indexOf("address") === 0;
            if (isUint || isInt) {
              const isArray4 = Array.isArray(param);
              if (isArray4) {
                parsedParam = param.map((val) => new BN(val).toString());
              } else {
                parsedParam = new BN(param).toString();
              }
            }
            if (isAddress) {
              const isArray4 = Array.isArray(param);
              if (isArray4) {
                parsedParam = param.map((_) => _.toLowerCase());
              } else {
                parsedParam = param.toLowerCase();
              }
            }
            retData.params.push({
              name: abiItem.inputs[i].name,
              value: parsedParam,
              type: abiItem.inputs[i].type
            });
          }
          return retData;
        }
      }
      function _decodeLogs(logs) {
        return logs.filter((log2) => log2.topics.length > 0).map((logItem) => {
          const methodID = logItem.topics[0].slice(2);
          const method = state.methodIDs[methodID];
          if (method) {
            const logData = logItem.data;
            let decodedParams = [];
            let dataIndex = 0;
            let topicsIndex = 1;
            let dataTypes = [];
            method.inputs.map(function(input) {
              if (!input.indexed) {
                dataTypes.push(input.type);
              }
            });
            const decodedData = abiCoder.decodeParameters(
              dataTypes,
              logData.slice(2)
            );
            method.inputs.map(function(param) {
              let decodedP = {
                name: param.name,
                type: param.type
              };
              if (param.indexed) {
                decodedP.value = logItem.topics[topicsIndex];
                topicsIndex++;
              } else {
                decodedP.value = decodedData[dataIndex];
                dataIndex++;
              }
              if (param.type === "address") {
                decodedP.value = decodedP.value.toLowerCase();
                if (decodedP.value.length > 42) {
                  let toRemove = decodedP.value.length - 42;
                  let temp = decodedP.value.split("");
                  temp.splice(2, toRemove);
                  decodedP.value = temp.join("");
                }
              }
              if (param.type === "uint256" || param.type === "uint8" || param.type === "int") {
                if (typeof decodedP.value === "string" && decodedP.value.startsWith("0x")) {
                  decodedP.value = new BN(decodedP.value.slice(2), 16).toString(10);
                } else {
                  decodedP.value = new BN(decodedP.value).toString(10);
                }
              }
              decodedParams.push(decodedP);
            });
            return {
              name: method.name,
              events: decodedParams,
              address: logItem.address
            };
          }
        }).filter((decoded) => state.keepNonDecodedLogs || decoded);
      }
      function _keepNonDecodedLogs() {
        state.keepNonDecodedLogs = true;
      }
      function _discardNonDecodedLogs() {
        state.keepNonDecodedLogs = false;
      }
      module.exports = {
        getABIs: _getABIs,
        addABI: _addABI,
        getMethodIDs: _getMethodIDs,
        decodeMethod: _decodeMethod,
        decodeLogs: _decodeLogs,
        removeABI: _removeABI,
        keepNonDecodedLogs: _keepNonDecodedLogs,
        discardNonDecodedLogs: _discardNonDecodedLogs
      };
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IRelayHub.json
  var require_IRelayHub = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IRelayHub.json"(exports, module) {
      module.exports = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "paymaster", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "Deposited", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "fromBlock", type: "uint256" }], name: "HubDeprecated", type: "event" }, { anonymous: false, inputs: [{ components: [{ internalType: "uint256", name: "maxWorkerCount", type: "uint256" }, { internalType: "uint256", name: "gasReserve", type: "uint256" }, { internalType: "uint256", name: "postOverhead", type: "uint256" }, { internalType: "uint256", name: "gasOverhead", type: "uint256" }, { internalType: "uint256", name: "maximumRecipientDeposit", type: "uint256" }, { internalType: "uint256", name: "minimumUnstakeDelay", type: "uint256" }, { internalType: "uint256", name: "minimumStake", type: "uint256" }, { internalType: "uint256", name: "dataGasCostPerByte", type: "uint256" }, { internalType: "uint256", name: "externalCallDataCostOverhead", type: "uint256" }], indexed: false, internalType: "struct IRelayHub.RelayHubConfig", name: "config", type: "tuple" }], name: "RelayHubConfigured", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: false, internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { indexed: false, internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { indexed: false, internalType: "string", name: "relayUrl", type: "string" }], name: "RelayServerRegistered", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: false, internalType: "address[]", name: "newRelayWorkers", type: "address[]" }, { indexed: false, internalType: "uint256", name: "workersCount", type: "uint256" }], name: "RelayWorkersAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "paymaster", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "address", name: "relayWorker", type: "address" }, { indexed: false, internalType: "bytes4", name: "selector", type: "bytes4" }, { indexed: false, internalType: "uint256", name: "innerGasUsed", type: "uint256" }, { indexed: false, internalType: "bytes", name: "reason", type: "bytes" }], name: "TransactionRejectedByPaymaster", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "relayWorker", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "address", name: "paymaster", type: "address" }, { indexed: false, internalType: "bytes4", name: "selector", type: "bytes4" }, { indexed: false, internalType: "enum IRelayHub.RelayCallStatus", name: "status", type: "uint8" }, { indexed: false, internalType: "uint256", name: "charge", type: "uint256" }], name: "TransactionRelayed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "enum IRelayHub.RelayCallStatus", name: "status", type: "uint8" }, { indexed: false, internalType: "bytes", name: "returnValue", type: "bytes" }], name: "TransactionResult", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "dest", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "Withdrawn", type: "event" }, { inputs: [{ internalType: "address[]", name: "newRelayWorkers", type: "address[]" }], name: "addRelayWorkers", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { internalType: "string", name: "url", type: "string" }], name: "registerRelayServer", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }], name: "depositFor", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "address payable", name: "dest", type: "address" }], name: "withdraw", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "maxAcceptanceBudget", type: "uint256" }, { components: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }, { internalType: "uint256", name: "validUntil", type: "uint256" }], internalType: "struct IForwarder.ForwardRequest", name: "request", type: "tuple" }, { components: [{ internalType: "uint256", name: "gasPrice", type: "uint256" }, { internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { internalType: "address", name: "relayWorker", type: "address" }, { internalType: "address", name: "paymaster", type: "address" }, { internalType: "address", name: "forwarder", type: "address" }, { internalType: "bytes", name: "paymasterData", type: "bytes" }, { internalType: "uint256", name: "clientId", type: "uint256" }], internalType: "struct GsnTypes.RelayData", name: "relayData", type: "tuple" }], internalType: "struct GsnTypes.RelayRequest", name: "relayRequest", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }, { internalType: "bytes", name: "approvalData", type: "bytes" }, { internalType: "uint256", name: "externalGasLimit", type: "uint256" }], name: "relayCall", outputs: [{ internalType: "bool", name: "paymasterAccepted", type: "bool" }, { internalType: "bytes", name: "returnValue", type: "bytes" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayWorker", type: "address" }, { internalType: "address payable", name: "beneficiary", type: "address" }], name: "penalize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "maxWorkerCount", type: "uint256" }, { internalType: "uint256", name: "gasReserve", type: "uint256" }, { internalType: "uint256", name: "postOverhead", type: "uint256" }, { internalType: "uint256", name: "gasOverhead", type: "uint256" }, { internalType: "uint256", name: "maximumRecipientDeposit", type: "uint256" }, { internalType: "uint256", name: "minimumUnstakeDelay", type: "uint256" }, { internalType: "uint256", name: "minimumStake", type: "uint256" }, { internalType: "uint256", name: "dataGasCostPerByte", type: "uint256" }, { internalType: "uint256", name: "externalCallDataCostOverhead", type: "uint256" }], internalType: "struct IRelayHub.RelayHubConfig", name: "_config", type: "tuple" }], name: "setConfiguration", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "fromBlock", type: "uint256" }], name: "deprecateHub", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "gasUsed", type: "uint256" }, { components: [{ internalType: "uint256", name: "gasPrice", type: "uint256" }, { internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { internalType: "address", name: "relayWorker", type: "address" }, { internalType: "address", name: "paymaster", type: "address" }, { internalType: "address", name: "forwarder", type: "address" }, { internalType: "bytes", name: "paymasterData", type: "bytes" }, { internalType: "uint256", name: "clientId", type: "uint256" }], internalType: "struct GsnTypes.RelayData", name: "relayData", type: "tuple" }], name: "calculateCharge", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getConfiguration", outputs: [{ components: [{ internalType: "uint256", name: "maxWorkerCount", type: "uint256" }, { internalType: "uint256", name: "gasReserve", type: "uint256" }, { internalType: "uint256", name: "postOverhead", type: "uint256" }, { internalType: "uint256", name: "gasOverhead", type: "uint256" }, { internalType: "uint256", name: "maximumRecipientDeposit", type: "uint256" }, { internalType: "uint256", name: "minimumUnstakeDelay", type: "uint256" }, { internalType: "uint256", name: "minimumStake", type: "uint256" }, { internalType: "uint256", name: "dataGasCostPerByte", type: "uint256" }, { internalType: "uint256", name: "externalCallDataCostOverhead", type: "uint256" }], internalType: "struct IRelayHub.RelayHubConfig", name: "config", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "length", type: "uint256" }], name: "calldataGasCost", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "worker", type: "address" }], name: "workerToManager", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "manager", type: "address" }], name: "workerCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "stakeManager", outputs: [{ internalType: "contract IStakeManager", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "penalizer", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }], name: "isRelayManagerStaked", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isDeprecated", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "deprecationBlock", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "versionHub", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
    }
  });

  // node-modules-polyfills:events
  var events_exports = {};
  __export(events_exports, {
    EventEmitter: () => EventEmitter,
    default: () => events_default
  });
  function EventHandlers() {
  }
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  function $getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  function emitNone(handler, isFn, self2) {
    if (isFn)
      handler.call(self2);
    else {
      var len = handler.length;
      var listeners2 = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners2[i].call(self2);
    }
  }
  function emitOne(handler, isFn, self2, arg1) {
    if (isFn)
      handler.call(self2, arg1);
    else {
      var len = handler.length;
      var listeners2 = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners2[i].call(self2, arg1);
    }
  }
  function emitTwo(handler, isFn, self2, arg1, arg2) {
    if (isFn)
      handler.call(self2, arg1, arg2);
    else {
      var len = handler.length;
      var listeners2 = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners2[i].call(self2, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self2, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self2, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners2 = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners2[i].call(self2, arg1, arg2, arg3);
    }
  }
  function emitMany(handler, isFn, self2, args) {
    if (isFn)
      handler.apply(self2, args);
    else {
      var len = handler.length;
      var listeners2 = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners2[i].apply(self2, args);
    }
  }
  function _addListener(target, type2, listener, prepend) {
    var m;
    var events;
    var existing;
    if (typeof listener !== "function")
      throw new TypeError('"listener" argument must be a function');
    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      if (events.newListener) {
        target.emit(
          "newListener",
          type2,
          listener.listener ? listener.listener : listener
        );
        events = target._events;
      }
      existing = events[type2];
    }
    if (!existing) {
      existing = events[type2] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events[type2] = prepend ? [listener, existing] : [existing, listener];
      } else {
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + type2 + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type2;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }
    return target;
  }
  function emitWarning(e) {
    typeof console.warn === "function" ? console.warn(e) : console.log(e);
  }
  function _onceWrap(target, type2, listener) {
    var fired = false;
    function g() {
      target.removeListener(type2, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }
  function listenerCount(type2) {
    var events = this._events;
    if (events) {
      var evlistener = events[type2];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }
    return 0;
  }
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }
  function arrayClone(arr, i) {
    var copy3 = new Array(i);
    while (i--)
      copy3[i] = arr[i];
    return copy3;
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }
  var domain, events_default;
  var init_events = __esm({
    "node-modules-polyfills:events"() {
      "use strict";
      init_process();
      init_buffer();
      EventHandlers.prototype = /* @__PURE__ */ Object.create(null);
      events_default = EventEmitter;
      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.usingDomains = false;
      EventEmitter.prototype.domain = void 0;
      EventEmitter.prototype._events = void 0;
      EventEmitter.prototype._maxListeners = void 0;
      EventEmitter.defaultMaxListeners = 10;
      EventEmitter.init = function() {
        this.domain = null;
        if (EventEmitter.usingDomains) {
          if (domain.active && !(this instanceof domain.Domain)) {
            this.domain = domain.active;
          }
        }
        if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || isNaN(n))
          throw new TypeError('"n" argument must be a positive number');
        this._maxListeners = n;
        return this;
      };
      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return $getMaxListeners(this);
      };
      EventEmitter.prototype.emit = function emit2(type2) {
        var er, handler, len, args, i, events, domain2;
        var needDomainExit = false;
        var doError = type2 === "error";
        events = this._events;
        if (events)
          doError = doError && events.error == null;
        else if (!doError)
          return false;
        domain2 = this.domain;
        if (doError) {
          er = arguments[1];
          if (domain2) {
            if (!er)
              er = new Error('Uncaught, unspecified "error" event');
            er.domainEmitter = this;
            er.domain = domain2;
            er.domainThrown = false;
            domain2.emit("error", er);
          } else if (er instanceof Error) {
            throw er;
          } else {
            var err2 = new Error('Uncaught, unspecified "error" event. (' + er + ")");
            err2.context = er;
            throw err2;
          }
          return false;
        }
        handler = events[type2];
        if (!handler)
          return false;
        var isFn = typeof handler === "function";
        len = arguments.length;
        switch (len) {
          // fast cases
          case 1:
            emitNone(handler, isFn, this);
            break;
          case 2:
            emitOne(handler, isFn, this, arguments[1]);
            break;
          case 3:
            emitTwo(handler, isFn, this, arguments[1], arguments[2]);
            break;
          case 4:
            emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
            break;
          // slower
          default:
            args = new Array(len - 1);
            for (i = 1; i < len; i++)
              args[i - 1] = arguments[i];
            emitMany(handler, isFn, this, args);
        }
        if (needDomainExit)
          domain2.exit();
        return true;
      };
      EventEmitter.prototype.addListener = function addListener2(type2, listener) {
        return _addListener(this, type2, listener, false);
      };
      EventEmitter.prototype.on = EventEmitter.prototype.addListener;
      EventEmitter.prototype.prependListener = function prependListener(type2, listener) {
        return _addListener(this, type2, listener, true);
      };
      EventEmitter.prototype.once = function once2(type2, listener) {
        if (typeof listener !== "function")
          throw new TypeError('"listener" argument must be a function');
        this.on(type2, _onceWrap(this, type2, listener));
        return this;
      };
      EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
        if (typeof listener !== "function")
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type2, _onceWrap(this, type2, listener));
        return this;
      };
      EventEmitter.prototype.removeListener = function removeListener2(type2, listener) {
        var list, events, position, i, originalListener;
        if (typeof listener !== "function")
          throw new TypeError('"listener" argument must be a function');
        events = this._events;
        if (!events)
          return this;
        list = events[type2];
        if (!list)
          return this;
        if (list === listener || list.listener && list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type2];
            if (events.removeListener)
              this.emit("removeListener", type2, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length; i-- > 0; ) {
            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (list.length === 1) {
            list[0] = void 0;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type2];
            }
          } else {
            spliceOne(list, position);
          }
          if (events.removeListener)
            this.emit("removeListener", type2, originalListener || listener);
        }
        return this;
      };
      EventEmitter.prototype.removeAllListeners = function removeAllListeners2(type2) {
        var listeners2, events;
        events = this._events;
        if (!events)
          return this;
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type2]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type2];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys2 = Object.keys(events);
          for (var i = 0, key; i < keys2.length; ++i) {
            key = keys2[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }
        listeners2 = events[type2];
        if (typeof listeners2 === "function") {
          this.removeListener(type2, listeners2);
        } else if (listeners2) {
          do {
            this.removeListener(type2, listeners2[listeners2.length - 1]);
          } while (listeners2[0]);
        }
        return this;
      };
      EventEmitter.prototype.listeners = function listeners(type2) {
        var evlistener;
        var ret;
        var events = this._events;
        if (!events)
          ret = [];
        else {
          evlistener = events[type2];
          if (!evlistener)
            ret = [];
          else if (typeof evlistener === "function")
            ret = [evlistener.listener || evlistener];
          else
            ret = unwrapListeners(evlistener);
        }
        return ret;
      };
      EventEmitter.listenerCount = function(emitter, type2) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type2);
        } else {
          return listenerCount.call(emitter, type2);
        }
      };
      EventEmitter.prototype.listenerCount = listenerCount;
      EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
      };
    }
  });

  // node-modules-polyfills-commonjs:events
  var require_events = __commonJS({
    "node-modules-polyfills-commonjs:events"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_events(), __toCommonJS(events_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn5 = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert3(false, "Invalid character in " + string);
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              b = c - 49 + 10;
            } else if (c >= 17) {
              b = c - 17 + 10;
            } else {
              b = c;
            }
            assert3(c >= 0 && b < mul, "Invalid character");
            r += b;
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
          } catch (e) {
            BN.prototype.inspect = inspect4;
          }
        } else {
          BN.prototype.inspect = inspect4;
        }
        function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modrn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16, 2);
        };
        if (Buffer4) {
          BN.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer4, endian, length);
          };
        }
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength3);
          return res;
        };
        BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength3) {
          var position = 0;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength3) {
          var position = res.length - 1;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off3] >>> wbit & 1;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this._strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this._strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this._strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this._strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/rlp/dist.browser/index.js
  var require_dist2 = __commonJS({
    "node_modules/rlp/dist.browser/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getLength = exports.decode = exports.encode = void 0;
      var bn_js_1 = __importDefault(require_bn5());
      function encode2(input) {
        if (Array.isArray(input)) {
          var output = [];
          for (var i = 0; i < input.length; i++) {
            output.push(encode2(input[i]));
          }
          var buf = Buffer2.concat(output);
          return Buffer2.concat([encodeLength(buf.length, 192), buf]);
        } else {
          var inputBuf = toBuffer(input);
          return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer2.concat([encodeLength(inputBuf.length, 128), inputBuf]);
        }
      }
      exports.encode = encode2;
      function safeParseInt(v, base2) {
        if (v[0] === "0" && v[1] === "0") {
          throw new Error("invalid RLP: extra zeros");
        }
        return parseInt(v, base2);
      }
      function encodeLength(len, offset) {
        if (len < 56) {
          return Buffer2.from([len + offset]);
        } else {
          var hexLength = intToHex(len);
          var lLength = hexLength.length / 2;
          var firstByte = intToHex(offset + 55 + lLength);
          return Buffer2.from(firstByte + hexLength, "hex");
        }
      }
      function decode(input, stream) {
        if (stream === void 0) {
          stream = false;
        }
        if (!input || input.length === 0) {
          return Buffer2.from([]);
        }
        var inputBuffer = toBuffer(input);
        var decoded = _decode(inputBuffer);
        if (stream) {
          return decoded;
        }
        if (decoded.remainder.length !== 0) {
          throw new Error("invalid remainder");
        }
        return decoded.data;
      }
      exports.decode = decode;
      function getLength(input) {
        if (!input || input.length === 0) {
          return Buffer2.from([]);
        }
        var inputBuffer = toBuffer(input);
        var firstByte = inputBuffer[0];
        if (firstByte <= 127) {
          return inputBuffer.length;
        } else if (firstByte <= 183) {
          return firstByte - 127;
        } else if (firstByte <= 191) {
          return firstByte - 182;
        } else if (firstByte <= 247) {
          return firstByte - 191;
        } else {
          var llength = firstByte - 246;
          var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
          return llength + length_1;
        }
      }
      exports.getLength = getLength;
      function _decode(input) {
        var length, llength, data, innerRemainder, d;
        var decoded = [];
        var firstByte = input[0];
        if (firstByte <= 127) {
          return {
            data: input.slice(0, 1),
            remainder: input.slice(1)
          };
        } else if (firstByte <= 183) {
          length = firstByte - 127;
          if (firstByte === 128) {
            data = Buffer2.from([]);
          } else {
            data = input.slice(1, length);
          }
          if (length === 2 && data[0] < 128) {
            throw new Error("invalid rlp encoding: byte must be less 0x80");
          }
          return {
            data,
            remainder: input.slice(length)
          };
        } else if (firstByte <= 191) {
          llength = firstByte - 182;
          if (input.length - 1 < llength) {
            throw new Error("invalid RLP: not enough bytes for string length");
          }
          length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
          if (length <= 55) {
            throw new Error("invalid RLP: expected string length to be greater than 55");
          }
          data = input.slice(llength, length + llength);
          if (data.length < length) {
            throw new Error("invalid RLP: not enough bytes for string");
          }
          return {
            data,
            remainder: input.slice(length + llength)
          };
        } else if (firstByte <= 247) {
          length = firstByte - 191;
          innerRemainder = input.slice(1, length);
          while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
          }
          return {
            data: decoded,
            remainder: input.slice(length)
          };
        } else {
          llength = firstByte - 246;
          length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
          var totalLength = llength + length;
          if (totalLength > input.length) {
            throw new Error("invalid rlp: total length is larger than the data");
          }
          innerRemainder = input.slice(llength, totalLength);
          if (innerRemainder.length === 0) {
            throw new Error("invalid rlp, List has a invalid length");
          }
          while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
          }
          return {
            data: decoded,
            remainder: input.slice(totalLength)
          };
        }
      }
      function isHexPrefixed(str) {
        return str.slice(0, 2) === "0x";
      }
      function stripHexPrefix(str) {
        if (typeof str !== "string") {
          return str;
        }
        return isHexPrefixed(str) ? str.slice(2) : str;
      }
      function intToHex(integer) {
        if (integer < 0) {
          throw new Error("Invalid integer as argument, must be unsigned!");
        }
        var hex = integer.toString(16);
        return hex.length % 2 ? "0" + hex : hex;
      }
      function padToEven(a) {
        return a.length % 2 ? "0" + a : a;
      }
      function intToBuffer(integer) {
        var hex = intToHex(integer);
        return Buffer2.from(hex, "hex");
      }
      function toBuffer(v) {
        if (!Buffer2.isBuffer(v)) {
          if (typeof v === "string") {
            if (isHexPrefixed(v)) {
              return Buffer2.from(padToEven(stripHexPrefix(v)), "hex");
            } else {
              return Buffer2.from(v);
            }
          } else if (typeof v === "number" || typeof v === "bigint") {
            if (!v) {
              return Buffer2.from([]);
            } else {
              return intToBuffer(v);
            }
          } else if (v === null || v === void 0) {
            return Buffer2.from([]);
          } else if (v instanceof Uint8Array) {
            return Buffer2.from(v);
          } else if (bn_js_1.default.isBN(v)) {
            return Buffer2.from(v.toArray());
          } else {
            throw new Error("invalid type");
          }
        }
        return v;
      }
    }
  });

  // node_modules/ethereumjs-util/dist.browser/externals.js
  var require_externals = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/externals.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      }) : (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      }));
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }) : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.rlp = exports.BN = void 0;
      var bn_js_1 = __importDefault(require_bn5());
      exports.BN = bn_js_1.default;
      var rlp = __importStar(require_dist2());
      exports.rlp = rlp;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/constants.js
  var require_constants = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/constants.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
      var buffer_1 = require_buffer();
      var externals_1 = require_externals();
      exports.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
      exports.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
      exports.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
      exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
      exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
      exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
      exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
      exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
      exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
    }
  });

  // node-modules-polyfills:process
  function defaultSetTimout2() {
    throw new Error("setTimeout has not been defined");
  }
  function defaultClearTimeout2() {
    throw new Error("clearTimeout has not been defined");
  }
  function runTimeout2(fun) {
    if (cachedSetTimeout2 === setTimeout) {
      return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout2 === defaultSetTimout2 || !cachedSetTimeout2) && setTimeout) {
      cachedSetTimeout2 = setTimeout;
      return setTimeout(fun, 0);
    }
    try {
      return cachedSetTimeout2(fun, 0);
    } catch (e) {
      try {
        return cachedSetTimeout2.call(null, fun, 0);
      } catch (e2) {
        return cachedSetTimeout2.call(this, fun, 0);
      }
    }
  }
  function runClearTimeout2(marker) {
    if (cachedClearTimeout2 === clearTimeout) {
      return clearTimeout(marker);
    }
    if ((cachedClearTimeout2 === defaultClearTimeout2 || !cachedClearTimeout2) && clearTimeout) {
      cachedClearTimeout2 = clearTimeout;
      return clearTimeout(marker);
    }
    try {
      return cachedClearTimeout2(marker);
    } catch (e) {
      try {
        return cachedClearTimeout2.call(null, marker);
      } catch (e2) {
        return cachedClearTimeout2.call(this, marker);
      }
    }
  }
  function cleanUpNextTick2() {
    if (!draining2 || !currentQueue2) {
      return;
    }
    draining2 = false;
    if (currentQueue2.length) {
      queue2 = currentQueue2.concat(queue2);
    } else {
      queueIndex2 = -1;
    }
    if (queue2.length) {
      drainQueue2();
    }
  }
  function drainQueue2() {
    if (draining2) {
      return;
    }
    var timeout = runTimeout2(cleanUpNextTick2);
    draining2 = true;
    var len = queue2.length;
    while (len) {
      currentQueue2 = queue2;
      queue2 = [];
      while (++queueIndex2 < len) {
        if (currentQueue2) {
          currentQueue2[queueIndex2].run();
        }
      }
      queueIndex2 = -1;
      len = queue2.length;
    }
    currentQueue2 = null;
    draining2 = false;
    runClearTimeout2(timeout);
  }
  function nextTick2(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue2.push(new Item2(fun, args));
    if (queue2.length === 1 && !draining2) {
      runTimeout2(drainQueue2);
    }
  }
  function Item2(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  function noop2() {
  }
  function binding2(name2) {
    throw new Error("process.binding is not supported");
  }
  function cwd2() {
    return "/";
  }
  function chdir2(dir) {
    throw new Error("process.chdir is not supported");
  }
  function umask2() {
    return 0;
  }
  function hrtime2(previousTimestamp) {
    var clocktime = performanceNow2.call(performance2) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds < 0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds, nanoseconds];
  }
  function uptime2() {
    var currentTime = /* @__PURE__ */ new Date();
    var dif = currentTime - startTime2;
    return dif / 1e3;
  }
  var cachedSetTimeout2, cachedClearTimeout2, queue2, draining2, currentQueue2, queueIndex2, title2, platform2, browser2, env2, argv2, version2, versions2, release2, config2, on2, addListener3, once3, off2, removeListener3, removeAllListeners3, emit3, performance2, performanceNow2, startTime2, browser$1, process_default;
  var init_process2 = __esm({
    "node-modules-polyfills:process"() {
      init_process();
      init_buffer();
      cachedSetTimeout2 = defaultSetTimout2;
      cachedClearTimeout2 = defaultClearTimeout2;
      if (typeof window.setTimeout === "function") {
        cachedSetTimeout2 = setTimeout;
      }
      if (typeof window.clearTimeout === "function") {
        cachedClearTimeout2 = clearTimeout;
      }
      queue2 = [];
      draining2 = false;
      queueIndex2 = -1;
      Item2.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      title2 = "browser";
      platform2 = "browser";
      browser2 = true;
      env2 = {};
      argv2 = [];
      version2 = "";
      versions2 = {};
      release2 = {};
      config2 = {};
      on2 = noop2;
      addListener3 = noop2;
      once3 = noop2;
      off2 = noop2;
      removeListener3 = noop2;
      removeAllListeners3 = noop2;
      emit3 = noop2;
      performance2 = window.performance || {};
      performanceNow2 = performance2.now || performance2.mozNow || performance2.msNow || performance2.oNow || performance2.webkitNow || function() {
        return (/* @__PURE__ */ new Date()).getTime();
      };
      startTime2 = /* @__PURE__ */ new Date();
      browser$1 = {
        nextTick: nextTick2,
        title: title2,
        browser: browser2,
        env: env2,
        argv: argv2,
        version: version2,
        versions: versions2,
        on: on2,
        addListener: addListener3,
        once: once3,
        off: off2,
        removeListener: removeListener3,
        removeAllListeners: removeAllListeners3,
        emit: emit3,
        binding: binding2,
        cwd: cwd2,
        chdir: chdir2,
        umask: umask2,
        hrtime: hrtime2,
        platform: platform2,
        release: release2,
        config: config2,
        uptime: uptime2
      };
      process_default = browser$1;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js
  var inherits, inherits_default;
  var init_inherits = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js"() {
      init_process();
      init_buffer();
      if (typeof Object.create === "function") {
        inherits = function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        inherits = function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      inherits_default = inherits;
    }
  });

  // node-modules-polyfills:util
  var util_exports = {};
  __export(util_exports, {
    _extend: () => _extend,
    debuglog: () => debuglog,
    default: () => util_default,
    deprecate: () => deprecate,
    format: () => format,
    inherits: () => inherits_default,
    inspect: () => inspect2,
    isArray: () => isArray2,
    isBoolean: () => isBoolean,
    isBuffer: () => isBuffer3,
    isDate: () => isDate,
    isError: () => isError,
    isFunction: () => isFunction,
    isNull: () => isNull,
    isNullOrUndefined: () => isNullOrUndefined,
    isNumber: () => isNumber,
    isObject: () => isObject,
    isPrimitive: () => isPrimitive,
    isRegExp: () => isRegExp,
    isString: () => isString,
    isSymbol: () => isSymbol,
    isUndefined: () => isUndefined,
    log: () => log
  });
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect2(arguments[i]));
      }
      return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x2) {
      if (x2 === "%%") return "%";
      if (i >= len) return x2;
      switch (x2) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
        default:
          return x2;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += " " + x;
      } else {
        str += " " + inspect2(x);
      }
    }
    return str;
  }
  function deprecate(fn, msg) {
    if (isUndefined(window.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }
    if (process_default.noDeprecation === true) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process_default.throwDeprecation) {
          throw new Error(msg);
        } else if (process_default.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
    return deprecated;
  }
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process_default.env.NODE_DEBUG || "";
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error("%s %d: %s", set, pid, msg);
        };
      } else {
        debugs[set] = function() {
        };
      }
    }
    return debugs[set];
  }
  function inspect2(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      ctx.showHidden = opts;
    } else if (opts) {
      _extend(ctx, opts);
    }
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  function stylizeWithColor(str, styleType) {
    var style = inspect2.styles[styleType];
    if (style) {
      return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
    } else {
      return str;
    }
  }
  function stylizeNoColor(str, styleType) {
    return str;
  }
  function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
      hash[val] = true;
    });
    return hash;
  }
  function formatValue(ctx, value, recurseTimes) {
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== inspect2 && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }
    var keys2 = Object.keys(value);
    var visibleKeys = arrayToHash(keys2);
    if (ctx.showHidden) {
      keys2 = Object.getOwnPropertyNames(value);
    }
    if (isError(value) && (keys2.indexOf("message") >= 0 || keys2.indexOf("description") >= 0)) {
      return formatError(value);
    }
    if (keys2.length === 0) {
      if (isFunction(value)) {
        var name2 = value.name ? ": " + value.name : "";
        return ctx.stylize("[Function" + name2 + "]", "special");
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), "date");
      }
      if (isError(value)) {
        return formatError(value);
      }
    }
    var base2 = "", array = false, braces = ["{", "}"];
    if (isArray2(value)) {
      array = true;
      braces = ["[", "]"];
    }
    if (isFunction(value)) {
      var n = value.name ? ": " + value.name : "";
      base2 = " [Function" + n + "]";
    }
    if (isRegExp(value)) {
      base2 = " " + RegExp.prototype.toString.call(value);
    }
    if (isDate(value)) {
      base2 = " " + Date.prototype.toUTCString.call(value);
    }
    if (isError(value)) {
      base2 = " " + formatError(value);
    }
    if (keys2.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base2 + braces[1];
    }
    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
      } else {
        return ctx.stylize("[Object]", "special");
      }
    }
    ctx.seen.push(value);
    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys2);
    } else {
      output = keys2.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }
    ctx.seen.pop();
    return reduceToSingleString(output, base2, braces);
  }
  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize("undefined", "undefined");
    if (isString(value)) {
      var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return ctx.stylize(simple, "string");
    }
    if (isNumber(value))
      return ctx.stylize("" + value, "number");
    if (isBoolean(value))
      return ctx.stylize("" + value, "boolean");
    if (isNull(value))
      return ctx.stylize("null", "null");
  }
  function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
  }
  function formatArray(ctx, value, recurseTimes, visibleKeys, keys2) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(
          ctx,
          value,
          recurseTimes,
          visibleKeys,
          String(i),
          true
        ));
      } else {
        output.push("");
      }
    }
    keys2.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(
          ctx,
          value,
          recurseTimes,
          visibleKeys,
          key,
          true
        ));
      }
    });
    return output;
  }
  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name2, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize("[Getter/Setter]", "special");
      } else {
        str = ctx.stylize("[Getter]", "special");
      }
    } else {
      if (desc.set) {
        str = ctx.stylize("[Setter]", "special");
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name2 = "[" + key + "]";
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf("\n") > -1) {
          if (array) {
            str = str.split("\n").map(function(line) {
              return "  " + line;
            }).join("\n").substr(2);
          } else {
            str = "\n" + str.split("\n").map(function(line) {
              return "   " + line;
            }).join("\n");
          }
        }
      } else {
        str = ctx.stylize("[Circular]", "special");
      }
    }
    if (isUndefined(name2)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name2 = JSON.stringify("" + key);
      if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name2 = name2.substr(1, name2.length - 2);
        name2 = ctx.stylize(name2, "name");
      } else {
        name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name2 = ctx.stylize(name2, "string");
      }
    }
    return name2 + ": " + str;
  }
  function reduceToSingleString(output, base2, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf("\n") >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) {
      return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    }
    return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
  }
  function isArray2(ar) {
    return Array.isArray(ar);
  }
  function isBoolean(arg) {
    return typeof arg === "boolean";
  }
  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  function isNumber(arg) {
    return typeof arg === "number";
  }
  function isString(arg) {
    return typeof arg === "string";
  }
  function isSymbol(arg) {
    return typeof arg === "symbol";
  }
  function isUndefined(arg) {
    return arg === void 0;
  }
  function isRegExp(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
  }
  function isObject(arg) {
    return typeof arg === "object" && arg !== null;
  }
  function isDate(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
  }
  function isError(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
  }
  function isFunction(arg) {
    return typeof arg === "function";
  }
  function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
  }
  function isBuffer3(maybeBuf) {
    return Buffer2.isBuffer(maybeBuf);
  }
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
  }
  function timestamp() {
    var d = /* @__PURE__ */ new Date();
    var time = [
      pad(d.getHours()),
      pad(d.getMinutes()),
      pad(d.getSeconds())
    ].join(":");
    return [d.getDate(), months[d.getMonth()], time].join(" ");
  }
  function log() {
    console.log("%s - %s", timestamp(), format.apply(null, arguments));
  }
  function _extend(origin, add) {
    if (!add || !isObject(add)) return origin;
    var keys2 = Object.keys(add);
    var i = keys2.length;
    while (i--) {
      origin[keys2[i]] = add[keys2[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var formatRegExp, debugs, debugEnviron, months, util_default;
  var init_util = __esm({
    "node-modules-polyfills:util"() {
      init_process();
      init_buffer();
      init_process2();
      init_inherits();
      formatRegExp = /%[sdj%]/g;
      debugs = {};
      inspect2.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect2.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        // "name": intentionally not styling
        "regexp": "red"
      };
      months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      util_default = {
        inherits: inherits_default,
        _extend,
        log,
        isBuffer: isBuffer3,
        isPrimitive,
        isFunction,
        isError,
        isDate,
        isObject,
        isRegExp,
        isUndefined,
        isSymbol,
        isString,
        isNumber,
        isNullOrUndefined,
        isNull,
        isBoolean,
        isArray: isArray2,
        inspect: inspect2,
        deprecate,
        format,
        debuglog
      };
    }
  });

  // node-modules-polyfills:assert
  var assert_exports = {};
  __export(assert_exports, {
    AssertionError: () => AssertionError,
    assert: () => ok,
    deepEqual: () => deepEqual,
    deepStrictEqual: () => deepStrictEqual,
    default: () => assert_default,
    doesNotThrow: () => doesNotThrow,
    equal: () => equal,
    fail: () => fail,
    ifError: () => ifError,
    notDeepEqual: () => notDeepEqual,
    notDeepStrictEqual: () => notDeepStrictEqual,
    notEqual: () => notEqual,
    notStrictEqual: () => notStrictEqual,
    ok: () => ok,
    strictEqual: () => strictEqual,
    throws: () => throws
  });
  function compare5(a, b) {
    if (a === b) {
      return 0;
    }
    var x = a.length;
    var y = b.length;
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  function functionsHaveNames() {
    if (typeof _functionsHaveNames !== "undefined") {
      return _functionsHaveNames;
    }
    return _functionsHaveNames = (function() {
      return function foo() {
      }.name === "foo";
    })();
  }
  function pToString(obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer2(arrbuf)) {
      return false;
    }
    if (typeof window.ArrayBuffer !== "function") {
      return false;
    }
    if (typeof ArrayBuffer.isView === "function") {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  function assert(value, message) {
    if (!value) fail(value, true, message, "==", ok);
  }
  function getName(func) {
    if (!isFunction(func)) {
      return;
    }
    if (functionsHaveNames()) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  function AssertionError(options) {
    this.name = "AssertionError";
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      var err2 = new Error();
      if (err2.stack) {
        var out = err2.stack;
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf("\n" + fn_name);
        if (idx >= 0) {
          var next_line = out.indexOf("\n", idx + 1);
          out = out.substring(next_line + 1);
        }
        this.stack = out;
      }
    }
  }
  function truncate(s, n) {
    if (typeof s === "string") {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect3(something) {
    if (functionsHaveNames() || !isFunction(something)) {
      return inspect2(something);
    }
    var rawname = getName(something);
    var name2 = rawname ? ": " + rawname : "";
    return "[Function" + name2 + "]";
  }
  function getMessage(self2) {
    return truncate(inspect3(self2.actual), 128) + " " + self2.operator + " " + truncate(inspect3(self2.expected), 128);
  }
  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new AssertionError({
      message,
      actual,
      expected,
      operator,
      stackStartFunction
    });
  }
  function ok(value, message) {
    if (!value) fail(value, true, message, "==", ok);
  }
  function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, "==", equal);
  }
  function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, "!=", notEqual);
    }
  }
  function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, "deepEqual", deepEqual);
    }
  }
  function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, "deepStrictEqual", deepStrictEqual);
    }
  }
  function _deepEqual(actual, expected, strict, memos) {
    if (actual === expected) {
      return true;
    } else if (isBuffer2(actual) && isBuffer2(expected)) {
      return compare5(actual, expected) === 0;
    } else if (isDate(actual) && isDate(expected)) {
      return actual.getTime() === expected.getTime();
    } else if (isRegExp(actual) && isRegExp(expected)) {
      return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
    } else if ((actual === null || typeof actual !== "object") && (expected === null || typeof expected !== "object")) {
      return strict ? actual === expected : actual == expected;
    } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
      return compare5(
        new Uint8Array(actual.buffer),
        new Uint8Array(expected.buffer)
      ) === 0;
    } else if (isBuffer2(actual) !== isBuffer2(expected)) {
      return false;
    } else {
      memos = memos || { actual: [], expected: [] };
      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }
      memos.actual.push(actual);
      memos.expected.push(expected);
      return objEquiv(actual, expected, strict, memos);
    }
  }
  function isArguments(object) {
    return Object.prototype.toString.call(object) == "[object Arguments]";
  }
  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === void 0 || b === null || b === void 0)
      return false;
    if (isPrimitive(a) || isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs)
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    if (ka.length !== kb.length)
      return false;
    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }
  function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, "notDeepEqual", notDeepEqual);
    }
  }
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, "notDeepStrictEqual", notDeepStrictEqual);
    }
  }
  function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, "===", strictEqual);
    }
  }
  function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, "!==", notStrictEqual);
    }
  }
  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }
    if (Object.prototype.toString.call(expected) == "[object RegExp]") {
      return expected.test(actual);
    }
    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
    }
    if (Error.isPrototypeOf(expected)) {
      return false;
    }
    return expected.call({}, actual) === true;
  }
  function _tryBlock(block) {
    var error2;
    try {
      block();
    } catch (e) {
      error2 = e;
    }
    return error2;
  }
  function _throws(shouldThrow, block, expected, message) {
    var actual;
    if (typeof block !== "function") {
      throw new TypeError('"block" argument must be a function');
    }
    if (typeof expected === "string") {
      message = expected;
      expected = null;
    }
    actual = _tryBlock(block);
    message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
    if (shouldThrow && !actual) {
      fail(actual, expected, "Missing expected exception" + message);
    }
    var userProvidedMessage = typeof message === "string";
    var isUnwantedException = !shouldThrow && isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;
    if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
      fail(actual, expected, "Got unwanted exception" + message);
    }
    if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
      throw actual;
    }
  }
  function throws(block, error2, message) {
    _throws(true, block, error2, message);
  }
  function doesNotThrow(block, error2, message) {
    _throws(false, block, error2, message);
  }
  function ifError(err2) {
    if (err2) throw err2;
  }
  var hasOwn, objectKeys, pSlice, _functionsHaveNames, assert_default, regex;
  var init_assert = __esm({
    "node-modules-polyfills:assert"() {
      init_process();
      init_buffer();
      init_buffer2();
      init_util();
      hasOwn = Object.prototype.hasOwnProperty;
      objectKeys = Object.keys || function(obj) {
        var keys2 = [];
        for (var key in obj) {
          if (hasOwn.call(obj, key)) keys2.push(key);
        }
        return keys2;
      };
      pSlice = Array.prototype.slice;
      assert_default = assert;
      regex = /\s*function\s+([^\(\s]*)\s*/;
      assert.AssertionError = AssertionError;
      inherits_default(AssertionError, Error);
      assert.fail = fail;
      assert.ok = ok;
      assert.equal = equal;
      assert.notEqual = notEqual;
      assert.deepEqual = deepEqual;
      assert.deepStrictEqual = deepStrictEqual;
      assert.notDeepEqual = notDeepEqual;
      assert.notDeepStrictEqual = notDeepStrictEqual;
      assert.strictEqual = strictEqual;
      assert.notStrictEqual = notStrictEqual;
      assert.throws = throws;
      assert.doesNotThrow = doesNotThrow;
      assert.ifError = ifError;
    }
  });

  // node-modules-polyfills-commonjs:assert
  var require_assert = __commonJS({
    "node-modules-polyfills-commonjs:assert"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_assert(), __toCommonJS(assert_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/secp256k1/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/secp256k1/lib/index.js"(exports, module) {
      init_process();
      init_buffer();
      var errors2 = {
        IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
        TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
        TWEAK_MUL: "The tweak was out of range or equal to zero",
        CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
        SECKEY_INVALID: "Private Key is invalid",
        PUBKEY_PARSE: "Public Key could not be parsed",
        PUBKEY_SERIALIZE: "Public Key serialization error",
        PUBKEY_COMBINE: "The sum of the public keys is not valid",
        SIG_PARSE: "Signature could not be parsed",
        SIGN: "The nonce generation function failed, or the private key was invalid",
        RECOVER: "Public key could not be recover",
        ECDH: "Scalar was invalid (zero or overflow)"
      };
      function assert3(cond, msg) {
        if (!cond) throw new Error(msg);
      }
      function isUint8Array(name2, value, length) {
        assert3(value instanceof Uint8Array, `Expected ${name2} to be an Uint8Array`);
        if (length !== void 0) {
          if (Array.isArray(length)) {
            const numbers = length.join(", ");
            const msg = `Expected ${name2} to be an Uint8Array with length [${numbers}]`;
            assert3(length.includes(value.length), msg);
          } else {
            const msg = `Expected ${name2} to be an Uint8Array with length ${length}`;
            assert3(value.length === length, msg);
          }
        }
      }
      function isCompressed(value) {
        assert3(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
      }
      function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
        if (typeof output === "function") output = output(length);
        isUint8Array("output", output, length);
        return output;
      }
      function toTypeString(value) {
        return Object.prototype.toString.call(value).slice(8, -1);
      }
      module.exports = (secp256k1) => {
        return {
          contextRandomize(seed) {
            assert3(
              seed === null || seed instanceof Uint8Array,
              "Expected seed to be an Uint8Array or null"
            );
            if (seed !== null) isUint8Array("seed", seed, 32);
            switch (secp256k1.contextRandomize(seed)) {
              case 1:
                throw new Error(errors2.CONTEXT_RANDOMIZE_UNKNOW);
            }
          },
          privateKeyVerify(seckey) {
            isUint8Array("private key", seckey, 32);
            return secp256k1.privateKeyVerify(seckey) === 0;
          },
          privateKeyNegate(seckey) {
            isUint8Array("private key", seckey, 32);
            switch (secp256k1.privateKeyNegate(seckey)) {
              case 0:
                return seckey;
              case 1:
                throw new Error(errors2.IMPOSSIBLE_CASE);
            }
          },
          privateKeyTweakAdd(seckey, tweak) {
            isUint8Array("private key", seckey, 32);
            isUint8Array("tweak", tweak, 32);
            switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
              case 0:
                return seckey;
              case 1:
                throw new Error(errors2.TWEAK_ADD);
            }
          },
          privateKeyTweakMul(seckey, tweak) {
            isUint8Array("private key", seckey, 32);
            isUint8Array("tweak", tweak, 32);
            switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
              case 0:
                return seckey;
              case 1:
                throw new Error(errors2.TWEAK_MUL);
            }
          },
          publicKeyVerify(pubkey) {
            isUint8Array("public key", pubkey, [33, 65]);
            return secp256k1.publicKeyVerify(pubkey) === 0;
          },
          publicKeyCreate(seckey, compressed = true, output) {
            isUint8Array("private key", seckey, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyCreate(output, seckey)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.SECKEY_INVALID);
              case 2:
                throw new Error(errors2.PUBKEY_SERIALIZE);
            }
          },
          publicKeyConvert(pubkey, compressed = true, output) {
            isUint8Array("public key", pubkey, [33, 65]);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyConvert(output, pubkey)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.PUBKEY_SERIALIZE);
            }
          },
          publicKeyNegate(pubkey, compressed = true, output) {
            isUint8Array("public key", pubkey, [33, 65]);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyNegate(output, pubkey)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.IMPOSSIBLE_CASE);
              case 3:
                throw new Error(errors2.PUBKEY_SERIALIZE);
            }
          },
          publicKeyCombine(pubkeys, compressed = true, output) {
            assert3(Array.isArray(pubkeys), "Expected public keys to be an Array");
            assert3(pubkeys.length > 0, "Expected public keys array will have more than zero items");
            for (const pubkey of pubkeys) {
              isUint8Array("public key", pubkey, [33, 65]);
            }
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyCombine(output, pubkeys)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.PUBKEY_COMBINE);
              case 3:
                throw new Error(errors2.PUBKEY_SERIALIZE);
            }
          },
          publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
            isUint8Array("public key", pubkey, [33, 65]);
            isUint8Array("tweak", tweak, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.TWEAK_ADD);
            }
          },
          publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
            isUint8Array("public key", pubkey, [33, 65]);
            isUint8Array("tweak", tweak, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.TWEAK_MUL);
            }
          },
          signatureNormalize(sig) {
            isUint8Array("signature", sig, 64);
            switch (secp256k1.signatureNormalize(sig)) {
              case 0:
                return sig;
              case 1:
                throw new Error(errors2.SIG_PARSE);
            }
          },
          signatureExport(sig, output) {
            isUint8Array("signature", sig, 64);
            output = getAssertedOutput(output, 72);
            const obj = { output, outputlen: 72 };
            switch (secp256k1.signatureExport(obj, sig)) {
              case 0:
                return output.slice(0, obj.outputlen);
              case 1:
                throw new Error(errors2.SIG_PARSE);
              case 2:
                throw new Error(errors2.IMPOSSIBLE_CASE);
            }
          },
          signatureImport(sig, output) {
            isUint8Array("signature", sig);
            output = getAssertedOutput(output, 64);
            switch (secp256k1.signatureImport(output, sig)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.SIG_PARSE);
              case 2:
                throw new Error(errors2.IMPOSSIBLE_CASE);
            }
          },
          ecdsaSign(msg32, seckey, options = {}, output) {
            isUint8Array("message", msg32, 32);
            isUint8Array("private key", seckey, 32);
            assert3(toTypeString(options) === "Object", "Expected options to be an Object");
            if (options.data !== void 0) isUint8Array("options.data", options.data);
            if (options.noncefn !== void 0) assert3(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
            output = getAssertedOutput(output, 64);
            const obj = { signature: output, recid: null };
            switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
              case 0:
                return obj;
              case 1:
                throw new Error(errors2.SIGN);
              case 2:
                throw new Error(errors2.IMPOSSIBLE_CASE);
            }
          },
          ecdsaVerify(sig, msg32, pubkey) {
            isUint8Array("signature", sig, 64);
            isUint8Array("message", msg32, 32);
            isUint8Array("public key", pubkey, [33, 65]);
            switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
              case 0:
                return true;
              case 3:
                return false;
              case 1:
                throw new Error(errors2.SIG_PARSE);
              case 2:
                throw new Error(errors2.PUBKEY_PARSE);
            }
          },
          ecdsaRecover(sig, recid, msg32, compressed = true, output) {
            isUint8Array("signature", sig, 64);
            assert3(
              toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
              "Expected recovery id to be a Number within interval [0, 3]"
            );
            isUint8Array("message", msg32, 32);
            isCompressed(compressed);
            output = getAssertedOutput(output, compressed ? 33 : 65);
            switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.SIG_PARSE);
              case 2:
                throw new Error(errors2.RECOVER);
              case 3:
                throw new Error(errors2.IMPOSSIBLE_CASE);
            }
          },
          ecdh(pubkey, seckey, options = {}, output) {
            isUint8Array("public key", pubkey, [33, 65]);
            isUint8Array("private key", seckey, 32);
            assert3(toTypeString(options) === "Object", "Expected options to be an Object");
            if (options.data !== void 0) isUint8Array("options.data", options.data);
            if (options.hashfn !== void 0) {
              assert3(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
              if (options.xbuf !== void 0) isUint8Array("options.xbuf", options.xbuf, 32);
              if (options.ybuf !== void 0) isUint8Array("options.ybuf", options.ybuf, 32);
              isUint8Array("output", output);
            } else {
              output = getAssertedOutput(output, 32);
            }
            switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
              case 0:
                return output;
              case 1:
                throw new Error(errors2.PUBKEY_PARSE);
              case 2:
                throw new Error(errors2.ECDH);
            }
          }
        };
      };
    }
  });

  // node_modules/elliptic/package.json
  var require_package = __commonJS({
    "node_modules/elliptic/package.json"(exports, module) {
      module.exports = {
        name: "elliptic",
        version: "6.6.1",
        description: "EC cryptography",
        main: "lib/elliptic.js",
        files: [
          "lib"
        ],
        scripts: {
          lint: "eslint lib test",
          "lint:fix": "npm run lint -- --fix",
          unit: "istanbul test _mocha --reporter=spec test/index.js",
          test: "npm run lint && npm run unit",
          version: "grunt dist && git add dist/"
        },
        repository: {
          type: "git",
          url: "git@github.com:indutny/elliptic"
        },
        keywords: [
          "EC",
          "Elliptic",
          "curve",
          "Cryptography"
        ],
        author: "Fedor Indutny <fedor@indutny.com>",
        license: "MIT",
        bugs: {
          url: "https://github.com/indutny/elliptic/issues"
        },
        homepage: "https://github.com/indutny/elliptic",
        devDependencies: {
          brfs: "^2.0.2",
          coveralls: "^3.1.0",
          eslint: "^7.6.0",
          grunt: "^1.2.1",
          "grunt-browserify": "^5.3.0",
          "grunt-cli": "^1.3.2",
          "grunt-contrib-connect": "^3.0.0",
          "grunt-contrib-copy": "^1.0.0",
          "grunt-contrib-uglify": "^5.0.0",
          "grunt-mocha-istanbul": "^5.0.2",
          "grunt-saucelabs": "^9.0.1",
          istanbul: "^0.4.5",
          mocha: "^8.0.1"
        },
        dependencies: {
          "bn.js": "^4.11.9",
          brorand: "^1.1.0",
          "hash.js": "^1.0.0",
          "hmac-drbg": "^1.0.1",
          inherits: "^2.0.4",
          "minimalistic-assert": "^1.0.1",
          "minimalistic-crypto-utils": "^1.0.1"
        }
      };
    }
  });

  // node_modules/elliptic/node_modules/bn.js/lib/bn.js
  var require_bn6 = __commonJS({
    "node_modules/elliptic/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/minimalistic-assert/index.js
  var require_minimalistic_assert = __commonJS({
    "node_modules/minimalistic-assert/index.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = assert3;
      function assert3(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      assert3.equal = function assertEqual(l, r, msg) {
        if (l != r)
          throw new Error(msg || "Assertion failed: " + l + " != " + r);
      };
    }
  });

  // node_modules/minimalistic-crypto-utils/lib/utils.js
  var require_utils4 = __commonJS({
    "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var utils = exports;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;
      function zero22(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils.zero2 = zero22;
      function toHex3(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++)
          res += zero22(msg[i].toString(16));
        return res;
      }
      utils.toHex = toHex3;
      utils.encode = function encode2(arr, enc) {
        if (enc === "hex")
          return toHex3(arr);
        else
          return arr;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/utils.js
  var require_utils5 = __commonJS({
    "node_modules/elliptic/lib/elliptic/utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var utils = exports;
      var BN = require_bn6();
      var minAssert = require_minimalistic_assert();
      var minUtils = require_utils4();
      utils.assert = minAssert;
      utils.toArray = minUtils.toArray;
      utils.zero2 = minUtils.zero2;
      utils.toHex = minUtils.toHex;
      utils.encode = minUtils.encode;
      function getNAF(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        var i;
        for (i = 0; i < naf.length; i += 1) {
          naf[i] = 0;
        }
        var ws = 1 << w + 1;
        var k = num.clone();
        for (i = 0; i < naf.length; i++) {
          var z;
          var mod = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod > (ws >> 1) - 1)
              z = (ws >> 1) - mod;
            else
              z = mod;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf[i] = z;
          k.iushrn(1);
        }
        return naf;
      }
      utils.getNAF = getNAF;
      function getJSF(k1, k2) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k2.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }
        return jsf;
      }
      utils.getJSF = getJSF;
      function cachedProperty(obj, name2, computer) {
        var key = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new BN(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
    }
  });

  // node-modules-polyfills:crypto
  var crypto_exports = {};
  __export(crypto_exports, {
    default: () => crypto_default
  });
  var crypto_default;
  var init_crypto = __esm({
    "node-modules-polyfills:crypto"() {
      init_process();
      init_buffer();
      crypto_default = {};
    }
  });

  // node-modules-polyfills-commonjs:crypto
  var require_crypto2 = __commonJS({
    "node-modules-polyfills-commonjs:crypto"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_crypto(), __toCommonJS(crypto_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/brorand/index.js
  var require_brorand = __commonJS({
    "node_modules/brorand/index.js"(exports, module) {
      init_process();
      init_buffer();
      var r;
      module.exports = function rand(len) {
        if (!r)
          r = new Rand(null);
        return r.generate(len);
      };
      function Rand(rand) {
        this.rand = rand;
      }
      module.exports.Rand = Rand;
      Rand.prototype.generate = function generate(len) {
        return this._rand(len);
      };
      Rand.prototype._rand = function _rand(n) {
        if (this.rand.getBytes)
          return this.rand.getBytes(n);
        var res = new Uint8Array(n);
        for (var i = 0; i < res.length; i++)
          res[i] = this.rand.getByte();
        return res;
      };
      if (typeof self === "object") {
        if (self.crypto && self.crypto.getRandomValues) {
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.crypto.getRandomValues(arr);
            return arr;
          };
        } else if (self.msCrypto && self.msCrypto.getRandomValues) {
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.msCrypto.getRandomValues(arr);
            return arr;
          };
        } else if (typeof window === "object") {
          Rand.prototype._rand = function() {
            throw new Error("Not implemented yet");
          };
        }
      } else {
        try {
          crypto2 = require_crypto2();
          if (typeof crypto2.randomBytes !== "function")
            throw new Error("Not supported");
          Rand.prototype._rand = function _rand(n) {
            return crypto2.randomBytes(n);
          };
        } catch (e) {
        }
      }
      var crypto2;
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/base.js
  var require_base = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var utils = require_utils5();
      var getNAF = utils.getNAF;
      var getJSF = utils.getJSF;
      var assert3 = utils.assert;
      function BaseCurve(type2, conf) {
        this.type = type2;
        this.p = new BN(conf.p, 16);
        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
        this.zero = new BN(0).toRed(this.red);
        this.one = new BN(1).toRed(this.red);
        this.two = new BN(2).toRed(this.red);
        this.n = conf.n && new BN(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);
        this._bitLength = this.n ? this.n.bitLength() : 0;
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      module.exports = BaseCurve;
      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype.validate = function validate() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
        assert3(p.precomputed);
        var doubles = p._getDoubles();
        var naf = getNAF(k, 1, this._bitLength);
        var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;
        var repr = [];
        var j;
        var nafW;
        for (j = 0; j < naf.length; j += doubles.step) {
          nafW = 0;
          for (var l = j + doubles.step - 1; l >= j; l--)
            nafW = (nafW << 1) + naf[l];
          repr.push(nafW);
        }
        var a = this.jpoint(null, null, null);
        var b = this.jpoint(null, null, null);
        for (var i = I; i > 0; i--) {
          for (j = 0; j < repr.length; j++) {
            nafW = repr[j];
            if (nafW === i)
              b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i)
              b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
        }
        return a.toP();
      };
      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
        var w = 4;
        var nafPoints = p._getNAFPoints(w);
        w = nafPoints.wnd;
        var wnd = nafPoints.points;
        var naf = getNAF(k, w, this._bitLength);
        var acc = this.jpoint(null, null, null);
        for (var i = naf.length - 1; i >= 0; i--) {
          for (var l = 0; i >= 0 && naf[i] === 0; i--)
            l++;
          if (i >= 0)
            l++;
          acc = acc.dblp(l);
          if (i < 0)
            break;
          var z = naf[i];
          assert3(z !== 0);
          if (p.type === "affine") {
            if (z > 0)
              acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else
              acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
          } else {
            if (z > 0)
              acc = acc.add(wnd[z - 1 >> 1]);
            else
              acc = acc.add(wnd[-z - 1 >> 1].neg());
          }
        }
        return p.type === "affine" ? acc.toP() : acc;
      };
      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;
        var max = 0;
        var i;
        var j;
        var p;
        for (i = 0; i < len; i++) {
          p = points[i];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
        }
        for (i = len - 1; i >= 1; i -= 2) {
          var a = i - 1;
          var b = i;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
          }
          var comb = [
            points[a],
            /* 1 */
            null,
            /* 3 */
            null,
            /* 5 */
            points[b]
            /* 7 */
          ];
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }
          var index = [
            -3,
            /* -1 -1 */
            -1,
            /* -1 0 */
            -5,
            /* -1 1 */
            -7,
            /* 0 -1 */
            0,
            /* 0 0 */
            7,
            /* 0 1 */
            5,
            /* 1 -1 */
            1,
            /* 1 0 */
            3
            /* 1 1 */
          ];
          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for (j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
          }
        }
        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (i = max; i >= 0; i--) {
          var k = 0;
          while (i >= 0) {
            var zero3 = true;
            for (j = 0; j < len; j++) {
              tmp[j] = naf[j][i] | 0;
              if (tmp[j] !== 0)
                zero3 = false;
            }
            if (!zero3)
              break;
            k++;
            i--;
          }
          if (i >= 0)
            k++;
          acc = acc.dblp(k);
          if (i < 0)
            break;
          for (j = 0; j < len; j++) {
            var z = tmp[j];
            p;
            if (z === 0)
              continue;
            else if (z > 0)
              p = wnd[j][z - 1 >> 1];
            else if (z < 0)
              p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine")
              acc = acc.mixedAdd(p);
            else
              acc = acc.add(p);
          }
        }
        for (i = 0; i < len; i++)
          wnd[i] = null;
        if (jacobianResult)
          return acc;
        else
          return acc.toP();
      };
      function BasePoint(curve, type2) {
        this.curve = curve;
        this.type = type2;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;
      BasePoint.prototype.eq = function eq() {
        throw new Error("Not implemented");
      };
      BasePoint.prototype.validate = function validate() {
        return this.curve.validate(this);
      };
      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils.toArray(bytes, enc);
        var len = this.p.byteLength();
        if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
          if (bytes[0] === 6)
            assert3(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 7)
            assert3(bytes[bytes.length - 1] % 2 === 1);
          var res = this.point(
            bytes.slice(1, 1 + len),
            bytes.slice(1 + len, 1 + 2 * len)
          );
          return res;
        } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
        }
        throw new Error("Unknown point format");
      };
      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };
      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray("be", len);
        if (compact)
          return [this.getY().isEven() ? 2 : 3].concat(x);
        return [4].concat(x, this.getY().toArray("be", len));
      };
      BasePoint.prototype.encode = function encode2(enc, compact) {
        return utils.encode(this._encode(compact), enc);
      };
      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed)
          return this;
        var precomputed = {
          doubles: null,
          naf: null,
          beta: null
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;
        return this;
      };
      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed)
          return false;
        var doubles = this.precomputed.doubles;
        if (!doubles)
          return false;
        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };
      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles)
          return this.precomputed.doubles;
        var doubles = [this];
        var acc = this;
        for (var i = 0; i < power; i += step) {
          for (var j = 0; j < step; j++)
            acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step,
          points: doubles
        };
      };
      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf)
          return this.precomputed.naf;
        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i = 1; i < max; i++)
          res[i] = res[i - 1].add(dbl);
        return {
          wnd,
          points: res
        };
      };
      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };
      BasePoint.prototype.dblp = function dblp(k) {
        var r = this;
        for (var i = 0; i < k; i++)
          r = r.dbl();
        return r;
      };
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      init_process();
      init_buffer();
      if (typeof Object.create === "function") {
        module.exports = function inherits2(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits2(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/short.js
  var require_short = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils5();
      var BN = require_bn6();
      var inherits2 = require_inherits_browser();
      var Base = require_base();
      var assert3 = utils.assert;
      function ShortCurve(conf) {
        Base.call(this, "short", conf);
        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();
        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits2(ShortCurve, Base);
      module.exports = ShortCurve;
      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
          return;
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new BN(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new BN(conf.lambda, 16);
        } else {
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert3(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function(vec) {
            return {
              a: new BN(vec.a, 16),
              b: new BN(vec.b, 16)
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }
        return {
          beta,
          lambda,
          basis
        };
      };
      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        var red = num === this.p ? this.red : BN.mont(num);
        var tinv = new BN(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();
        var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
        var l1 = ntinv.redAdd(s).fromRed();
        var l2 = ntinv.redSub(s).fromRed();
        return [l1, l2];
      };
      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
        var u = lambda;
        var v = this.n.clone();
        var x1 = new BN(1);
        var y1 = new BN(0);
        var x2 = new BN(0);
        var y2 = new BN(1);
        var a0;
        var b0;
        var a1;
        var b1;
        var a2;
        var b2;
        var prevR;
        var i = 0;
        var r;
        var x;
        while (u.cmpn(0) !== 0) {
          var q = v.div(u);
          r = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));
          if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
          } else if (a1 && ++i === 2) {
            break;
          }
          prevR = r;
          v = u;
          u = r;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
        }
        a2 = r.neg();
        b2 = x;
        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }
        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 }
        ];
      };
      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];
        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v1.b.neg().mul(k).divRound(this.n);
        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return { k1, k2 };
      };
      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);
        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y = y.redNeg();
        return this.point(x, y);
      };
      ShortCurve.prototype.validate = function validate(point) {
        if (point.inf)
          return true;
        var x = point.x;
        var y = point.y;
        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y.redSqr().redISub(rhs).cmpn(0) === 0;
      };
      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();
          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }
          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };
      function Point(curve, x, y, isRed) {
        Base.BasePoint.call(this, curve, "affine");
        if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits2(Point, Base.BasePoint);
      ShortCurve.prototype.point = function point(x, y, isRed) {
        return new Point(this, x, y, isRed);
      };
      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };
      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo)
          return;
        var pre = this.precomputed;
        if (pre && pre.beta)
          return pre.beta;
        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul)
            }
          };
        }
        return beta;
      };
      Point.prototype.toJSON = function toJSON3() {
        if (!this.precomputed)
          return [this.x, this.y];
        return [this.x, this.y, this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }];
      };
      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === "string")
          obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2])
          return res;
        function obj2point(obj2) {
          return curve.point(obj2[0], obj2[1], red);
        }
        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
          }
        };
        return res;
      };
      Point.prototype.inspect = function inspect4() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };
      Point.prototype.add = function add(p) {
        if (this.inf)
          return p;
        if (p.inf)
          return this;
        if (this.eq(p))
          return this.dbl();
        if (this.neg().eq(p))
          return this.curve.point(null, null);
        if (this.x.cmp(p.x) === 0)
          return this.curve.point(null, null);
        var c = this.y.redSub(p.y);
        if (c.cmpn(0) !== 0)
          c = c.redMul(this.x.redSub(p.x).redInvm());
        var nx = c.redSqr().redISub(this.x).redISub(p.x);
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.dbl = function dbl() {
        if (this.inf)
          return this;
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0)
          return this.curve.point(null, null);
        var a = this.curve.a;
        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
        var nx = c.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };
      Point.prototype.mul = function mul(k) {
        k = new BN(k, 16);
        if (this.isInfinity())
          return this;
        else if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo)
          return this.curve._endoWnafMulAdd([this], [k]);
        else
          return this.curve._wnafMul(this, k);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs, true);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };
      Point.prototype.eq = function eq(p) {
        return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
      };
      Point.prototype.neg = function neg(_precompute) {
        if (this.inf)
          return this;
        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function(p) {
            return p.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate)
            }
          };
        }
        return res;
      };
      Point.prototype.toJ = function toJ() {
        if (this.inf)
          return this.curve.jpoint(null, null, null);
        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };
      function JPoint(curve, x, y, z) {
        Base.BasePoint.call(this, curve, "jacobian");
        if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new BN(0);
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = new BN(z, 16);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
      }
      inherits2(JPoint, Base.BasePoint);
      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
        return new JPoint(this, x, y, z);
      };
      JPoint.prototype.toP = function toP() {
        if (this.isInfinity())
          return this.curve.point(null, null);
        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);
        return this.curve.point(ax, ay);
      };
      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };
      JPoint.prototype.add = function add(p) {
        if (this.isInfinity())
          return p;
        if (p.isInfinity())
          return this;
        var pz2 = p.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p.z));
        var s2 = p.y.redMul(z2.redMul(this.z));
        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);
        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p.z).redMul(h);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mixedAdd = function mixedAdd(p) {
        if (this.isInfinity())
          return p.toJ();
        if (p.isInfinity())
          return this;
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p.x.redMul(z2);
        var s1 = this.y;
        var s2 = p.y.redMul(z2).redMul(this.z);
        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);
        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0)
          return this;
        if (this.isInfinity())
          return this;
        if (!pow)
          return this.dbl();
        var i;
        if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for (i = 0; i < pow; i++)
            r = r.dbl();
          return r;
        }
        var a = this.curve.a;
        var tinv = this.curve.tinv;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jyd = jy.redAdd(jy);
        for (i = 0; i < pow; i++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow)
            jz4 = jz4.redMul(jyd4);
          jx = nx;
          jz = nz;
          jyd = dny;
        }
        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };
      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;
        if (this.curve.zeroA)
          return this._zeroDbl();
        else if (this.curve.threeA)
          return this._threeDbl();
        else
          return this._dbl();
      };
      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          var m = xx.redAdd(xx).redIAdd(xx);
          var t = m.redSqr().redISub(s).redISub(s);
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          nx = t;
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var a = this.x.redSqr();
          var b = this.y.redSqr();
          var c = b.redSqr();
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          var e = a.redAdd(a).redIAdd(a);
          var f = e.redSqr();
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);
          nx = f.redISub(d).redISub(d);
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          var t = m.redSqr().redISub(s).redISub(s);
          nx = t;
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var delta = this.z.redSqr();
          var gamma = this.y.redSqr();
          var beta = this.x.redMul(gamma);
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._dbl = function _dbl() {
        var a = this.curve.a;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA)
          return this.dbl().add(this);
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var zz = this.z.redSqr();
        var yyyy = yy.redSqr();
        var m = xx.redAdd(xx).redIAdd(xx);
        var mm = m.redSqr();
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        var ee = e.redSqr();
        var t = yyyy.redIAdd(yyyy);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
        var yyu4 = yy.redMul(u);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mul = function mul(k, kbase) {
        k = new BN(k, kbase);
        return this.curve._wnafMul(this, k);
      };
      JPoint.prototype.eq = function eq(p) {
        if (p.type === "affine")
          return this.eq(p.toJ());
        if (this === p)
          return true;
        var z2 = this.z.redSqr();
        var pz2 = p.z.redSqr();
        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
          return false;
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p.z);
        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
      };
      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0)
          return true;
        var xc = x.clone();
        var t = this.curve.redN.redMul(zs);
        for (; ; ) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;
          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };
      JPoint.prototype.inspect = function inspect4() {
        if (this.isInfinity())
          return "<EC JPoint Infinity>";
        return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      };
      JPoint.prototype.isInfinity = function isInfinity() {
        return this.z.cmpn(0) === 0;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/mont.js
  var require_mont = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var inherits2 = require_inherits_browser();
      var Base = require_base();
      var utils = require_utils5();
      function MontCurve(conf) {
        Base.call(this, "mont", conf);
        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.i4 = new BN(4).toRed(this.red).redInvm();
        this.two = new BN(2).toRed(this.red);
        this.a24 = this.i4.redMul(this.a.redAdd(this.two));
      }
      inherits2(MontCurve, Base);
      module.exports = MontCurve;
      MontCurve.prototype.validate = function validate(point) {
        var x = point.normalize().x;
        var x2 = x.redSqr();
        var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
        var y = rhs.redSqrt();
        return y.redSqr().cmp(rhs) === 0;
      };
      function Point(curve, x, z) {
        Base.BasePoint.call(this, curve, "projective");
        if (x === null && z === null) {
          this.x = this.curve.one;
          this.z = this.curve.zero;
        } else {
          this.x = new BN(x, 16);
          this.z = new BN(z, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
        }
      }
      inherits2(Point, Base.BasePoint);
      MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        return this.point(utils.toArray(bytes, enc), 1);
      };
      MontCurve.prototype.point = function point(x, z) {
        return new Point(this, x, z);
      };
      MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };
      Point.prototype.precompute = function precompute() {
      };
      Point.prototype._encode = function _encode() {
        return this.getX().toArray("be", this.curve.p.byteLength());
      };
      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1] || curve.one);
      };
      Point.prototype.inspect = function inspect4() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.z.cmpn(0) === 0;
      };
      Point.prototype.dbl = function dbl() {
        var a = this.x.redAdd(this.z);
        var aa = a.redSqr();
        var b = this.x.redSub(this.z);
        var bb = b.redSqr();
        var c = aa.redSub(bb);
        var nx = aa.redMul(bb);
        var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
        return this.curve.point(nx, nz);
      };
      Point.prototype.add = function add() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.diffAdd = function diffAdd(p, diff) {
        var a = this.x.redAdd(this.z);
        var b = this.x.redSub(this.z);
        var c = p.x.redAdd(p.z);
        var d = p.x.redSub(p.z);
        var da = d.redMul(a);
        var cb = c.redMul(b);
        var nx = diff.z.redMul(da.redAdd(cb).redSqr());
        var nz = diff.x.redMul(da.redISub(cb).redSqr());
        return this.curve.point(nx, nz);
      };
      Point.prototype.mul = function mul(k) {
        var t = k.clone();
        var a = this;
        var b = this.curve.point(null, null);
        var c = this;
        for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
          bits.push(t.andln(1));
        for (var i = bits.length - 1; i >= 0; i--) {
          if (bits[i] === 0) {
            a = a.diffAdd(b, c);
            b = b.dbl();
          } else {
            b = a.diffAdd(b, c);
            a = a.dbl();
          }
        }
        return b;
      };
      Point.prototype.mulAdd = function mulAdd() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.jumlAdd = function jumlAdd() {
        throw new Error("Not supported on Montgomery curve");
      };
      Point.prototype.eq = function eq(other) {
        return this.getX().cmp(other.getX()) === 0;
      };
      Point.prototype.normalize = function normalize2() {
        this.x = this.x.redMul(this.z.redInvm());
        this.z = this.curve.one;
        return this;
      };
      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/edwards.js
  var require_edwards = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils5();
      var BN = require_bn6();
      var inherits2 = require_inherits_browser();
      var Base = require_base();
      var assert3 = utils.assert;
      function EdwardsCurve(conf) {
        this.twisted = (conf.a | 0) !== 1;
        this.mOneA = this.twisted && (conf.a | 0) === -1;
        this.extended = this.mOneA;
        Base.call(this, "edwards", conf);
        this.a = new BN(conf.a, 16).umod(this.red.m);
        this.a = this.a.toRed(this.red);
        this.c = new BN(conf.c, 16).toRed(this.red);
        this.c2 = this.c.redSqr();
        this.d = new BN(conf.d, 16).toRed(this.red);
        this.dd = this.d.redAdd(this.d);
        assert3(!this.twisted || this.c.fromRed().cmpn(1) === 0);
        this.oneC = (conf.c | 0) === 1;
      }
      inherits2(EdwardsCurve, Base);
      module.exports = EdwardsCurve;
      EdwardsCurve.prototype._mulA = function _mulA(num) {
        if (this.mOneA)
          return num.redNeg();
        else
          return this.a.redMul(num);
      };
      EdwardsCurve.prototype._mulC = function _mulC(num) {
        if (this.oneC)
          return num;
        else
          return this.c.redMul(num);
      };
      EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
        return this.point(x, y, z, t);
      };
      EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red)
          x = x.toRed(this.red);
        var x2 = x.redSqr();
        var rhs = this.c2.redSub(this.a.redMul(x2));
        var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
        var y2 = rhs.redMul(lhs.redInvm());
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y = y.redNeg();
        return this.point(x, y);
      };
      EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
        y = new BN(y, 16);
        if (!y.red)
          y = y.toRed(this.red);
        var y2 = y.redSqr();
        var lhs = y2.redSub(this.c2);
        var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
        var x2 = lhs.redMul(rhs.redInvm());
        if (x2.cmp(this.zero) === 0) {
          if (odd)
            throw new Error("invalid point");
          else
            return this.point(this.zero, y);
        }
        var x = x2.redSqrt();
        if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        if (x.fromRed().isOdd() !== odd)
          x = x.redNeg();
        return this.point(x, y);
      };
      EdwardsCurve.prototype.validate = function validate(point) {
        if (point.isInfinity())
          return true;
        point.normalize();
        var x2 = point.x.redSqr();
        var y2 = point.y.redSqr();
        var lhs = x2.redMul(this.a).redAdd(y2);
        var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
        return lhs.cmp(rhs) === 0;
      };
      function Point(curve, x, y, z, t) {
        Base.BasePoint.call(this, curve, "projective");
        if (x === null && y === null && z === null) {
          this.x = this.curve.zero;
          this.y = this.curve.one;
          this.z = this.curve.one;
          this.t = this.curve.zero;
          this.zOne = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = z ? new BN(z, 16) : this.curve.one;
          this.t = t && new BN(t, 16);
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          if (!this.z.red)
            this.z = this.z.toRed(this.curve.red);
          if (this.t && !this.t.red)
            this.t = this.t.toRed(this.curve.red);
          this.zOne = this.z === this.curve.one;
          if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne)
              this.t = this.t.redMul(this.z.redInvm());
          }
        }
      }
      inherits2(Point, Base.BasePoint);
      EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };
      EdwardsCurve.prototype.point = function point(x, y, z, t) {
        return new Point(this, x, y, z, t);
      };
      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1], obj[2]);
      };
      Point.prototype.inspect = function inspect4() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
      };
      Point.prototype._extDbl = function _extDbl() {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = this.z.redSqr();
        c = c.redIAdd(c);
        var d = this.curve._mulA(a);
        var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
        var g = d.redAdd(b);
        var f = g.redSub(c);
        var h = d.redSub(b);
        var nx = e.redMul(f);
        var ny = g.redMul(h);
        var nt = e.redMul(h);
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };
      Point.prototype._projDbl = function _projDbl() {
        var b = this.x.redAdd(this.y).redSqr();
        var c = this.x.redSqr();
        var d = this.y.redSqr();
        var nx;
        var ny;
        var nz;
        var e;
        var h;
        var j;
        if (this.curve.twisted) {
          e = this.curve._mulA(c);
          var f = e.redAdd(d);
          if (this.zOne) {
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            ny = f.redMul(e.redSub(d));
            nz = f.redSqr().redSub(f).redSub(f);
          } else {
            h = this.z.redSqr();
            j = f.redSub(h).redISub(h);
            nx = b.redSub(c).redISub(d).redMul(j);
            ny = f.redMul(e.redSub(d));
            nz = f.redMul(j);
          }
        } else {
          e = c.redAdd(d);
          h = this.curve._mulC(this.z).redSqr();
          j = e.redSub(h).redSub(h);
          nx = this.curve._mulC(b.redISub(e)).redMul(j);
          ny = this.curve._mulC(e).redMul(c.redISub(d));
          nz = e.redMul(j);
        }
        return this.curve.point(nx, ny, nz);
      };
      Point.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;
        if (this.curve.extended)
          return this._extDbl();
        else
          return this._projDbl();
      };
      Point.prototype._extAdd = function _extAdd(p) {
        var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
        var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
        var c = this.t.redMul(this.curve.dd).redMul(p.t);
        var d = this.z.redMul(p.z.redAdd(p.z));
        var e = b.redSub(a);
        var f = d.redSub(c);
        var g = d.redAdd(c);
        var h = b.redAdd(a);
        var nx = e.redMul(f);
        var ny = g.redMul(h);
        var nt = e.redMul(h);
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };
      Point.prototype._projAdd = function _projAdd(p) {
        var a = this.z.redMul(p.z);
        var b = a.redSqr();
        var c = this.x.redMul(p.x);
        var d = this.y.redMul(p.y);
        var e = this.curve.d.redMul(c).redMul(d);
        var f = b.redSub(e);
        var g = b.redAdd(e);
        var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
        var nx = a.redMul(f).redMul(tmp);
        var ny;
        var nz;
        if (this.curve.twisted) {
          ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
          nz = f.redMul(g);
        } else {
          ny = a.redMul(g).redMul(d.redSub(c));
          nz = this.curve._mulC(f).redMul(g);
        }
        return this.curve.point(nx, ny, nz);
      };
      Point.prototype.add = function add(p) {
        if (this.isInfinity())
          return p;
        if (p.isInfinity())
          return this;
        if (this.curve.extended)
          return this._extAdd(p);
        else
          return this._projAdd(p);
      };
      Point.prototype.mul = function mul(k) {
        if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else
          return this.curve._wnafMul(this, k);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
      };
      Point.prototype.normalize = function normalize2() {
        if (this.zOne)
          return this;
        var zi = this.z.redInvm();
        this.x = this.x.redMul(zi);
        this.y = this.y.redMul(zi);
        if (this.t)
          this.t = this.t.redMul(zi);
        this.z = this.curve.one;
        this.zOne = true;
        return this;
      };
      Point.prototype.neg = function neg() {
        return this.curve.point(
          this.x.redNeg(),
          this.y,
          this.z,
          this.t && this.t.redNeg()
        );
      };
      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        this.normalize();
        return this.y.fromRed();
      };
      Point.prototype.eq = function eq(other) {
        return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
      };
      Point.prototype.eqXToP = function eqXToP(x) {
        var rx = x.toRed(this.curve.red).redMul(this.z);
        if (this.x.cmp(rx) === 0)
          return true;
        var xc = x.clone();
        var t = this.curve.redN.redMul(this.z);
        for (; ; ) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;
          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };
      Point.prototype.toP = Point.prototype.normalize;
      Point.prototype.mixedAdd = Point.prototype.add;
    }
  });

  // node_modules/elliptic/lib/elliptic/curve/index.js
  var require_curve = __commonJS({
    "node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var curve = exports;
      curve.base = require_base();
      curve.short = require_short();
      curve.mont = require_mont();
      curve.edwards = require_edwards();
    }
  });

  // node_modules/hash.js/lib/hash/utils.js
  var require_utils6 = __commonJS({
    "node_modules/hash.js/lib/hash/utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var assert3 = require_minimalistic_assert();
      var inherits2 = require_inherits_browser();
      exports.inherits = inherits2;
      function isSurrogatePair(msg, i) {
        if ((msg.charCodeAt(i) & 64512) !== 55296) {
          return false;
        }
        if (i < 0 || i + 1 >= msg.length) {
          return false;
        }
        return (msg.charCodeAt(i + 1) & 64512) === 56320;
      }
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg === "string") {
          if (!enc) {
            var p = 0;
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              if (c < 128) {
                res[p++] = c;
              } else if (c < 2048) {
                res[p++] = c >> 6 | 192;
                res[p++] = c & 63 | 128;
              } else if (isSurrogatePair(msg, i)) {
                c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                res[p++] = c >> 18 | 240;
                res[p++] = c >> 12 & 63 | 128;
                res[p++] = c >> 6 & 63 | 128;
                res[p++] = c & 63 | 128;
              } else {
                res[p++] = c >> 12 | 224;
                res[p++] = c >> 6 & 63 | 128;
                res[p++] = c & 63 | 128;
              }
            }
          } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0)
              msg = "0" + msg;
            for (i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
        } else {
          for (i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
        }
        return res;
      }
      exports.toArray = toArray;
      function toHex3(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++)
          res += zero22(msg[i].toString(16));
        return res;
      }
      exports.toHex = toHex3;
      function htonl(w) {
        var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
        return res >>> 0;
      }
      exports.htonl = htonl;
      function toHex32(msg, endian) {
        var res = "";
        for (var i = 0; i < msg.length; i++) {
          var w = msg[i];
          if (endian === "little")
            w = htonl(w);
          res += zero8(w.toString(16));
        }
        return res;
      }
      exports.toHex32 = toHex32;
      function zero22(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      exports.zero2 = zero22;
      function zero8(word) {
        if (word.length === 7)
          return "0" + word;
        else if (word.length === 6)
          return "00" + word;
        else if (word.length === 5)
          return "000" + word;
        else if (word.length === 4)
          return "0000" + word;
        else if (word.length === 3)
          return "00000" + word;
        else if (word.length === 2)
          return "000000" + word;
        else if (word.length === 1)
          return "0000000" + word;
        else
          return word;
      }
      exports.zero8 = zero8;
      function join32(msg, start, end, endian) {
        var len = end - start;
        assert3(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i = 0, k = start; i < res.length; i++, k += 4) {
          var w;
          if (endian === "big")
            w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
          else
            w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
          res[i] = w >>> 0;
        }
        return res;
      }
      exports.join32 = join32;
      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
          var m = msg[i];
          if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
          } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
          }
        }
        return res;
      }
      exports.split32 = split32;
      function rotr32(w, b) {
        return w >>> b | w << 32 - b;
      }
      exports.rotr32 = rotr32;
      function rotl32(w, b) {
        return w << b | w >>> 32 - b;
      }
      exports.rotl32 = rotl32;
      function sum32(a, b) {
        return a + b >>> 0;
      }
      exports.sum32 = sum32;
      function sum32_3(a, b, c) {
        return a + b + c >>> 0;
      }
      exports.sum32_3 = sum32_3;
      function sum32_4(a, b, c, d) {
        return a + b + c + d >>> 0;
      }
      exports.sum32_4 = sum32_4;
      function sum32_5(a, b, c, d, e) {
        return a + b + c + d + e >>> 0;
      }
      exports.sum32_5 = sum32_5;
      function sum64(buf, pos, ah, al) {
        var bh = buf[pos];
        var bl = buf[pos + 1];
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf[pos] = hi >>> 0;
        buf[pos + 1] = lo;
      }
      exports.sum64 = sum64;
      function sum64_hi(ah, al, bh, bl) {
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      exports.sum64_hi = sum64_hi;
      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      exports.sum64_lo = sum64_lo;
      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      exports.sum64_4_hi = sum64_4_hi;
      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      exports.sum64_4_lo = sum64_4_lo;
      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = lo + el >>> 0;
        carry += lo < el ? 1 : 0;
        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      exports.sum64_5_hi = sum64_5_hi;
      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;
        return lo >>> 0;
      }
      exports.sum64_5_lo = sum64_5_lo;
      function rotr64_hi(ah, al, num) {
        var r = al << 32 - num | ah >>> num;
        return r >>> 0;
      }
      exports.rotr64_hi = rotr64_hi;
      function rotr64_lo(ah, al, num) {
        var r = ah << 32 - num | al >>> num;
        return r >>> 0;
      }
      exports.rotr64_lo = rotr64_lo;
      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      exports.shr64_hi = shr64_hi;
      function shr64_lo(ah, al, num) {
        var r = ah << 32 - num | al >>> num;
        return r >>> 0;
      }
      exports.shr64_lo = shr64_lo;
    }
  });

  // node_modules/hash.js/lib/hash/common.js
  var require_common = __commonJS({
    "node_modules/hash.js/lib/hash/common.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var assert3 = require_minimalistic_assert();
      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = "big";
        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      exports.BlockHash = BlockHash;
      BlockHash.prototype.update = function update(msg, enc) {
        msg = utils.toArray(msg, enc);
        if (!this.pending)
          this.pending = msg;
        else
          this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;
        if (this.pending.length >= this._delta8) {
          msg = this.pending;
          var r = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r, msg.length);
          if (this.pending.length === 0)
            this.pending = null;
          msg = utils.join32(msg, 0, msg.length - r, this.endian);
          for (var i = 0; i < msg.length; i += this._delta32)
            this._update(msg, i, i + this._delta32);
        }
        return this;
      };
      BlockHash.prototype.digest = function digest(enc) {
        this.update(this._pad());
        assert3(this.pending === null);
        return this._digest(enc);
      };
      BlockHash.prototype._pad = function pad2() {
        var len = this.pendingTotal;
        var bytes = this._delta8;
        var k = bytes - (len + this.padLength) % bytes;
        var res = new Array(k + this.padLength);
        res[0] = 128;
        for (var i = 1; i < k; i++)
          res[i] = 0;
        len <<= 3;
        if (this.endian === "big") {
          for (var t = 8; t < this.padLength; t++)
            res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = len >>> 24 & 255;
          res[i++] = len >>> 16 & 255;
          res[i++] = len >>> 8 & 255;
          res[i++] = len & 255;
        } else {
          res[i++] = len & 255;
          res[i++] = len >>> 8 & 255;
          res[i++] = len >>> 16 & 255;
          res[i++] = len >>> 24 & 255;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          for (t = 8; t < this.padLength; t++)
            res[i++] = 0;
        }
        return res;
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/common.js
  var require_common2 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var rotr32 = utils.rotr32;
      function ft_1(s, x, y, z) {
        if (s === 0)
          return ch32(x, y, z);
        if (s === 1 || s === 3)
          return p32(x, y, z);
        if (s === 2)
          return maj32(x, y, z);
      }
      exports.ft_1 = ft_1;
      function ch32(x, y, z) {
        return x & y ^ ~x & z;
      }
      exports.ch32 = ch32;
      function maj32(x, y, z) {
        return x & y ^ x & z ^ y & z;
      }
      exports.maj32 = maj32;
      function p32(x, y, z) {
        return x ^ y ^ z;
      }
      exports.p32 = p32;
      function s0_256(x) {
        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
      }
      exports.s0_256 = s0_256;
      function s1_256(x) {
        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
      }
      exports.s1_256 = s1_256;
      function g0_256(x) {
        return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
      }
      exports.g0_256 = g0_256;
      function g1_256(x) {
        return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
      }
      exports.g1_256 = g1_256;
    }
  });

  // node_modules/hash.js/lib/hash/sha/1.js
  var require__ = __commonJS({
    "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var common = require_common();
      var shaCommon = require_common2();
      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_5 = utils.sum32_5;
      var ft_1 = shaCommon.ft_1;
      var BlockHash = common.BlockHash;
      var sha1_K = [
        1518500249,
        1859775393,
        2400959708,
        3395469782
      ];
      function SHA1() {
        if (!(this instanceof SHA1))
          return new SHA1();
        BlockHash.call(this);
        this.h = [
          1732584193,
          4023233417,
          2562383102,
          271733878,
          3285377520
        ];
        this.W = new Array(80);
      }
      utils.inherits(SHA1, BlockHash);
      module.exports = SHA1;
      SHA1.blockSize = 512;
      SHA1.outSize = 160;
      SHA1.hmacStrength = 80;
      SHA1.padLength = 64;
      SHA1.prototype._update = function _update(msg, start) {
        var W2 = this.W;
        for (var i = 0; i < 16; i++)
          W2[i] = msg[start + i];
        for (; i < W2.length; i++)
          W2[i] = rotl32(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16], 1);
        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];
        for (i = 0; i < W2.length; i++) {
          var s = ~~(i / 20);
          var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W2[i], sha1_K[s]);
          e = d;
          d = c;
          c = rotl32(b, 30);
          b = a;
          a = t;
        }
        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
      };
      SHA1.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "big");
        else
          return utils.split32(this.h, "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/256.js
  var require__2 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var common = require_common();
      var shaCommon = require_common2();
      var assert3 = require_minimalistic_assert();
      var sum32 = utils.sum32;
      var sum32_4 = utils.sum32_4;
      var sum32_5 = utils.sum32_5;
      var ch32 = shaCommon.ch32;
      var maj32 = shaCommon.maj32;
      var s0_256 = shaCommon.s0_256;
      var s1_256 = shaCommon.s1_256;
      var g0_256 = shaCommon.g0_256;
      var g1_256 = shaCommon.g1_256;
      var BlockHash = common.BlockHash;
      var sha256_K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      function SHA256() {
        if (!(this instanceof SHA256))
          return new SHA256();
        BlockHash.call(this);
        this.h = [
          1779033703,
          3144134277,
          1013904242,
          2773480762,
          1359893119,
          2600822924,
          528734635,
          1541459225
        ];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils.inherits(SHA256, BlockHash);
      module.exports = SHA256;
      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;
      SHA256.prototype._update = function _update(msg, start) {
        var W2 = this.W;
        for (var i = 0; i < 16; i++)
          W2[i] = msg[start + i];
        for (; i < W2.length; i++)
          W2[i] = sum32_4(g1_256(W2[i - 2]), W2[i - 7], g0_256(W2[i - 15]), W2[i - 16]);
        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];
        var f = this.h[5];
        var g = this.h[6];
        var h = this.h[7];
        assert3(this.k.length === W2.length);
        for (i = 0; i < W2.length; i++) {
          var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W2[i]);
          var T2 = sum32(s0_256(a), maj32(a, b, c));
          h = g;
          g = f;
          f = e;
          e = sum32(d, T1);
          d = c;
          c = b;
          b = a;
          a = sum32(T1, T2);
        }
        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
        this.h[5] = sum32(this.h[5], f);
        this.h[6] = sum32(this.h[6], g);
        this.h[7] = sum32(this.h[7], h);
      };
      SHA256.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "big");
        else
          return utils.split32(this.h, "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/224.js
  var require__3 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var SHA256 = require__2();
      function SHA224() {
        if (!(this instanceof SHA224))
          return new SHA224();
        SHA256.call(this);
        this.h = [
          3238371032,
          914150663,
          812702999,
          4144912697,
          4290775857,
          1750603025,
          1694076839,
          3204075428
        ];
      }
      utils.inherits(SHA224, SHA256);
      module.exports = SHA224;
      SHA224.blockSize = 512;
      SHA224.outSize = 224;
      SHA224.hmacStrength = 192;
      SHA224.padLength = 64;
      SHA224.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h.slice(0, 7), "big");
        else
          return utils.split32(this.h.slice(0, 7), "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha/512.js
  var require__4 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var common = require_common();
      var assert3 = require_minimalistic_assert();
      var rotr64_hi = utils.rotr64_hi;
      var rotr64_lo = utils.rotr64_lo;
      var shr64_hi = utils.shr64_hi;
      var shr64_lo = utils.shr64_lo;
      var sum64 = utils.sum64;
      var sum64_hi = utils.sum64_hi;
      var sum64_lo = utils.sum64_lo;
      var sum64_4_hi = utils.sum64_4_hi;
      var sum64_4_lo = utils.sum64_4_lo;
      var sum64_5_hi = utils.sum64_5_hi;
      var sum64_5_lo = utils.sum64_5_lo;
      var BlockHash = common.BlockHash;
      var sha512_K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function SHA512() {
        if (!(this instanceof SHA512))
          return new SHA512();
        BlockHash.call(this);
        this.h = [
          1779033703,
          4089235720,
          3144134277,
          2227873595,
          1013904242,
          4271175723,
          2773480762,
          1595750129,
          1359893119,
          2917565137,
          2600822924,
          725511199,
          528734635,
          4215389547,
          1541459225,
          327033209
        ];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils.inherits(SHA512, BlockHash);
      module.exports = SHA512;
      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;
      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W2 = this.W;
        for (var i = 0; i < 32; i++)
          W2[i] = msg[start + i];
        for (; i < W2.length; i += 2) {
          var c0_hi = g1_512_hi(W2[i - 4], W2[i - 3]);
          var c0_lo = g1_512_lo(W2[i - 4], W2[i - 3]);
          var c1_hi = W2[i - 14];
          var c1_lo = W2[i - 13];
          var c2_hi = g0_512_hi(W2[i - 30], W2[i - 29]);
          var c2_lo = g0_512_lo(W2[i - 30], W2[i - 29]);
          var c3_hi = W2[i - 32];
          var c3_lo = W2[i - 31];
          W2[i] = sum64_4_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
          W2[i + 1] = sum64_4_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
        }
      };
      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);
        var W2 = this.W;
        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];
        assert3(this.k.length === W2.length);
        for (var i = 0; i < W2.length; i += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i];
          var c3_lo = this.k[i + 1];
          var c4_hi = W2[i];
          var c4_lo = W2[i + 1];
          var T1_hi = sum64_5_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          var T1_lo = sum64_5_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
        }
        sum64(this.h, 0, ah, al);
        sum64(this.h, 2, bh, bl);
        sum64(this.h, 4, ch, cl);
        sum64(this.h, 6, dh, dl);
        sum64(this.h, 8, eh, el);
        sum64(this.h, 10, fh, fl);
        sum64(this.h, 12, gh, gl);
        sum64(this.h, 14, hh, hl);
      };
      SHA512.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "big");
        else
          return utils.split32(this.h, "big");
      };
      function ch64_hi(xh, xl, yh, yl, zh) {
        var r = xh & yh ^ ~xh & zh;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r = xl & yl ^ ~xl & zl;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function maj64_hi(xh, xl, yh, yl, zh) {
        var r = xh & yh ^ xh & zh ^ yh & zh;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r = xl & yl ^ xl & zl ^ yl & zl;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 28);
        var c1_hi = rotr64_hi(xl, xh, 2);
        var c2_hi = rotr64_hi(xl, xh, 7);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 28);
        var c1_lo = rotr64_lo(xl, xh, 2);
        var c2_lo = rotr64_lo(xl, xh, 7);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 14);
        var c1_hi = rotr64_hi(xh, xl, 18);
        var c2_hi = rotr64_hi(xl, xh, 9);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 14);
        var c1_lo = rotr64_lo(xh, xl, 18);
        var c2_lo = rotr64_lo(xl, xh, 9);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 1);
        var c1_hi = rotr64_hi(xh, xl, 8);
        var c2_hi = shr64_hi(xh, xl, 7);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 1);
        var c1_lo = rotr64_lo(xh, xl, 8);
        var c2_lo = shr64_lo(xh, xl, 7);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 19);
        var c1_hi = rotr64_hi(xl, xh, 29);
        var c2_hi = shr64_hi(xh, xl, 6);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0)
          r += 4294967296;
        return r;
      }
      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 19);
        var c1_lo = rotr64_lo(xl, xh, 29);
        var c2_lo = shr64_lo(xh, xl, 6);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0)
          r += 4294967296;
        return r;
      }
    }
  });

  // node_modules/hash.js/lib/hash/sha/384.js
  var require__5 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var SHA512 = require__4();
      function SHA384() {
        if (!(this instanceof SHA384))
          return new SHA384();
        SHA512.call(this);
        this.h = [
          3418070365,
          3238371032,
          1654270250,
          914150663,
          2438529370,
          812702999,
          355462360,
          4144912697,
          1731405415,
          4290775857,
          2394180231,
          1750603025,
          3675008525,
          1694076839,
          1203062813,
          3204075428
        ];
      }
      utils.inherits(SHA384, SHA512);
      module.exports = SHA384;
      SHA384.blockSize = 1024;
      SHA384.outSize = 384;
      SHA384.hmacStrength = 192;
      SHA384.padLength = 128;
      SHA384.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h.slice(0, 12), "big");
        else
          return utils.split32(this.h.slice(0, 12), "big");
      };
    }
  });

  // node_modules/hash.js/lib/hash/sha.js
  var require_sha = __commonJS({
    "node_modules/hash.js/lib/hash/sha.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      exports.sha1 = require__();
      exports.sha224 = require__3();
      exports.sha256 = require__2();
      exports.sha384 = require__5();
      exports.sha512 = require__4();
    }
  });

  // node_modules/hash.js/lib/hash/ripemd.js
  var require_ripemd = __commonJS({
    "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var common = require_common();
      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_3 = utils.sum32_3;
      var sum32_4 = utils.sum32_4;
      var BlockHash = common.BlockHash;
      function RIPEMD160() {
        if (!(this instanceof RIPEMD160))
          return new RIPEMD160();
        BlockHash.call(this);
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        this.endian = "little";
      }
      utils.inherits(RIPEMD160, BlockHash);
      exports.ripemd160 = RIPEMD160;
      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;
      RIPEMD160.prototype._update = function update(msg, start) {
        var A = this.h[0];
        var B = this.h[1];
        var C = this.h[2];
        var D = this.h[3];
        var E = this.h[4];
        var Ah = A;
        var Bh = B;
        var Ch = C;
        var Dh = D;
        var Eh = E;
        for (var j = 0; j < 80; j++) {
          var T = sum32(
            rotl32(
              sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
              s[j]
            ),
            E
          );
          A = E;
          E = D;
          D = rotl32(C, 10);
          C = B;
          B = T;
          T = sum32(
            rotl32(
              sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
              sh[j]
            ),
            Eh
          );
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T;
        }
        T = sum32_3(this.h[1], C, Dh);
        this.h[1] = sum32_3(this.h[2], D, Eh);
        this.h[2] = sum32_3(this.h[3], E, Ah);
        this.h[3] = sum32_3(this.h[4], A, Bh);
        this.h[4] = sum32_3(this.h[0], B, Ch);
        this.h[0] = T;
      };
      RIPEMD160.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "little");
        else
          return utils.split32(this.h, "little");
      };
      function f(j, x, y, z) {
        if (j <= 15)
          return x ^ y ^ z;
        else if (j <= 31)
          return x & y | ~x & z;
        else if (j <= 47)
          return (x | ~y) ^ z;
        else if (j <= 63)
          return x & z | y & ~z;
        else
          return x ^ (y | ~z);
      }
      function K(j) {
        if (j <= 15)
          return 0;
        else if (j <= 31)
          return 1518500249;
        else if (j <= 47)
          return 1859775393;
        else if (j <= 63)
          return 2400959708;
        else
          return 2840853838;
      }
      function Kh(j) {
        if (j <= 15)
          return 1352829926;
        else if (j <= 31)
          return 1548603684;
        else if (j <= 47)
          return 1836072691;
        else if (j <= 63)
          return 2053994217;
        else
          return 0;
      }
      var r = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ];
      var rh = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ];
      var s = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ];
      var sh = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ];
    }
  });

  // node_modules/hash.js/lib/hash/hmac.js
  var require_hmac = __commonJS({
    "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils6();
      var assert3 = require_minimalistic_assert();
      function Hmac(hash, key, enc) {
        if (!(this instanceof Hmac))
          return new Hmac(hash, key, enc);
        this.Hash = hash;
        this.blockSize = hash.blockSize / 8;
        this.outSize = hash.outSize / 8;
        this.inner = null;
        this.outer = null;
        this._init(utils.toArray(key, enc));
      }
      module.exports = Hmac;
      Hmac.prototype._init = function init3(key) {
        if (key.length > this.blockSize)
          key = new this.Hash().update(key).digest();
        assert3(key.length <= this.blockSize);
        for (var i = key.length; i < this.blockSize; i++)
          key.push(0);
        for (i = 0; i < key.length; i++)
          key[i] ^= 54;
        this.inner = new this.Hash().update(key);
        for (i = 0; i < key.length; i++)
          key[i] ^= 106;
        this.outer = new this.Hash().update(key);
      };
      Hmac.prototype.update = function update(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };
      Hmac.prototype.digest = function digest(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };
    }
  });

  // node_modules/hash.js/lib/hash.js
  var require_hash2 = __commonJS({
    "node_modules/hash.js/lib/hash.js"(exports) {
      init_process();
      init_buffer();
      var hash = exports;
      hash.utils = require_utils6();
      hash.common = require_common();
      hash.sha = require_sha();
      hash.ripemd = require_ripemd();
      hash.hmac = require_hmac();
      hash.sha1 = hash.sha.sha1;
      hash.sha256 = hash.sha.sha256;
      hash.sha224 = hash.sha.sha224;
      hash.sha384 = hash.sha.sha384;
      hash.sha512 = hash.sha.sha512;
      hash.ripemd160 = hash.ripemd.ripemd160;
    }
  });

  // node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
  var require_secp256k1 = __commonJS({
    "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = {
        doubles: {
          step: 4,
          points: [
            [
              "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
              "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
              "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
              "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
              "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
              "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
              "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
              "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
              "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
              "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
              "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
              "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
              "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
              "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
              "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
              "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
              "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
              "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
              "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
              "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
              "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
              "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
              "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
              "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
              "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
              "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
              "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
              "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
              "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
              "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
              "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
              "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
              "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
              "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
              "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
              "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
              "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
              "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
              "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
              "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
              "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
              "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
              "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
              "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
              "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
              "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
              "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
              "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
              "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
              "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
              "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
              "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
              "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
              "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
              "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
              "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
              "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
              "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
              "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
              "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
              "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
              "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
              "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
              "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
              "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
              "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
              "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
              "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
              "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
              "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
              "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
              "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
              "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
              "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
              "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
              "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
              "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
              "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
              "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
              "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
              "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
              "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
              "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
              "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
              "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
              "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
              "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
              "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
              "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
              "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
              "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
              "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
              "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
              "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
              "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
              "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
              "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
              "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
              "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
              "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
              "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
              "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
              "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
              "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
              "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
              "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
              "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
              "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
              "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
              "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
              "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
              "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
              "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
              "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
              "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
              "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
              "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
              "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
              "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
              "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
              "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
              "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
              "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
              "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
              "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
              "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
              "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
              "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
              "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
              "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
          ]
        },
        naf: {
          wnd: 7,
          points: [
            [
              "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
              "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
              "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
              "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
              "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
              "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
              "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
              "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
              "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
              "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
              "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
              "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
              "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
              "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
              "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
              "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
              "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
              "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
              "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
              "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
              "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
              "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
              "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
              "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
              "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
              "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
              "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
              "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
              "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
              "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
              "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
              "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
              "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
              "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
              "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
              "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
              "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
              "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
              "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
              "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
              "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
              "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
              "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
              "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
              "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
              "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
              "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
              "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
              "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
              "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
              "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
              "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
              "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
              "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
              "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
              "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
              "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
              "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
              "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
              "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
              "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
              "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
              "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
              "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
              "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
              "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
              "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
              "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
              "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
              "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
              "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
              "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
              "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
              "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
              "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
              "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
              "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
              "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
              "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
              "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
              "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
              "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
              "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
              "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
              "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
              "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
              "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
              "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
              "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
              "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
              "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
              "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
              "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
              "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
              "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
              "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
              "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
              "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
              "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
              "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
              "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
              "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
              "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
              "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
              "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
              "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
              "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
              "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
              "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
              "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
              "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
              "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
              "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
              "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
              "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
              "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
              "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
              "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
              "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
              "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
              "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
              "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
              "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
              "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
              "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
              "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
              "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
              "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
              "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
              "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
              "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
              "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
              "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
              "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
              "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
              "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
              "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
              "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
              "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
              "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
              "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
              "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
              "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
              "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
              "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
              "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
              "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
              "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
              "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
              "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
              "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
              "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
              "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
              "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
              "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
              "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
              "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
              "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
              "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
              "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
              "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
              "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
              "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
              "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
              "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
              "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
              "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
              "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
              "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
              "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
              "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
              "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
              "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
              "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
              "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
              "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
              "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
              "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
              "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
              "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
              "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
              "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
              "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
              "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
              "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
              "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
              "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
              "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
              "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
              "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
              "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
              "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
              "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
              "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
              "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
              "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
              "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
              "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
              "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
              "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
              "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
              "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
              "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
              "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
              "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
              "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
              "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
              "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
              "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
              "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
              "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
              "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
              "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
              "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
              "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
              "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
              "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
              "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
              "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
              "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
              "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
              "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
              "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
              "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
              "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
              "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
              "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
              "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
              "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
              "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
              "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
              "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
              "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
              "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
              "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
              "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
              "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
              "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
              "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
              "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
              "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
              "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
              "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
              "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
              "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
              "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
              "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
              "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
              "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
              "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
              "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
              "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
              "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
              "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
          ]
        }
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/curves.js
  var require_curves = __commonJS({
    "node_modules/elliptic/lib/elliptic/curves.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var curves = exports;
      var hash = require_hash2();
      var curve = require_curve();
      var utils = require_utils5();
      var assert3 = utils.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve.short(options);
        else if (options.type === "edwards")
          this.curve = new curve.edwards(options);
        else
          this.curve = new curve.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert3(this.g.validate(), "Invalid curve");
        assert3(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve2 = new PresetCurve(options);
            Object.defineProperty(curves, name2, {
              configurable: true,
              enumerable: true,
              value: curve2
            });
            return curve2;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = require_secp256k1();
      } catch (e) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    }
  });

  // node_modules/hmac-drbg/lib/hmac-drbg.js
  var require_hmac_drbg = __commonJS({
    "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var hash = require_hash2();
      var utils = require_utils4();
      var assert3 = require_minimalistic_assert();
      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG))
          return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;
        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;
        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;
        var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
        var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
        var pers = utils.toArray(options.pers, options.persEnc || "hex");
        assert3(
          entropy.length >= this.minEntropy / 8,
          "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
        );
        this._init(entropy, nonce, pers);
      }
      module.exports = HmacDRBG;
      HmacDRBG.prototype._init = function init3(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);
        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0;
          this.V[i] = 1;
        }
        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 281474976710656;
      };
      HmacDRBG.prototype._hmac = function hmac() {
        return new hash.hmac(this.hash, this.K);
      };
      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac().update(this.V).update([0]);
        if (seed)
          kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed)
          return;
        this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
        this.V = this._hmac().update(this.V).digest();
      };
      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }
        entropy = utils.toArray(entropy, entropyEnc);
        add = utils.toArray(add, addEnc);
        assert3(
          entropy.length >= this.minEntropy / 8,
          "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
        );
        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };
      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval)
          throw new Error("Reseed is required");
        if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
        }
        if (add) {
          add = utils.toArray(add, addEnc || "hex");
          this._update(add);
        }
        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }
        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils.encode(res, enc);
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/key.js
  var require_key = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var utils = require_utils5();
      var assert3 = utils.assert;
      function KeyPair(ec, options) {
        this.ec = ec;
        this.priv = null;
        this.pub = null;
        if (options.priv)
          this._importPrivate(options.priv, options.privEnc);
        if (options.pub)
          this._importPublic(options.pub, options.pubEnc);
      }
      module.exports = KeyPair;
      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(ec, {
          pub,
          pubEnc: enc
        });
      };
      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
        if (priv instanceof KeyPair)
          return priv;
        return new KeyPair(ec, {
          priv,
          privEnc: enc
        });
      };
      KeyPair.prototype.validate = function validate() {
        var pub = this.getPublic();
        if (pub.isInfinity())
          return { result: false, reason: "Invalid public key" };
        if (!pub.validate())
          return { result: false, reason: "Public key is not a point" };
        if (!pub.mul(this.ec.curve.n).isInfinity())
          return { result: false, reason: "Public key * N != O" };
        return { result: true, reason: null };
      };
      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }
        if (!this.pub)
          this.pub = this.ec.g.mul(this.priv);
        if (!enc)
          return this.pub;
        return this.pub.encode(enc, compact);
      };
      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex")
          return this.priv.toString(16, 2);
        else
          return this.priv;
      };
      KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
        this.priv = new BN(key, enc || 16);
        this.priv = this.priv.umod(this.ec.curve.n);
      };
      KeyPair.prototype._importPublic = function _importPublic(key, enc) {
        if (key.x || key.y) {
          if (this.ec.curve.type === "mont") {
            assert3(key.x, "Need x coordinate");
          } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert3(key.x && key.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key.x, key.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key, enc);
      };
      KeyPair.prototype.derive = function derive(pub) {
        if (!pub.validate()) {
          assert3(pub.validate(), "public point not validated");
        }
        return pub.mul(this.priv).getX();
      };
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };
      KeyPair.prototype.verify = function verify(msg, signature, options) {
        return this.ec.verify(msg, signature, this, void 0, options);
      };
      KeyPair.prototype.inspect = function inspect4() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/signature.js
  var require_signature = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var utils = require_utils5();
      var assert3 = utils.assert;
      function Signature(options, enc) {
        if (options instanceof Signature)
          return options;
        if (this._importDER(options, enc))
          return;
        assert3(options.r && options.s, "Signature without r or s");
        this.r = new BN(options.r, 16);
        this.s = new BN(options.s, 16);
        if (options.recoveryParam === void 0)
          this.recoveryParam = null;
        else
          this.recoveryParam = options.recoveryParam;
      }
      module.exports = Signature;
      function Position() {
        this.place = 0;
      }
      function getLength(buf, p) {
        var initial = buf[p.place++];
        if (!(initial & 128)) {
          return initial;
        }
        var octetLen = initial & 15;
        if (octetLen === 0 || octetLen > 4) {
          return false;
        }
        if (buf[p.place] === 0) {
          return false;
        }
        var val = 0;
        for (var i = 0, off3 = p.place; i < octetLen; i++, off3++) {
          val <<= 8;
          val |= buf[off3];
          val >>>= 0;
        }
        if (val <= 127) {
          return false;
        }
        p.place = off3;
        return val;
      }
      function rmPadding(buf) {
        var i = 0;
        var len = buf.length - 1;
        while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
          i++;
        }
        if (i === 0) {
          return buf;
        }
        return buf.slice(i);
      }
      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils.toArray(data, enc);
        var p = new Position();
        if (data[p.place++] !== 48) {
          return false;
        }
        var len = getLength(data, p);
        if (len === false) {
          return false;
        }
        if (len + p.place !== data.length) {
          return false;
        }
        if (data[p.place++] !== 2) {
          return false;
        }
        var rlen = getLength(data, p);
        if (rlen === false) {
          return false;
        }
        if ((data[p.place] & 128) !== 0) {
          return false;
        }
        var r = data.slice(p.place, rlen + p.place);
        p.place += rlen;
        if (data[p.place++] !== 2) {
          return false;
        }
        var slen = getLength(data, p);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p.place) {
          return false;
        }
        if ((data[p.place] & 128) !== 0) {
          return false;
        }
        var s = data.slice(p.place, slen + p.place);
        if (r[0] === 0) {
          if (r[1] & 128) {
            r = r.slice(1);
          } else {
            return false;
          }
        }
        if (s[0] === 0) {
          if (s[1] & 128) {
            s = s.slice(1);
          } else {
            return false;
          }
        }
        this.r = new BN(r);
        this.s = new BN(s);
        this.recoveryParam = null;
        return true;
      };
      function constructLength(arr, len) {
        if (len < 128) {
          arr.push(len);
          return;
        }
        var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
        arr.push(octets | 128);
        while (--octets) {
          arr.push(len >>> (octets << 3) & 255);
        }
        arr.push(len);
      }
      Signature.prototype.toDER = function toDER(enc) {
        var r = this.r.toArray();
        var s = this.s.toArray();
        if (r[0] & 128)
          r = [0].concat(r);
        if (s[0] & 128)
          s = [0].concat(s);
        r = rmPadding(r);
        s = rmPadding(s);
        while (!s[0] && !(s[1] & 128)) {
          s = s.slice(1);
        }
        var arr = [2];
        constructLength(arr, r.length);
        arr = arr.concat(r);
        arr.push(2);
        constructLength(arr, s.length);
        var backHalf = arr.concat(s);
        var res = [48];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils.encode(res, enc);
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/ec/index.js
  var require_ec = __commonJS({
    "node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var HmacDRBG = require_hmac_drbg();
      var utils = require_utils5();
      var curves = require_curves();
      var rand = require_brorand();
      var assert3 = utils.assert;
      var KeyPair = require_key();
      var Signature = require_signature();
      function EC(options) {
        if (!(this instanceof EC))
          return new EC(options);
        if (typeof options === "string") {
          assert3(
            Object.prototype.hasOwnProperty.call(curves, options),
            "Unknown curve " + options
          );
          options = curves[options];
        }
        if (options instanceof curves.PresetCurve)
          options = { curve: options };
        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);
        this.hash = options.hash || options.curve.hash;
      }
      module.exports = EC;
      EC.prototype.keyPair = function keyPair(options) {
        return new KeyPair(this, options);
      };
      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return KeyPair.fromPrivate(this, priv, enc);
      };
      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return KeyPair.fromPublic(this, pub, enc);
      };
      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options)
          options = {};
        var drbg = new HmacDRBG({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: options.entropy && options.entropyEnc || "utf8",
          nonce: this.n.toArray()
        });
        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new BN(2));
        for (; ; ) {
          var priv = new BN(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0)
            continue;
          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        }
      };
      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
        var byteLength3;
        if (BN.isBN(msg) || typeof msg === "number") {
          msg = new BN(msg, 16);
          byteLength3 = msg.byteLength();
        } else if (typeof msg === "object") {
          byteLength3 = msg.length;
          msg = new BN(msg, 16);
        } else {
          var str = msg.toString();
          byteLength3 = str.length + 1 >>> 1;
          msg = new BN(str, 16);
        }
        if (typeof bitLength !== "number") {
          bitLength = byteLength3 * 8;
        }
        var delta = bitLength - this.n.bitLength();
        if (delta > 0)
          msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0)
          return msg.sub(this.n);
        else
          return msg;
      };
      EC.prototype.sign = function sign(msg, key, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options)
          options = {};
        if (typeof msg !== "string" && typeof msg !== "number" && !BN.isBN(msg)) {
          assert3(
            typeof msg === "object" && msg && typeof msg.length === "number",
            "Expected message to be an array-like, a hex string, or a BN instance"
          );
          assert3(msg.length >>> 0 === msg.length);
          for (var i = 0; i < msg.length; i++) assert3((msg[i] & 255) === msg[i]);
        }
        key = this.keyFromPrivate(key, enc);
        msg = this._truncateToN(msg, false, options.msgBitLength);
        assert3(!msg.isNeg(), "Can not sign a negative message");
        var bytes = this.n.byteLength();
        var bkey = key.getPrivate().toArray("be", bytes);
        var nonce = msg.toArray("be", bytes);
        assert3(new BN(nonce).eq(msg), "Can not sign message");
        var drbg = new HmacDRBG({
          hash: this.hash,
          entropy: bkey,
          nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8"
        });
        var ns1 = this.n.sub(new BN(1));
        for (var iter = 0; ; iter++) {
          var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;
          var kp = this.g.mul(k);
          if (kp.isInfinity())
            continue;
          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0)
            continue;
          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
          s = s.umod(this.n);
          if (s.cmpn(0) === 0)
            continue;
          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
          if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
          }
          return new Signature({ r, s, recoveryParam });
        }
      };
      EC.prototype.verify = function verify(msg, signature, key, enc, options) {
        if (!options)
          options = {};
        msg = this._truncateToN(msg, false, options.msgBitLength);
        key = this.keyFromPublic(key, enc);
        signature = new Signature(signature, "hex");
        var r = signature.r;
        var s = signature.s;
        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
          return false;
        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
          return false;
        var sinv = s.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r).umod(this.n);
        var p;
        if (!this.curve._maxwellTrick) {
          p = this.g.mulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity())
            return false;
          return p.getX().umod(this.n).cmp(r) === 0;
        }
        p = this.g.jmulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.eqXToP(r);
      };
      EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
        assert3((3 & j) === j, "The recovery param is more than two bits");
        signature = new Signature(signature, enc);
        var n = this.n;
        var e = new BN(msg);
        var r = signature.r;
        var s = signature.s;
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
          throw new Error("Unable to find sencond key candinate");
        if (isSecondKey)
          r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
        else
          r = this.curve.pointFromX(r, isYOdd);
        var rInv = signature.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s2 = s.mul(rInv).umod(n);
        return this.g.mulAdd(s1, r, s2);
      };
      EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
        signature = new Signature(signature, enc);
        if (signature.recoveryParam !== null)
          return signature.recoveryParam;
        for (var i = 0; i < 4; i++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature, i);
          } catch (e2) {
            continue;
          }
          if (Qprime.eq(Q))
            return i;
        }
        throw new Error("Unable to find valid recovery factor");
      };
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/key.js
  var require_key2 = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils5();
      var assert3 = utils.assert;
      var parseBytes = utils.parseBytes;
      var cachedProperty = utils.cachedProperty;
      function KeyPair(eddsa, params) {
        this.eddsa = eddsa;
        this._secret = parseBytes(params.secret);
        if (eddsa.isPoint(params.pub))
          this._pub = params.pub;
        else
          this._pubBytes = parseBytes(params.pub);
      }
      KeyPair.fromPublic = function fromPublic(eddsa, pub) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(eddsa, { pub });
      };
      KeyPair.fromSecret = function fromSecret(eddsa, secret) {
        if (secret instanceof KeyPair)
          return secret;
        return new KeyPair(eddsa, { secret });
      };
      KeyPair.prototype.secret = function secret() {
        return this._secret;
      };
      cachedProperty(KeyPair, "pubBytes", function pubBytes() {
        return this.eddsa.encodePoint(this.pub());
      });
      cachedProperty(KeyPair, "pub", function pub() {
        if (this._pubBytes)
          return this.eddsa.decodePoint(this._pubBytes);
        return this.eddsa.g.mul(this.priv());
      });
      cachedProperty(KeyPair, "privBytes", function privBytes() {
        var eddsa = this.eddsa;
        var hash = this.hash();
        var lastIx = eddsa.encodingLength - 1;
        var a = hash.slice(0, eddsa.encodingLength);
        a[0] &= 248;
        a[lastIx] &= 127;
        a[lastIx] |= 64;
        return a;
      });
      cachedProperty(KeyPair, "priv", function priv() {
        return this.eddsa.decodeInt(this.privBytes());
      });
      cachedProperty(KeyPair, "hash", function hash() {
        return this.eddsa.hash().update(this.secret()).digest();
      });
      cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
        return this.hash().slice(this.eddsa.encodingLength);
      });
      KeyPair.prototype.sign = function sign(message) {
        assert3(this._secret, "KeyPair can only verify");
        return this.eddsa.sign(message, this);
      };
      KeyPair.prototype.verify = function verify(message, sig) {
        return this.eddsa.verify(message, sig, this);
      };
      KeyPair.prototype.getSecret = function getSecret(enc) {
        assert3(this._secret, "KeyPair is public only");
        return utils.encode(this.secret(), enc);
      };
      KeyPair.prototype.getPublic = function getPublic(enc) {
        return utils.encode(this.pubBytes(), enc);
      };
      module.exports = KeyPair;
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/signature.js
  var require_signature2 = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn6();
      var utils = require_utils5();
      var assert3 = utils.assert;
      var cachedProperty = utils.cachedProperty;
      var parseBytes = utils.parseBytes;
      function Signature(eddsa, sig) {
        this.eddsa = eddsa;
        if (typeof sig !== "object")
          sig = parseBytes(sig);
        if (Array.isArray(sig)) {
          assert3(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
          sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength)
          };
        }
        assert3(sig.R && sig.S, "Signature without R or S");
        if (eddsa.isPoint(sig.R))
          this._R = sig.R;
        if (sig.S instanceof BN)
          this._S = sig.S;
        this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
        this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
      }
      cachedProperty(Signature, "S", function S() {
        return this.eddsa.decodeInt(this.Sencoded());
      });
      cachedProperty(Signature, "R", function R() {
        return this.eddsa.decodePoint(this.Rencoded());
      });
      cachedProperty(Signature, "Rencoded", function Rencoded() {
        return this.eddsa.encodePoint(this.R());
      });
      cachedProperty(Signature, "Sencoded", function Sencoded() {
        return this.eddsa.encodeInt(this.S());
      });
      Signature.prototype.toBytes = function toBytes() {
        return this.Rencoded().concat(this.Sencoded());
      };
      Signature.prototype.toHex = function toHex3() {
        return utils.encode(this.toBytes(), "hex").toUpperCase();
      };
      module.exports = Signature;
    }
  });

  // node_modules/elliptic/lib/elliptic/eddsa/index.js
  var require_eddsa = __commonJS({
    "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var hash = require_hash2();
      var curves = require_curves();
      var utils = require_utils5();
      var assert3 = utils.assert;
      var parseBytes = utils.parseBytes;
      var KeyPair = require_key2();
      var Signature = require_signature2();
      function EDDSA(curve) {
        assert3(curve === "ed25519", "only tested with ed25519 so far");
        if (!(this instanceof EDDSA))
          return new EDDSA(curve);
        curve = curves[curve].curve;
        this.curve = curve;
        this.g = curve.g;
        this.g.precompute(curve.n.bitLength() + 1);
        this.pointClass = curve.point().constructor;
        this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
        this.hash = hash.sha512;
      }
      module.exports = EDDSA;
      EDDSA.prototype.sign = function sign(message, secret) {
        message = parseBytes(message);
        var key = this.keyFromSecret(secret);
        var r = this.hashInt(key.messagePrefix(), message);
        var R = this.g.mul(r);
        var Rencoded = this.encodePoint(R);
        var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
        var S = r.add(s_).umod(this.curve.n);
        return this.makeSignature({ R, S, Rencoded });
      };
      EDDSA.prototype.verify = function verify(message, sig, pub) {
        message = parseBytes(message);
        sig = this.makeSignature(sig);
        if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
          return false;
        }
        var key = this.keyFromPublic(pub);
        var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
        var SG = this.g.mul(sig.S());
        var RplusAh = sig.R().add(key.pub().mul(h));
        return RplusAh.eq(SG);
      };
      EDDSA.prototype.hashInt = function hashInt() {
        var hash2 = this.hash();
        for (var i = 0; i < arguments.length; i++)
          hash2.update(arguments[i]);
        return utils.intFromLE(hash2.digest()).umod(this.curve.n);
      };
      EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
        return KeyPair.fromPublic(this, pub);
      };
      EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
        return KeyPair.fromSecret(this, secret);
      };
      EDDSA.prototype.makeSignature = function makeSignature(sig) {
        if (sig instanceof Signature)
          return sig;
        return new Signature(this, sig);
      };
      EDDSA.prototype.encodePoint = function encodePoint(point) {
        var enc = point.getY().toArray("le", this.encodingLength);
        enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
        return enc;
      };
      EDDSA.prototype.decodePoint = function decodePoint(bytes) {
        bytes = utils.parseBytes(bytes);
        var lastIx = bytes.length - 1;
        var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
        var xIsOdd = (bytes[lastIx] & 128) !== 0;
        var y = utils.intFromLE(normed);
        return this.curve.pointFromY(y, xIsOdd);
      };
      EDDSA.prototype.encodeInt = function encodeInt(num) {
        return num.toArray("le", this.encodingLength);
      };
      EDDSA.prototype.decodeInt = function decodeInt(bytes) {
        return utils.intFromLE(bytes);
      };
      EDDSA.prototype.isPoint = function isPoint(val) {
        return val instanceof this.pointClass;
      };
    }
  });

  // node_modules/elliptic/lib/elliptic.js
  var require_elliptic = __commonJS({
    "node_modules/elliptic/lib/elliptic.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var elliptic = exports;
      elliptic.version = require_package().version;
      elliptic.utils = require_utils5();
      elliptic.rand = require_brorand();
      elliptic.curve = require_curve();
      elliptic.curves = require_curves();
      elliptic.ec = require_ec();
      elliptic.eddsa = require_eddsa();
    }
  });

  // node_modules/secp256k1/lib/elliptic.js
  var require_elliptic2 = __commonJS({
    "node_modules/secp256k1/lib/elliptic.js"(exports, module) {
      init_process();
      init_buffer();
      var EC = require_elliptic().ec;
      var ec = new EC("secp256k1");
      var ecparams = ec.curve;
      var BN = ecparams.n.constructor;
      function loadCompressedPublicKey(first, xbuf) {
        let x = new BN(xbuf);
        if (x.cmp(ecparams.p) >= 0) return null;
        x = x.toRed(ecparams.red);
        let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
        if (first === 3 !== y.isOdd()) y = y.redNeg();
        const x3 = x.redSqr().redIMul(x);
        if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
        return ec.keyPair({ pub: { x, y } });
      }
      function loadUncompressedPublicKey(first, xbuf, ybuf) {
        let x = new BN(xbuf);
        let y = new BN(ybuf);
        if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
        x = x.toRed(ecparams.red);
        y = y.toRed(ecparams.red);
        if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
        const x3 = x.redSqr().redIMul(x);
        if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
        return ec.keyPair({ pub: { x, y } });
      }
      function loadPublicKey(pubkey) {
        const first = pubkey[0];
        switch (first) {
          case 2:
          case 3:
            if (pubkey.length !== 33) return null;
            return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
          case 4:
          case 6:
          case 7:
            if (pubkey.length !== 65) return null;
            return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
          default:
            return null;
        }
      }
      function savePublicKey(output, point) {
        const pubkey = point.encode(null, output.length === 33);
        for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
      }
      module.exports = {
        contextRandomize() {
          return 0;
        },
        privateKeyVerify(seckey) {
          const bn = new BN(seckey);
          return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
        },
        privateKeyNegate(seckey) {
          const bn = new BN(seckey);
          const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
          seckey.set(negate);
          return 0;
        },
        privateKeyTweakAdd(seckey, tweak) {
          const bn = new BN(tweak);
          if (bn.cmp(ecparams.n) >= 0) return 1;
          bn.iadd(new BN(seckey));
          if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
          if (bn.isZero()) return 1;
          const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
          seckey.set(tweaked);
          return 0;
        },
        privateKeyTweakMul(seckey, tweak) {
          let bn = new BN(tweak);
          if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
          bn.imul(new BN(seckey));
          if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
          const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
          seckey.set(tweaked);
          return 0;
        },
        publicKeyVerify(pubkey) {
          const pair = loadPublicKey(pubkey);
          return pair === null ? 1 : 0;
        },
        publicKeyCreate(output, seckey) {
          const bn = new BN(seckey);
          if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
          const point = ec.keyFromPrivate(seckey).getPublic();
          savePublicKey(output, point);
          return 0;
        },
        publicKeyConvert(output, pubkey) {
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 1;
          const point = pair.getPublic();
          savePublicKey(output, point);
          return 0;
        },
        publicKeyNegate(output, pubkey) {
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 1;
          const point = pair.getPublic();
          point.y = point.y.redNeg();
          savePublicKey(output, point);
          return 0;
        },
        publicKeyCombine(output, pubkeys) {
          const pairs = new Array(pubkeys.length);
          for (let i = 0; i < pubkeys.length; ++i) {
            pairs[i] = loadPublicKey(pubkeys[i]);
            if (pairs[i] === null) return 1;
          }
          let point = pairs[0].getPublic();
          for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
          if (point.isInfinity()) return 2;
          savePublicKey(output, point);
          return 0;
        },
        publicKeyTweakAdd(output, pubkey, tweak) {
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 1;
          tweak = new BN(tweak);
          if (tweak.cmp(ecparams.n) >= 0) return 2;
          const point = pair.getPublic().add(ecparams.g.mul(tweak));
          if (point.isInfinity()) return 2;
          savePublicKey(output, point);
          return 0;
        },
        publicKeyTweakMul(output, pubkey, tweak) {
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 1;
          tweak = new BN(tweak);
          if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
          const point = pair.getPublic().mul(tweak);
          savePublicKey(output, point);
          return 0;
        },
        signatureNormalize(sig) {
          const r = new BN(sig.subarray(0, 32));
          const s = new BN(sig.subarray(32, 64));
          if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
          if (s.cmp(ec.nh) === 1) {
            sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
          }
          return 0;
        },
        // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
        // Adapted for Uint8Array instead Buffer
        signatureExport(obj, sig) {
          const sigR = sig.subarray(0, 32);
          const sigS = sig.subarray(32, 64);
          if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
          if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
          const { output } = obj;
          let r = output.subarray(4, 4 + 33);
          r[0] = 0;
          r.set(sigR, 1);
          let lenR = 33;
          let posR = 0;
          for (; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR) ;
          r = r.subarray(posR);
          if (r[0] & 128) return 1;
          if (lenR > 1 && r[0] === 0 && !(r[1] & 128)) return 1;
          let s = output.subarray(6 + 33, 6 + 33 + 33);
          s[0] = 0;
          s.set(sigS, 1);
          let lenS = 33;
          let posS = 0;
          for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS) ;
          s = s.subarray(posS);
          if (s[0] & 128) return 1;
          if (lenS > 1 && s[0] === 0 && !(s[1] & 128)) return 1;
          obj.outputlen = 6 + lenR + lenS;
          output[0] = 48;
          output[1] = obj.outputlen - 2;
          output[2] = 2;
          output[3] = r.length;
          output.set(r, 4);
          output[4 + lenR] = 2;
          output[5 + lenR] = s.length;
          output.set(s, 6 + lenR);
          return 0;
        },
        // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
        // Adapted for Uint8Array instead Buffer
        signatureImport(output, sig) {
          if (sig.length < 8) return 1;
          if (sig.length > 72) return 1;
          if (sig[0] !== 48) return 1;
          if (sig[1] !== sig.length - 2) return 1;
          if (sig[2] !== 2) return 1;
          const lenR = sig[3];
          if (lenR === 0) return 1;
          if (5 + lenR >= sig.length) return 1;
          if (sig[4 + lenR] !== 2) return 1;
          const lenS = sig[5 + lenR];
          if (lenS === 0) return 1;
          if (6 + lenR + lenS !== sig.length) return 1;
          if (sig[4] & 128) return 1;
          if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
          if (sig[lenR + 6] & 128) return 1;
          if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
          let sigR = sig.subarray(4, 4 + lenR);
          if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
          if (sigR.length > 32) return 1;
          let sigS = sig.subarray(6 + lenR);
          if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
          if (sigS.length > 32) throw new Error("S length is too long");
          let r = new BN(sigR);
          if (r.cmp(ecparams.n) >= 0) r = new BN(0);
          let s = new BN(sig.subarray(6 + lenR));
          if (s.cmp(ecparams.n) >= 0) s = new BN(0);
          output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
          output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
          return 0;
        },
        ecdsaSign(obj, message, seckey, data, noncefn) {
          if (noncefn) {
            const _noncefn = noncefn;
            noncefn = (counter) => {
              const nonce = _noncefn(message, seckey, null, data, counter);
              const isValid = nonce instanceof Uint8Array && nonce.length === 32;
              if (!isValid) throw new Error("This is the way");
              return new BN(nonce);
            };
          }
          const d = new BN(seckey);
          if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
          let sig;
          try {
            sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
          } catch (err2) {
            return 1;
          }
          obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
          obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
          obj.recid = sig.recoveryParam;
          return 0;
        },
        ecdsaVerify(sig, msg32, pubkey) {
          const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
          const sigr = new BN(sigObj.r);
          const sigs = new BN(sigObj.s);
          if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
          if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 2;
          const point = pair.getPublic();
          const isValid = ec.verify(msg32, sigObj, point);
          return isValid ? 0 : 3;
        },
        ecdsaRecover(output, sig, recid, msg32) {
          const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
          const sigr = new BN(sigObj.r);
          const sigs = new BN(sigObj.s);
          if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
          if (sigr.isZero() || sigs.isZero()) return 2;
          let point;
          try {
            point = ec.recoverPubKey(msg32, sigObj, recid);
          } catch (err2) {
            return 2;
          }
          savePublicKey(output, point);
          return 0;
        },
        ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
          const pair = loadPublicKey(pubkey);
          if (pair === null) return 1;
          const scalar = new BN(seckey);
          if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
          const point = pair.getPublic().mul(scalar);
          if (hashfn === void 0) {
            const data2 = point.encode(null, true);
            const sha256 = ec.hash().update(data2).digest();
            for (let i = 0; i < 32; ++i) output[i] = sha256[i];
          } else {
            if (!xbuf) xbuf = new Uint8Array(32);
            const x = point.getX().toArray("be", 32);
            for (let i = 0; i < 32; ++i) xbuf[i] = x[i];
            if (!ybuf) ybuf = new Uint8Array(32);
            const y = point.getY().toArray("be", 32);
            for (let i = 0; i < 32; ++i) ybuf[i] = y[i];
            const hash = hashfn(xbuf, ybuf, data);
            const isValid = hash instanceof Uint8Array && hash.length === output.length;
            if (!isValid) return 2;
            output.set(hash);
          }
          return 0;
        }
      };
    }
  });

  // node_modules/secp256k1/elliptic.js
  var require_elliptic3 = __commonJS({
    "node_modules/secp256k1/elliptic.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_lib2()(require_elliptic2());
    }
  });

  // node_modules/ethereum-cryptography/random.js
  var require_random = __commonJS({
    "node_modules/ethereum-cryptography/random.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var randombytes = require_browser();
      function getRandomBytes(bytes) {
        return new Promise(function(resolve2, reject) {
          randombytes(bytes, function(err2, resp) {
            if (err2) {
              reject(err2);
              return;
            }
            resolve2(resp);
          });
        });
      }
      exports.getRandomBytes = getRandomBytes;
      function getRandomBytesSync(bytes) {
        return randombytes(bytes);
      }
      exports.getRandomBytesSync = getRandomBytesSync;
    }
  });

  // node_modules/ethereum-cryptography/secp256k1.js
  var require_secp256k12 = __commonJS({
    "node_modules/ethereum-cryptography/secp256k1.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports && exports.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      function __export2(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      var secp256k1_1 = require_elliptic3();
      var random_1 = require_random();
      var SECP256K1_PRIVATE_KEY_SIZE = 32;
      function createPrivateKey() {
        return __awaiter(this, void 0, void 0, function() {
          var pk;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (false) return [3, 2];
                return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
              case 1:
                pk = _a.sent();
                if (secp256k1_1.privateKeyVerify(pk)) {
                  return [2, pk];
                }
                return [3, 0];
              case 2:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
      exports.createPrivateKey = createPrivateKey;
      function createPrivateKeySync() {
        while (true) {
          var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
          if (secp256k1_1.privateKeyVerify(pk)) {
            return pk;
          }
        }
      }
      exports.createPrivateKeySync = createPrivateKeySync;
      __export2(require_elliptic3());
    }
  });

  // node_modules/ethereumjs-util/dist.browser/internal.js
  var require_internal = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/internal.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
      function isHexPrefixed(str) {
        if (typeof str !== "string") {
          throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
        }
        return str[0] === "0" && str[1] === "x";
      }
      exports.isHexPrefixed = isHexPrefixed;
      var stripHexPrefix = function(str) {
        if (typeof str !== "string")
          throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
        return isHexPrefixed(str) ? str.slice(2) : str;
      };
      exports.stripHexPrefix = stripHexPrefix;
      function padToEven(value) {
        var a = value;
        if (typeof a !== "string") {
          throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
        }
        if (a.length % 2)
          a = "0".concat(a);
        return a;
      }
      exports.padToEven = padToEven;
      function getBinarySize(str) {
        if (typeof str !== "string") {
          throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
        }
        return Buffer2.byteLength(str, "utf8");
      }
      exports.getBinarySize = getBinarySize;
      function arrayContainsArray(superset, subset, some) {
        if (Array.isArray(superset) !== true) {
          throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
        }
        if (Array.isArray(subset) !== true) {
          throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
        }
        return subset[some ? "some" : "every"](function(value) {
          return superset.indexOf(value) >= 0;
        });
      }
      exports.arrayContainsArray = arrayContainsArray;
      function toAscii(hex) {
        var str = "";
        var i = 0;
        var l = hex.length;
        if (hex.substring(0, 2) === "0x")
          i = 2;
        for (; i < l; i += 2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
        }
        return str;
      }
      exports.toAscii = toAscii;
      function fromUtf8(stringValue) {
        var str = Buffer2.from(stringValue, "utf8");
        return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
      }
      exports.fromUtf8 = fromUtf8;
      function fromAscii(stringValue) {
        var hex = "";
        for (var i = 0; i < stringValue.length; i++) {
          var code = stringValue.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? "0".concat(n) : n;
        }
        return "0x".concat(hex);
      }
      exports.fromAscii = fromAscii;
      function getKeys(params, key, allowEmpty) {
        if (!Array.isArray(params)) {
          throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
        }
        if (typeof key !== "string") {
          throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
        }
        var result = [];
        for (var i = 0; i < params.length; i++) {
          var value = params[i][key];
          if (allowEmpty && !value) {
            value = "";
          } else if (typeof value !== "string") {
            throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
          }
          result.push(value);
        }
        return result;
      }
      exports.getKeys = getKeys;
      function isHexString(value, length) {
        if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
          return false;
        if (length && value.length !== 2 + 2 * length)
          return false;
        return true;
      }
      exports.isHexString = isHexString;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/helpers.js
  var require_helpers = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/helpers.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
      var internal_1 = require_internal();
      var assertIsHexString = function(input) {
        if (!(0, internal_1.isHexString)(input)) {
          var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
          throw new Error(msg);
        }
      };
      exports.assertIsHexString = assertIsHexString;
      var assertIsBuffer = function(input) {
        if (!Buffer2.isBuffer(input)) {
          var msg = "This method only supports Buffer but input was: ".concat(input);
          throw new Error(msg);
        }
      };
      exports.assertIsBuffer = assertIsBuffer;
      var assertIsArray = function(input) {
        if (!Array.isArray(input)) {
          var msg = "This method only supports number arrays but input was: ".concat(input);
          throw new Error(msg);
        }
      };
      exports.assertIsArray = assertIsArray;
      var assertIsString = function(input) {
        if (typeof input !== "string") {
          var msg = "This method only supports strings but input was: ".concat(input);
          throw new Error(msg);
        }
      };
      exports.assertIsString = assertIsString;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/bytes.js
  var require_bytes2 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/bytes.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __values = exports && exports.__values || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
          next: function() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
      var externals_1 = require_externals();
      var internal_1 = require_internal();
      var helpers_1 = require_helpers();
      var intToHex = function(i) {
        if (!Number.isSafeInteger(i) || i < 0) {
          throw new Error("Received an invalid integer type: ".concat(i));
        }
        return "0x".concat(i.toString(16));
      };
      exports.intToHex = intToHex;
      var intToBuffer = function(i) {
        var hex = (0, exports.intToHex)(i);
        return Buffer2.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
      };
      exports.intToBuffer = intToBuffer;
      var zeros = function(bytes) {
        return Buffer2.allocUnsafe(bytes).fill(0);
      };
      exports.zeros = zeros;
      var setLength = function(msg, length, right) {
        var buf = (0, exports.zeros)(length);
        if (right) {
          if (msg.length < length) {
            msg.copy(buf);
            return buf;
          }
          return msg.slice(0, length);
        } else {
          if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
          }
          return msg.slice(-length);
        }
      };
      var setLengthLeft = function(msg, length) {
        (0, helpers_1.assertIsBuffer)(msg);
        return setLength(msg, length, false);
      };
      exports.setLengthLeft = setLengthLeft;
      var setLengthRight = function(msg, length) {
        (0, helpers_1.assertIsBuffer)(msg);
        return setLength(msg, length, true);
      };
      exports.setLengthRight = setLengthRight;
      var stripZeros = function(a) {
        var first = a[0];
        while (a.length > 0 && first.toString() === "0") {
          a = a.slice(1);
          first = a[0];
        }
        return a;
      };
      var unpadBuffer = function(a) {
        (0, helpers_1.assertIsBuffer)(a);
        return stripZeros(a);
      };
      exports.unpadBuffer = unpadBuffer;
      var unpadArray = function(a) {
        (0, helpers_1.assertIsArray)(a);
        return stripZeros(a);
      };
      exports.unpadArray = unpadArray;
      var unpadHexString = function(a) {
        (0, helpers_1.assertIsHexString)(a);
        a = (0, internal_1.stripHexPrefix)(a);
        return stripZeros(a);
      };
      exports.unpadHexString = unpadHexString;
      var toBuffer = function(v) {
        if (v === null || v === void 0) {
          return Buffer2.allocUnsafe(0);
        }
        if (Buffer2.isBuffer(v)) {
          return Buffer2.from(v);
        }
        if (Array.isArray(v) || v instanceof Uint8Array) {
          return Buffer2.from(v);
        }
        if (typeof v === "string") {
          if (!(0, internal_1.isHexString)(v)) {
            throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
          }
          return Buffer2.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
        }
        if (typeof v === "number") {
          return (0, exports.intToBuffer)(v);
        }
        if (externals_1.BN.isBN(v)) {
          if (v.isNeg()) {
            throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
          }
          return v.toArrayLike(Buffer2);
        }
        if (v.toArray) {
          return Buffer2.from(v.toArray());
        }
        if (v.toBuffer) {
          return Buffer2.from(v.toBuffer());
        }
        throw new Error("invalid type");
      };
      exports.toBuffer = toBuffer;
      var bufferToInt = function(buf) {
        return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
      };
      exports.bufferToInt = bufferToInt;
      var bufferToHex = function(buf) {
        buf = (0, exports.toBuffer)(buf);
        return "0x" + buf.toString("hex");
      };
      exports.bufferToHex = bufferToHex;
      var fromSigned = function(num) {
        return new externals_1.BN(num).fromTwos(256);
      };
      exports.fromSigned = fromSigned;
      var toUnsigned = function(num) {
        return Buffer2.from(num.toTwos(256).toArray());
      };
      exports.toUnsigned = toUnsigned;
      var addHexPrefix = function(str) {
        if (typeof str !== "string") {
          return str;
        }
        return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
      };
      exports.addHexPrefix = addHexPrefix;
      var toUtf8 = function(hex) {
        var zerosRegexp = /^(00)+|(00)+$/g;
        hex = (0, internal_1.stripHexPrefix)(hex);
        if (hex.length % 2 !== 0) {
          throw new Error("Invalid non-even hex string input for toUtf8() provided");
        }
        var bufferVal = Buffer2.from(hex.replace(zerosRegexp, ""), "hex");
        return bufferVal.toString("utf8");
      };
      exports.toUtf8 = toUtf8;
      var baToJSON = function(ba) {
        if (Buffer2.isBuffer(ba)) {
          return "0x".concat(ba.toString("hex"));
        } else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
            array.push((0, exports.baToJSON)(ba[i]));
          }
          return array;
        }
      };
      exports.baToJSON = baToJSON;
      var validateNoLeadingZeroes = function(values) {
        var e_1, _a;
        try {
          for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
            if (v !== void 0 && v.length > 0 && v[0] === 0) {
              throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      };
      exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
      function arrToBufArr(arr) {
        if (!Array.isArray(arr)) {
          return Buffer2.from(arr);
        }
        return arr.map(function(a) {
          return arrToBufArr(a);
        });
      }
      exports.arrToBufArr = arrToBufArr;
      function bufArrToArr(arr) {
        if (!Array.isArray(arr)) {
          return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
        }
        return arr.map(function(a) {
          return bufArrToArr(a);
        });
      }
      exports.bufArrToArr = bufArrToArr;
    }
  });

  // node_modules/ethereum-cryptography/hash-utils.js
  var require_hash_utils = __commonJS({
    "node_modules/ethereum-cryptography/hash-utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      function createHashFunction(hashConstructor) {
        return function(msg) {
          var hash = hashConstructor();
          hash.update(msg);
          return Buffer2.from(hash.digest());
        };
      }
      exports.createHashFunction = createHashFunction;
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_events().EventEmitter;
    }
  });

  // node-modules-polyfills-commonjs:util
  var require_util = __commonJS({
    "node-modules-polyfills-commonjs:util"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_util(), __toCommonJS(util_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var _require = require_buffer();
      var Buffer4 = _require.Buffer;
      var _require2 = require_util();
      var inspect4 = _require2.inspect;
      var custom = inspect4 && inspect4.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer4.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ (function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList2, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join2(s) {
            if (this.length === 0) return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next) ret += s + p.data;
            return ret;
          }
        }, {
          key: "concat",
          value: function concat3(n) {
            if (this.length === 0) return Buffer4.alloc(0);
            var ret = Buffer4.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
          // Consumes a specified amount of bytes or characters from the buffered data.
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
          // Consumes a specified amount of characters from the buffered data.
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str;
              else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Consumes a specified amount of bytes from the buffered data.
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer4.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Make sure the linked list only shows the minimal necessary information.
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect4(this, _objectSpread(_objectSpread({}, options), {}, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }
        }]);
        return BufferList2;
      })();
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function destroy(err2, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err2);
          } else if (err2) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err2);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err2);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err2 || null, function(err3) {
          if (!cb && err3) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err3);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err2) {
        emitErrorNT(self2, err2);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose) return;
        if (self2._readableState && !self2._readableState.emitClose) return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err2) {
        self2.emit("error", err2);
      }
      function errorOrDestroy(stream, err2) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err2);
        else stream.emit("error", err2);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // node_modules/keccak/node_modules/readable-stream/errors-browser.js
  var require_errors_browser = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/errors-browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var codes2 = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage2(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        var NodeError = /* @__PURE__ */ (function(_Base) {
          _inheritsLoose(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage2(arg1, arg2, arg3)) || this;
          }
          return NodeError2;
        })(Base);
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes2[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes3(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
        return 'The value "' + value + '" is invalid for option "' + name2 + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name2, " argument")) {
          msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type2 = includes3(name2, ".") ? "property" : "argument";
          msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(typeof actual);
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
        return "The " + name2 + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name2) {
        return "Cannot call " + name2 + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes2;
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/state.js
  var require_state = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name2 = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name2, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // node_modules/util-deprecate/browser.js
  var require_browser2 = __commonJS({
    "node_modules/util-deprecate/browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = deprecate2;
      function deprecate2(fn, msg) {
        if (config3("noDeprecation")) {
          return fn;
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config3("throwDeprecation")) {
              throw new Error(msg);
            } else if (config3("traceDeprecation")) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      }
      function config3(name2) {
        try {
          if (!window.localStorage) return false;
        } catch (_) {
          return false;
        }
        var val = window.localStorage[name2];
        if (null == val) return false;
        return String(val).toLowerCase() === "true";
      }
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Writable2;
      function CorkedRequest2(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex2;
      Writable2.WritableState = WritableState2;
      var internalUtil = {
        deprecate: require_browser2()
      };
      var Stream2 = require_stream_browser();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits_browser()(Writable2, Stream2);
      function nop2() {
      }
      function WritableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite2(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest2(this);
      }
      WritableState2.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState2.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable2, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable2) return false;
            return object && object._writableState instanceof WritableState2;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex();
        var isDuplex = this instanceof Duplex2;
        if (!isDuplex && !realHasInstance.call(Writable2, this)) return new Writable2(options);
        this._writableState = new WritableState2(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function") this._writev = options.writev;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }
        Stream2.call(this);
      }
      Writable2.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd2(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk2(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable2.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer4.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop2;
        if (state.ending) writeAfterEnd2(this, cb);
        else if (isBuf || validChunk2(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer2(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable2.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable2.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer2(this, state);
        }
      };
      Writable2.prototype.setDefaultEncoding = function setDefaultEncoding2(encoding) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk2(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer4.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer2(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk2(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite2(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite2(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError2(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe2, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe2(stream, state);
        }
      }
      function onwriteStateUpdate2(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite2(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate2(state);
        if (er) onwriteError2(stream, state, sync, er, cb);
        else {
          var finished = needFinish2(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer2(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite2, stream, state, finished, cb);
          } else {
            afterWrite2(stream, state, finished, cb);
          }
        }
      }
      function afterWrite2(stream, state, finished, cb) {
        if (!finished) onwriteDrain2(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe2(stream, state);
      }
      function onwriteDrain2(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer2(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite2(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest2(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite2(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable2.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable2.prototype._writev = null;
      Writable2.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending) endWritable2(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function needFinish2(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err2) {
          state.pendingcb--;
          if (err2) {
            errorOrDestroy(stream, err2);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe2(stream, state);
        });
      }
      function prefinish2(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe2(stream, state) {
        var need = needFinish2(state);
        if (need) {
          prefinish2(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable2(stream, state, cb) {
        state.ending = true;
        finishMaybe2(stream, state);
        if (cb) {
          if (state.finished) process.nextTick(cb);
          else stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err2) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err2);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable2.prototype.destroy = destroyImpl.destroy;
      Writable2.prototype._undestroy = destroyImpl.undestroy;
      Writable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var objectKeys3 = Object.keys || function(obj) {
        var keys3 = [];
        for (var key in obj) keys3.push(key);
        return keys3;
      };
      module.exports = Duplex2;
      var Readable2 = require_stream_readable();
      var Writable2 = require_stream_writable();
      require_inherits_browser()(Duplex2, Readable2);
      {
        keys2 = objectKeys3(Writable2.prototype);
        for (v = 0; v < keys2.length; v++) {
          method = keys2[v];
          if (!Duplex2.prototype[method]) Duplex2.prototype[method] = Writable2.prototype[method];
        }
      }
      var keys2;
      var method;
      var v;
      function Duplex2(options) {
        if (!(this instanceof Duplex2)) return new Duplex2(options);
        Readable2.call(this, options);
        Writable2.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false) this.readable = false;
          if (options.writable === false) this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend2);
          }
        }
      }
      Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function onend2() {
        if (this._writableState.ended) return;
        process.nextTick(onEndNT2, this);
      }
      function onEndNT2(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });

  // node_modules/string_decoder/node_modules/safe-buffer/index.js
  var require_safe_buffer2 = __commonJS({
    "node_modules/string_decoder/node_modules/safe-buffer/index.js"(exports, module) {
      init_process();
      init_buffer();
      var buffer = require_buffer();
      var Buffer4 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer4.from && Buffer4.alloc && Buffer4.allocUnsafe && Buffer4.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer4(arg, encodingOrOffset, length);
      }
      copyProps(Buffer4, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer4(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill3, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer4(size);
        if (fill3 !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill3, encoding);
          } else {
            buf.fill(fill3);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer4(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer2().Buffer;
      var isEncoding3 = Buffer4.isEncoding || function(encoding) {
        encoding = "" + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(enc) {
        if (!enc) return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried) return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer4.isEncoding === isEncoding3 || !isEncoding3(enc))) throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder2;
      function StringDecoder2(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer4.allocUnsafe(nb);
      }
      StringDecoder2.prototype.write = function(buf) {
        if (buf.length === 0) return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0) return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder2.prototype.end = utf8End;
      StringDecoder2.prototype.text = utf8Text;
      StringDecoder2.prototype.fillLast = function(buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127) return 0;
        else if (byte >> 5 === 6) return 2;
        else if (byte >> 4 === 14) return 3;
        else if (byte >> 3 === 30) return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once4(callback) {
        var called = false;
        return function() {
          if (called) return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop3() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts);
        if (!opts) opts = {};
        callback = once4(callback || noop3);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable) onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable) callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend2 = function onend3() {
          readable = false;
          readableEnded = true;
          if (!writable) callback.call(stream);
        };
        var onerror = function onerror2(err2) {
          callback.call(stream, err2);
        };
        var onclose = function onclose2() {
          var err2;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req) onrequest();
          else stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend2);
        stream.on("finish", onfinish);
        if (opts.error !== false) stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend2);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var finished = require_end_of_stream();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done2) {
        return {
          value,
          done: done2
        };
      }
      function readAndResolve(iter) {
        var resolve2 = iter[kLastResolve];
        if (resolve2 !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve2(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve2, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve2(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve2, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error2 = this[kError];
          if (error2 !== null) {
            return Promise.reject(error2);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve2, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve2(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve2, reject) {
          _this2[kStream].destroy(null, function(err2) {
            if (err2) {
              reject(err2);
              return;
            }
            resolve2(createIterResult(void 0, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve2, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve2(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve2;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err2) {
          if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err2);
            }
            iterator[kError] = err2;
            return;
          }
          var resolve2 = iterator[kLastResolve];
          if (resolve2 !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve2(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/from-browser.js
  var require_from_browser = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = function() {
        throw new Error("Readable.from is not available in the browser");
      };
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Readable2;
      var Duplex2;
      Readable2.ReadableState = ReadableState2;
      var EE = require_events().EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type2) {
        return emitter.listeners(type2).length;
      };
      var Stream2 = require_stream_browser();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = require_util();
      var debug2;
      if (debugUtil && debugUtil.debuglog) {
        debug2 = debugUtil.debuglog("stream");
      } else {
        debug2 = function debug3() {
        };
      }
      var BufferList2 = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder2;
      var createReadableStreamAsyncIterator;
      var from3;
      require_inherits_browser()(Readable2, Stream2);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener3(emitter, event, fn) {
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList2();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder2(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex();
        if (!(this instanceof Readable2)) return new Readable2(options);
        var isDuplex = this instanceof Duplex2;
        this._readableState = new ReadableState2(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
        }
        Stream2.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable2.prototype.destroy = destroyImpl.destroy;
      Readable2.prototype._undestroy = destroyImpl.undestroy;
      Readable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
      Readable2.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer4.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk2(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable2.prototype.unshift = function(chunk) {
        return readableAddChunk2(this, chunk, null, true, false);
      };
      function readableAddChunk2(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug2("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk2(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid2(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer4.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                else maybeReadMore2(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore2(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable2(stream);
        }
        maybeReadMore2(stream, state);
      }
      function chunkInvalid2(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable2.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function(enc) {
        if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder2(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "") this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM2 = 1073741824;
      function computeNewHighWaterMark2(n) {
        if (n >= MAX_HWM2) {
          n = MAX_HWM2;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead2(n, state) {
        if (n <= 0 || state.length === 0 && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          if (state.flowing && state.length) return state.buffer.head.data.length;
          else return state.length;
        }
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark2(n);
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable2.prototype.read = function(n) {
        debug2("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug2("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable2(this);
          else emitReadable2(this);
          return null;
        }
        n = howMuchToRead2(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable2(this);
          return null;
        }
        var doRead = state.needReadable;
        debug2("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug2("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug2("reading or ended", doRead);
        } else if (doRead) {
          debug2("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead2(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList2(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable2(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      function onEofChunk2(stream, state) {
        debug2("onEofChunk");
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable2(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_2(stream);
          }
        }
      }
      function emitReadable2(stream) {
        var state = stream._readableState;
        debug2("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug2("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_2, stream);
        }
      }
      function emitReadable_2(stream) {
        var state = stream._readableState;
        debug2("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow2(stream);
      }
      function maybeReadMore2(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_2, stream, state);
        }
      }
      function maybeReadMore_2(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug2("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable2.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable2.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug2("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend2 : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug2("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend2() {
          debug2("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain2(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug2("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend2);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug2("ondata");
          var ret = dest.write(chunk);
          debug2("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf4(state.pipes, dest) !== -1) && !cleanedUp) {
              debug2("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug2("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
        }
        prependListener3(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug2("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug2("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug2("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain2(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug2("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow2(src);
          }
        };
      }
      Readable2.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
          return this;
        }
        var index = indexOf4(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable2.prototype.on = function(ev, fn) {
        var res = Stream2.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug2("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable2(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick2, this);
            }
          }
        }
        return res;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      Readable2.prototype.removeListener = function(ev, fn) {
        var res = Stream2.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable2.prototype.removeAllListeners = function(ev) {
        var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick2(self2) {
        debug2("readable nexttick read 0");
        self2.read(0);
      }
      Readable2.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug2("resume");
          state.flowing = !state.readableListening;
          resume2(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume2(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_2, stream, state);
        }
      }
      function resume_2(stream, state) {
        debug2("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow2(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable2.prototype.pause = function() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug2("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow2(stream) {
        var state = stream._readableState;
        debug2("flow", state.flowing);
        while (state.flowing && stream.read() !== null) ;
      }
      Readable2.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug2("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug2("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug2("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable2.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable2._fromList = fromList2;
      Object.defineProperty(Readable2.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.length;
        }
      });
      function fromList2(n, state) {
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable2(stream) {
        var state = stream._readableState;
        debug2("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT2, state, stream);
        }
      }
      function endReadableNT2(state, stream) {
        debug2("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable2.from = function(iterable, opts) {
          if (from3 === void 0) {
            from3 = require_from_browser();
          }
          return from3(Readable2, iterable, opts);
        };
      }
      function indexOf4(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }
        return -1;
      }
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Transform2;
      var _require$codes = require_errors_browser().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex2 = require_stream_duplex();
      require_inherits_browser()(Transform2, Duplex2);
      function afterTransform2(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform2(options) {
        if (!(this instanceof Transform2)) return new Transform2(options);
        Duplex2.call(this, options);
        this._transformState = {
          afterTransform: afterTransform2.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function") this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        }
        this.on("prefinish", prefinish2);
      }
      function prefinish2() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er, data) {
            done2(_this, er, data);
          });
        } else {
          done2(this, null, null);
        }
      }
      Transform2.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex2.prototype.push.call(this, chunk, encoding);
      };
      Transform2.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform2.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      };
      Transform2.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform2.prototype._destroy = function(err2, cb) {
        Duplex2.prototype._destroy.call(this, err2, function(err22) {
          cb(err22);
        });
      };
      function done2(stream, er, data) {
        if (er) return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = PassThrough2;
      var Transform2 = require_stream_transform();
      require_inherits_browser()(PassThrough2, Transform2);
      function PassThrough2(options) {
        if (!(this instanceof PassThrough2)) return new PassThrough2(options);
        Transform2.call(this, options);
      }
      PassThrough2.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node_modules/keccak/node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var eos;
      function once4(callback) {
        var called = false;
        return function() {
          if (called) return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      var _require$codes = require_errors_browser().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop3(err2) {
        if (err2) throw err2;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once4(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === void 0) eos = require_end_of_stream();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err2) {
          if (err2) return callback(err2);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err2) {
          if (closed) return;
          if (destroyed) return;
          destroyed = true;
          if (isRequest(stream)) return stream.abort();
          if (typeof stream.destroy === "function") return stream.destroy();
          callback(err2 || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from3, to) {
        return from3.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length) return noop3;
        if (typeof streams[streams.length - 1] !== "function") return noop3;
        return streams.pop();
      }
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0])) streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error2;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err2) {
            if (!error2) error2 = err2;
            if (err2) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error2);
          });
        });
        return streams.reduce(pipe);
      }
      module.exports = pipeline;
    }
  });

  // node_modules/keccak/node_modules/readable-stream/readable-browser.js
  var require_readable_browser = __commonJS({
    "node_modules/keccak/node_modules/readable-stream/readable-browser.js"(exports, module) {
      init_process();
      init_buffer();
      exports = module.exports = require_stream_readable();
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream();
      exports.pipeline = require_pipeline();
    }
  });

  // node_modules/keccak/lib/api/keccak.js
  var require_keccak = __commonJS({
    "node_modules/keccak/lib/api/keccak.js"(exports, module) {
      init_process();
      init_buffer();
      var { Transform: Transform2 } = require_readable_browser();
      module.exports = (KeccakState) => class Keccak extends Transform2 {
        constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
          super(options);
          this._rate = rate;
          this._capacity = capacity;
          this._delimitedSuffix = delimitedSuffix;
          this._hashBitLength = hashBitLength;
          this._options = options;
          this._state = new KeccakState();
          this._state.initialize(rate, capacity);
          this._finalized = false;
        }
        _transform(chunk, encoding, callback) {
          let error2 = null;
          try {
            this.update(chunk, encoding);
          } catch (err2) {
            error2 = err2;
          }
          callback(error2);
        }
        _flush(callback) {
          let error2 = null;
          try {
            this.push(this.digest());
          } catch (err2) {
            error2 = err2;
          }
          callback(error2);
        }
        update(data, encoding) {
          if (!Buffer2.isBuffer(data) && typeof data !== "string") throw new TypeError("Data must be a string or a buffer");
          if (this._finalized) throw new Error("Digest already called");
          if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding);
          this._state.absorb(data);
          return this;
        }
        digest(encoding) {
          if (this._finalized) throw new Error("Digest already called");
          this._finalized = true;
          if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
          let digest = this._state.squeeze(this._hashBitLength / 8);
          if (encoding !== void 0) digest = digest.toString(encoding);
          this._resetState();
          return digest;
        }
        // remove result from memory
        _resetState() {
          this._state.initialize(this._rate, this._capacity);
          return this;
        }
        // because sometimes we need hash right now and little later
        _clone() {
          const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
          this._state.copy(clone._state);
          clone._finalized = this._finalized;
          return clone;
        }
      };
    }
  });

  // node_modules/keccak/lib/api/shake.js
  var require_shake = __commonJS({
    "node_modules/keccak/lib/api/shake.js"(exports, module) {
      init_process();
      init_buffer();
      var { Transform: Transform2 } = require_readable_browser();
      module.exports = (KeccakState) => class Shake extends Transform2 {
        constructor(rate, capacity, delimitedSuffix, options) {
          super(options);
          this._rate = rate;
          this._capacity = capacity;
          this._delimitedSuffix = delimitedSuffix;
          this._options = options;
          this._state = new KeccakState();
          this._state.initialize(rate, capacity);
          this._finalized = false;
        }
        _transform(chunk, encoding, callback) {
          let error2 = null;
          try {
            this.update(chunk, encoding);
          } catch (err2) {
            error2 = err2;
          }
          callback(error2);
        }
        _flush() {
        }
        _read(size) {
          this.push(this.squeeze(size));
        }
        update(data, encoding) {
          if (!Buffer2.isBuffer(data) && typeof data !== "string") throw new TypeError("Data must be a string or a buffer");
          if (this._finalized) throw new Error("Squeeze already called");
          if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding);
          this._state.absorb(data);
          return this;
        }
        squeeze(dataByteLength, encoding) {
          if (!this._finalized) {
            this._finalized = true;
            this._state.absorbLastFewBits(this._delimitedSuffix);
          }
          let data = this._state.squeeze(dataByteLength);
          if (encoding !== void 0) data = data.toString(encoding);
          return data;
        }
        _resetState() {
          this._state.initialize(this._rate, this._capacity);
          return this;
        }
        _clone() {
          const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
          this._state.copy(clone._state);
          clone._finalized = this._finalized;
          return clone;
        }
      };
    }
  });

  // node_modules/keccak/lib/api/index.js
  var require_api = __commonJS({
    "node_modules/keccak/lib/api/index.js"(exports, module) {
      init_process();
      init_buffer();
      var createKeccak = require_keccak();
      var createShake = require_shake();
      module.exports = function(KeccakState) {
        const Keccak = createKeccak(KeccakState);
        const Shake = createShake(KeccakState);
        return function(algorithm, options) {
          const hash = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
          switch (hash) {
            case "keccak224":
              return new Keccak(1152, 448, null, 224, options);
            case "keccak256":
              return new Keccak(1088, 512, null, 256, options);
            case "keccak384":
              return new Keccak(832, 768, null, 384, options);
            case "keccak512":
              return new Keccak(576, 1024, null, 512, options);
            case "sha3-224":
              return new Keccak(1152, 448, 6, 224, options);
            case "sha3-256":
              return new Keccak(1088, 512, 6, 256, options);
            case "sha3-384":
              return new Keccak(832, 768, 6, 384, options);
            case "sha3-512":
              return new Keccak(576, 1024, 6, 512, options);
            case "shake128":
              return new Shake(1344, 256, 31, options);
            case "shake256":
              return new Shake(1088, 512, 31, options);
            default:
              throw new Error("Invald algorithm: " + algorithm);
          }
        };
      };
    }
  });

  // node_modules/keccak/lib/keccak-state-unroll.js
  var require_keccak_state_unroll = __commonJS({
    "node_modules/keccak/lib/keccak-state-unroll.js"(exports) {
      init_process();
      init_buffer();
      var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      exports.p1600 = function(s) {
        for (let round = 0; round < 24; ++round) {
          const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
          let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
          const t1slo0 = s[0] ^ lo;
          const t1shi0 = s[1] ^ hi;
          const t1slo5 = s[10] ^ lo;
          const t1shi5 = s[11] ^ hi;
          const t1slo10 = s[20] ^ lo;
          const t1shi10 = s[21] ^ hi;
          const t1slo15 = s[30] ^ lo;
          const t1shi15 = s[31] ^ hi;
          const t1slo20 = s[40] ^ lo;
          const t1shi20 = s[41] ^ hi;
          lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
          hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
          const t1slo1 = s[2] ^ lo;
          const t1shi1 = s[3] ^ hi;
          const t1slo6 = s[12] ^ lo;
          const t1shi6 = s[13] ^ hi;
          const t1slo11 = s[22] ^ lo;
          const t1shi11 = s[23] ^ hi;
          const t1slo16 = s[32] ^ lo;
          const t1shi16 = s[33] ^ hi;
          const t1slo21 = s[42] ^ lo;
          const t1shi21 = s[43] ^ hi;
          lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
          hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
          const t1slo2 = s[4] ^ lo;
          const t1shi2 = s[5] ^ hi;
          const t1slo7 = s[14] ^ lo;
          const t1shi7 = s[15] ^ hi;
          const t1slo12 = s[24] ^ lo;
          const t1shi12 = s[25] ^ hi;
          const t1slo17 = s[34] ^ lo;
          const t1shi17 = s[35] ^ hi;
          const t1slo22 = s[44] ^ lo;
          const t1shi22 = s[45] ^ hi;
          lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
          hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
          const t1slo3 = s[6] ^ lo;
          const t1shi3 = s[7] ^ hi;
          const t1slo8 = s[16] ^ lo;
          const t1shi8 = s[17] ^ hi;
          const t1slo13 = s[26] ^ lo;
          const t1shi13 = s[27] ^ hi;
          const t1slo18 = s[36] ^ lo;
          const t1shi18 = s[37] ^ hi;
          const t1slo23 = s[46] ^ lo;
          const t1shi23 = s[47] ^ hi;
          lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
          hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
          const t1slo4 = s[8] ^ lo;
          const t1shi4 = s[9] ^ hi;
          const t1slo9 = s[18] ^ lo;
          const t1shi9 = s[19] ^ hi;
          const t1slo14 = s[28] ^ lo;
          const t1shi14 = s[29] ^ hi;
          const t1slo19 = s[38] ^ lo;
          const t1shi19 = s[39] ^ hi;
          const t1slo24 = s[48] ^ lo;
          const t1shi24 = s[49] ^ hi;
          const t2slo0 = t1slo0;
          const t2shi0 = t1shi0;
          const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
          const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
          const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
          const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
          const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
          const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
          const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
          const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
          const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
          const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
          const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
          const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
          const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
          const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
          const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
          const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
          const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
          const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
          const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
          const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
          const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
          const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
          const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
          const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
          const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
          const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
          const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
          const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
          const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
          const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
          const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
          const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
          const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
          const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
          const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
          const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
          const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
          const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
          const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
          const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
          const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
          const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
          const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
          const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
          const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
          const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
          const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
          const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
          s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
          s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
          s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
          s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
          s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
          s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
          s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
          s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
          s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
          s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
          s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
          s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
          s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
          s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
          s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
          s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
          s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
          s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
          s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
          s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
          s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
          s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
          s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
          s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
          s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
          s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
          s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
          s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
          s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
          s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
          s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
          s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
          s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
          s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
          s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
          s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
          s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
          s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
          s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
          s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
          s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
          s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
          s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
          s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
          s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
          s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
          s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
          s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
          s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
          s[49] = t2shi24 ^ ~t2shi20 & t2shi21;
          s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
          s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
        }
      };
    }
  });

  // node_modules/keccak/lib/keccak.js
  var require_keccak2 = __commonJS({
    "node_modules/keccak/lib/keccak.js"(exports, module) {
      init_process();
      init_buffer();
      var keccakState = require_keccak_state_unroll();
      function Keccak() {
        this.state = [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ];
        this.blockSize = null;
        this.count = 0;
        this.squeezing = false;
      }
      Keccak.prototype.initialize = function(rate, capacity) {
        for (let i = 0; i < 50; ++i) this.state[i] = 0;
        this.blockSize = rate / 8;
        this.count = 0;
        this.squeezing = false;
      };
      Keccak.prototype.absorb = function(data) {
        for (let i = 0; i < data.length; ++i) {
          this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
          this.count += 1;
          if (this.count === this.blockSize) {
            keccakState.p1600(this.state);
            this.count = 0;
          }
        }
      };
      Keccak.prototype.absorbLastFewBits = function(bits) {
        this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
        if ((bits & 128) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
        this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
        keccakState.p1600(this.state);
        this.count = 0;
        this.squeezing = true;
      };
      Keccak.prototype.squeeze = function(length) {
        if (!this.squeezing) this.absorbLastFewBits(1);
        const output = Buffer2.alloc(length);
        for (let i = 0; i < length; ++i) {
          output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
          this.count += 1;
          if (this.count === this.blockSize) {
            keccakState.p1600(this.state);
            this.count = 0;
          }
        }
        return output;
      };
      Keccak.prototype.copy = function(dest) {
        for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
        dest.blockSize = this.blockSize;
        dest.count = this.count;
        dest.squeezing = this.squeezing;
      };
      module.exports = Keccak;
    }
  });

  // node_modules/keccak/js.js
  var require_js = __commonJS({
    "node_modules/keccak/js.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_api()(require_keccak2());
    }
  });

  // node_modules/ethereum-cryptography/keccak.js
  var require_keccak3 = __commonJS({
    "node_modules/ethereum-cryptography/keccak.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var hash_utils_1 = require_hash_utils();
      var createKeccakHash = require_js();
      exports.keccak224 = hash_utils_1.createHashFunction(function() {
        return createKeccakHash("keccak224");
      });
      exports.keccak256 = hash_utils_1.createHashFunction(function() {
        return createKeccakHash("keccak256");
      });
      exports.keccak384 = hash_utils_1.createHashFunction(function() {
        return createKeccakHash("keccak384");
      });
      exports.keccak512 = hash_utils_1.createHashFunction(function() {
        return createKeccakHash("keccak512");
      });
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/buffer-list.js
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  var buffer_list_default;
  var init_buffer_list = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/buffer-list.js"() {
      init_process();
      init_buffer();
      init_buffer2();
      buffer_list_default = BufferList;
      BufferList.prototype.push = function(v) {
        var entry = { data: v, next: null };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList.prototype.unshift = function(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList.prototype.shift = function() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList.prototype.clear = function() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList.prototype.join = function(s) {
        if (this.length === 0) return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
        return ret;
      };
      BufferList.prototype.concat = function(n) {
        if (this.length === 0) return Buffer3.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer3.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          p.data.copy(ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
    }
  });

  // node-modules-polyfills:string_decoder
  var string_decoder_exports = {};
  __export(string_decoder_exports, {
    StringDecoder: () => StringDecoder
  });
  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error("Unknown encoding: " + encoding);
    }
  }
  function StringDecoder(encoding) {
    this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
    assertEncoding(encoding);
    switch (this.encoding) {
      case "utf8":
        this.surrogateSize = 3;
        break;
      case "ucs2":
      case "utf16le":
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case "base64":
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }
    this.charBuffer = new Buffer3(6);
    this.charReceived = 0;
    this.charLength = 0;
  }
  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }
  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }
  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }
  var isBufferEncoding;
  var init_string_decoder = __esm({
    "node-modules-polyfills:string_decoder"() {
      init_process();
      init_buffer();
      init_buffer2();
      isBufferEncoding = Buffer3.isEncoding || function(encoding) {
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      StringDecoder.prototype.write = function(buffer) {
        var charStr = "";
        while (this.charLength) {
          var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
          buffer.copy(this.charBuffer, this.charReceived, 0, available);
          this.charReceived += available;
          if (this.charReceived < this.charLength) {
            return "";
          }
          buffer = buffer.slice(available, buffer.length);
          charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
          var charCode = charStr.charCodeAt(charStr.length - 1);
          if (charCode >= 55296 && charCode <= 56319) {
            this.charLength += this.surrogateSize;
            charStr = "";
            continue;
          }
          this.charReceived = this.charLength = 0;
          if (buffer.length === 0) {
            return charStr;
          }
          break;
        }
        this.detectIncompleteChar(buffer);
        var end = buffer.length;
        if (this.charLength) {
          buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
          end -= this.charReceived;
        }
        charStr += buffer.toString(this.encoding, 0, end);
        var end = charStr.length - 1;
        var charCode = charStr.charCodeAt(end);
        if (charCode >= 55296 && charCode <= 56319) {
          var size = this.surrogateSize;
          this.charLength += size;
          this.charReceived += size;
          this.charBuffer.copy(this.charBuffer, size, 0, size);
          buffer.copy(this.charBuffer, 0, 0, size);
          return charStr.substring(0, end);
        }
        return charStr;
      };
      StringDecoder.prototype.detectIncompleteChar = function(buffer) {
        var i = buffer.length >= 3 ? 3 : buffer.length;
        for (; i > 0; i--) {
          var c = buffer[buffer.length - i];
          if (i == 1 && c >> 5 == 6) {
            this.charLength = 2;
            break;
          }
          if (i <= 2 && c >> 4 == 14) {
            this.charLength = 3;
            break;
          }
          if (i <= 3 && c >> 3 == 30) {
            this.charLength = 4;
            break;
          }
        }
        this.charReceived = i;
      };
      StringDecoder.prototype.end = function(buffer) {
        var res = "";
        if (buffer && buffer.length)
          res = this.write(buffer);
        if (this.charReceived) {
          var cr = this.charReceived;
          var buf = this.charBuffer;
          var enc = this.encoding;
          res += buf.slice(0, cr).toString(enc);
        }
        return res;
      };
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/readable.js
  function prependListener2(emitter, event, fn) {
    if (typeof emitter.prependListener === "function") {
      return emitter.prependListener(event, fn);
    } else {
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount2(emitter, type2) {
    return emitter.listeners(type2).length;
  }
  function ReadableState(options, stream) {
    options = options || {};
    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
    this.highWaterMark = ~~this.highWaterMark;
    this.buffer = new buffer_list_default();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.ranOut = false;
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this);
    this.readable = true;
    if (options && typeof options.read === "function") this._read = options.read;
    events_default.call(this);
  }
  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit("error", er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error("stream.push() after EOF");
        stream.emit("error", e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error("stream.unshift() after end event");
        stream.emit("error", _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }
        if (!addToFront) state.reading = false;
        if (!skipAdd) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit("data", chunk);
            stream.read(0);
          } else {
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);
            else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }
        }
        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }
    return needMoreData(state);
  }
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      if (state.flowing && state.length) return state.buffer.head.data.length;
      else return state.length;
    }
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer2.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    return er;
  }
  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    emitReadable(stream);
  }
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug("emitReadable", state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick2(emitReadable_, stream);
      else emitReadable_(stream);
    }
  }
  function emitReadable_(stream) {
    debug("emit readable");
    stream.emit("readable");
    flow(stream);
  }
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick2(maybeReadMore_, stream, state);
    }
  }
  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug("maybeReadMore read 0");
      stream.read(0);
      if (len === state.length)
        break;
      else len = state.length;
    }
    state.readingMore = false;
  }
  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug("pipeOnDrain", state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners("data").length) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick2(resume_, stream, state);
    }
  }
  function resume_(stream, state) {
    if (!state.reading) {
      debug("resume read 0");
      stream.read(0);
    }
    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }
  function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while (state.flowing && stream.read() !== null) {
    }
  }
  function fromList(n, state) {
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
      if (state.decoder) ret = state.buffer.join("");
      else if (state.buffer.length === 1) ret = state.buffer.head.data;
      else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      ret = fromListPartial(n, state.buffer, state.decoder);
    }
    return ret;
  }
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      ret = list.shift();
    } else {
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;
      else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;
          else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  function copyFromBuffer(n, list) {
    var ret = Buffer2.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;
          else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  function endReadable(stream) {
    var state = stream._readableState;
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    if (!state.endEmitted) {
      state.ended = true;
      nextTick2(endReadableNT, state, stream);
    }
  }
  function endReadableNT(state, stream) {
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
    }
  }
  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }
  function indexOf3(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }
  var debug, MAX_HWM;
  var init_readable = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/readable.js"() {
      "use strict";
      init_process();
      init_buffer();
      init_events();
      init_util();
      init_buffer_list();
      init_string_decoder();
      init_duplex();
      init_process2();
      Readable.ReadableState = ReadableState;
      debug = debuglog("stream");
      inherits_default(Readable, events_default);
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        if (!state.objectMode && typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
        }
        return readableAddChunk(this, state, chunk, encoding, false);
      };
      Readable.prototype.unshift = function(chunk) {
        var state = this._readableState;
        return readableAddChunk(this, state, chunk, "", true);
      };
      Readable.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable.prototype.setEncoding = function(enc) {
        this._readableState.decoder = new StringDecoder(enc);
        this._readableState.encoding = enc;
        return this;
      };
      MAX_HWM = 8388608;
      Readable.prototype.read = function(n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this);
          else emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = true;
          n = 0;
        } else {
          state.length -= n;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      Readable.prototype._read = function(n) {
        this.emit("error", new Error("not implemented"));
      };
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = !pipeOpts || pipeOpts.end !== false;
        var endFn = doEnd ? onend2 : cleanup;
        if (state.endEmitted) nextTick2(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable) {
          debug("onunpipe");
          if (readable === src) {
            cleanup();
          }
        }
        function onend2() {
          debug("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend2);
          src.removeListener("end", cleanup);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }
        var increasedAwaitDrain = false;
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          increasedAwaitDrain = false;
          var ret = dest.write(chunk);
          if (false === ret && !increasedAwaitDrain) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf3(state.pipes, dest) !== -1) && !cleanedUp) {
              debug("false write response, pause", src._readableState.awaitDrain);
              src._readableState.awaitDrain++;
              increasedAwaitDrain = true;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (listenerCount2(dest, "error") === 0) dest.emit("error", er);
        }
        prependListener2(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState;
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var _i = 0; _i < len; _i++) {
            dests[_i].emit("unpipe", this);
          }
          return this;
        }
        var i = indexOf3(state.pipes, dest);
        if (i === -1) return this;
        state.pipes.splice(i, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this);
        return this;
      };
      Readable.prototype.on = function(ev, fn) {
        var res = events_default.prototype.on.call(this, ev, fn);
        if (ev === "data") {
          if (this._readableState.flowing !== false) this.resume();
        } else if (ev === "readable") {
          var state = this._readableState;
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) {
              nextTick2(nReadingNextTick, this);
            } else if (state.length) {
              emitReadable(this, state);
            }
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      Readable.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = true;
          resume(this, state);
        }
        return this;
      };
      Readable.prototype.pause = function() {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (false !== this._readableState.flowing) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        return this;
      };
      Readable.prototype.wrap = function(stream) {
        var state = this._readableState;
        var paused = false;
        var self2 = this;
        stream.on("end", function() {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) self2.push(chunk);
          }
          self2.push(null);
        });
        stream.on("data", function(chunk) {
          debug("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = self2.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ (function(method) {
              return function() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        var events = ["error", "close", "destroy", "pause", "resume"];
        forEach(events, function(ev) {
          stream.on(ev, self2.emit.bind(self2, ev));
        });
        self2._read = function(n) {
          debug("wrapped _read", n);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return self2;
      };
      Readable._fromList = fromList;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/writable.js
  function nop() {
  }
  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }
  function WritableState(options, stream) {
    Object.defineProperty(this, "buffer", {
      get: deprecate(function() {
        return this.getBuffer();
      }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
    });
    options = options || {};
    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
    this.highWaterMark = ~~this.highWaterMark;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  function Writable(options) {
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
    this._writableState = new WritableState(options, this);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function") this._write = options.write;
      if (typeof options.writev === "function") this._writev = options.writev;
    }
    EventEmitter.call(this);
  }
  function writeAfterEnd(stream, cb) {
    var er = new Error("write after end");
    stream.emit("error", er);
    nextTick2(cb, er);
  }
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    if (chunk === null) {
      er = new TypeError("May not write null values to stream");
    } else if (!Buffer3.isBuffer(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    if (er) {
      stream.emit("error", er);
      nextTick2(cb, er);
      valid = false;
    }
    return valid;
  }
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer3.from(chunk, encoding);
    }
    return chunk;
  }
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer3.isBuffer(chunk)) encoding = "buffer";
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick2(cb, er);
    else cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit("error", er);
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
      var finished = needFinish(state);
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
      if (sync) {
        nextTick2(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }
      doWrite(stream, state, true, state.length, buffer, "", holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        if (state.writing) {
          break;
        }
      }
      if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit("prefinish");
    }
  }
  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit("finish");
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick2(cb);
      else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
  }
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function(err2) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err2);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }
  var init_writable = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/writable.js"() {
      init_process();
      init_buffer();
      init_util();
      init_buffer2();
      init_events();
      init_duplex();
      init_process2();
      Writable.WritableState = WritableState;
      inherits_default(Writable, EventEmitter);
      WritableState.prototype.getBuffer = function writableStateGetBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      Writable.prototype.pipe = function() {
        this.emit("error", new Error("Cannot pipe, not readable"));
      };
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (Buffer3.isBuffer(chunk)) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop;
        if (state.ended) writeAfterEnd(this, cb);
        else if (validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function() {
        var state = this._writableState;
        state.corked++;
      };
      Writable.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new Error("not implemented"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending && !state.finished) endWritable(this, state, cb);
      };
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/duplex.js
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once("end", onend);
  }
  function onend() {
    if (this.allowHalfOpen || this._writableState.ended) return;
    nextTick2(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  var keys, method, v;
  var init_duplex = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/duplex.js"() {
      init_process();
      init_buffer();
      init_util();
      init_process2();
      init_readable();
      init_writable();
      inherits_default(Duplex, Readable);
      keys = Object.keys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/transform.js
  function TransformState(stream) {
    this.afterTransform = function(er, data) {
      return afterTransform(stream, er, data);
    };
    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }
  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) return stream.emit("error", new Error("no writecb in Transform class"));
    ts.writechunk = null;
    ts.writecb = null;
    if (data !== null && data !== void 0) stream.push(data);
    cb(er);
    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = new TransformState(this);
    var stream = this;
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function") this._transform = options.transform;
      if (typeof options.flush === "function") this._flush = options.flush;
    }
    this.once("prefinish", function() {
      if (typeof this._flush === "function") this._flush(function(er) {
        done(stream, er);
      });
      else done(stream);
    });
  }
  function done(stream, er) {
    if (er) return stream.emit("error", er);
    var ws = stream._writableState;
    var ts = stream._transformState;
    if (ws.length) throw new Error("Calling transform done when ws.length != 0");
    if (ts.transforming) throw new Error("Calling transform done when still transforming");
    return stream.push(null);
  }
  var init_transform = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/transform.js"() {
      init_process();
      init_buffer();
      init_duplex();
      init_util();
      inherits_default(Transform, Duplex);
      Transform.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform.prototype._transform = function(chunk, encoding, cb) {
        throw new Error("Not implemented");
      };
      Transform.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      };
      Transform.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/passthrough.js
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }
  var init_passthrough = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/readable-stream/passthrough.js"() {
      init_process();
      init_buffer();
      init_transform();
      init_util();
      inherits_default(PassThrough, Transform);
      PassThrough.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node-modules-polyfills:stream
  var stream_exports = {};
  __export(stream_exports, {
    Duplex: () => Duplex,
    PassThrough: () => PassThrough,
    Readable: () => Readable,
    Stream: () => Stream,
    Transform: () => Transform,
    Writable: () => Writable,
    default: () => stream_default
  });
  function Stream() {
    events_default.call(this);
  }
  var stream_default;
  var init_stream = __esm({
    "node-modules-polyfills:stream"() {
      init_process();
      init_buffer();
      init_events();
      init_util();
      init_duplex();
      init_readable();
      init_writable();
      init_transform();
      init_passthrough();
      inherits_default(Stream, events_default);
      Stream.Readable = Readable;
      Stream.Writable = Writable;
      Stream.Duplex = Duplex;
      Stream.Transform = Transform;
      Stream.PassThrough = PassThrough;
      Stream.Stream = Stream;
      stream_default = Stream;
      Stream.prototype.pipe = function(dest, options) {
        var source = this;
        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }
        source.on("data", ondata);
        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }
        dest.on("drain", ondrain);
        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on("end", onend2);
          source.on("close", onclose);
        }
        var didOnEnd = false;
        function onend2() {
          if (didOnEnd) return;
          didOnEnd = true;
          dest.end();
        }
        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;
          if (typeof dest.destroy === "function") dest.destroy();
        }
        function onerror(er) {
          cleanup();
          if (events_default.listenerCount(this, "error") === 0) {
            throw er;
          }
        }
        source.on("error", onerror);
        dest.on("error", onerror);
        function cleanup() {
          source.removeListener("data", ondata);
          dest.removeListener("drain", ondrain);
          source.removeListener("end", onend2);
          source.removeListener("close", onclose);
          source.removeListener("error", onerror);
          dest.removeListener("error", onerror);
          source.removeListener("end", cleanup);
          source.removeListener("close", cleanup);
          dest.removeListener("close", cleanup);
        }
        source.on("end", cleanup);
        source.on("close", cleanup);
        dest.on("close", cleanup);
        dest.emit("pipe", source);
        return dest;
      };
    }
  });

  // node-modules-polyfills-commonjs:stream
  var require_stream = __commonJS({
    "node-modules-polyfills-commonjs:stream"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_stream(), __toCommonJS(stream_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/hash-base/index.js
  var require_hash_base = __commonJS({
    "node_modules/hash-base/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var Transform2 = require_stream().Transform;
      var inherits2 = require_inherits_browser();
      function HashBase(blockSize) {
        Transform2.call(this);
        this._block = Buffer4.allocUnsafe(blockSize);
        this._blockSize = blockSize;
        this._blockOffset = 0;
        this._length = [0, 0, 0, 0];
        this._finalized = false;
      }
      inherits2(HashBase, Transform2);
      HashBase.prototype._transform = function(chunk, encoding, callback) {
        var error2 = null;
        try {
          this.update(chunk, encoding);
        } catch (err2) {
          error2 = err2;
        }
        callback(error2);
      };
      HashBase.prototype._flush = function(callback) {
        var error2 = null;
        try {
          this.push(this.digest());
        } catch (err2) {
          error2 = err2;
        }
        callback(error2);
      };
      var useUint8Array = typeof Uint8Array !== "undefined";
      var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer4.prototype instanceof Uint8Array || Buffer4.TYPED_ARRAY_SUPPORT);
      function toBuffer(data, encoding) {
        if (data instanceof Buffer4) return data;
        if (typeof data === "string") return Buffer4.from(data, encoding);
        if (useArrayBuffer && ArrayBuffer.isView(data)) {
          if (data.byteLength === 0) return Buffer4.alloc(0);
          var res = Buffer4.from(data.buffer, data.byteOffset, data.byteLength);
          if (res.byteLength === data.byteLength) return res;
        }
        if (useUint8Array && data instanceof Uint8Array) return Buffer4.from(data);
        if (Buffer4.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
          return Buffer4.from(data);
        }
        throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
      }
      HashBase.prototype.update = function(data, encoding) {
        if (this._finalized) throw new Error("Digest already called");
        data = toBuffer(data, encoding);
        var block = this._block;
        var offset = 0;
        while (this._blockOffset + data.length - offset >= this._blockSize) {
          for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
          this._update();
          this._blockOffset = 0;
        }
        while (offset < data.length) block[this._blockOffset++] = data[offset++];
        for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
          this._length[j] += carry;
          carry = this._length[j] / 4294967296 | 0;
          if (carry > 0) this._length[j] -= 4294967296 * carry;
        }
        return this;
      };
      HashBase.prototype._update = function() {
        throw new Error("_update is not implemented");
      };
      HashBase.prototype.digest = function(encoding) {
        if (this._finalized) throw new Error("Digest already called");
        this._finalized = true;
        var digest = this._digest();
        if (encoding !== void 0) digest = digest.toString(encoding);
        this._block.fill(0);
        this._blockOffset = 0;
        for (var i = 0; i < 4; ++i) this._length[i] = 0;
        return digest;
      };
      HashBase.prototype._digest = function() {
        throw new Error("_digest is not implemented");
      };
      module.exports = HashBase;
    }
  });

  // node_modules/md5.js/index.js
  var require_md5 = __commonJS({
    "node_modules/md5.js/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var HashBase = require_hash_base();
      var Buffer4 = require_safe_buffer().Buffer;
      var ARRAY16 = new Array(16);
      function MD5() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
      }
      inherits2(MD5, HashBase);
      MD5.prototype._update = function() {
        var M = ARRAY16;
        for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);
        var a = this._a;
        var b = this._b;
        var c = this._c;
        var d = this._d;
        a = fnF(a, b, c, d, M[0], 3614090360, 7);
        d = fnF(d, a, b, c, M[1], 3905402710, 12);
        c = fnF(c, d, a, b, M[2], 606105819, 17);
        b = fnF(b, c, d, a, M[3], 3250441966, 22);
        a = fnF(a, b, c, d, M[4], 4118548399, 7);
        d = fnF(d, a, b, c, M[5], 1200080426, 12);
        c = fnF(c, d, a, b, M[6], 2821735955, 17);
        b = fnF(b, c, d, a, M[7], 4249261313, 22);
        a = fnF(a, b, c, d, M[8], 1770035416, 7);
        d = fnF(d, a, b, c, M[9], 2336552879, 12);
        c = fnF(c, d, a, b, M[10], 4294925233, 17);
        b = fnF(b, c, d, a, M[11], 2304563134, 22);
        a = fnF(a, b, c, d, M[12], 1804603682, 7);
        d = fnF(d, a, b, c, M[13], 4254626195, 12);
        c = fnF(c, d, a, b, M[14], 2792965006, 17);
        b = fnF(b, c, d, a, M[15], 1236535329, 22);
        a = fnG(a, b, c, d, M[1], 4129170786, 5);
        d = fnG(d, a, b, c, M[6], 3225465664, 9);
        c = fnG(c, d, a, b, M[11], 643717713, 14);
        b = fnG(b, c, d, a, M[0], 3921069994, 20);
        a = fnG(a, b, c, d, M[5], 3593408605, 5);
        d = fnG(d, a, b, c, M[10], 38016083, 9);
        c = fnG(c, d, a, b, M[15], 3634488961, 14);
        b = fnG(b, c, d, a, M[4], 3889429448, 20);
        a = fnG(a, b, c, d, M[9], 568446438, 5);
        d = fnG(d, a, b, c, M[14], 3275163606, 9);
        c = fnG(c, d, a, b, M[3], 4107603335, 14);
        b = fnG(b, c, d, a, M[8], 1163531501, 20);
        a = fnG(a, b, c, d, M[13], 2850285829, 5);
        d = fnG(d, a, b, c, M[2], 4243563512, 9);
        c = fnG(c, d, a, b, M[7], 1735328473, 14);
        b = fnG(b, c, d, a, M[12], 2368359562, 20);
        a = fnH(a, b, c, d, M[5], 4294588738, 4);
        d = fnH(d, a, b, c, M[8], 2272392833, 11);
        c = fnH(c, d, a, b, M[11], 1839030562, 16);
        b = fnH(b, c, d, a, M[14], 4259657740, 23);
        a = fnH(a, b, c, d, M[1], 2763975236, 4);
        d = fnH(d, a, b, c, M[4], 1272893353, 11);
        c = fnH(c, d, a, b, M[7], 4139469664, 16);
        b = fnH(b, c, d, a, M[10], 3200236656, 23);
        a = fnH(a, b, c, d, M[13], 681279174, 4);
        d = fnH(d, a, b, c, M[0], 3936430074, 11);
        c = fnH(c, d, a, b, M[3], 3572445317, 16);
        b = fnH(b, c, d, a, M[6], 76029189, 23);
        a = fnH(a, b, c, d, M[9], 3654602809, 4);
        d = fnH(d, a, b, c, M[12], 3873151461, 11);
        c = fnH(c, d, a, b, M[15], 530742520, 16);
        b = fnH(b, c, d, a, M[2], 3299628645, 23);
        a = fnI(a, b, c, d, M[0], 4096336452, 6);
        d = fnI(d, a, b, c, M[7], 1126891415, 10);
        c = fnI(c, d, a, b, M[14], 2878612391, 15);
        b = fnI(b, c, d, a, M[5], 4237533241, 21);
        a = fnI(a, b, c, d, M[12], 1700485571, 6);
        d = fnI(d, a, b, c, M[3], 2399980690, 10);
        c = fnI(c, d, a, b, M[10], 4293915773, 15);
        b = fnI(b, c, d, a, M[1], 2240044497, 21);
        a = fnI(a, b, c, d, M[8], 1873313359, 6);
        d = fnI(d, a, b, c, M[15], 4264355552, 10);
        c = fnI(c, d, a, b, M[6], 2734768916, 15);
        b = fnI(b, c, d, a, M[13], 1309151649, 21);
        a = fnI(a, b, c, d, M[4], 4149444226, 6);
        d = fnI(d, a, b, c, M[11], 3174756917, 10);
        c = fnI(c, d, a, b, M[2], 718787259, 15);
        b = fnI(b, c, d, a, M[9], 3951481745, 21);
        this._a = this._a + a | 0;
        this._b = this._b + b | 0;
        this._c = this._c + c | 0;
        this._d = this._d + d | 0;
      };
      MD5.prototype._digest = function() {
        this._block[this._blockOffset++] = 128;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = Buffer4.allocUnsafe(16);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        return buffer;
      };
      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }
      function fnF(a, b, c, d, m, k, s) {
        return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
      }
      function fnG(a, b, c, d, m, k, s) {
        return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
      }
      function fnH(a, b, c, d, m, k, s) {
        return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
      }
      function fnI(a, b, c, d, m, k, s) {
        return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
      }
      module.exports = MD5;
    }
  });

  // node_modules/to-buffer/node_modules/isarray/index.js
  var require_isarray = __commonJS({
    "node_modules/to-buffer/node_modules/isarray/index.js"(exports, module) {
      init_process();
      init_buffer();
      var toString4 = {}.toString;
      module.exports = Array.isArray || function(arr) {
        return toString4.call(arr) == "[object Array]";
      };
    }
  });

  // node_modules/es-errors/type.js
  var require_type = __commonJS({
    "node_modules/es-errors/type.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = TypeError;
    }
  });

  // node_modules/es-object-atoms/index.js
  var require_es_object_atoms = __commonJS({
    "node_modules/es-object-atoms/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Object;
    }
  });

  // node_modules/es-errors/index.js
  var require_es_errors = __commonJS({
    "node_modules/es-errors/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Error;
    }
  });

  // node_modules/es-errors/eval.js
  var require_eval = __commonJS({
    "node_modules/es-errors/eval.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = EvalError;
    }
  });

  // node_modules/es-errors/range.js
  var require_range = __commonJS({
    "node_modules/es-errors/range.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = RangeError;
    }
  });

  // node_modules/es-errors/ref.js
  var require_ref = __commonJS({
    "node_modules/es-errors/ref.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = ReferenceError;
    }
  });

  // node_modules/es-errors/syntax.js
  var require_syntax = __commonJS({
    "node_modules/es-errors/syntax.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = SyntaxError;
    }
  });

  // node_modules/es-errors/uri.js
  var require_uri = __commonJS({
    "node_modules/es-errors/uri.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = URIError;
    }
  });

  // node_modules/math-intrinsics/abs.js
  var require_abs = __commonJS({
    "node_modules/math-intrinsics/abs.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.abs;
    }
  });

  // node_modules/math-intrinsics/floor.js
  var require_floor = __commonJS({
    "node_modules/math-intrinsics/floor.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.floor;
    }
  });

  // node_modules/math-intrinsics/max.js
  var require_max = __commonJS({
    "node_modules/math-intrinsics/max.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.max;
    }
  });

  // node_modules/math-intrinsics/min.js
  var require_min = __commonJS({
    "node_modules/math-intrinsics/min.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.min;
    }
  });

  // node_modules/math-intrinsics/pow.js
  var require_pow = __commonJS({
    "node_modules/math-intrinsics/pow.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.pow;
    }
  });

  // node_modules/math-intrinsics/round.js
  var require_round = __commonJS({
    "node_modules/math-intrinsics/round.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Math.round;
    }
  });

  // node_modules/math-intrinsics/isNaN.js
  var require_isNaN = __commonJS({
    "node_modules/math-intrinsics/isNaN.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Number.isNaN || function isNaN2(a) {
        return a !== a;
      };
    }
  });

  // node_modules/math-intrinsics/sign.js
  var require_sign = __commonJS({
    "node_modules/math-intrinsics/sign.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $isNaN = require_isNaN();
      module.exports = function sign(number) {
        if ($isNaN(number) || number === 0) {
          return number;
        }
        return number < 0 ? -1 : 1;
      };
    }
  });

  // node_modules/gopd/gOPD.js
  var require_gOPD = __commonJS({
    "node_modules/gopd/gOPD.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Object.getOwnPropertyDescriptor;
    }
  });

  // node_modules/gopd/index.js
  var require_gopd = __commonJS({
    "node_modules/gopd/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $gOPD = require_gOPD();
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          $gOPD = null;
        }
      }
      module.exports = $gOPD;
    }
  });

  // node_modules/es-define-property/index.js
  var require_es_define_property = __commonJS({
    "node_modules/es-define-property/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $defineProperty = Object.defineProperty || false;
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          $defineProperty = false;
        }
      }
      module.exports = $defineProperty;
    }
  });

  // node_modules/has-symbols/shams.js
  var require_shams = __commonJS({
    "node_modules/has-symbols/shams.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }
        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }
        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }
        var symVal = 42;
        obj[sym] = symVal;
        for (var _ in obj) {
          return false;
        }
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }
        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }
        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }
        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = (
            /** @type {PropertyDescriptor} */
            Object.getOwnPropertyDescriptor(obj, sym)
          );
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/has-symbols/index.js
  var require_has_symbols = __commonJS({
    "node_modules/has-symbols/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = require_shams();
      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }
        return hasSymbolSham();
      };
    }
  });

  // node_modules/get-proto/Reflect.getPrototypeOf.js
  var require_Reflect_getPrototypeOf = __commonJS({
    "node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
    }
  });

  // node_modules/get-proto/Object.getPrototypeOf.js
  var require_Object_getPrototypeOf = __commonJS({
    "node_modules/get-proto/Object.getPrototypeOf.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $Object = require_es_object_atoms();
      module.exports = $Object.getPrototypeOf || null;
    }
  });

  // node_modules/function-bind/implementation.js
  var require_implementation = __commonJS({
    "node_modules/function-bind/implementation.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var toStr = Object.prototype.toString;
      var max = Math.max;
      var funcType = "[object Function]";
      var concatty = function concatty2(a, b) {
        var arr = [];
        for (var i = 0; i < a.length; i += 1) {
          arr[i] = a[i];
        }
        for (var j = 0; j < b.length; j += 1) {
          arr[j + a.length] = b[j];
        }
        return arr;
      };
      var slicy = function slicy2(arrLike, offset) {
        var arr = [];
        for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
          arr[j] = arrLike[i];
        }
        return arr;
      };
      var joiny = function(arr, joiner) {
        var str = "";
        for (var i = 0; i < arr.length; i += 1) {
          str += arr[i];
          if (i + 1 < arr.length) {
            str += joiner;
          }
        }
        return str;
      };
      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.apply(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slicy(arguments, 1);
        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(
              this,
              concatty(args, arguments)
            );
            if (Object(result) === result) {
              return result;
            }
            return this;
          }
          return target.apply(
            that,
            concatty(args, arguments)
          );
        };
        var boundLength = max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs[i] = "$" + i;
        }
        bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = function Empty2() {
          };
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      };
    }
  });

  // node_modules/function-bind/index.js
  var require_function_bind = __commonJS({
    "node_modules/function-bind/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var implementation = require_implementation();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/call-bind-apply-helpers/functionCall.js
  var require_functionCall = __commonJS({
    "node_modules/call-bind-apply-helpers/functionCall.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Function.prototype.call;
    }
  });

  // node_modules/call-bind-apply-helpers/functionApply.js
  var require_functionApply = __commonJS({
    "node_modules/call-bind-apply-helpers/functionApply.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Function.prototype.apply;
    }
  });

  // node_modules/call-bind-apply-helpers/reflectApply.js
  var require_reflectApply = __commonJS({
    "node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
    }
  });

  // node_modules/call-bind-apply-helpers/actualApply.js
  var require_actualApply = __commonJS({
    "node_modules/call-bind-apply-helpers/actualApply.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var bind = require_function_bind();
      var $apply = require_functionApply();
      var $call = require_functionCall();
      var $reflectApply = require_reflectApply();
      module.exports = $reflectApply || bind.call($call, $apply);
    }
  });

  // node_modules/call-bind-apply-helpers/index.js
  var require_call_bind_apply_helpers = __commonJS({
    "node_modules/call-bind-apply-helpers/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var bind = require_function_bind();
      var $TypeError = require_type();
      var $call = require_functionCall();
      var $actualApply = require_actualApply();
      module.exports = function callBindBasic(args) {
        if (args.length < 1 || typeof args[0] !== "function") {
          throw new $TypeError("a function is required");
        }
        return $actualApply(bind, $call, args);
      };
    }
  });

  // node_modules/dunder-proto/get.js
  var require_get = __commonJS({
    "node_modules/dunder-proto/get.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var callBind = require_call_bind_apply_helpers();
      var gOPD = require_gopd();
      var hasProtoAccessor;
      try {
        hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
        [].__proto__ === Array.prototype;
      } catch (e) {
        if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
          throw e;
        }
      }
      var desc = !!hasProtoAccessor && gOPD && gOPD(
        Object.prototype,
        /** @type {keyof typeof Object.prototype} */
        "__proto__"
      );
      var $Object = Object;
      var $getPrototypeOf = $Object.getPrototypeOf;
      module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
        /** @type {import('./get')} */
        function getDunder(value) {
          return $getPrototypeOf(value == null ? value : $Object(value));
        }
      ) : false;
    }
  });

  // node_modules/get-proto/index.js
  var require_get_proto = __commonJS({
    "node_modules/get-proto/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var reflectGetProto = require_Reflect_getPrototypeOf();
      var originalGetProto = require_Object_getPrototypeOf();
      var getDunderProto = require_get();
      module.exports = reflectGetProto ? function getProto(O) {
        return reflectGetProto(O);
      } : originalGetProto ? function getProto(O) {
        if (!O || typeof O !== "object" && typeof O !== "function") {
          throw new TypeError("getProto: not an object");
        }
        return originalGetProto(O);
      } : getDunderProto ? function getProto(O) {
        return getDunderProto(O);
      } : null;
    }
  });

  // node_modules/hasown/index.js
  var require_hasown = __commonJS({
    "node_modules/hasown/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var call = Function.prototype.call;
      var $hasOwn = Object.prototype.hasOwnProperty;
      var bind = require_function_bind();
      module.exports = bind.call(call, $hasOwn);
    }
  });

  // node_modules/get-intrinsic/index.js
  var require_get_intrinsic = __commonJS({
    "node_modules/get-intrinsic/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var undefined2;
      var $Object = require_es_object_atoms();
      var $Error = require_es_errors();
      var $EvalError = require_eval();
      var $RangeError = require_range();
      var $ReferenceError = require_ref();
      var $SyntaxError = require_syntax();
      var $TypeError = require_type();
      var $URIError = require_uri();
      var abs = require_abs();
      var floor2 = require_floor();
      var max = require_max();
      var min = require_min();
      var pow = require_pow();
      var round = require_round();
      var sign = require_sign();
      var $Function = Function;
      var getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {
        }
      };
      var $gOPD = require_gopd();
      var $defineProperty = require_es_define_property();
      var throwTypeError = function() {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD ? (function() {
        try {
          arguments.callee;
          return throwTypeError;
        } catch (calleeThrows) {
          try {
            return $gOPD(arguments, "callee").get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      })() : throwTypeError;
      var hasSymbols = require_has_symbols()();
      var getProto = require_get_proto();
      var $ObjectGPO = require_Object_getPrototypeOf();
      var $ReflectGPO = require_Reflect_getPrototypeOf();
      var $apply = require_functionApply();
      var $call = require_functionCall();
      var needsEval = {};
      var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
      var INTRINSICS = {
        __proto__: null,
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
        "%AsyncFromSyncIteratorPrototype%": undefined2,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
        "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
        "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": $Error,
        "%eval%": eval,
        // eslint-disable-line no-eval
        "%EvalError%": $EvalError,
        "%Float16Array%": typeof Float16Array === "undefined" ? undefined2 : Float16Array,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
        "%JSON%": typeof JSON === "object" ? JSON : undefined2,
        "%Map%": typeof Map === "undefined" ? undefined2 : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": $Object,
        "%Object.getOwnPropertyDescriptor%": $gOPD,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
        "%RangeError%": $RangeError,
        "%ReferenceError%": $ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined2 : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
        "%Symbol%": hasSymbols ? Symbol : undefined2,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
        "%URIError%": $URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
        "%Function.prototype.call%": $call,
        "%Function.prototype.apply%": $apply,
        "%Object.defineProperty%": $defineProperty,
        "%Object.getPrototypeOf%": $ObjectGPO,
        "%Math.abs%": abs,
        "%Math.floor%": floor2,
        "%Math.max%": max,
        "%Math.min%": min,
        "%Math.pow%": pow,
        "%Math.round%": round,
        "%Math.sign%": sign,
        "%Reflect.getPrototypeOf%": $ReflectGPO
      };
      if (getProto) {
        try {
          null.error;
        } catch (e) {
          errorProto = getProto(getProto(e));
          INTRINSICS["%Error.prototype%"] = errorProto;
        }
      }
      var errorProto;
      var doEval = function doEval2(name2) {
        var value;
        if (name2 === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name2 === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name2 === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name2 === "%AsyncGenerator%") {
          var fn = doEval2("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name2 === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          if (gen && getProto) {
            value = getProto(gen.prototype);
          }
        }
        INTRINSICS[name2] = value;
        return value;
      };
      var LEGACY_ALIASES = {
        __proto__: null,
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };
      var bind = require_function_bind();
      var hasOwn2 = require_hasown();
      var $concat = bind.call($call, Array.prototype.concat);
      var $spliceApply = bind.call($apply, Array.prototype.splice);
      var $replace = bind.call($call, String.prototype.replace);
      var $strSlice = bind.call($call, String.prototype.slice);
      var $exec = bind.call($call, RegExp.prototype.exec);
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = function stringToPath2(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function(match, number, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
        });
        return result;
      };
      var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
        var intrinsicName = name2;
        var alias;
        if (hasOwn2(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }
        if (hasOwn2(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
          }
          return {
            alias,
            name: intrinsicName,
            value
          };
        }
        throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
      };
      module.exports = function GetIntrinsic(name2, allowMissing) {
        if (typeof name2 !== "string" || name2.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }
        if ($exec(/^%?[^%]*%?$/, name2) === null) {
          throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
        }
        var parts = stringToPath(name2);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;
        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }
          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";
          if (hasOwn2(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
              }
              return void undefined2;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn2(value, part);
              value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };
    }
  });

  // node_modules/call-bound/index.js
  var require_call_bound = __commonJS({
    "node_modules/call-bound/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var GetIntrinsic = require_get_intrinsic();
      var callBindBasic = require_call_bind_apply_helpers();
      var $indexOf = callBindBasic([GetIntrinsic("%String.prototype.indexOf%")]);
      module.exports = function callBoundIntrinsic(name2, allowMissing) {
        var intrinsic = (
          /** @type {(this: unknown, ...args: unknown[]) => unknown} */
          GetIntrinsic(name2, !!allowMissing)
        );
        if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
          return callBindBasic(
            /** @type {const} */
            [intrinsic]
          );
        }
        return intrinsic;
      };
    }
  });

  // node_modules/is-callable/index.js
  var require_is_callable = __commonJS({
    "node_modules/is-callable/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var fnToStr = Function.prototype.toString;
      var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
      var badArrayLike;
      var isCallableMarker;
      if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
        try {
          badArrayLike = Object.defineProperty({}, "length", {
            get: function() {
              throw isCallableMarker;
            }
          });
          isCallableMarker = {};
          reflectApply(function() {
            throw 42;
          }, null, badArrayLike);
        } catch (_) {
          if (_ !== isCallableMarker) {
            reflectApply = null;
          }
        }
      } else {
        reflectApply = null;
      }
      var constructorRegex = /^\s*class\b/;
      var isES6ClassFn = function isES6ClassFunction(value) {
        try {
          var fnStr = fnToStr.call(value);
          return constructorRegex.test(fnStr);
        } catch (e) {
          return false;
        }
      };
      var tryFunctionObject = function tryFunctionToStr(value) {
        try {
          if (isES6ClassFn(value)) {
            return false;
          }
          fnToStr.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };
      var toStr = Object.prototype.toString;
      var objectClass = "[object Object]";
      var fnClass = "[object Function]";
      var genClass = "[object GeneratorFunction]";
      var ddaClass = "[object HTMLAllCollection]";
      var ddaClass2 = "[object HTML document.all class]";
      var ddaClass3 = "[object HTMLCollection]";
      var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
      var isIE68 = !(0 in [,]);
      var isDDA = function isDocumentDotAll() {
        return false;
      };
      if (typeof document === "object") {
        all = document.all;
        if (toStr.call(all) === toStr.call(document.all)) {
          isDDA = function isDocumentDotAll(value) {
            if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
              try {
                var str = toStr.call(value);
                return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
              } catch (e) {
              }
            }
            return false;
          };
        }
      }
      var all;
      module.exports = reflectApply ? function isCallable(value) {
        if (isDDA(value)) {
          return true;
        }
        if (!value) {
          return false;
        }
        if (typeof value !== "function" && typeof value !== "object") {
          return false;
        }
        try {
          reflectApply(value, null, badArrayLike);
        } catch (e) {
          if (e !== isCallableMarker) {
            return false;
          }
        }
        return !isES6ClassFn(value) && tryFunctionObject(value);
      } : function isCallable(value) {
        if (isDDA(value)) {
          return true;
        }
        if (!value) {
          return false;
        }
        if (typeof value !== "function" && typeof value !== "object") {
          return false;
        }
        if (hasToStringTag) {
          return tryFunctionObject(value);
        }
        if (isES6ClassFn(value)) {
          return false;
        }
        var strClass = toStr.call(value);
        if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
          return false;
        }
        return tryFunctionObject(value);
      };
    }
  });

  // node_modules/for-each/index.js
  var require_for_each = __commonJS({
    "node_modules/for-each/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var isCallable = require_is_callable();
      var toStr = Object.prototype.toString;
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var forEachArray = function forEachArray2(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty3.call(array, i)) {
            if (receiver == null) {
              iterator(array[i], i, array);
            } else {
              iterator.call(receiver, array[i], i, array);
            }
          }
        }
      };
      var forEachString = function forEachString2(string, iterator, receiver) {
        for (var i = 0, len = string.length; i < len; i++) {
          if (receiver == null) {
            iterator(string.charAt(i), i, string);
          } else {
            iterator.call(receiver, string.charAt(i), i, string);
          }
        }
      };
      var forEachObject = function forEachObject2(object, iterator, receiver) {
        for (var k in object) {
          if (hasOwnProperty3.call(object, k)) {
            if (receiver == null) {
              iterator(object[k], k, object);
            } else {
              iterator.call(receiver, object[k], k, object);
            }
          }
        }
      };
      function isArray4(x) {
        return toStr.call(x) === "[object Array]";
      }
      module.exports = function forEach2(list, iterator, thisArg) {
        if (!isCallable(iterator)) {
          throw new TypeError("iterator must be a function");
        }
        var receiver;
        if (arguments.length >= 3) {
          receiver = thisArg;
        }
        if (isArray4(list)) {
          forEachArray(list, iterator, receiver);
        } else if (typeof list === "string") {
          forEachString(list, iterator, receiver);
        } else {
          forEachObject(list, iterator, receiver);
        }
      };
    }
  });

  // node_modules/possible-typed-array-names/index.js
  var require_possible_typed_array_names = __commonJS({
    "node_modules/possible-typed-array-names/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = [
        "Float16Array",
        "Float32Array",
        "Float64Array",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
    }
  });

  // node_modules/available-typed-arrays/index.js
  var require_available_typed_arrays = __commonJS({
    "node_modules/available-typed-arrays/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var possibleNames = require_possible_typed_array_names();
      var g = typeof globalThis === "undefined" ? window : globalThis;
      module.exports = function availableTypedArrays() {
        var out = [];
        for (var i = 0; i < possibleNames.length; i++) {
          if (typeof g[possibleNames[i]] === "function") {
            out[out.length] = possibleNames[i];
          }
        }
        return out;
      };
    }
  });

  // node_modules/define-data-property/index.js
  var require_define_data_property = __commonJS({
    "node_modules/define-data-property/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $defineProperty = require_es_define_property();
      var $SyntaxError = require_syntax();
      var $TypeError = require_type();
      var gopd = require_gopd();
      module.exports = function defineDataProperty(obj, property, value) {
        if (!obj || typeof obj !== "object" && typeof obj !== "function") {
          throw new $TypeError("`obj` must be an object or a function`");
        }
        if (typeof property !== "string" && typeof property !== "symbol") {
          throw new $TypeError("`property` must be a string or a symbol`");
        }
        if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
          throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
          throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
          throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
        }
        if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
          throw new $TypeError("`loose`, if provided, must be a boolean");
        }
        var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
        var nonWritable = arguments.length > 4 ? arguments[4] : null;
        var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
        var loose = arguments.length > 6 ? arguments[6] : false;
        var desc = !!gopd && gopd(obj, property);
        if ($defineProperty) {
          $defineProperty(obj, property, {
            configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
            enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
            value,
            writable: nonWritable === null && desc ? desc.writable : !nonWritable
          });
        } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
          obj[property] = value;
        } else {
          throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
        }
      };
    }
  });

  // node_modules/has-property-descriptors/index.js
  var require_has_property_descriptors = __commonJS({
    "node_modules/has-property-descriptors/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $defineProperty = require_es_define_property();
      var hasPropertyDescriptors = function hasPropertyDescriptors2() {
        return !!$defineProperty;
      };
      hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
        if (!$defineProperty) {
          return null;
        }
        try {
          return $defineProperty([], "length", { value: 1 }).length !== 1;
        } catch (e) {
          return true;
        }
      };
      module.exports = hasPropertyDescriptors;
    }
  });

  // node_modules/set-function-length/index.js
  var require_set_function_length = __commonJS({
    "node_modules/set-function-length/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var GetIntrinsic = require_get_intrinsic();
      var define2 = require_define_data_property();
      var hasDescriptors = require_has_property_descriptors()();
      var gOPD = require_gopd();
      var $TypeError = require_type();
      var $floor = GetIntrinsic("%Math.floor%");
      module.exports = function setFunctionLength(fn, length) {
        if (typeof fn !== "function") {
          throw new $TypeError("`fn` is not a function");
        }
        if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
          throw new $TypeError("`length` must be a positive 32-bit integer");
        }
        var loose = arguments.length > 2 && !!arguments[2];
        var functionLengthIsConfigurable = true;
        var functionLengthIsWritable = true;
        if ("length" in fn && gOPD) {
          var desc = gOPD(fn, "length");
          if (desc && !desc.configurable) {
            functionLengthIsConfigurable = false;
          }
          if (desc && !desc.writable) {
            functionLengthIsWritable = false;
          }
        }
        if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
          if (hasDescriptors) {
            define2(
              /** @type {Parameters<define>[0]} */
              fn,
              "length",
              length,
              true,
              true
            );
          } else {
            define2(
              /** @type {Parameters<define>[0]} */
              fn,
              "length",
              length
            );
          }
        }
        return fn;
      };
    }
  });

  // node_modules/call-bind-apply-helpers/applyBind.js
  var require_applyBind = __commonJS({
    "node_modules/call-bind-apply-helpers/applyBind.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var bind = require_function_bind();
      var $apply = require_functionApply();
      var actualApply = require_actualApply();
      module.exports = function applyBind() {
        return actualApply(bind, $apply, arguments);
      };
    }
  });

  // node_modules/call-bind/index.js
  var require_call_bind = __commonJS({
    "node_modules/call-bind/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var setFunctionLength = require_set_function_length();
      var $defineProperty = require_es_define_property();
      var callBindBasic = require_call_bind_apply_helpers();
      var applyBind = require_applyBind();
      module.exports = function callBind(originalFunction) {
        var func = callBindBasic(arguments);
        var adjustedLength = originalFunction.length - (arguments.length - 1);
        return setFunctionLength(
          func,
          1 + (adjustedLength > 0 ? adjustedLength : 0),
          true
        );
      };
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }
    }
  });

  // node_modules/has-tostringtag/shams.js
  var require_shams2 = __commonJS({
    "node_modules/has-tostringtag/shams.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var hasSymbols = require_shams();
      module.exports = function hasToStringTagShams() {
        return hasSymbols() && !!Symbol.toStringTag;
      };
    }
  });

  // node_modules/which-typed-array/index.js
  var require_which_typed_array = __commonJS({
    "node_modules/which-typed-array/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var forEach2 = require_for_each();
      var availableTypedArrays = require_available_typed_arrays();
      var callBind = require_call_bind();
      var callBound = require_call_bound();
      var gOPD = require_gopd();
      var getProto = require_get_proto();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? window : globalThis;
      var typedArrays = availableTypedArrays();
      var $slice = callBound("String.prototype.slice");
      var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf4(array, value) {
        for (var i = 0; i < array.length; i += 1) {
          if (array[i] === value) {
            return i;
          }
        }
        return -1;
      };
      var cache = { __proto__: null };
      if (hasToStringTag && gOPD && getProto) {
        forEach2(typedArrays, function(typedArray) {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr && getProto) {
            var proto = getProto(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor && proto) {
              var superProto = getProto(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            cache["$" + typedArray] = callBind(descriptor.get);
          }
        });
      } else {
        forEach2(typedArrays, function(typedArray) {
          var arr = new g[typedArray]();
          var fn = arr.slice || arr.set;
          if (fn) {
            cache[
              /** @type {`$${import('.').TypedArrayName}`} */
              "$" + typedArray
            ] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */
            // @ts-expect-error TODO FIXME
            callBind(fn);
          }
        });
      }
      var tryTypedArrays = function tryAllTypedArrays(value) {
        var found = false;
        forEach2(
          /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
          cache,
          /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
          function(getter, typedArray) {
            if (!found) {
              try {
                if ("$" + getter(value) === typedArray) {
                  found = /** @type {import('.').TypedArrayName} */
                  $slice(typedArray, 1);
                }
              } catch (e) {
              }
            }
          }
        );
        return found;
      };
      var trySlices = function tryAllSlices(value) {
        var found = false;
        forEach2(
          /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
          cache,
          /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
          function(getter, name2) {
            if (!found) {
              try {
                getter(value);
                found = /** @type {import('.').TypedArrayName} */
                $slice(name2, 1);
              } catch (e) {
              }
            }
          }
        );
        return found;
      };
      module.exports = function whichTypedArray(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        if (!hasToStringTag) {
          var tag = $slice($toString(value), 8, -1);
          if ($indexOf(typedArrays, tag) > -1) {
            return tag;
          }
          if (tag !== "Object") {
            return false;
          }
          return trySlices(value);
        }
        if (!gOPD) {
          return null;
        }
        return tryTypedArrays(value);
      };
    }
  });

  // node_modules/is-typed-array/index.js
  var require_is_typed_array = __commonJS({
    "node_modules/is-typed-array/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var whichTypedArray = require_which_typed_array();
      module.exports = function isTypedArray(value) {
        return !!whichTypedArray(value);
      };
    }
  });

  // node_modules/typed-array-buffer/index.js
  var require_typed_array_buffer = __commonJS({
    "node_modules/typed-array-buffer/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $TypeError = require_type();
      var callBound = require_call_bound();
      var $typedArrayBuffer = callBound("TypedArray.prototype.buffer", true);
      var isTypedArray = require_is_typed_array();
      module.exports = $typedArrayBuffer || function typedArrayBuffer(x) {
        if (!isTypedArray(x)) {
          throw new $TypeError("Not a Typed Array");
        }
        return x.buffer;
      };
    }
  });

  // node_modules/to-buffer/index.js
  var require_to_buffer = __commonJS({
    "node_modules/to-buffer/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var isArray4 = require_isarray();
      var typedArrayBuffer = require_typed_array_buffer();
      var isView2 = ArrayBuffer.isView || function isView3(obj) {
        try {
          typedArrayBuffer(obj);
          return true;
        } catch (e) {
          return false;
        }
      };
      var useUint8Array = typeof Uint8Array !== "undefined";
      var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
      var useFromArrayBuffer = useArrayBuffer && (Buffer4.prototype instanceof Uint8Array || Buffer4.TYPED_ARRAY_SUPPORT);
      module.exports = function toBuffer(data, encoding) {
        if (Buffer4.isBuffer(data)) {
          if (data.constructor && !("isBuffer" in data)) {
            return Buffer4.from(data);
          }
          return data;
        }
        if (typeof data === "string") {
          return Buffer4.from(data, encoding);
        }
        if (useArrayBuffer && isView2(data)) {
          if (data.byteLength === 0) {
            return Buffer4.alloc(0);
          }
          if (useFromArrayBuffer) {
            var res = Buffer4.from(data.buffer, data.byteOffset, data.byteLength);
            if (res.byteLength === data.byteLength) {
              return res;
            }
          }
          var uint8 = data instanceof Uint8Array ? data : new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
          var result = Buffer4.from(uint8);
          if (result.length === data.byteLength) {
            return result;
          }
        }
        if (useUint8Array && data instanceof Uint8Array) {
          return Buffer4.from(data);
        }
        var isArr = isArray4(data);
        if (isArr) {
          for (var i = 0; i < data.length; i += 1) {
            var x = data[i];
            if (typeof x !== "number" || x < 0 || x > 255 || ~~x !== x) {
              throw new RangeError("Array items must be numbers in the range 0-255.");
            }
          }
        }
        if (isArr || Buffer4.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
          return Buffer4.from(data);
        }
        throw new TypeError('The "data" argument must be a string, an Array, a Buffer, a Uint8Array, or a DataView.');
      };
    }
  });

  // node_modules/ripemd160/node_modules/hash-base/to-buffer.js
  var require_to_buffer2 = __commonJS({
    "node_modules/ripemd160/node_modules/hash-base/to-buffer.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var toBuffer = require_to_buffer();
      var useUint8Array = typeof Uint8Array !== "undefined";
      var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== "undefined";
      var isView2 = useArrayBuffer && ArrayBuffer.isView;
      module.exports = function(thing, encoding) {
        if (typeof thing === "string" || Buffer4.isBuffer(thing) || useUint8Array && thing instanceof Uint8Array || isView2 && isView2(thing)) {
          return toBuffer(thing, encoding);
        }
        throw new TypeError('The "data" argument must be a string, a Buffer, a Uint8Array, or a DataView');
      };
    }
  });

  // node_modules/process-nextick-args/index.js
  var require_process_nextick_args = __commonJS({
    "node_modules/process-nextick-args/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
        module.exports = { nextTick: nextTick3 };
      } else {
        module.exports = process;
      }
      function nextTick3(fn, arg1, arg2, arg3) {
        if (typeof fn !== "function") {
          throw new TypeError('"callback" argument must be a function');
        }
        var len = arguments.length;
        var args, i;
        switch (len) {
          case 0:
          case 1:
            return process.nextTick(fn);
          case 2:
            return process.nextTick(function afterTickOne() {
              fn.call(null, arg1);
            });
          case 3:
            return process.nextTick(function afterTickTwo() {
              fn.call(null, arg1, arg2);
            });
          case 4:
            return process.nextTick(function afterTickThree() {
              fn.call(null, arg1, arg2, arg3);
            });
          default:
            args = new Array(len - 1);
            i = 0;
            while (i < args.length) {
              args[i++] = arguments[i];
            }
            return process.nextTick(function afterTick() {
              fn.apply(null, args);
            });
        }
      }
    }
  });

  // node_modules/isarray/index.js
  var require_isarray2 = __commonJS({
    "node_modules/isarray/index.js"(exports, module) {
      init_process();
      init_buffer();
      var toString4 = {}.toString;
      module.exports = Array.isArray || function(arr) {
        return toString4.call(arr) == "[object Array]";
      };
    }
  });

  // node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser2 = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_events().EventEmitter;
    }
  });

  // node_modules/readable-stream/node_modules/safe-buffer/index.js
  var require_safe_buffer3 = __commonJS({
    "node_modules/readable-stream/node_modules/safe-buffer/index.js"(exports, module) {
      init_process();
      init_buffer();
      var buffer = require_buffer();
      var Buffer4 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer4.from && Buffer4.alloc && Buffer4.allocUnsafe && Buffer4.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer4(arg, encodingOrOffset, length);
      }
      copyProps(Buffer4, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer4(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill3, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer4(size);
        if (fill3 !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill3, encoding);
          } else {
            buf.fill(fill3);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer4(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/core-util-is/lib/util.js
  var require_util2 = __commonJS({
    "node_modules/core-util-is/lib/util.js"(exports) {
      init_process();
      init_buffer();
      function isArray4(arg) {
        if (Array.isArray) {
          return Array.isArray(arg);
        }
        return objectToString2(arg) === "[object Array]";
      }
      exports.isArray = isArray4;
      function isBoolean2(arg) {
        return typeof arg === "boolean";
      }
      exports.isBoolean = isBoolean2;
      function isNull2(arg) {
        return arg === null;
      }
      exports.isNull = isNull2;
      function isNullOrUndefined2(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined2;
      function isNumber2(arg) {
        return typeof arg === "number";
      }
      exports.isNumber = isNumber2;
      function isString2(arg) {
        return typeof arg === "string";
      }
      exports.isString = isString2;
      function isSymbol2(arg) {
        return typeof arg === "symbol";
      }
      exports.isSymbol = isSymbol2;
      function isUndefined2(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined2;
      function isRegExp2(re) {
        return objectToString2(re) === "[object RegExp]";
      }
      exports.isRegExp = isRegExp2;
      function isObject2(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports.isObject = isObject2;
      function isDate2(d) {
        return objectToString2(d) === "[object Date]";
      }
      exports.isDate = isDate2;
      function isError2(e) {
        return objectToString2(e) === "[object Error]" || e instanceof Error;
      }
      exports.isError = isError2;
      function isFunction3(arg) {
        return typeof arg === "function";
      }
      exports.isFunction = isFunction3;
      function isPrimitive2(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
        typeof arg === "undefined";
      }
      exports.isPrimitive = isPrimitive2;
      exports.isBuffer = require_buffer().Buffer.isBuffer;
      function objectToString2(o) {
        return Object.prototype.toString.call(o);
      }
    }
  });

  // node_modules/readable-stream/lib/internal/streams/BufferList.js
  var require_BufferList = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/BufferList.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Buffer4 = require_safe_buffer3().Buffer;
      var util = require_util();
      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }
      module.exports = (function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        BufferList2.prototype.push = function push(v) {
          var entry = { data: v, next: null };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        };
        BufferList2.prototype.unshift = function unshift(v) {
          var entry = { data: v, next: this.head };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };
        BufferList2.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        };
        BufferList2.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };
        BufferList2.prototype.join = function join2(s) {
          if (this.length === 0) return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        };
        BufferList2.prototype.concat = function concat3(n) {
          if (this.length === 0) return Buffer4.alloc(0);
          var ret = Buffer4.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        };
        return BufferList2;
      })();
      if (util && util.inspect && util.inspect.custom) {
        module.exports.prototype[util.inspect.custom] = function() {
          var obj = util.inspect({ length: this.length });
          return this.constructor.name + " " + obj;
        };
      }
    }
  });

  // node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy2 = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var pna = require_process_nextick_args();
      function destroy(err2, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err2);
          } else if (err2) {
            if (!this._writableState) {
              pna.nextTick(emitErrorNT, this, err2);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              pna.nextTick(emitErrorNT, this, err2);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err2 || null, function(err3) {
          if (!cb && err3) {
            if (!_this._writableState) {
              pna.nextTick(emitErrorNT, _this, err3);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              pna.nextTick(emitErrorNT, _this, err3);
            }
          } else if (cb) {
            cb(err3);
          }
        });
        return this;
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err2) {
        self2.emit("error", err2);
      }
      module.exports = {
        destroy,
        undestroy
      };
    }
  });

  // node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable2 = __commonJS({
    "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var pna = require_process_nextick_args();
      module.exports = Writable2;
      function CorkedRequest2(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
      var Duplex2;
      Writable2.WritableState = WritableState2;
      var util = Object.create(require_util2());
      util.inherits = require_inherits_browser();
      var internalUtil = {
        deprecate: require_browser2()
      };
      var Stream2 = require_stream_browser2();
      var Buffer4 = require_safe_buffer3().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy2();
      util.inherits(Writable2, Stream2);
      function nop2() {
      }
      function WritableState2(options, stream) {
        Duplex2 = Duplex2 || require_stream_duplex2();
        options = options || {};
        var isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
        var hwm = options.highWaterMark;
        var writableHwm = options.writableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        if (hwm || hwm === 0) this.highWaterMark = hwm;
        else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
        else this.highWaterMark = defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite2(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest2(this);
      }
      WritableState2.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState2.prototype, "buffer", {
            get: internalUtil.deprecate(function() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable2, Symbol.hasInstance, {
          value: function(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable2) return false;
            return object && object._writableState instanceof WritableState2;
          }
        });
      } else {
        realHasInstance = function(object) {
          return object instanceof this;
        };
      }
      function Writable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex2();
        if (!realHasInstance.call(Writable2, this) && !(this instanceof Duplex2)) {
          return new Writable2(options);
        }
        this._writableState = new WritableState2(options, this);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function") this._writev = options.writev;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }
        Stream2.call(this);
      }
      Writable2.prototype.pipe = function() {
        this.emit("error", new Error("Cannot pipe, not readable"));
      };
      function writeAfterEnd2(stream, cb) {
        var er = new Error("write after end");
        stream.emit("error", er);
        pna.nextTick(cb, er);
      }
      function validChunk2(stream, state, chunk, cb) {
        var valid = true;
        var er = false;
        if (chunk === null) {
          er = new TypeError("May not write null values to stream");
        } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new TypeError("Invalid non-string/buffer chunk");
        }
        if (er) {
          stream.emit("error", er);
          pna.nextTick(cb, er);
          valid = false;
        }
        return valid;
      }
      Writable2.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer4.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop2;
        if (state.ended) writeAfterEnd2(this, cb);
        else if (isBuf || validChunk2(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer2(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable2.prototype.cork = function() {
        var state = this._writableState;
        state.corked++;
      };
      Writable2.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer2(this, state);
        }
      };
      Writable2.prototype.setDefaultEncoding = function setDefaultEncoding2(encoding) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      function decodeChunk2(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer4.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer2(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk2(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite2(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite2(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError2(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          pna.nextTick(cb, er);
          pna.nextTick(finishMaybe2, stream, state);
          stream._writableState.errorEmitted = true;
          stream.emit("error", er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          stream.emit("error", er);
          finishMaybe2(stream, state);
        }
      }
      function onwriteStateUpdate2(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite2(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        onwriteStateUpdate2(state);
        if (er) onwriteError2(stream, state, sync, er, cb);
        else {
          var finished = needFinish2(state);
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer2(stream, state);
          }
          if (sync) {
            asyncWrite(afterWrite2, stream, state, finished, cb);
          } else {
            afterWrite2(stream, state, finished, cb);
          }
        }
      }
      function afterWrite2(stream, state, finished, cb) {
        if (!finished) onwriteDrain2(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe2(stream, state);
      }
      function onwriteDrain2(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer2(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite2(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest2(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite2(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable2.prototype._write = function(chunk, encoding, cb) {
        cb(new Error("_write() is not implemented"));
      };
      Writable2.prototype._writev = null;
      Writable2.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending) endWritable2(this, state, cb);
      };
      function needFinish2(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err2) {
          state.pendingcb--;
          if (err2) {
            stream.emit("error", err2);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe2(stream, state);
        });
      }
      function prefinish2(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function") {
            state.pendingcb++;
            state.finalCalled = true;
            pna.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe2(stream, state) {
        var need = needFinish2(state);
        if (need) {
          prefinish2(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
          }
        }
        return need;
      }
      function endWritable2(stream, state, cb) {
        state.ending = true;
        finishMaybe2(stream, state);
        if (cb) {
          if (state.finished) pna.nextTick(cb);
          else stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err2) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err2);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable2.prototype, "destroyed", {
        get: function() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable2.prototype.destroy = destroyImpl.destroy;
      Writable2.prototype._undestroy = destroyImpl.undestroy;
      Writable2.prototype._destroy = function(err2, cb) {
        this.end();
        cb(err2);
      };
    }
  });

  // node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex2 = __commonJS({
    "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var pna = require_process_nextick_args();
      var objectKeys3 = Object.keys || function(obj) {
        var keys3 = [];
        for (var key in obj) {
          keys3.push(key);
        }
        return keys3;
      };
      module.exports = Duplex2;
      var util = Object.create(require_util2());
      util.inherits = require_inherits_browser();
      var Readable2 = require_stream_readable2();
      var Writable2 = require_stream_writable2();
      util.inherits(Duplex2, Readable2);
      {
        keys2 = objectKeys3(Writable2.prototype);
        for (v = 0; v < keys2.length; v++) {
          method = keys2[v];
          if (!Duplex2.prototype[method]) Duplex2.prototype[method] = Writable2.prototype[method];
        }
      }
      var keys2;
      var method;
      var v;
      function Duplex2(options) {
        if (!(this instanceof Duplex2)) return new Duplex2(options);
        Readable2.call(this, options);
        Writable2.call(this, options);
        if (options && options.readable === false) this.readable = false;
        if (options && options.writable === false) this.writable = false;
        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
        this.once("end", onend2);
      }
      Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function() {
          return this._writableState.highWaterMark;
        }
      });
      function onend2() {
        if (this.allowHalfOpen || this._writableState.ended) return;
        pna.nextTick(onEndNT2, this);
      }
      function onEndNT2(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex2.prototype, "destroyed", {
        get: function() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
      Duplex2.prototype._destroy = function(err2, cb) {
        this.push(null);
        this.end();
        pna.nextTick(cb, err2);
      };
    }
  });

  // node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable2 = __commonJS({
    "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var pna = require_process_nextick_args();
      module.exports = Readable2;
      var isArray4 = require_isarray2();
      var Duplex2;
      Readable2.ReadableState = ReadableState2;
      var EE = require_events().EventEmitter;
      var EElistenerCount = function(emitter, type2) {
        return emitter.listeners(type2).length;
      };
      var Stream2 = require_stream_browser2();
      var Buffer4 = require_safe_buffer3().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var util = Object.create(require_util2());
      util.inherits = require_inherits_browser();
      var debugUtil = require_util();
      var debug2 = void 0;
      if (debugUtil && debugUtil.debuglog) {
        debug2 = debugUtil.debuglog("stream");
      } else {
        debug2 = function() {
        };
      }
      var BufferList2 = require_BufferList();
      var destroyImpl = require_destroy2();
      var StringDecoder2;
      util.inherits(Readable2, Stream2);
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener3(emitter, event, fn) {
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (isArray4(emitter._events[event])) emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState2(options, stream) {
        Duplex2 = Duplex2 || require_stream_duplex2();
        options = options || {};
        var isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
        var hwm = options.highWaterMark;
        var readableHwm = options.readableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        if (hwm || hwm === 0) this.highWaterMark = hwm;
        else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
        else this.highWaterMark = defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.buffer = new BufferList2();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder2(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex2();
        if (!(this instanceof Readable2)) return new Readable2(options);
        this._readableState = new ReadableState2(options, this);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
        }
        Stream2.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", {
        get: function() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable2.prototype.destroy = destroyImpl.destroy;
      Readable2.prototype._undestroy = destroyImpl.undestroy;
      Readable2.prototype._destroy = function(err2, cb) {
        this.push(null);
        cb(err2);
      };
      Readable2.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer4.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk2(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable2.prototype.unshift = function(chunk) {
        return readableAddChunk2(this, chunk, null, true, false);
      };
      function readableAddChunk2(stream, chunk, encoding, addToFront, skipChunkCheck) {
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk2(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid2(state, chunk);
          if (er) {
            stream.emit("error", er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer4.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              stream.emit("error", new Error("stream.push() after EOF"));
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                else maybeReadMore2(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
          }
        }
        return needMoreData2(state);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit("data", chunk);
          stream.read(0);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable2(stream);
        }
        maybeReadMore2(stream, state);
      }
      function chunkInvalid2(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new TypeError("Invalid non-string/buffer chunk");
        }
        return er;
      }
      function needMoreData2(state) {
        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
      }
      Readable2.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function(enc) {
        if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
        this._readableState.decoder = new StringDecoder2(enc);
        this._readableState.encoding = enc;
        return this;
      };
      var MAX_HWM2 = 8388608;
      function computeNewHighWaterMark2(n) {
        if (n >= MAX_HWM2) {
          n = MAX_HWM2;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead2(n, state) {
        if (n <= 0 || state.length === 0 && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          if (state.flowing && state.length) return state.buffer.head.data.length;
          else return state.length;
        }
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark2(n);
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable2.prototype.read = function(n) {
        debug2("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug2("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable2(this);
          else emitReadable2(this);
          return null;
        }
        n = howMuchToRead2(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable2(this);
          return null;
        }
        var doRead = state.needReadable;
        debug2("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug2("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug2("reading or ended", doRead);
        } else if (doRead) {
          debug2("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead2(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList2(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = true;
          n = 0;
        } else {
          state.length -= n;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable2(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      function onEofChunk2(stream, state) {
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        emitReadable2(stream);
      }
      function emitReadable2(stream) {
        var state = stream._readableState;
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug2("emitReadable", state.flowing);
          state.emittedReadable = true;
          if (state.sync) pna.nextTick(emitReadable_2, stream);
          else emitReadable_2(stream);
        }
      }
      function emitReadable_2(stream) {
        debug2("emit readable");
        stream.emit("readable");
        flow2(stream);
      }
      function maybeReadMore2(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          pna.nextTick(maybeReadMore_2, stream, state);
        }
      }
      function maybeReadMore_2(stream, state) {
        var len = state.length;
        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
          debug2("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
          else len = state.length;
        }
        state.readingMore = false;
      }
      Readable2.prototype._read = function(n) {
        this.emit("error", new Error("_read() is not implemented"));
      };
      Readable2.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug2("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend2 : unpipe;
        if (state.endEmitted) pna.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug2("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend2() {
          debug2("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain2(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug2("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend2);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }
        var increasedAwaitDrain = false;
        src.on("data", ondata);
        function ondata(chunk) {
          debug2("ondata");
          increasedAwaitDrain = false;
          var ret = dest.write(chunk);
          if (false === ret && !increasedAwaitDrain) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf4(state.pipes, dest) !== -1) && !cleanedUp) {
              debug2("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
              increasedAwaitDrain = true;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug2("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
        }
        prependListener3(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug2("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug2("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug2("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain2(src) {
        return function() {
          var state = src._readableState;
          debug2("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow2(src);
          }
        };
      }
      Readable2.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = { hasUnpiped: false };
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) {
            dests[i].emit("unpipe", this, { hasUnpiped: false });
          }
          return this;
        }
        var index = indexOf4(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable2.prototype.on = function(ev, fn) {
        var res = Stream2.prototype.on.call(this, ev, fn);
        if (ev === "data") {
          if (this._readableState.flowing !== false) this.resume();
        } else if (ev === "readable") {
          var state = this._readableState;
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) {
              pna.nextTick(nReadingNextTick2, this);
            } else if (state.length) {
              emitReadable2(this);
            }
          }
        }
        return res;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      function nReadingNextTick2(self2) {
        debug2("readable nexttick read 0");
        self2.read(0);
      }
      Readable2.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug2("resume");
          state.flowing = true;
          resume2(this, state);
        }
        return this;
      };
      function resume2(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          pna.nextTick(resume_2, stream, state);
        }
      }
      function resume_2(stream, state) {
        if (!state.reading) {
          debug2("resume read 0");
          stream.read(0);
        }
        state.resumeScheduled = false;
        state.awaitDrain = 0;
        stream.emit("resume");
        flow2(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable2.prototype.pause = function() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (false !== this._readableState.flowing) {
          debug2("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        return this;
      };
      function flow2(stream) {
        var state = stream._readableState;
        debug2("flow", state.flowing);
        while (state.flowing && stream.read() !== null) {
        }
      }
      Readable2.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug2("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug2("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ (function(method) {
              return function() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug2("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function() {
          return this._readableState.highWaterMark;
        }
      });
      Readable2._fromList = fromList2;
      function fromList2(n, state) {
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.head.data;
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = fromListPartial2(n, state.buffer, state.decoder);
        }
        return ret;
      }
      function fromListPartial2(n, list, hasStrings) {
        var ret;
        if (n < list.head.data.length) {
          ret = list.head.data.slice(0, n);
          list.head.data = list.head.data.slice(n);
        } else if (n === list.head.data.length) {
          ret = list.shift();
        } else {
          ret = hasStrings ? copyFromBufferString2(n, list) : copyFromBuffer2(n, list);
        }
        return ret;
      }
      function copyFromBufferString2(n, list) {
        var p = list.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length) ret += str;
          else ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next) list.head = p.next;
              else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }
      function copyFromBuffer2(n, list) {
        var ret = Buffer4.allocUnsafe(n);
        var p = list.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next) list.head = p.next;
              else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }
      function endReadable2(stream) {
        var state = stream._readableState;
        if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
        if (!state.endEmitted) {
          state.ended = true;
          pna.nextTick(endReadableNT2, state, stream);
        }
      }
      function endReadableNT2(state, stream) {
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
        }
      }
      function indexOf4(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }
        return -1;
      }
    }
  });

  // node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform2 = __commonJS({
    "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Transform2;
      var Duplex2 = require_stream_duplex2();
      var util = Object.create(require_util2());
      util.inherits = require_inherits_browser();
      util.inherits(Transform2, Duplex2);
      function afterTransform2(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (!cb) {
          return this.emit("error", new Error("write callback called multiple times"));
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform2(options) {
        if (!(this instanceof Transform2)) return new Transform2(options);
        Duplex2.call(this, options);
        this._transformState = {
          afterTransform: afterTransform2.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function") this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        }
        this.on("prefinish", prefinish2);
      }
      function prefinish2() {
        var _this = this;
        if (typeof this._flush === "function") {
          this._flush(function(er, data) {
            done2(_this, er, data);
          });
        } else {
          done2(this, null, null);
        }
      }
      Transform2.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex2.prototype.push.call(this, chunk, encoding);
      };
      Transform2.prototype._transform = function(chunk, encoding, cb) {
        throw new Error("_transform() is not implemented");
      };
      Transform2.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      };
      Transform2.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform2.prototype._destroy = function(err2, cb) {
        var _this2 = this;
        Duplex2.prototype._destroy.call(this, err2, function(err22) {
          cb(err22);
          _this2.emit("close");
        });
      };
      function done2(stream, er, data) {
        if (er) return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
        if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
        return stream.push(null);
      }
    }
  });

  // node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough2 = __commonJS({
    "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = PassThrough2;
      var Transform2 = require_stream_transform2();
      var util = Object.create(require_util2());
      util.inherits = require_inherits_browser();
      util.inherits(PassThrough2, Transform2);
      function PassThrough2(options) {
        if (!(this instanceof PassThrough2)) return new PassThrough2(options);
        Transform2.call(this, options);
      }
      PassThrough2.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node_modules/readable-stream/readable-browser.js
  var require_readable_browser2 = __commonJS({
    "node_modules/readable-stream/readable-browser.js"(exports, module) {
      init_process();
      init_buffer();
      exports = module.exports = require_stream_readable2();
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable2();
      exports.Duplex = require_stream_duplex2();
      exports.Transform = require_stream_transform2();
      exports.PassThrough = require_stream_passthrough2();
    }
  });

  // node_modules/ripemd160/node_modules/hash-base/index.js
  var require_hash_base2 = __commonJS({
    "node_modules/ripemd160/node_modules/hash-base/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var toBuffer = require_to_buffer2();
      var Transform2 = require_readable_browser2().Transform;
      var inherits2 = require_inherits_browser();
      function HashBase(blockSize) {
        Transform2.call(this);
        this._block = Buffer4.allocUnsafe(blockSize);
        this._blockSize = blockSize;
        this._blockOffset = 0;
        this._length = [0, 0, 0, 0];
        this._finalized = false;
      }
      inherits2(HashBase, Transform2);
      HashBase.prototype._transform = function(chunk, encoding, callback) {
        var error2 = null;
        try {
          this.update(chunk, encoding);
        } catch (err2) {
          error2 = err2;
        }
        callback(error2);
      };
      HashBase.prototype._flush = function(callback) {
        var error2 = null;
        try {
          this.push(this.digest());
        } catch (err2) {
          error2 = err2;
        }
        callback(error2);
      };
      HashBase.prototype.update = function(data, encoding) {
        if (this._finalized) {
          throw new Error("Digest already called");
        }
        var dataBuffer = toBuffer(data, encoding);
        var block = this._block;
        var offset = 0;
        while (this._blockOffset + dataBuffer.length - offset >= this._blockSize) {
          for (var i = this._blockOffset; i < this._blockSize; ) {
            block[i] = dataBuffer[offset];
            i += 1;
            offset += 1;
          }
          this._update();
          this._blockOffset = 0;
        }
        while (offset < dataBuffer.length) {
          block[this._blockOffset] = dataBuffer[offset];
          this._blockOffset += 1;
          offset += 1;
        }
        for (var j = 0, carry = dataBuffer.length * 8; carry > 0; ++j) {
          this._length[j] += carry;
          carry = this._length[j] / 4294967296 | 0;
          if (carry > 0) {
            this._length[j] -= 4294967296 * carry;
          }
        }
        return this;
      };
      HashBase.prototype._update = function() {
        throw new Error("_update is not implemented");
      };
      HashBase.prototype.digest = function(encoding) {
        if (this._finalized) {
          throw new Error("Digest already called");
        }
        this._finalized = true;
        var digest = this._digest();
        if (encoding !== void 0) {
          digest = digest.toString(encoding);
        }
        this._block.fill(0);
        this._blockOffset = 0;
        for (var i = 0; i < 4; ++i) {
          this._length[i] = 0;
        }
        return digest;
      };
      HashBase.prototype._digest = function() {
        throw new Error("_digest is not implemented");
      };
      module.exports = HashBase;
    }
  });

  // node_modules/ripemd160/index.js
  var require_ripemd160 = __commonJS({
    "node_modules/ripemd160/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_buffer().Buffer;
      var inherits2 = require_inherits_browser();
      var HashBase = require_hash_base2();
      var ARRAY16 = new Array(16);
      var zl = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ];
      var zr = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ];
      var sl = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ];
      var sr = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ];
      var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
      var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }
      function fn1(a, b, c, d, e, m, k, s) {
        return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
      }
      function fn2(a, b, c, d, e, m, k, s) {
        return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
      }
      function fn3(a, b, c, d, e, m, k, s) {
        return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
      }
      function fn4(a, b, c, d, e, m, k, s) {
        return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
      }
      function fn5(a, b, c, d, e, m, k, s) {
        return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
      }
      function RIPEMD160() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
      }
      inherits2(RIPEMD160, HashBase);
      RIPEMD160.prototype._update = function() {
        var words = ARRAY16;
        for (var j = 0; j < 16; ++j) {
          words[j] = this._block.readInt32LE(j * 4);
        }
        var al = this._a | 0;
        var bl = this._b | 0;
        var cl = this._c | 0;
        var dl = this._d | 0;
        var el = this._e | 0;
        var ar = this._a | 0;
        var br = this._b | 0;
        var cr = this._c | 0;
        var dr = this._d | 0;
        var er = this._e | 0;
        for (var i = 0; i < 80; i += 1) {
          var tl;
          var tr;
          if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
          } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
          } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
          } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
          } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
          }
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = tl;
          ar = er;
          er = dr;
          dr = rotl(cr, 10);
          cr = br;
          br = tr;
        }
        var t = this._b + cl + dr | 0;
        this._b = this._c + dl + er | 0;
        this._c = this._d + el + ar | 0;
        this._d = this._e + al + br | 0;
        this._e = this._a + bl + cr | 0;
        this._a = t;
      };
      RIPEMD160.prototype._digest = function() {
        this._block[this._blockOffset] = 128;
        this._blockOffset += 1;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = Buffer4.alloc ? Buffer4.alloc(20) : new Buffer4(20);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        buffer.writeInt32LE(this._e, 16);
        return buffer;
      };
      module.exports = RIPEMD160;
    }
  });

  // node_modules/sha.js/hash.js
  var require_hash3 = __commonJS({
    "node_modules/sha.js/hash.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var toBuffer = require_to_buffer();
      function Hash(blockSize, finalSize) {
        this._block = Buffer4.alloc(blockSize);
        this._finalSize = finalSize;
        this._blockSize = blockSize;
        this._len = 0;
      }
      Hash.prototype.update = function(data, enc) {
        data = toBuffer(data, enc || "utf8");
        var block = this._block;
        var blockSize = this._blockSize;
        var length = data.length;
        var accum = this._len;
        for (var offset = 0; offset < length; ) {
          var assigned = accum % blockSize;
          var remainder = Math.min(length - offset, blockSize - assigned);
          for (var i = 0; i < remainder; i++) {
            block[assigned + i] = data[offset + i];
          }
          accum += remainder;
          offset += remainder;
          if (accum % blockSize === 0) {
            this._update(block);
          }
        }
        this._len += length;
        return this;
      };
      Hash.prototype.digest = function(enc) {
        var rem = this._len % this._blockSize;
        this._block[rem] = 128;
        this._block.fill(0, rem + 1);
        if (rem >= this._finalSize) {
          this._update(this._block);
          this._block.fill(0);
        }
        var bits = this._len * 8;
        if (bits <= 4294967295) {
          this._block.writeUInt32BE(bits, this._blockSize - 4);
        } else {
          var lowBits = (bits & 4294967295) >>> 0;
          var highBits = (bits - lowBits) / 4294967296;
          this._block.writeUInt32BE(highBits, this._blockSize - 8);
          this._block.writeUInt32BE(lowBits, this._blockSize - 4);
        }
        this._update(this._block);
        var hash = this._hash();
        return enc ? hash.toString(enc) : hash;
      };
      Hash.prototype._update = function() {
        throw new Error("_update must be implemented by subclass");
      };
      module.exports = Hash;
    }
  });

  // node_modules/sha.js/sha.js
  var require_sha2 = __commonJS({
    "node_modules/sha.js/sha.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var K = [
        1518500249,
        1859775393,
        2400959708 | 0,
        3395469782 | 0
      ];
      var W2 = new Array(80);
      function Sha() {
        this.init();
        this._w = W2;
        Hash.call(this, 64, 56);
      }
      inherits2(Sha, Hash);
      Sha.prototype.init = function() {
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
        return this;
      };
      function rotl5(num) {
        return num << 5 | num >>> 27;
      }
      function rotl30(num) {
        return num << 30 | num >>> 2;
      }
      function ft(s, b, c, d) {
        if (s === 0) {
          return b & c | ~b & d;
        }
        if (s === 2) {
          return b & c | b & d | c & d;
        }
        return b ^ c ^ d;
      }
      Sha.prototype._update = function(M) {
        var w = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        for (var i = 0; i < 16; ++i) {
          w[i] = M.readInt32BE(i * 4);
        }
        for (; i < 80; ++i) {
          w[i] = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
        }
        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + w[j] + K[s] | 0;
          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };
      Sha.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(20);
        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);
        return H;
      };
      module.exports = Sha;
    }
  });

  // node_modules/sha.js/sha1.js
  var require_sha1 = __commonJS({
    "node_modules/sha.js/sha1.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var K = [
        1518500249,
        1859775393,
        2400959708 | 0,
        3395469782 | 0
      ];
      var W2 = new Array(80);
      function Sha1() {
        this.init();
        this._w = W2;
        Hash.call(this, 64, 56);
      }
      inherits2(Sha1, Hash);
      Sha1.prototype.init = function() {
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
        return this;
      };
      function rotl1(num) {
        return num << 1 | num >>> 31;
      }
      function rotl5(num) {
        return num << 5 | num >>> 27;
      }
      function rotl30(num) {
        return num << 30 | num >>> 2;
      }
      function ft(s, b, c, d) {
        if (s === 0) {
          return b & c | ~b & d;
        }
        if (s === 2) {
          return b & c | b & d | c & d;
        }
        return b ^ c ^ d;
      }
      Sha1.prototype._update = function(M) {
        var w = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        for (var i = 0; i < 16; ++i) {
          w[i] = M.readInt32BE(i * 4);
        }
        for (; i < 80; ++i) {
          w[i] = rotl1(w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
        }
        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + w[j] + K[s] | 0;
          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };
      Sha1.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(20);
        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);
        return H;
      };
      module.exports = Sha1;
    }
  });

  // node_modules/sha.js/sha256.js
  var require_sha256 = __commonJS({
    "node_modules/sha.js/sha256.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      var W2 = new Array(64);
      function Sha256() {
        this.init();
        this._w = W2;
        Hash.call(this, 64, 56);
      }
      inherits2(Sha256, Hash);
      Sha256.prototype.init = function() {
        this._a = 1779033703;
        this._b = 3144134277;
        this._c = 1013904242;
        this._d = 2773480762;
        this._e = 1359893119;
        this._f = 2600822924;
        this._g = 528734635;
        this._h = 1541459225;
        return this;
      };
      function ch(x, y, z) {
        return z ^ x & (y ^ z);
      }
      function maj(x, y, z) {
        return x & y | z & (x | y);
      }
      function sigma0(x) {
        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
      }
      function sigma1(x) {
        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
      }
      function gamma0(x) {
        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
      }
      function gamma1(x) {
        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
      }
      Sha256.prototype._update = function(M) {
        var w = this._w;
        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        var f = this._f | 0;
        var g = this._g | 0;
        var h = this._h | 0;
        for (var i = 0; i < 16; ++i) {
          w[i] = M.readInt32BE(i * 4);
        }
        for (; i < 64; ++i) {
          w[i] = gamma1(w[i - 2]) + w[i - 7] + gamma0(w[i - 15]) + w[i - 16] | 0;
        }
        for (var j = 0; j < 64; ++j) {
          var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + w[j] | 0;
          var T2 = sigma0(a) + maj(a, b, c) | 0;
          h = g;
          g = f;
          f = e;
          e = d + T1 | 0;
          d = c;
          c = b;
          b = a;
          a = T1 + T2 | 0;
        }
        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
        this._f = f + this._f | 0;
        this._g = g + this._g | 0;
        this._h = h + this._h | 0;
      };
      Sha256.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(32);
        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        H.writeInt32BE(this._h, 28);
        return H;
      };
      module.exports = Sha256;
    }
  });

  // node_modules/sha.js/sha224.js
  var require_sha224 = __commonJS({
    "node_modules/sha.js/sha224.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var Sha256 = require_sha256();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var W2 = new Array(64);
      function Sha224() {
        this.init();
        this._w = W2;
        Hash.call(this, 64, 56);
      }
      inherits2(Sha224, Sha256);
      Sha224.prototype.init = function() {
        this._a = 3238371032;
        this._b = 914150663;
        this._c = 812702999;
        this._d = 4144912697;
        this._e = 4290775857;
        this._f = 1750603025;
        this._g = 1694076839;
        this._h = 3204075428;
        return this;
      };
      Sha224.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(28);
        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        return H;
      };
      module.exports = Sha224;
    }
  });

  // node_modules/sha.js/sha512.js
  var require_sha512 = __commonJS({
    "node_modules/sha.js/sha512.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      var W2 = new Array(160);
      function Sha512() {
        this.init();
        this._w = W2;
        Hash.call(this, 128, 112);
      }
      inherits2(Sha512, Hash);
      Sha512.prototype.init = function() {
        this._ah = 1779033703;
        this._bh = 3144134277;
        this._ch = 1013904242;
        this._dh = 2773480762;
        this._eh = 1359893119;
        this._fh = 2600822924;
        this._gh = 528734635;
        this._hh = 1541459225;
        this._al = 4089235720;
        this._bl = 2227873595;
        this._cl = 4271175723;
        this._dl = 1595750129;
        this._el = 2917565137;
        this._fl = 725511199;
        this._gl = 4215389547;
        this._hl = 327033209;
        return this;
      };
      function Ch(x, y, z) {
        return z ^ x & (y ^ z);
      }
      function maj(x, y, z) {
        return x & y | z & (x | y);
      }
      function sigma0(x, xl) {
        return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
      }
      function sigma1(x, xl) {
        return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
      }
      function Gamma0(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
      }
      function Gamma0l(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
      }
      function Gamma1(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
      }
      function Gamma1l(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
      }
      function getCarry(a, b) {
        return a >>> 0 < b >>> 0 ? 1 : 0;
      }
      Sha512.prototype._update = function(M) {
        var w = this._w;
        var ah = this._ah | 0;
        var bh = this._bh | 0;
        var ch = this._ch | 0;
        var dh = this._dh | 0;
        var eh = this._eh | 0;
        var fh = this._fh | 0;
        var gh = this._gh | 0;
        var hh = this._hh | 0;
        var al = this._al | 0;
        var bl = this._bl | 0;
        var cl = this._cl | 0;
        var dl = this._dl | 0;
        var el = this._el | 0;
        var fl = this._fl | 0;
        var gl = this._gl | 0;
        var hl = this._hl | 0;
        for (var i = 0; i < 32; i += 2) {
          w[i] = M.readInt32BE(i * 4);
          w[i + 1] = M.readInt32BE(i * 4 + 4);
        }
        for (; i < 160; i += 2) {
          var xh = w[i - 15 * 2];
          var xl = w[i - 15 * 2 + 1];
          var gamma0 = Gamma0(xh, xl);
          var gamma0l = Gamma0l(xl, xh);
          xh = w[i - 2 * 2];
          xl = w[i - 2 * 2 + 1];
          var gamma1 = Gamma1(xh, xl);
          var gamma1l = Gamma1l(xl, xh);
          var Wi7h = w[i - 7 * 2];
          var Wi7l = w[i - 7 * 2 + 1];
          var Wi16h = w[i - 16 * 2];
          var Wi16l = w[i - 16 * 2 + 1];
          var Wil = gamma0l + Wi7l | 0;
          var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
          Wil = Wil + gamma1l | 0;
          Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
          Wil = Wil + Wi16l | 0;
          Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
          w[i] = Wih;
          w[i + 1] = Wil;
        }
        for (var j = 0; j < 160; j += 2) {
          Wih = w[j];
          Wil = w[j + 1];
          var majh = maj(ah, bh, ch);
          var majl = maj(al, bl, cl);
          var sigma0h = sigma0(ah, al);
          var sigma0l = sigma0(al, ah);
          var sigma1h = sigma1(eh, el);
          var sigma1l = sigma1(el, eh);
          var Kih = K[j];
          var Kil = K[j + 1];
          var chh = Ch(eh, fh, gh);
          var chl = Ch(el, fl, gl);
          var t1l = hl + sigma1l | 0;
          var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
          t1l = t1l + chl | 0;
          t1h = t1h + chh + getCarry(t1l, chl) | 0;
          t1l = t1l + Kil | 0;
          t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
          t1l = t1l + Wil | 0;
          t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
          var t2l = sigma0l + majl | 0;
          var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          el = dl + t1l | 0;
          eh = dh + t1h + getCarry(el, dl) | 0;
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          al = t1l + t2l | 0;
          ah = t1h + t2h + getCarry(al, t1l) | 0;
        }
        this._al = this._al + al | 0;
        this._bl = this._bl + bl | 0;
        this._cl = this._cl + cl | 0;
        this._dl = this._dl + dl | 0;
        this._el = this._el + el | 0;
        this._fl = this._fl + fl | 0;
        this._gl = this._gl + gl | 0;
        this._hl = this._hl + hl | 0;
        this._ah = this._ah + ah + getCarry(this._al, al) | 0;
        this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
        this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
        this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
        this._eh = this._eh + eh + getCarry(this._el, el) | 0;
        this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
        this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
        this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
      };
      Sha512.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(64);
        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }
        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        writeInt64BE(this._gh, this._gl, 48);
        writeInt64BE(this._hh, this._hl, 56);
        return H;
      };
      module.exports = Sha512;
    }
  });

  // node_modules/sha.js/sha384.js
  var require_sha384 = __commonJS({
    "node_modules/sha.js/sha384.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var SHA512 = require_sha512();
      var Hash = require_hash3();
      var Buffer4 = require_safe_buffer().Buffer;
      var W2 = new Array(160);
      function Sha384() {
        this.init();
        this._w = W2;
        Hash.call(this, 128, 112);
      }
      inherits2(Sha384, SHA512);
      Sha384.prototype.init = function() {
        this._ah = 3418070365;
        this._bh = 1654270250;
        this._ch = 2438529370;
        this._dh = 355462360;
        this._eh = 1731405415;
        this._fh = 2394180231;
        this._gh = 3675008525;
        this._hh = 1203062813;
        this._al = 3238371032;
        this._bl = 914150663;
        this._cl = 812702999;
        this._dl = 4144912697;
        this._el = 4290775857;
        this._fl = 1750603025;
        this._gl = 1694076839;
        this._hl = 3204075428;
        return this;
      };
      Sha384.prototype._hash = function() {
        var H = Buffer4.allocUnsafe(48);
        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }
        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        return H;
      };
      module.exports = Sha384;
    }
  });

  // node_modules/sha.js/index.js
  var require_sha4 = __commonJS({
    "node_modules/sha.js/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function SHA(algorithm) {
        var alg = algorithm.toLowerCase();
        var Algorithm = module.exports[alg];
        if (!Algorithm) {
          throw new Error(alg + " is not supported (we accept pull requests)");
        }
        return new Algorithm();
      };
      module.exports.sha = require_sha2();
      module.exports.sha1 = require_sha1();
      module.exports.sha224 = require_sha224();
      module.exports.sha256 = require_sha256();
      module.exports.sha384 = require_sha384();
      module.exports.sha512 = require_sha512();
    }
  });

  // node-modules-polyfills-commonjs:string_decoder
  var require_string_decoder2 = __commonJS({
    "node-modules-polyfills-commonjs:string_decoder"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_string_decoder(), __toCommonJS(string_decoder_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/cipher-base/index.js
  var require_cipher_base = __commonJS({
    "node_modules/cipher-base/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var Transform2 = require_stream().Transform;
      var StringDecoder2 = require_string_decoder2().StringDecoder;
      var inherits2 = require_inherits_browser();
      var toBuffer = require_to_buffer();
      function CipherBase(hashMode) {
        Transform2.call(this);
        this.hashMode = typeof hashMode === "string";
        if (this.hashMode) {
          this[hashMode] = this._finalOrDigest;
        } else {
          this["final"] = this._finalOrDigest;
        }
        if (this._final) {
          this.__final = this._final;
          this._final = null;
        }
        this._decoder = null;
        this._encoding = null;
      }
      inherits2(CipherBase, Transform2);
      CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
        var bufferData = toBuffer(data, inputEnc);
        var outData = this._update(bufferData);
        if (this.hashMode) {
          return this;
        }
        if (outputEnc) {
          outData = this._toString(outData, outputEnc);
        }
        return outData;
      };
      CipherBase.prototype.setAutoPadding = function() {
      };
      CipherBase.prototype.getAuthTag = function() {
        throw new Error("trying to get auth tag in unsupported state");
      };
      CipherBase.prototype.setAuthTag = function() {
        throw new Error("trying to set auth tag in unsupported state");
      };
      CipherBase.prototype.setAAD = function() {
        throw new Error("trying to set aad in unsupported state");
      };
      CipherBase.prototype._transform = function(data, _, next) {
        var err2;
        try {
          if (this.hashMode) {
            this._update(data);
          } else {
            this.push(this._update(data));
          }
        } catch (e) {
          err2 = e;
        } finally {
          next(err2);
        }
      };
      CipherBase.prototype._flush = function(done2) {
        var err2;
        try {
          this.push(this.__final());
        } catch (e) {
          err2 = e;
        }
        done2(err2);
      };
      CipherBase.prototype._finalOrDigest = function(outputEnc) {
        var outData = this.__final() || Buffer4.alloc(0);
        if (outputEnc) {
          outData = this._toString(outData, outputEnc, true);
        }
        return outData;
      };
      CipherBase.prototype._toString = function(value, enc, fin) {
        if (!this._decoder) {
          this._decoder = new StringDecoder2(enc);
          this._encoding = enc;
        }
        if (this._encoding !== enc) {
          throw new Error("can\u2019t switch encodings");
        }
        var out = this._decoder.write(value);
        if (fin) {
          out += this._decoder.end();
        }
        return out;
      };
      module.exports = CipherBase;
    }
  });

  // node_modules/create-hash/browser.js
  var require_browser3 = __commonJS({
    "node_modules/create-hash/browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inherits2 = require_inherits_browser();
      var MD5 = require_md5();
      var RIPEMD160 = require_ripemd160();
      var sha = require_sha4();
      var Base = require_cipher_base();
      function Hash(hash) {
        Base.call(this, "digest");
        this._hash = hash;
      }
      inherits2(Hash, Base);
      Hash.prototype._update = function(data) {
        this._hash.update(data);
      };
      Hash.prototype._final = function() {
        return this._hash.digest();
      };
      module.exports = function createHash(alg) {
        alg = alg.toLowerCase();
        if (alg === "md5") return new MD5();
        if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
        return new Hash(sha(alg));
      };
    }
  });

  // node_modules/ethereumjs-util/dist.browser/hash.js
  var require_hash4 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/hash.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
      var keccak_1 = require_keccak3();
      var createHash = require_browser3();
      var externals_1 = require_externals();
      var bytes_1 = require_bytes2();
      var helpers_1 = require_helpers();
      var keccak = function(a, bits) {
        if (bits === void 0) {
          bits = 256;
        }
        (0, helpers_1.assertIsBuffer)(a);
        switch (bits) {
          case 224: {
            return (0, keccak_1.keccak224)(a);
          }
          case 256: {
            return (0, keccak_1.keccak256)(a);
          }
          case 384: {
            return (0, keccak_1.keccak384)(a);
          }
          case 512: {
            return (0, keccak_1.keccak512)(a);
          }
          default: {
            throw new Error("Invald algorithm: keccak".concat(bits));
          }
        }
      };
      exports.keccak = keccak;
      var keccak256 = function(a) {
        return (0, exports.keccak)(a);
      };
      exports.keccak256 = keccak256;
      var keccakFromString = function(a, bits) {
        if (bits === void 0) {
          bits = 256;
        }
        (0, helpers_1.assertIsString)(a);
        var buf = Buffer2.from(a, "utf8");
        return (0, exports.keccak)(buf, bits);
      };
      exports.keccakFromString = keccakFromString;
      var keccakFromHexString = function(a, bits) {
        if (bits === void 0) {
          bits = 256;
        }
        (0, helpers_1.assertIsHexString)(a);
        return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
      };
      exports.keccakFromHexString = keccakFromHexString;
      var keccakFromArray = function(a, bits) {
        if (bits === void 0) {
          bits = 256;
        }
        (0, helpers_1.assertIsArray)(a);
        return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
      };
      exports.keccakFromArray = keccakFromArray;
      var _sha256 = function(a) {
        a = (0, bytes_1.toBuffer)(a);
        return createHash("sha256").update(a).digest();
      };
      var sha256 = function(a) {
        (0, helpers_1.assertIsBuffer)(a);
        return _sha256(a);
      };
      exports.sha256 = sha256;
      var sha256FromString = function(a) {
        (0, helpers_1.assertIsString)(a);
        return _sha256(a);
      };
      exports.sha256FromString = sha256FromString;
      var sha256FromArray = function(a) {
        (0, helpers_1.assertIsArray)(a);
        return _sha256(a);
      };
      exports.sha256FromArray = sha256FromArray;
      var _ripemd160 = function(a, padded) {
        a = (0, bytes_1.toBuffer)(a);
        var hash = createHash("rmd160").update(a).digest();
        if (padded === true) {
          return (0, bytes_1.setLengthLeft)(hash, 32);
        } else {
          return hash;
        }
      };
      var ripemd160 = function(a, padded) {
        (0, helpers_1.assertIsBuffer)(a);
        return _ripemd160(a, padded);
      };
      exports.ripemd160 = ripemd160;
      var ripemd160FromString = function(a, padded) {
        (0, helpers_1.assertIsString)(a);
        return _ripemd160(a, padded);
      };
      exports.ripemd160FromString = ripemd160FromString;
      var ripemd160FromArray = function(a, padded) {
        (0, helpers_1.assertIsArray)(a);
        return _ripemd160(a, padded);
      };
      exports.ripemd160FromArray = ripemd160FromArray;
      var rlphash = function(a) {
        return (0, exports.keccak)(externals_1.rlp.encode(a));
      };
      exports.rlphash = rlphash;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/types.js
  var require_types2 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/types.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
      var externals_1 = require_externals();
      var internal_1 = require_internal();
      var bytes_1 = require_bytes2();
      function bnToHex(value) {
        return "0x".concat(value.toString(16));
      }
      exports.bnToHex = bnToHex;
      function bnToUnpaddedBuffer(value) {
        return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer2));
      }
      exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
      function bnToRlp(value) {
        return bnToUnpaddedBuffer(value);
      }
      exports.bnToRlp = bnToRlp;
      var TypeOutput;
      (function(TypeOutput2) {
        TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
        TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
        TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
        TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
      })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
      function toType(input, outputType) {
        if (input === null) {
          return null;
        }
        if (input === void 0) {
          return void 0;
        }
        if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
          throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
        } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var output = (0, bytes_1.toBuffer)(input);
        if (outputType === TypeOutput.Buffer) {
          return output;
        } else if (outputType === TypeOutput.BN) {
          return new externals_1.BN(output);
        } else if (outputType === TypeOutput.Number) {
          var bn = new externals_1.BN(output);
          var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
          if (bn.gt(max)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
          }
          return bn.toNumber();
        } else {
          return "0x".concat(output.toString("hex"));
        }
      }
      exports.toType = toType;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/account.js
  var require_account = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/account.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
      var assert_1 = __importDefault(require_assert());
      var externals_1 = require_externals();
      var secp256k1_1 = require_secp256k12();
      var internal_1 = require_internal();
      var constants_1 = require_constants();
      var bytes_1 = require_bytes2();
      var hash_1 = require_hash4();
      var helpers_1 = require_helpers();
      var types_1 = require_types2();
      var Account = (
        /** @class */
        (function() {
          function Account2(nonce, balance, stateRoot, codeHash) {
            if (nonce === void 0) {
              nonce = new externals_1.BN(0);
            }
            if (balance === void 0) {
              balance = new externals_1.BN(0);
            }
            if (stateRoot === void 0) {
              stateRoot = constants_1.KECCAK256_RLP;
            }
            if (codeHash === void 0) {
              codeHash = constants_1.KECCAK256_NULL;
            }
            this.nonce = nonce;
            this.balance = balance;
            this.stateRoot = stateRoot;
            this.codeHash = codeHash;
            this._validate();
          }
          Account2.fromAccountData = function(accountData) {
            var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
            return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
          };
          Account2.fromRlpSerializedAccount = function(serialized) {
            var values = externals_1.rlp.decode(serialized);
            if (!Array.isArray(values)) {
              throw new Error("Invalid serialized account input. Must be array");
            }
            return this.fromValuesArray(values);
          };
          Account2.fromValuesArray = function(values) {
            var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
            return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
          };
          Account2.prototype._validate = function() {
            if (this.nonce.lt(new externals_1.BN(0))) {
              throw new Error("nonce must be greater than zero");
            }
            if (this.balance.lt(new externals_1.BN(0))) {
              throw new Error("balance must be greater than zero");
            }
            if (this.stateRoot.length !== 32) {
              throw new Error("stateRoot must have a length of 32");
            }
            if (this.codeHash.length !== 32) {
              throw new Error("codeHash must have a length of 32");
            }
          };
          Account2.prototype.raw = function() {
            return [
              (0, types_1.bnToUnpaddedBuffer)(this.nonce),
              (0, types_1.bnToUnpaddedBuffer)(this.balance),
              this.stateRoot,
              this.codeHash
            ];
          };
          Account2.prototype.serialize = function() {
            return externals_1.rlp.encode(this.raw());
          };
          Account2.prototype.isContract = function() {
            return !this.codeHash.equals(constants_1.KECCAK256_NULL);
          };
          Account2.prototype.isEmpty = function() {
            return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
          };
          return Account2;
        })()
      );
      exports.Account = Account;
      var isValidAddress = function(hexAddress) {
        try {
          (0, helpers_1.assertIsString)(hexAddress);
        } catch (e) {
          return false;
        }
        return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
      };
      exports.isValidAddress = isValidAddress;
      var toChecksumAddress = function(hexAddress, eip1191ChainId) {
        (0, helpers_1.assertIsHexString)(hexAddress);
        var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
        var prefix = "";
        if (eip1191ChainId) {
          var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
          prefix = chainId.toString() + "0x";
        }
        var hash = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
        var ret = "0x";
        for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
          } else {
            ret += address[i];
          }
        }
        return ret;
      };
      exports.toChecksumAddress = toChecksumAddress;
      var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
        return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
      };
      exports.isValidChecksumAddress = isValidChecksumAddress;
      var generateAddress = function(from3, nonce) {
        (0, helpers_1.assertIsBuffer)(from3);
        (0, helpers_1.assertIsBuffer)(nonce);
        var nonceBN = new externals_1.BN(nonce);
        if (nonceBN.isZero()) {
          return (0, hash_1.rlphash)([from3, null]).slice(-20);
        }
        return (0, hash_1.rlphash)([from3, Buffer2.from(nonceBN.toArray())]).slice(-20);
      };
      exports.generateAddress = generateAddress;
      var generateAddress2 = function(from3, salt, initCode) {
        (0, helpers_1.assertIsBuffer)(from3);
        (0, helpers_1.assertIsBuffer)(salt);
        (0, helpers_1.assertIsBuffer)(initCode);
        (0, assert_1.default)(from3.length === 20);
        (0, assert_1.default)(salt.length === 32);
        var address = (0, hash_1.keccak256)(Buffer2.concat([Buffer2.from("ff", "hex"), from3, salt, (0, hash_1.keccak256)(initCode)]));
        return address.slice(-20);
      };
      exports.generateAddress2 = generateAddress2;
      var isValidPrivate = function(privateKey) {
        return (0, secp256k1_1.privateKeyVerify)(privateKey);
      };
      exports.isValidPrivate = isValidPrivate;
      var isValidPublic = function(publicKey, sanitize) {
        if (sanitize === void 0) {
          sanitize = false;
        }
        (0, helpers_1.assertIsBuffer)(publicKey);
        if (publicKey.length === 64) {
          return (0, secp256k1_1.publicKeyVerify)(Buffer2.concat([Buffer2.from([4]), publicKey]));
        }
        if (!sanitize) {
          return false;
        }
        return (0, secp256k1_1.publicKeyVerify)(publicKey);
      };
      exports.isValidPublic = isValidPublic;
      var pubToAddress = function(pubKey, sanitize) {
        if (sanitize === void 0) {
          sanitize = false;
        }
        (0, helpers_1.assertIsBuffer)(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = Buffer2.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
        }
        (0, assert_1.default)(pubKey.length === 64);
        return (0, hash_1.keccak)(pubKey).slice(-20);
      };
      exports.pubToAddress = pubToAddress;
      exports.publicToAddress = exports.pubToAddress;
      var privateToPublic = function(privateKey) {
        (0, helpers_1.assertIsBuffer)(privateKey);
        return Buffer2.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
      };
      exports.privateToPublic = privateToPublic;
      var privateToAddress = function(privateKey) {
        return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
      };
      exports.privateToAddress = privateToAddress;
      var importPublic = function(publicKey) {
        (0, helpers_1.assertIsBuffer)(publicKey);
        if (publicKey.length !== 64) {
          publicKey = Buffer2.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
        }
        return publicKey;
      };
      exports.importPublic = importPublic;
      var zeroAddress = function() {
        var addressLength = 20;
        var addr = (0, bytes_1.zeros)(addressLength);
        return (0, bytes_1.bufferToHex)(addr);
      };
      exports.zeroAddress = zeroAddress;
      var isZeroAddress = function(hexAddress) {
        try {
          (0, helpers_1.assertIsString)(hexAddress);
        } catch (e) {
          return false;
        }
        var zeroAddr = (0, exports.zeroAddress)();
        return zeroAddr === hexAddress;
      };
      exports.isZeroAddress = isZeroAddress;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/address.js
  var require_address2 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/address.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Address = void 0;
      var assert_1 = __importDefault(require_assert());
      var externals_1 = require_externals();
      var bytes_1 = require_bytes2();
      var account_1 = require_account();
      var Address = (
        /** @class */
        (function() {
          function Address2(buf) {
            (0, assert_1.default)(buf.length === 20, "Invalid address length");
            this.buf = buf;
          }
          Address2.zero = function() {
            return new Address2((0, bytes_1.zeros)(20));
          };
          Address2.fromString = function(str) {
            (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
            return new Address2((0, bytes_1.toBuffer)(str));
          };
          Address2.fromPublicKey = function(pubKey) {
            (0, assert_1.default)(Buffer2.isBuffer(pubKey), "Public key should be Buffer");
            var buf = (0, account_1.pubToAddress)(pubKey);
            return new Address2(buf);
          };
          Address2.fromPrivateKey = function(privateKey) {
            (0, assert_1.default)(Buffer2.isBuffer(privateKey), "Private key should be Buffer");
            var buf = (0, account_1.privateToAddress)(privateKey);
            return new Address2(buf);
          };
          Address2.generate = function(from3, nonce) {
            (0, assert_1.default)(externals_1.BN.isBN(nonce));
            return new Address2((0, account_1.generateAddress)(from3.buf, nonce.toArrayLike(Buffer2)));
          };
          Address2.generate2 = function(from3, salt, initCode) {
            (0, assert_1.default)(Buffer2.isBuffer(salt));
            (0, assert_1.default)(Buffer2.isBuffer(initCode));
            return new Address2((0, account_1.generateAddress2)(from3.buf, salt, initCode));
          };
          Address2.prototype.equals = function(address) {
            return this.buf.equals(address.buf);
          };
          Address2.prototype.isZero = function() {
            return this.equals(Address2.zero());
          };
          Address2.prototype.isPrecompileOrSystemAddress = function() {
            var addressBN = new externals_1.BN(this.buf);
            var rangeMin = new externals_1.BN(0);
            var rangeMax = new externals_1.BN("ffff", "hex");
            return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
          };
          Address2.prototype.toString = function() {
            return "0x" + this.buf.toString("hex");
          };
          Address2.prototype.toBuffer = function() {
            return Buffer2.from(this.buf);
          };
          return Address2;
        })()
      );
      exports.Address = Address;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/signature.js
  var require_signature3 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/signature.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
      var secp256k1_1 = require_secp256k12();
      var externals_1 = require_externals();
      var bytes_1 = require_bytes2();
      var hash_1 = require_hash4();
      var helpers_1 = require_helpers();
      var types_1 = require_types2();
      function ecsign(msgHash, privateKey, chainId) {
        var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
        var r = Buffer2.from(signature.slice(0, 32));
        var s = Buffer2.from(signature.slice(32, 64));
        if (!chainId || typeof chainId === "number") {
          if (chainId && !Number.isSafeInteger(chainId)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
          }
          var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
          return { r, s, v: v_1 };
        }
        var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
        var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer2);
        return { r, s, v };
      }
      exports.ecsign = ecsign;
      function calculateSigRecovery(v, chainId) {
        var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
        if (vBN.eqn(0) || vBN.eqn(1))
          return (0, types_1.toType)(v, types_1.TypeOutput.BN);
        if (!chainId) {
          return vBN.subn(27);
        }
        var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
        return vBN.sub(chainIdBN.muln(2).addn(35));
      }
      function isValidSigRecovery(recovery) {
        var rec = new externals_1.BN(recovery);
        return rec.eqn(0) || rec.eqn(1);
      }
      var ecrecover = function(msgHash, v, r, s, chainId) {
        var signature = Buffer2.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
          throw new Error("Invalid signature v value");
        }
        var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
        return Buffer2.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
      };
      exports.ecrecover = ecrecover;
      var toRpcSig = function(v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
          throw new Error("Invalid signature v value");
        }
        return (0, bytes_1.bufferToHex)(Buffer2.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
      };
      exports.toRpcSig = toRpcSig;
      var toCompactSig = function(v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
          throw new Error("Invalid signature v value");
        }
        var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
        var ss = s;
        if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
          ss = Buffer2.from(s);
          ss[0] |= 128;
        }
        return (0, bytes_1.bufferToHex)(Buffer2.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
      };
      exports.toCompactSig = toCompactSig;
      var fromRpcSig = function(sig) {
        var buf = (0, bytes_1.toBuffer)(sig);
        var r;
        var s;
        var v;
        if (buf.length >= 65) {
          r = buf.slice(0, 32);
          s = buf.slice(32, 64);
          v = (0, bytes_1.bufferToInt)(buf.slice(64));
        } else if (buf.length === 64) {
          r = buf.slice(0, 32);
          s = buf.slice(32, 64);
          v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
          s[0] &= 127;
        } else {
          throw new Error("Invalid signature length");
        }
        if (v < 27) {
          v += 27;
        }
        return {
          v,
          r,
          s
        };
      };
      exports.fromRpcSig = fromRpcSig;
      var isValidSignature = function(v, r, s, homesteadOrLater, chainId) {
        if (homesteadOrLater === void 0) {
          homesteadOrLater = true;
        }
        var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
        var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
        if (r.length !== 32 || s.length !== 32) {
          return false;
        }
        if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
          return false;
        }
        var rBN = new externals_1.BN(r);
        var sBN = new externals_1.BN(s);
        if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
          return false;
        }
        if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
          return false;
        }
        return true;
      };
      exports.isValidSignature = isValidSignature;
      var hashPersonalMessage = function(message) {
        (0, helpers_1.assertIsBuffer)(message);
        var prefix = Buffer2.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
        return (0, hash_1.keccak)(Buffer2.concat([prefix, message]));
      };
      exports.hashPersonalMessage = hashPersonalMessage;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/object.js
  var require_object = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/object.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defineProperties = void 0;
      var assert_1 = __importDefault(require_assert());
      var internal_1 = require_internal();
      var externals_1 = require_externals();
      var bytes_1 = require_bytes2();
      var defineProperties = function(self2, fields, data) {
        self2.raw = [];
        self2._fields = [];
        self2.toJSON = function(label) {
          if (label === void 0) {
            label = false;
          }
          if (label) {
            var obj_1 = {};
            self2._fields.forEach(function(field) {
              obj_1[field] = "0x".concat(self2[field].toString("hex"));
            });
            return obj_1;
          }
          return (0, bytes_1.baToJSON)(self2.raw);
        };
        self2.serialize = function serialize() {
          return externals_1.rlp.encode(self2.raw);
        };
        fields.forEach(function(field, i) {
          self2._fields.push(field.name);
          function getter() {
            return self2.raw[i];
          }
          function setter(v) {
            v = (0, bytes_1.toBuffer)(v);
            if (v.toString("hex") === "00" && !field.allowZero) {
              v = Buffer2.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
              v = (0, bytes_1.unpadBuffer)(v);
              (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
            } else if (!(field.allowZero && v.length === 0) && field.length) {
              (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
            }
            self2.raw[i] = v;
          }
          Object.defineProperty(self2, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
          });
          if (field.default) {
            self2[field.name] = field.default;
          }
          if (field.alias) {
            Object.defineProperty(self2, field.alias, {
              enumerable: false,
              configurable: true,
              set: setter,
              get: getter
            });
          }
        });
        if (data) {
          if (typeof data === "string") {
            data = Buffer2.from((0, internal_1.stripHexPrefix)(data), "hex");
          }
          if (Buffer2.isBuffer(data)) {
            data = externals_1.rlp.decode(data);
          }
          if (Array.isArray(data)) {
            if (data.length > self2._fields.length) {
              throw new Error("wrong number of fields in data");
            }
            data.forEach(function(d, i) {
              self2[self2._fields[i]] = (0, bytes_1.toBuffer)(d);
            });
          } else if (typeof data === "object") {
            var keys_1 = Object.keys(data);
            fields.forEach(function(field) {
              if (keys_1.indexOf(field.name) !== -1)
                self2[field.name] = data[field.name];
              if (keys_1.indexOf(field.alias) !== -1)
                self2[field.alias] = data[field.alias];
            });
          } else {
            throw new Error("invalid data");
          }
        }
      };
      exports.defineProperties = defineProperties;
    }
  });

  // node_modules/ethereumjs-util/dist.browser/index.js
  var require_dist3 = __commonJS({
    "node_modules/ethereumjs-util/dist.browser/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      }) : (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      }));
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
      __exportStar(require_constants(), exports);
      __exportStar(require_account(), exports);
      __exportStar(require_address2(), exports);
      __exportStar(require_hash4(), exports);
      __exportStar(require_signature3(), exports);
      __exportStar(require_bytes2(), exports);
      __exportStar(require_object(), exports);
      __exportStar(require_externals(), exports);
      __exportStar(require_types2(), exports);
      var internal_1 = require_internal();
      Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
        return internal_1.isHexPrefixed;
      } });
      Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
        return internal_1.stripHexPrefix;
      } });
      Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
        return internal_1.padToEven;
      } });
      Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
        return internal_1.getBinarySize;
      } });
      Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
        return internal_1.arrayContainsArray;
      } });
      Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
        return internal_1.toAscii;
      } });
      Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
        return internal_1.fromUtf8;
      } });
      Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
        return internal_1.fromAscii;
      } });
      Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
        return internal_1.getKeys;
      } });
      Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
        return internal_1.isHexString;
      } });
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/types.js
  var require_types3 = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/types.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;
      var ethereumjs_util_1 = require_dist3();
      var Capability;
      (function(Capability2) {
        Capability2[Capability2["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
        Capability2[Capability2["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
        Capability2[Capability2["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
        Capability2[Capability2["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
      })(Capability = exports.Capability || (exports.Capability = {}));
      function isAccessListBuffer(input) {
        if (input.length === 0) {
          return true;
        }
        var firstItem = input[0];
        if (Array.isArray(firstItem)) {
          return true;
        }
        return false;
      }
      exports.isAccessListBuffer = isAccessListBuffer;
      function isAccessList(input) {
        return !isAccessListBuffer(input);
      }
      exports.isAccessList = isAccessList;
      exports.N_DIV_2 = new ethereumjs_util_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
    }
  });

  // node_modules/crc-32/crc32.js
  var require_crc32 = __commonJS({
    "node_modules/crc-32/crc32.js"(exports) {
      init_process();
      init_buffer();
      var CRC32;
      (function(factory) {
        if (typeof DO_NOT_EXPORT_CRC === "undefined") {
          if ("object" === typeof exports) {
            factory(exports);
          } else if ("function" === typeof define && define.amd) {
            define(function() {
              var module2 = {};
              factory(module2);
              return module2;
            });
          } else {
            factory(CRC32 = {});
          }
        } else {
          factory(CRC32 = {});
        }
      })(function(CRC322) {
        CRC322.version = "1.2.2";
        function signed_crc_table() {
          var c = 0, table = new Array(256);
          for (var n = 0; n != 256; ++n) {
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
        }
        var T0 = signed_crc_table();
        function slice_by_16_tables(T) {
          var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
          for (n = 0; n != 256; ++n) table[n] = T[n];
          for (n = 0; n != 256; ++n) {
            v = T[n];
            for (c = 256 + n; c < 4096; c += 256) v = table[c] = v >>> 8 ^ T[v & 255];
          }
          var out = [];
          for (n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
          return out;
        }
        var TT = slice_by_16_tables(T0);
        var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
        var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
        var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
        function crc32_bstr(bstr, seed) {
          var C = seed ^ -1;
          for (var i = 0, L = bstr.length; i < L; ) C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 255];
          return ~C;
        }
        function crc32_buf(B, seed) {
          var C = seed ^ -1, L = B.length - 15, i = 0;
          for (; i < L; ) C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
          L += 15;
          while (i < L) C = C >>> 8 ^ T0[(C ^ B[i++]) & 255];
          return ~C;
        }
        function crc32_str(str, seed) {
          var C = seed ^ -1;
          for (var i = 0, L = str.length, c = 0, d = 0; i < L; ) {
            c = str.charCodeAt(i++);
            if (c < 128) {
              C = C >>> 8 ^ T0[(C ^ c) & 255];
            } else if (c < 2048) {
              C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
            } else if (c >= 55296 && c < 57344) {
              c = (c & 1023) + 64;
              d = str.charCodeAt(i++) & 1023;
              C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 255];
            } else {
              C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
            }
          }
          return ~C;
        }
        CRC322.table = T0;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
      });
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/mainnet.json
  var require_mainnet = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/mainnet.json"(exports, module) {
      module.exports = {
        name: "mainnet",
        chainId: 1,
        networkId: 1,
        defaultHardfork: "istanbul",
        consensus: {
          type: "pow",
          algorithm: "ethash",
          ethash: {}
        },
        comment: "The Ethereum main chain",
        url: "https://ethstats.net/",
        genesis: {
          hash: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
          timestamp: null,
          gasLimit: 5e3,
          difficulty: 17179869184,
          nonce: "0x0000000000000042",
          extraData: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
          stateRoot: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0xfc64ec04"
          },
          {
            name: "homestead",
            block: 115e4,
            forkHash: "0x97c2c34c"
          },
          {
            name: "dao",
            block: 192e4,
            forkHash: "0x91d1f948"
          },
          {
            name: "tangerineWhistle",
            block: 2463e3,
            forkHash: "0x7a64da13"
          },
          {
            name: "spuriousDragon",
            block: 2675e3,
            forkHash: "0x3edd5b10"
          },
          {
            name: "byzantium",
            block: 437e4,
            forkHash: "0xa00bc324"
          },
          {
            name: "constantinople",
            block: 728e4,
            forkHash: "0x668db0af"
          },
          {
            name: "petersburg",
            block: 728e4,
            forkHash: "0x668db0af"
          },
          {
            name: "istanbul",
            block: 9069e3,
            forkHash: "0x879d6e30"
          },
          {
            name: "muirGlacier",
            block: 92e5,
            forkHash: "0xe029e991"
          },
          {
            name: "berlin",
            block: 12244e3,
            forkHash: "0x0eb440f6"
          },
          {
            name: "london",
            block: 12965e3,
            forkHash: "0xb715077d"
          },
          {
            name: "arrowGlacier",
            block: 13773e3,
            forkHash: "0x20c327fc"
          },
          {
            name: "grayGlacier",
            block: 1505e4,
            forkHash: "0xf0afd0e3"
          },
          {
            name: "mergeForkIdTransition",
            block: null,
            forkHash: null
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "18.138.108.67",
            port: 30303,
            id: "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
            location: "ap-southeast-1-001",
            comment: "bootnode-aws-ap-southeast-1-001"
          },
          {
            ip: "3.209.45.79",
            port: 30303,
            id: "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
            location: "us-east-1-001",
            comment: "bootnode-aws-us-east-1-001"
          },
          {
            ip: "34.255.23.113",
            port: 30303,
            id: "ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",
            location: "eu-west-1-001",
            comment: "bootnode-aws-eu-west-1-001"
          },
          {
            ip: "35.158.244.151",
            port: 30303,
            id: "279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",
            location: "eu-central-1-001",
            comment: "bootnode-aws-eu-central-1-001"
          },
          {
            ip: "52.187.207.27",
            port: 30303,
            id: "8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",
            location: "australiaeast-001",
            comment: "bootnode-azure-australiaeast-001"
          },
          {
            ip: "191.234.162.198",
            port: 30303,
            id: "103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",
            location: "brazilsouth-001",
            comment: "bootnode-azure-brazilsouth-001"
          },
          {
            ip: "52.231.165.108",
            port: 30303,
            id: "715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",
            location: "koreasouth-001",
            comment: "bootnode-azure-koreasouth-001"
          },
          {
            ip: "104.42.217.25",
            port: 30303,
            id: "5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",
            location: "westus-001",
            comment: "bootnode-azure-westus-001"
          }
        ],
        dnsNetworks: [
          "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
        ]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/ropsten.json
  var require_ropsten = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/ropsten.json"(exports, module) {
      module.exports = {
        name: "ropsten",
        chainId: 3,
        networkId: 3,
        defaultHardfork: "istanbul",
        consensus: {
          type: "pow",
          algorithm: "ethash",
          ethash: {}
        },
        comment: "PoW test network",
        url: "https://github.com/ethereum/ropsten",
        genesis: {
          hash: "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d",
          timestamp: null,
          gasLimit: 16777216,
          difficulty: 1048576,
          nonce: "0x0000000000000042",
          extraData: "0x3535353535353535353535353535353535353535353535353535353535353535",
          stateRoot: "0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0x30c7ddbc"
          },
          {
            name: "homestead",
            block: 0,
            forkHash: "0x30c7ddbc"
          },
          {
            name: "tangerineWhistle",
            block: 0,
            forkHash: "0x30c7ddbc"
          },
          {
            name: "spuriousDragon",
            block: 10,
            forkHash: "0x63760190"
          },
          {
            name: "byzantium",
            block: 17e5,
            forkHash: "0x3ea159c7"
          },
          {
            name: "constantinople",
            block: 423e4,
            forkHash: "0x97b544f3"
          },
          {
            name: "petersburg",
            block: 4939394,
            forkHash: "0xd6e2149b"
          },
          {
            name: "istanbul",
            block: 6485846,
            forkHash: "0x4bc66396"
          },
          {
            name: "muirGlacier",
            block: 7117117,
            forkHash: "0x6727ef90"
          },
          {
            name: "berlin",
            block: 9812189,
            forkHash: "0xa157d377"
          },
          {
            name: "london",
            block: 10499401,
            forkHash: "0x7119b6b3"
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "52.176.7.10",
            port: 30303,
            id: "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
            location: "",
            comment: "US-Azure geth"
          },
          {
            ip: "52.176.100.77",
            port: 30303,
            id: "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
            location: "",
            comment: "US-Azure parity"
          },
          {
            ip: "52.232.243.152",
            port: 30303,
            id: "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
            location: "",
            comment: "Parity"
          },
          {
            ip: "192.81.208.223",
            port: 30303,
            id: "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
            location: "",
            comment: "@gpip"
          }
        ],
        dnsNetworks: [
          "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"
        ]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/rinkeby.json
  var require_rinkeby = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/rinkeby.json"(exports, module) {
      module.exports = {
        name: "rinkeby",
        chainId: 4,
        networkId: 4,
        defaultHardfork: "istanbul",
        consensus: {
          type: "poa",
          algorithm: "clique",
          clique: {
            period: 15,
            epoch: 3e4
          }
        },
        comment: "PoA test network",
        url: "https://www.rinkeby.io",
        genesis: {
          hash: "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177",
          timestamp: "0x58ee40ba",
          gasLimit: 47e5,
          difficulty: 1,
          nonce: "0x0000000000000000",
          extraData: "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          stateRoot: "0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0x3b8e0691"
          },
          {
            name: "homestead",
            block: 1,
            forkHash: "0x60949295"
          },
          {
            name: "tangerineWhistle",
            block: 2,
            forkHash: "0x8bde40dd"
          },
          {
            name: "spuriousDragon",
            block: 3,
            forkHash: "0xcb3a64bb"
          },
          {
            name: "byzantium",
            block: 1035301,
            forkHash: "0x8d748b57"
          },
          {
            name: "constantinople",
            block: 3660663,
            forkHash: "0xe49cab14"
          },
          {
            name: "petersburg",
            block: 4321234,
            forkHash: "0xafec6b27"
          },
          {
            name: "istanbul",
            block: 5435345,
            forkHash: "0xcbdb8838"
          },
          {
            name: "berlin",
            block: 8290928,
            forkHash: "0x6910c8bd"
          },
          {
            name: "london",
            block: 8897988,
            forkHash: "0x8e29f2f3"
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "52.169.42.101",
            port: 30303,
            id: "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
            location: "",
            comment: "IE"
          },
          {
            ip: "52.3.158.184",
            port: 30303,
            id: "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
            location: "",
            comment: "INFURA"
          },
          {
            ip: "159.89.28.211",
            port: 30303,
            id: "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
            location: "",
            comment: "AKASHA"
          }
        ],
        dnsNetworks: [
          "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"
        ]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/kovan.json
  var require_kovan = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/kovan.json"(exports, module) {
      module.exports = {
        name: "kovan",
        chainId: 42,
        networkId: 42,
        defaultHardfork: "istanbul",
        consensus: {
          type: "poa",
          algorithm: "aura",
          aura: {}
        },
        comment: "Parity PoA test network",
        url: "https://kovan-testnet.github.io/website/",
        genesis: {
          hash: "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9",
          timestamp: null,
          gasLimit: 6e6,
          difficulty: 131072,
          nonce: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          extraData: "0x",
          stateRoot: "0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0x010ffe56"
          },
          {
            name: "homestead",
            block: 0,
            forkHash: "0x010ffe56"
          },
          {
            name: "tangerineWhistle",
            block: 0,
            forkHash: "0x010ffe56"
          },
          {
            name: "spuriousDragon",
            block: 0,
            forkHash: "0x010ffe56"
          },
          {
            name: "byzantium",
            block: 5067e3,
            forkHash: "0x7f83c620"
          },
          {
            name: "constantinople",
            block: 92e5,
            forkHash: "0xa94e3dc4"
          },
          {
            name: "petersburg",
            block: 10255201,
            forkHash: "0x186874aa"
          },
          {
            name: "istanbul",
            block: 14111141,
            forkHash: "0x7f6599a6"
          },
          {
            name: "berlin",
            block: 24770900,
            forkHash: "0x1a0f10d9"
          },
          {
            name: "london",
            block: 26741100,
            forkHash: "0x1ed20b71"
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "116.203.116.241",
            port: 30303,
            id: "16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45",
            location: "",
            comment: "1"
          },
          {
            ip: "3.217.96.11",
            port: 30303,
            id: "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
            location: "",
            comment: "2"
          },
          {
            ip: "108.61.170.124",
            port: 30303,
            id: "740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c",
            location: "",
            comment: "3"
          },
          {
            ip: "157.230.31.163",
            port: 30303,
            id: "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
            location: "",
            comment: "4"
          }
        ]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/goerli.json
  var require_goerli = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/goerli.json"(exports, module) {
      module.exports = {
        name: "goerli",
        chainId: 5,
        networkId: 5,
        defaultHardfork: "istanbul",
        consensus: {
          type: "poa",
          algorithm: "clique",
          clique: {
            period: 15,
            epoch: 3e4
          }
        },
        comment: "Cross-client PoA test network",
        url: "https://github.com/goerli/testnet",
        genesis: {
          hash: "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a",
          timestamp: "0x5c51a607",
          gasLimit: 10485760,
          difficulty: 1,
          nonce: "0x0000000000000000",
          extraData: "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          stateRoot: "0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "homestead",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "tangerineWhistle",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "spuriousDragon",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "byzantium",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "constantinople",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "petersburg",
            block: 0,
            forkHash: "0xa3f5ab08"
          },
          {
            name: "istanbul",
            block: 1561651,
            forkHash: "0xc25efa5c"
          },
          {
            name: "berlin",
            block: 4460644,
            forkHash: "0x757a1c47"
          },
          {
            name: "london",
            block: 5062605,
            forkHash: "0xb8c6299d"
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "51.141.78.53",
            port: 30303,
            id: "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
            location: "",
            comment: "Upstream bootnode 1"
          },
          {
            ip: "13.93.54.137",
            port: 30303,
            id: "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
            location: "",
            comment: "Upstream bootnode 2"
          },
          {
            ip: "94.237.54.114",
            port: 30313,
            id: "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
            location: "",
            comment: "Upstream bootnode 3"
          },
          {
            ip: "18.218.250.66",
            port: 30313,
            id: "b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",
            location: "",
            comment: "Upstream bootnode 4"
          },
          {
            ip: "3.11.147.67",
            port: 30303,
            id: "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
            location: "",
            comment: "Ethereum Foundation bootnode"
          },
          {
            ip: "51.15.116.226",
            port: 30303,
            id: "a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",
            location: "",
            comment: "Goerli Initiative bootnode"
          },
          {
            ip: "51.15.119.157",
            port: 30303,
            id: "807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",
            location: "",
            comment: "Goerli Initiative bootnode"
          },
          {
            ip: "51.15.119.157",
            port: 40303,
            id: "a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",
            location: "",
            comment: "Goerli Initiative bootnode"
          }
        ],
        dnsNetworks: [
          "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
        ]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/sepolia.json
  var require_sepolia = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/sepolia.json"(exports, module) {
      module.exports = {
        name: "sepolia",
        chainId: 11155111,
        networkId: 11155111,
        defaultHardfork: "istanbul",
        consensus: {
          type: "pow",
          algorithm: "ethash",
          ethash: {}
        },
        comment: "PoW test network to replace Ropsten",
        url: "https://github.com/ethereum/go-ethereum/pull/23730",
        genesis: {
          hash: "0x25a5cc106eea7138acab33231d7160d69cb777ee0c2c553fcddf5138993e6dd9",
          timestamp: "0x6159af19",
          gasLimit: 3e7,
          difficulty: 131072,
          nonce: "0x0000000000000000",
          extraData: "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521",
          stateRoot: "0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494"
        },
        hardforks: [
          {
            name: "chainstart",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "homestead",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "tangerineWhistle",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "spuriousDragon",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "byzantium",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "constantinople",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "petersburg",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "istanbul",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "muirGlacier",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "berlin",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "london",
            block: 0,
            forkHash: "0xfe3366e7"
          },
          {
            name: "merge",
            block: null,
            forkHash: null
          },
          {
            name: "shanghai",
            block: null,
            forkHash: null
          }
        ],
        bootstrapNodes: [
          {
            ip: "18.168.182.86",
            port: 30303,
            id: "9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066",
            location: "",
            comment: "geth"
          },
          {
            ip: "52.14.151.177",
            port: 30303,
            id: "ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7",
            location: "",
            comment: "besu"
          }
        ],
        dnsNetworks: []
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/chains/index.js
  var require_chains = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/chains/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __values = exports && exports.__values || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
          next: function() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.chains = exports._getInitializedChains = void 0;
      var mainnet_json_1 = __importDefault(require_mainnet());
      var ropsten_json_1 = __importDefault(require_ropsten());
      var rinkeby_json_1 = __importDefault(require_rinkeby());
      var kovan_json_1 = __importDefault(require_kovan());
      var goerli_json_1 = __importDefault(require_goerli());
      var sepolia_json_1 = __importDefault(require_sepolia());
      function _getInitializedChains(customChains) {
        var e_1, _a;
        var names = {
          "1": "mainnet",
          "3": "ropsten",
          "4": "rinkeby",
          "42": "kovan",
          "5": "goerli",
          "11155111": "sepolia"
        };
        var chains = {
          mainnet: mainnet_json_1.default,
          ropsten: ropsten_json_1.default,
          rinkeby: rinkeby_json_1.default,
          kovan: kovan_json_1.default,
          goerli: goerli_json_1.default,
          sepolia: sepolia_json_1.default
        };
        if (customChains) {
          try {
            for (var customChains_1 = __values(customChains), customChains_1_1 = customChains_1.next(); !customChains_1_1.done; customChains_1_1 = customChains_1.next()) {
              var chain = customChains_1_1.value;
              var name_1 = chain.name;
              names[chain.chainId.toString()] = name_1;
              chains[name_1] = chain;
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (customChains_1_1 && !customChains_1_1.done && (_a = customChains_1.return)) _a.call(customChains_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }
        chains["names"] = names;
        return chains;
      }
      exports._getInitializedChains = _getInitializedChains;
      exports.chains = _getInitializedChains();
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/chainstart.json
  var require_chainstart = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/chainstart.json"(exports, module) {
      module.exports = {
        name: "chainstart",
        comment: "Start of the Ethereum main chain",
        url: "",
        status: "",
        gasConfig: {
          minGasLimit: {
            v: 5e3,
            d: "Minimum the gas limit may ever be"
          },
          gasLimitBoundDivisor: {
            v: 1024,
            d: "The bound divisor of the gas limit, used in update calculations"
          },
          maxRefundQuotient: {
            v: 2,
            d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
          }
        },
        gasPrices: {
          base: {
            v: 2,
            d: "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
          },
          tierStep: {
            v: [
              0,
              2,
              3,
              5,
              8,
              10,
              20
            ],
            d: "Once per operation, for a selection of them"
          },
          exp: {
            v: 10,
            d: "Base fee of the EXP opcode"
          },
          expByte: {
            v: 10,
            d: "Times ceil(log256(exponent)) for the EXP instruction"
          },
          sha3: {
            v: 30,
            d: "Base fee of the SHA3 opcode"
          },
          sha3Word: {
            v: 6,
            d: "Once per word of the SHA3 operation's data"
          },
          sload: {
            v: 50,
            d: "Base fee of the SLOAD opcode"
          },
          sstoreSet: {
            v: 2e4,
            d: "Once per SSTORE operation if the zeroness changes from zero"
          },
          sstoreReset: {
            v: 5e3,
            d: "Once per SSTORE operation if the zeroness does not change from zero"
          },
          sstoreRefund: {
            v: 15e3,
            d: "Once per SSTORE operation if the zeroness changes to zero"
          },
          jumpdest: {
            v: 1,
            d: "Base fee of the JUMPDEST opcode"
          },
          log: {
            v: 375,
            d: "Base fee of the LOG opcode"
          },
          logData: {
            v: 8,
            d: "Per byte in a LOG* operation's data"
          },
          logTopic: {
            v: 375,
            d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
          },
          create: {
            v: 32e3,
            d: "Base fee of the CREATE opcode"
          },
          call: {
            v: 40,
            d: "Base fee of the CALL opcode"
          },
          callStipend: {
            v: 2300,
            d: "Free gas given at beginning of call"
          },
          callValueTransfer: {
            v: 9e3,
            d: "Paid for CALL when the value transfor is non-zero"
          },
          callNewAccount: {
            v: 25e3,
            d: "Paid for CALL when the destination address didn't exist prior"
          },
          selfdestructRefund: {
            v: 24e3,
            d: "Refunded following a selfdestruct operation"
          },
          memory: {
            v: 3,
            d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
          },
          quadCoeffDiv: {
            v: 512,
            d: "Divisor for the quadratic particle of the memory cost equation"
          },
          createData: {
            v: 200,
            d: ""
          },
          tx: {
            v: 21e3,
            d: "Per transaction. NOTE: Not payable on data of calls between transactions"
          },
          txCreation: {
            v: 32e3,
            d: "The cost of creating a contract via tx"
          },
          txDataZero: {
            v: 4,
            d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
          },
          txDataNonZero: {
            v: 68,
            d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
          },
          copy: {
            v: 3,
            d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
          },
          ecRecover: {
            v: 3e3,
            d: ""
          },
          sha256: {
            v: 60,
            d: ""
          },
          sha256Word: {
            v: 12,
            d: ""
          },
          ripemd160: {
            v: 600,
            d: ""
          },
          ripemd160Word: {
            v: 120,
            d: ""
          },
          identity: {
            v: 15,
            d: ""
          },
          identityWord: {
            v: 3,
            d: ""
          },
          stop: {
            v: 0,
            d: "Base fee of the STOP opcode"
          },
          add: {
            v: 3,
            d: "Base fee of the ADD opcode"
          },
          mul: {
            v: 5,
            d: "Base fee of the MUL opcode"
          },
          sub: {
            v: 3,
            d: "Base fee of the SUB opcode"
          },
          div: {
            v: 5,
            d: "Base fee of the DIV opcode"
          },
          sdiv: {
            v: 5,
            d: "Base fee of the SDIV opcode"
          },
          mod: {
            v: 5,
            d: "Base fee of the MOD opcode"
          },
          smod: {
            v: 5,
            d: "Base fee of the SMOD opcode"
          },
          addmod: {
            v: 8,
            d: "Base fee of the ADDMOD opcode"
          },
          mulmod: {
            v: 8,
            d: "Base fee of the MULMOD opcode"
          },
          signextend: {
            v: 5,
            d: "Base fee of the SIGNEXTEND opcode"
          },
          lt: {
            v: 3,
            d: "Base fee of the LT opcode"
          },
          gt: {
            v: 3,
            d: "Base fee of the GT opcode"
          },
          slt: {
            v: 3,
            d: "Base fee of the SLT opcode"
          },
          sgt: {
            v: 3,
            d: "Base fee of the SGT opcode"
          },
          eq: {
            v: 3,
            d: "Base fee of the EQ opcode"
          },
          iszero: {
            v: 3,
            d: "Base fee of the ISZERO opcode"
          },
          and: {
            v: 3,
            d: "Base fee of the AND opcode"
          },
          or: {
            v: 3,
            d: "Base fee of the OR opcode"
          },
          xor: {
            v: 3,
            d: "Base fee of the XOR opcode"
          },
          not: {
            v: 3,
            d: "Base fee of the NOT opcode"
          },
          byte: {
            v: 3,
            d: "Base fee of the BYTE opcode"
          },
          address: {
            v: 2,
            d: "Base fee of the ADDRESS opcode"
          },
          balance: {
            v: 20,
            d: "Base fee of the BALANCE opcode"
          },
          origin: {
            v: 2,
            d: "Base fee of the ORIGIN opcode"
          },
          caller: {
            v: 2,
            d: "Base fee of the CALLER opcode"
          },
          callvalue: {
            v: 2,
            d: "Base fee of the CALLVALUE opcode"
          },
          calldataload: {
            v: 3,
            d: "Base fee of the CALLDATALOAD opcode"
          },
          calldatasize: {
            v: 2,
            d: "Base fee of the CALLDATASIZE opcode"
          },
          calldatacopy: {
            v: 3,
            d: "Base fee of the CALLDATACOPY opcode"
          },
          codesize: {
            v: 2,
            d: "Base fee of the CODESIZE opcode"
          },
          codecopy: {
            v: 3,
            d: "Base fee of the CODECOPY opcode"
          },
          gasprice: {
            v: 2,
            d: "Base fee of the GASPRICE opcode"
          },
          extcodesize: {
            v: 20,
            d: "Base fee of the EXTCODESIZE opcode"
          },
          extcodecopy: {
            v: 20,
            d: "Base fee of the EXTCODECOPY opcode"
          },
          blockhash: {
            v: 20,
            d: "Base fee of the BLOCKHASH opcode"
          },
          coinbase: {
            v: 2,
            d: "Base fee of the COINBASE opcode"
          },
          timestamp: {
            v: 2,
            d: "Base fee of the TIMESTAMP opcode"
          },
          number: {
            v: 2,
            d: "Base fee of the NUMBER opcode"
          },
          difficulty: {
            v: 2,
            d: "Base fee of the DIFFICULTY opcode"
          },
          gaslimit: {
            v: 2,
            d: "Base fee of the GASLIMIT opcode"
          },
          pop: {
            v: 2,
            d: "Base fee of the POP opcode"
          },
          mload: {
            v: 3,
            d: "Base fee of the MLOAD opcode"
          },
          mstore: {
            v: 3,
            d: "Base fee of the MSTORE opcode"
          },
          mstore8: {
            v: 3,
            d: "Base fee of the MSTORE8 opcode"
          },
          sstore: {
            v: 0,
            d: "Base fee of the SSTORE opcode"
          },
          jump: {
            v: 8,
            d: "Base fee of the JUMP opcode"
          },
          jumpi: {
            v: 10,
            d: "Base fee of the JUMPI opcode"
          },
          pc: {
            v: 2,
            d: "Base fee of the PC opcode"
          },
          msize: {
            v: 2,
            d: "Base fee of the MSIZE opcode"
          },
          gas: {
            v: 2,
            d: "Base fee of the GAS opcode"
          },
          push: {
            v: 3,
            d: "Base fee of the PUSH opcode"
          },
          dup: {
            v: 3,
            d: "Base fee of the DUP opcode"
          },
          swap: {
            v: 3,
            d: "Base fee of the SWAP opcode"
          },
          callcode: {
            v: 40,
            d: "Base fee of the CALLCODE opcode"
          },
          return: {
            v: 0,
            d: "Base fee of the RETURN opcode"
          },
          invalid: {
            v: 0,
            d: "Base fee of the INVALID opcode"
          },
          selfdestruct: {
            v: 0,
            d: "Base fee of the SELFDESTRUCT opcode"
          }
        },
        vm: {
          stackLimit: {
            v: 1024,
            d: "Maximum size of VM stack allowed"
          },
          callCreateDepth: {
            v: 1024,
            d: "Maximum depth of call/create stack"
          },
          maxExtraDataSize: {
            v: 32,
            d: "Maximum size extra data may be after Genesis"
          }
        },
        pow: {
          minimumDifficulty: {
            v: 131072,
            d: "The minimum that the difficulty may ever be"
          },
          difficultyBoundDivisor: {
            v: 2048,
            d: "The bound divisor of the difficulty, used in the update calculations"
          },
          durationLimit: {
            v: 13,
            d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
          },
          epochDuration: {
            v: 3e4,
            d: "Duration between proof-of-work epochs"
          },
          timebombPeriod: {
            v: 1e5,
            d: "Exponential difficulty timebomb period"
          },
          minerReward: {
            v: "5000000000000000000",
            d: "the amount a miner get rewarded for mining a block"
          },
          difficultyBombDelay: {
            v: 0,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/homestead.json
  var require_homestead = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/homestead.json"(exports, module) {
      module.exports = {
        name: "homestead",
        comment: "Homestead hardfork with protocol and network changes",
        url: "https://eips.ethereum.org/EIPS/eip-606",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          delegatecall: {
            v: 40,
            d: "Base fee of the DELEGATECALL opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/dao.json
  var require_dao = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/dao.json"(exports, module) {
      module.exports = {
        name: "dao",
        comment: "DAO rescue hardfork",
        url: "https://eips.ethereum.org/EIPS/eip-779",
        status: "Final",
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/tangerineWhistle.json
  var require_tangerineWhistle = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/tangerineWhistle.json"(exports, module) {
      module.exports = {
        name: "tangerineWhistle",
        comment: "Hardfork with gas cost changes for IO-heavy operations",
        url: "https://eips.ethereum.org/EIPS/eip-608",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          sload: {
            v: 200,
            d: "Once per SLOAD operation"
          },
          call: {
            v: 700,
            d: "Once per CALL operation & message call transaction"
          },
          extcodesize: {
            v: 700,
            d: "Base fee of the EXTCODESIZE opcode"
          },
          extcodecopy: {
            v: 700,
            d: "Base fee of the EXTCODECOPY opcode"
          },
          balance: {
            v: 400,
            d: "Base fee of the BALANCE opcode"
          },
          delegatecall: {
            v: 700,
            d: "Base fee of the DELEGATECALL opcode"
          },
          callcode: {
            v: 700,
            d: "Base fee of the CALLCODE opcode"
          },
          selfdestruct: {
            v: 5e3,
            d: "Base fee of the SELFDESTRUCT opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/spuriousDragon.json
  var require_spuriousDragon = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/spuriousDragon.json"(exports, module) {
      module.exports = {
        name: "spuriousDragon",
        comment: "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
        url: "https://eips.ethereum.org/EIPS/eip-607",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          expByte: {
            v: 50,
            d: "Times ceil(log256(exponent)) for the EXP instruction"
          }
        },
        vm: {
          maxCodeSize: {
            v: 24576,
            d: "Maximum length of contract code"
          }
        },
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/byzantium.json
  var require_byzantium = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/byzantium.json"(exports, module) {
      module.exports = {
        name: "byzantium",
        comment: "Hardfork with new precompiles, instructions and other protocol changes",
        url: "https://eips.ethereum.org/EIPS/eip-609",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          modexpGquaddivisor: {
            v: 20,
            d: "Gquaddivisor from modexp precompile for gas calculation"
          },
          ecAdd: {
            v: 500,
            d: "Gas costs for curve addition precompile"
          },
          ecMul: {
            v: 4e4,
            d: "Gas costs for curve multiplication precompile"
          },
          ecPairing: {
            v: 1e5,
            d: "Base gas costs for curve pairing precompile"
          },
          ecPairingWord: {
            v: 8e4,
            d: "Gas costs regarding curve pairing precompile input length"
          },
          revert: {
            v: 0,
            d: "Base fee of the REVERT opcode"
          },
          staticcall: {
            v: 700,
            d: "Base fee of the STATICCALL opcode"
          },
          returndatasize: {
            v: 2,
            d: "Base fee of the RETURNDATASIZE opcode"
          },
          returndatacopy: {
            v: 3,
            d: "Base fee of the RETURNDATACOPY opcode"
          }
        },
        vm: {},
        pow: {
          minerReward: {
            v: "3000000000000000000",
            d: "the amount a miner get rewarded for mining a block"
          },
          difficultyBombDelay: {
            v: 3e6,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/constantinople.json
  var require_constantinople = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/constantinople.json"(exports, module) {
      module.exports = {
        name: "constantinople",
        comment: "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
        url: "https://eips.ethereum.org/EIPS/eip-1013",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          netSstoreNoopGas: {
            v: 200,
            d: "Once per SSTORE operation if the value doesn't change"
          },
          netSstoreInitGas: {
            v: 2e4,
            d: "Once per SSTORE operation from clean zero"
          },
          netSstoreCleanGas: {
            v: 5e3,
            d: "Once per SSTORE operation from clean non-zero"
          },
          netSstoreDirtyGas: {
            v: 200,
            d: "Once per SSTORE operation from dirty"
          },
          netSstoreClearRefund: {
            v: 15e3,
            d: "Once per SSTORE operation for clearing an originally existing storage slot"
          },
          netSstoreResetRefund: {
            v: 4800,
            d: "Once per SSTORE operation for resetting to the original non-zero value"
          },
          netSstoreResetClearRefund: {
            v: 19800,
            d: "Once per SSTORE operation for resetting to the original zero value"
          },
          shl: {
            v: 3,
            d: "Base fee of the SHL opcode"
          },
          shr: {
            v: 3,
            d: "Base fee of the SHR opcode"
          },
          sar: {
            v: 3,
            d: "Base fee of the SAR opcode"
          },
          extcodehash: {
            v: 400,
            d: "Base fee of the EXTCODEHASH opcode"
          },
          create2: {
            v: 32e3,
            d: "Base fee of the CREATE2 opcode"
          }
        },
        vm: {},
        pow: {
          minerReward: {
            v: "2000000000000000000",
            d: "The amount a miner gets rewarded for mining a block"
          },
          difficultyBombDelay: {
            v: 5e6,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/petersburg.json
  var require_petersburg = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/petersburg.json"(exports, module) {
      module.exports = {
        name: "petersburg",
        comment: "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
        url: "https://eips.ethereum.org/EIPS/eip-1716",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          netSstoreNoopGas: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreInitGas: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreCleanGas: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreDirtyGas: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreClearRefund: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreResetRefund: {
            v: null,
            d: "Removed along EIP-1283"
          },
          netSstoreResetClearRefund: {
            v: null,
            d: "Removed along EIP-1283"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/istanbul.json
  var require_istanbul = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/istanbul.json"(exports, module) {
      module.exports = {
        name: "istanbul",
        comment: "HF targeted for December 2019 following the Constantinople/Petersburg HF",
        url: "https://eips.ethereum.org/EIPS/eip-1679",
        status: "Final",
        gasConfig: {},
        gasPrices: {
          blake2Round: {
            v: 1,
            d: "Gas cost per round for the Blake2 F precompile"
          },
          ecAdd: {
            v: 150,
            d: "Gas costs for curve addition precompile"
          },
          ecMul: {
            v: 6e3,
            d: "Gas costs for curve multiplication precompile"
          },
          ecPairing: {
            v: 45e3,
            d: "Base gas costs for curve pairing precompile"
          },
          ecPairingWord: {
            v: 34e3,
            d: "Gas costs regarding curve pairing precompile input length"
          },
          txDataNonZero: {
            v: 16,
            d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
          },
          sstoreSentryGasEIP2200: {
            v: 2300,
            d: "Minimum gas required to be present for an SSTORE call, not consumed"
          },
          sstoreNoopGasEIP2200: {
            v: 800,
            d: "Once per SSTORE operation if the value doesn't change"
          },
          sstoreDirtyGasEIP2200: {
            v: 800,
            d: "Once per SSTORE operation if a dirty value is changed"
          },
          sstoreInitGasEIP2200: {
            v: 2e4,
            d: "Once per SSTORE operation from clean zero to non-zero"
          },
          sstoreInitRefundEIP2200: {
            v: 19200,
            d: "Once per SSTORE operation for resetting to the original zero value"
          },
          sstoreCleanGasEIP2200: {
            v: 5e3,
            d: "Once per SSTORE operation from clean non-zero to something else"
          },
          sstoreCleanRefundEIP2200: {
            v: 4200,
            d: "Once per SSTORE operation for resetting to the original non-zero value"
          },
          sstoreClearRefundEIP2200: {
            v: 15e3,
            d: "Once per SSTORE operation for clearing an originally existing storage slot"
          },
          balance: {
            v: 700,
            d: "Base fee of the BALANCE opcode"
          },
          extcodehash: {
            v: 700,
            d: "Base fee of the EXTCODEHASH opcode"
          },
          chainid: {
            v: 2,
            d: "Base fee of the CHAINID opcode"
          },
          selfbalance: {
            v: 5,
            d: "Base fee of the SELFBALANCE opcode"
          },
          sload: {
            v: 800,
            d: "Base fee of the SLOAD opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/muirGlacier.json
  var require_muirGlacier = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/muirGlacier.json"(exports, module) {
      module.exports = {
        name: "muirGlacier",
        comment: "HF to delay the difficulty bomb",
        url: "https://eips.ethereum.org/EIPS/eip-2384",
        status: "Final",
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {
          difficultyBombDelay: {
            v: 9e6,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/berlin.json
  var require_berlin = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/berlin.json"(exports, module) {
      module.exports = {
        name: "berlin",
        comment: "HF targeted for July 2020 following the Muir Glacier HF",
        url: "https://eips.ethereum.org/EIPS/eip-2070",
        status: "Final",
        eips: [2565, 2929, 2718, 2930]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/london.json
  var require_london = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/london.json"(exports, module) {
      module.exports = {
        name: "london",
        comment: "HF targeted for July 2021 following the Berlin fork",
        url: "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
        status: "Final",
        eips: [1559, 3198, 3529, 3541]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/shanghai.json
  var require_shanghai = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/shanghai.json"(exports, module) {
      module.exports = {
        name: "shanghai",
        comment: "Next feature hardfork after the merge hardfork",
        url: "https://github.com/ethereum/pm/issues/356",
        status: "Pre-Draft",
        eips: []
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/arrowGlacier.json
  var require_arrowGlacier = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/arrowGlacier.json"(exports, module) {
      module.exports = {
        name: "arrowGlacier",
        comment: "HF to delay the difficulty bomb",
        url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
        status: "Final",
        eips: [4345],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/grayGlacier.json
  var require_grayGlacier = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/grayGlacier.json"(exports, module) {
      module.exports = {
        name: "grayGlacier",
        comment: "Delaying the difficulty bomb to Mid September 2022",
        url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
        status: "Draft",
        eips: [5133],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/mergeForkIdTransition.json
  var require_mergeForkIdTransition = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/mergeForkIdTransition.json"(exports, module) {
      module.exports = {
        name: "mergeForkIdTransition",
        comment: "Pre-merge hardfork to fork off non-upgraded clients",
        url: "https://eips.ethereum.org/EIPS/eip-3675",
        status: "Draft",
        eips: []
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/merge.json
  var require_merge = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/merge.json"(exports, module) {
      module.exports = {
        name: "merge",
        comment: "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
        url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
        status: "Draft",
        consensus: {
          type: "pos",
          algorithm: "casper",
          casper: {}
        },
        eips: [3675, 4399]
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/hardforks/index.js
  var require_hardforks = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/hardforks/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hardforks = void 0;
      exports.hardforks = [
        ["chainstart", require_chainstart()],
        ["homestead", require_homestead()],
        ["dao", require_dao()],
        ["tangerineWhistle", require_tangerineWhistle()],
        ["spuriousDragon", require_spuriousDragon()],
        ["byzantium", require_byzantium()],
        ["constantinople", require_constantinople()],
        ["petersburg", require_petersburg()],
        ["istanbul", require_istanbul()],
        ["muirGlacier", require_muirGlacier()],
        ["berlin", require_berlin()],
        ["london", require_london()],
        ["shanghai", require_shanghai()],
        ["arrowGlacier", require_arrowGlacier()],
        ["grayGlacier", require_grayGlacier()],
        ["mergeForkIdTransition", require_mergeForkIdTransition()],
        ["merge", require_merge()]
      ];
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/1153.json
  var require__6 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/1153.json"(exports, module) {
      module.exports = {
        name: "EIP-1153",
        number: 1153,
        comment: "Transient Storage",
        url: "https://eips.ethereum.org/EIPS/eip-1153",
        status: "Review",
        minimumHardfork: "chainstart",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {
          tstore: {
            v: 100,
            d: "Base fee of the TSTORE opcode"
          },
          tload: {
            v: 100,
            d: "Base fee of the TLOAD opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/1559.json
  var require__7 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/1559.json"(exports, module) {
      module.exports = {
        name: "EIP-1559",
        number: 1559,
        comment: "Fee market change for ETH 1.0 chain",
        url: "https://eips.ethereum.org/EIPS/eip-1559",
        status: "Final",
        minimumHardfork: "berlin",
        requiredEIPs: [2930],
        gasConfig: {
          baseFeeMaxChangeDenominator: {
            v: 8,
            d: "Maximum base fee change denominator"
          },
          elasticityMultiplier: {
            v: 2,
            d: "Maximum block gas target elasticity"
          },
          initialBaseFee: {
            v: 1e9,
            d: "Initial base fee on first EIP1559 block"
          }
        },
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2315.json
  var require__8 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2315.json"(exports, module) {
      module.exports = {
        name: "EIP-2315",
        number: 2315,
        comment: "Simple subroutines for the EVM",
        url: "https://eips.ethereum.org/EIPS/eip-2315",
        status: "Draft",
        minimumHardfork: "istanbul",
        gasConfig: {},
        gasPrices: {
          beginsub: {
            v: 2,
            d: "Base fee of the BEGINSUB opcode"
          },
          returnsub: {
            v: 5,
            d: "Base fee of the RETURNSUB opcode"
          },
          jumpsub: {
            v: 10,
            d: "Base fee of the JUMPSUB opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2537.json
  var require__9 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2537.json"(exports, module) {
      module.exports = {
        name: "EIP-2537",
        number: 2537,
        comment: "BLS12-381 precompiles",
        url: "https://eips.ethereum.org/EIPS/eip-2537",
        status: "Draft",
        minimumHardfork: "chainstart",
        gasConfig: {},
        gasPrices: {
          Bls12381G1AddGas: {
            v: 600,
            d: "Gas cost of a single BLS12-381 G1 addition precompile-call"
          },
          Bls12381G1MulGas: {
            v: 12e3,
            d: "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
          },
          Bls12381G2AddGas: {
            v: 4500,
            d: "Gas cost of a single BLS12-381 G2 addition precompile-call"
          },
          Bls12381G2MulGas: {
            v: 55e3,
            d: "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
          },
          Bls12381PairingBaseGas: {
            v: 115e3,
            d: "Base gas cost of BLS12-381 pairing check"
          },
          Bls12381PairingPerPairGas: {
            v: 23e3,
            d: "Per-pair gas cost of BLS12-381 pairing check"
          },
          Bls12381MapG1Gas: {
            v: 5500,
            d: "Gas cost of BLS12-381 map field element to G1"
          },
          Bls12381MapG2Gas: {
            v: 11e4,
            d: "Gas cost of BLS12-381 map field element to G2"
          },
          Bls12381MultiExpGasDiscount: {
            v: [[1, 1200], [2, 888], [3, 764], [4, 641], [5, 594], [6, 547], [7, 500], [8, 453], [9, 438], [10, 423], [11, 408], [12, 394], [13, 379], [14, 364], [15, 349], [16, 334], [17, 330], [18, 326], [19, 322], [20, 318], [21, 314], [22, 310], [23, 306], [24, 302], [25, 298], [26, 294], [27, 289], [28, 285], [29, 281], [30, 277], [31, 273], [32, 269], [33, 268], [34, 266], [35, 265], [36, 263], [37, 262], [38, 260], [39, 259], [40, 257], [41, 256], [42, 254], [43, 253], [44, 251], [45, 250], [46, 248], [47, 247], [48, 245], [49, 244], [50, 242], [51, 241], [52, 239], [53, 238], [54, 236], [55, 235], [56, 233], [57, 232], [58, 231], [59, 229], [60, 228], [61, 226], [62, 225], [63, 223], [64, 222], [65, 221], [66, 220], [67, 219], [68, 219], [69, 218], [70, 217], [71, 216], [72, 216], [73, 215], [74, 214], [75, 213], [76, 213], [77, 212], [78, 211], [79, 211], [80, 210], [81, 209], [82, 208], [83, 208], [84, 207], [85, 206], [86, 205], [87, 205], [88, 204], [89, 203], [90, 202], [91, 202], [92, 201], [93, 200], [94, 199], [95, 199], [96, 198], [97, 197], [98, 196], [99, 196], [100, 195], [101, 194], [102, 193], [103, 193], [104, 192], [105, 191], [106, 191], [107, 190], [108, 189], [109, 188], [110, 188], [111, 187], [112, 186], [113, 185], [114, 185], [115, 184], [116, 183], [117, 182], [118, 182], [119, 181], [120, 180], [121, 179], [122, 179], [123, 178], [124, 177], [125, 176], [126, 176], [127, 175], [128, 174]],
            d: "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2565.json
  var require__10 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2565.json"(exports, module) {
      module.exports = {
        name: "EIP-2565",
        number: 2565,
        comment: "ModExp gas cost",
        url: "https://eips.ethereum.org/EIPS/eip-2565",
        status: "Final",
        minimumHardfork: "byzantium",
        gasConfig: {},
        gasPrices: {
          modexpGquaddivisor: {
            v: 3,
            d: "Gquaddivisor from modexp precompile for gas calculation"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2718.json
  var require__11 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2718.json"(exports, module) {
      module.exports = {
        name: "EIP-2718",
        comment: "Typed Transaction Envelope",
        url: "https://eips.ethereum.org/EIPS/eip-2718",
        status: "Final",
        minimumHardfork: "chainstart",
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2929.json
  var require__12 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2929.json"(exports, module) {
      module.exports = {
        name: "EIP-2929",
        comment: "Gas cost increases for state access opcodes",
        url: "https://eips.ethereum.org/EIPS/eip-2929",
        status: "Final",
        minimumHardfork: "chainstart",
        gasConfig: {},
        gasPrices: {
          coldsload: {
            v: 2100,
            d: "Gas cost of the first read of storage from a given location (per transaction)"
          },
          coldaccountaccess: {
            v: 2600,
            d: "Gas cost of the first read of a given address (per transaction)"
          },
          warmstorageread: {
            v: 100,
            d: "Gas cost of reading storage locations which have already loaded 'cold'"
          },
          sstoreCleanGasEIP2200: {
            v: 2900,
            d: "Once per SSTORE operation from clean non-zero to something else"
          },
          sstoreNoopGasEIP2200: {
            v: 100,
            d: "Once per SSTORE operation if the value doesn't change"
          },
          sstoreDirtyGasEIP2200: {
            v: 100,
            d: "Once per SSTORE operation if a dirty value is changed"
          },
          sstoreInitRefundEIP2200: {
            v: 19900,
            d: "Once per SSTORE operation for resetting to the original zero value"
          },
          sstoreCleanRefundEIP2200: {
            v: 4900,
            d: "Once per SSTORE operation for resetting to the original non-zero value"
          },
          call: {
            v: 0,
            d: "Base fee of the CALL opcode"
          },
          callcode: {
            v: 0,
            d: "Base fee of the CALLCODE opcode"
          },
          delegatecall: {
            v: 0,
            d: "Base fee of the DELEGATECALL opcode"
          },
          staticcall: {
            v: 0,
            d: "Base fee of the STATICCALL opcode"
          },
          balance: {
            v: 0,
            d: "Base fee of the BALANCE opcode"
          },
          extcodesize: {
            v: 0,
            d: "Base fee of the EXTCODESIZE opcode"
          },
          extcodecopy: {
            v: 0,
            d: "Base fee of the EXTCODECOPY opcode"
          },
          extcodehash: {
            v: 0,
            d: "Base fee of the EXTCODEHASH opcode"
          },
          sload: {
            v: 0,
            d: "Base fee of the SLOAD opcode"
          },
          sstore: {
            v: 0,
            d: "Base fee of the SSTORE opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/2930.json
  var require__13 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/2930.json"(exports, module) {
      module.exports = {
        name: "EIP-2930",
        comment: "Optional access lists",
        url: "https://eips.ethereum.org/EIPS/eip-2930",
        status: "Final",
        minimumHardfork: "istanbul",
        requiredEIPs: [2718, 2929],
        gasConfig: {},
        gasPrices: {
          accessListStorageKeyCost: {
            v: 1900,
            d: "Gas cost per storage key in an Access List transaction"
          },
          accessListAddressCost: {
            v: 2400,
            d: "Gas cost per storage key in an Access List transaction"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3198.json
  var require__14 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3198.json"(exports, module) {
      module.exports = {
        name: "EIP-3198",
        number: 3198,
        comment: "BASEFEE opcode",
        url: "https://eips.ethereum.org/EIPS/eip-3198",
        status: "Final",
        minimumHardfork: "london",
        gasConfig: {},
        gasPrices: {
          basefee: {
            v: 2,
            d: "Gas cost of the BASEFEE opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3529.json
  var require__15 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3529.json"(exports, module) {
      module.exports = {
        name: "EIP-3529",
        comment: "Reduction in refunds",
        url: "https://eips.ethereum.org/EIPS/eip-3529",
        status: "Final",
        minimumHardfork: "berlin",
        requiredEIPs: [2929],
        gasConfig: {
          maxRefundQuotient: {
            v: 5,
            d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
          }
        },
        gasPrices: {
          selfdestructRefund: {
            v: 0,
            d: "Refunded following a selfdestruct operation"
          },
          sstoreClearRefundEIP2200: {
            v: 4800,
            d: "Once per SSTORE operation for clearing an originally existing storage slot"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3540.json
  var require__16 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3540.json"(exports, module) {
      module.exports = {
        name: "EIP-3540",
        number: 3540,
        comment: "EVM Object Format (EOF) v1",
        url: "https://eips.ethereum.org/EIPS/eip-3540",
        status: "Review",
        minimumHardfork: "london",
        requiredEIPs: [
          3541
        ],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3541.json
  var require__17 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3541.json"(exports, module) {
      module.exports = {
        name: "EIP-3541",
        comment: "Reject new contracts starting with the 0xEF byte",
        url: "https://eips.ethereum.org/EIPS/eip-3541",
        status: "Final",
        minimumHardfork: "berlin",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3554.json
  var require__18 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3554.json"(exports, module) {
      module.exports = {
        name: "EIP-3554",
        comment: "Reduction in refunds",
        url: "Difficulty Bomb Delay to December 1st 2021",
        status: "Final",
        minimumHardfork: "muirGlacier",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {
          difficultyBombDelay: {
            v: 95e5,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3607.json
  var require__19 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3607.json"(exports, module) {
      module.exports = {
        name: "EIP-3607",
        number: 3607,
        comment: "Reject transactions from senders with deployed code",
        url: "https://eips.ethereum.org/EIPS/eip-3607",
        status: "Final",
        minimumHardfork: "chainstart",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3651.json
  var require__20 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3651.json"(exports, module) {
      module.exports = {
        name: "EIP-3651",
        number: 3198,
        comment: "Warm COINBASE",
        url: "https://eips.ethereum.org/EIPS/eip-3651",
        status: "Review",
        minimumHardfork: "london",
        requiredEIPs: [2929],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3670.json
  var require__21 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3670.json"(exports, module) {
      module.exports = {
        name: "EIP-3670",
        number: 3670,
        comment: "EOF - Code Validation",
        url: "https://eips.ethereum.org/EIPS/eip-3670",
        status: "Review",
        minimumHardfork: "london",
        requiredEIPs: [
          3540
        ],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3675.json
  var require__22 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3675.json"(exports, module) {
      module.exports = {
        name: "EIP-3675",
        number: 3675,
        comment: "Upgrade consensus to Proof-of-Stake",
        url: "https://eips.ethereum.org/EIPS/eip-3675",
        status: "Review",
        minimumHardfork: "london",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3855.json
  var require__23 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3855.json"(exports, module) {
      module.exports = {
        name: "EIP-3855",
        number: 3855,
        comment: "PUSH0 instruction",
        url: "https://eips.ethereum.org/EIPS/eip-3855",
        status: "Review",
        minimumHardfork: "chainstart",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {
          push0: {
            v: 2,
            d: "Base fee of the PUSH0 opcode"
          }
        },
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/3860.json
  var require__24 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/3860.json"(exports, module) {
      module.exports = {
        name: "EIP-3860",
        number: 3860,
        comment: "Limit and meter initcode",
        url: "https://eips.ethereum.org/EIPS/eip-3860",
        status: "Review",
        minimumHardfork: "spuriousDragon",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {
          initCodeWordCost: {
            v: 2,
            d: "Gas to pay for each word (32 bytes) of initcode when creating a contract"
          }
        },
        vm: {
          maxInitCodeSize: {
            v: 49152,
            d: "Maximum length of initialization code when creating a contract"
          }
        },
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/4345.json
  var require__25 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/4345.json"(exports, module) {
      module.exports = {
        name: "EIP-4345",
        number: 4345,
        comment: "Difficulty Bomb Delay to June 2022",
        url: "https://eips.ethereum.org/EIPS/eip-4345",
        status: "Final",
        minimumHardfork: "london",
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {
          difficultyBombDelay: {
            v: 107e5,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/4399.json
  var require__26 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/4399.json"(exports, module) {
      module.exports = {
        name: "EIP-4399",
        number: 4399,
        comment: "Supplant DIFFICULTY opcode with PREVRANDAO",
        url: "https://eips.ethereum.org/EIPS/eip-4399",
        status: "Review",
        minimumHardfork: "london",
        requiredEIPs: [],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {}
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/5133.json
  var require__27 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/5133.json"(exports, module) {
      module.exports = {
        name: "EIP-5133",
        number: 5133,
        comment: "Delaying Difficulty Bomb to mid-September 2022",
        url: "https://eips.ethereum.org/EIPS/eip-5133",
        status: "Draft",
        minimumHardfork: "grayGlacier",
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {
          difficultyBombDelay: {
            v: 114e5,
            d: "the amount of blocks to delay the difficulty bomb with"
          }
        }
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/eips/index.js
  var require_eips = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/eips/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EIPs = void 0;
      exports.EIPs = {
        1153: require__6(),
        1559: require__7(),
        2315: require__8(),
        2537: require__9(),
        2565: require__10(),
        2718: require__11(),
        2929: require__12(),
        2930: require__13(),
        3198: require__14(),
        3529: require__15(),
        3540: require__16(),
        3541: require__17(),
        3554: require__18(),
        3607: require__19(),
        3651: require__20(),
        3670: require__21(),
        3675: require__22(),
        3855: require__23(),
        3860: require__24(),
        4345: require__25(),
        4399: require__26(),
        5133: require__27()
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/mainnet.json
  var require_mainnet2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/mainnet.json"(exports, module) {
      module.exports = {
        "0x000d836201318ec6899a67540690382780743280": "0xad78ebc5ac6200000",
        "0x001762430ea9c3a26e5749afdb70da5f78ddbb8c": "0xad78ebc5ac6200000",
        "0x001d14804b399c6ef80e64576f657660804fec0b": "0xe3aeb5737240a00000",
        "0x0032403587947b9f15622a68d104d54d33dbd1cd": "0x433874f632cc60000",
        "0x00497e92cdc0e0b963d752b2296acb87da828b24": "0xa8f649fe7c6180000",
        "0x004bfbe1546bc6c65b5c7eaa55304b38bbfec6d3": "0x6c6b935b8bbd400000",
        "0x005a9c03f69d17d66cbb8ad721008a9ebbb836fb": "0x6c6b935b8bbd400000",
        "0x005d0ee8155ec0a6ff6808552ca5f16bb5be323a": "0xaadec983fcff40000",
        "0x007622d84a234bb8b078230fcf84b67ae9a8acae": "0x25e1cc519952f80000",
        "0x007b9fc31905b4994b04c9e2cfdc5e2770503f42": "0x6c5db2a4d815dc0000",
        "0x007f4a23ca00cd043d25c2888c1aa5688f81a344": "0x29f0a95bfbf7290000",
        "0x008639dabbe3aeac887b5dc0e43e13bcd287d76c": "0x10d0e3c87d6e2c0000",
        "0x0089508679abf8c71bf6781687120e3e6a84584d": "0x6194049f30f7200000",
        "0x008fc7cbadffbd0d7fe44f8dfd60a79d721a1c9c": "0x3635c9adc5dea00000",
        "0x009560a3de627868f91fa8bfe1c1b7afaf08186b": "0x1c67f5f7baa0b00000",
        "0x00969747f7a5b30645fe00e44901435ace24cc37": "0x5c283d410394100000",
        "0x009a6d7db326679b77c90391a7476d238f3ba33e": "0xada55474b81340000",
        "0x009eef0a0886056e3f69211853b9b7457f3782e4": "0xa2a878069b28e00000",
        "0x009fdbf44e1f4a6362b769c39a475f95a96c2bc7": "0x1e931283ccc8500000",
        "0x00a5797f52c9d58f189f36b1d45d1bf6041f2f6b": "0x127d1b3461acd1a0000",
        "0x00aa5381b2138ebeffc191d5d8c391753b7098d2": "0x35abb09ffedeb68000",
        "0x00aada25ea2286709abb422d41923fd380cd04c7": "0x233df3299f61720000",
        "0x00acbfb2f25a5485c739ef70a44eeeeb7c65a66f": "0x56bc75e2d63100000",
        "0x00acc6f082a442828764d11f58d6894ae408f073": "0xcb49b44ba602d800000",
        "0x00b277b099a8e866ca0ec65bcb87284fd142a582": "0x6acb3df27e1f880000",
        "0x00bdd4013aa31c04616c2bc9785f2788f915679b": "0xb9f65d00f63c0000",
        "0x00c27d63fde24b92ee8a1e7ed5d26d8dc5c83b03": "0x6c6b935b8bbd400000",
        "0x00c40fe2095423509b9fd9b754323158af2310f3": "0x0",
        "0x00d75ed60c774f8b3a5a5173fb1833ad7105a2d9": "0x6cb7e74867d5e60000",
        "0x00d78d89b35f472716eceafebf600527d3a1f969": "0x5e0549c9632e1d80000",
        "0x00dae27b350bae20c5652124af5d8b5cba001ec1": "0x22b1c8c1227a00000",
        "0x00dc01cbf44978a42e8de8e436edf94205cfb6ec": "0x4f0febbcda8cb40000",
        "0x00e681bc2d10db62de85848324492250348e90bf": "0x43c33c1937564800000",
        "0x00f463e137dcf625fbf3bca39eca98d2b968cf7f": "0x14061b9d77a5e980000",
        "0x010007394b8b7565a1658af88ce463499135d6b7": "0x56bc75e2d63100000",
        "0x010df1df4bed23760d2d1c03781586ddf7918e54": "0x340aad21b3b700000",
        "0x010f4a98dfa1d9799bf5c796fb550efbe7ecd877": "0x1b2f292236292c70000",
        "0x01155057002f6b0d18acb9388d3bc8129f8f7a20": "0x48a43c54602f700000",
        "0x01226e0ad8d62277b162621c62c928e96e0b9a8c": "0x6c6b935b8bbd400000",
        "0x0126e12ebc17035f35c0e9d11dd148393c405d7a": "0x6c660645aa47180000",
        "0x012f396a2b5eb83559bac515e5210df2c8c362ba": "0xad78ebc5ac6200000",
        "0x0134ff38155fabae94fd35c4ffe1d79de7ef9c59": "0x35659ef93f0fc40000",
        "0x0136a5af6c3299c6b5f005fdaddb148c070b299b": "0x11aa9ac15f1280000",
        "0x01488ad3da603c4cdd6cb0b7a1e30d2a30c8fc38": "0xad78ebc5ac6200000",
        "0x014974a1f46bf204944a853111e52f1602617def": "0x6c6b935b8bbd400000",
        "0x014b7f67b14f5d983d87014f570c8b993b9872b5": "0xad78ebc5ac6200000",
        "0x0151fa5d17a2dce2d7f1eb39ef7fe2ad213d5d89": "0xd8d726b7177a800000",
        "0x01577afd4e50890247c9b10d44af73229aec884f": "0x24dce54d34a1a00000",
        "0x015f097d9acddcddafaf2a107eb93a40fc94b04c": "0x43c33c1937564800000",
        "0x0169c1c210eae845e56840412e1f65993ea90fb4": "0x6c6b935b8bbd400000",
        "0x016b60bb6d67928c29fd0313c666da8f1698d9c5": "0x6c6b935b8bbd400000",
        "0x016c85e1613b900fa357b8283b120e65aefcdd08": "0x2b5d9784a97cd50000",
        "0x018492488ba1a292342247b31855a55905fef269": "0x796e3ea3f8ab00000",
        "0x018f20a27b27ec441af723fd9099f2cbb79d6263": "0x75792a8abdef7c0000",
        "0x0191eb547e7bf6976b9b1b577546761de65622e2": "0x6c6b4c4da6ddbe0000",
        "0x019d709579ff4bc09fdcdde431dc1447d2c260bc": "0x1158e460913d00000",
        "0x01a25a5f5af0169b30864c3be4d7563ccd44f09e": "0x4d853c8f8908980000",
        "0x01a7d9fa7d0eb1185c67e54da83c2e75db69e39f": "0x19d4addd0d8bc960000",
        "0x01a818135a414210c37c62b625aca1a54611ac36": "0xe18398e7601900000",
        "0x01b1cae91a3b9559afb33cdc6d689442fdbfe037": "0xad78ebc5ac6200000",
        "0x01b5b5bc5a117fa08b34ed1db9440608597ac548": "0xad78ebc5ac6200000",
        "0x01bbc14f67af0639aab1441e6a08d4ce7162090f": "0x46fcf68ff8be060000",
        "0x01d03815c61f416b71a2610a2daba59ff6a6de5b": "0x205dfe50b81c82e0000",
        "0x01d599ee0d5f8c38ab2d392e2c65b74c3ce31820": "0x1ba5abf9e779380000",
        "0x01e40521122530d9ac91113c06a0190b6d63850b": "0x487a9a304539440000",
        "0x01e6415d587b065490f1ed7f21d6e0f386ee6747": "0x6c6b935b8bbd400000",
        "0x01e864d354741b423e6f42851724468c74f5aa9c": "0x43c33c1937564800000",
        "0x01ed5fba8d2eab673aec042d30e4e8a611d8c55a": "0x6c6b935b8bbd400000",
        "0x01fb8ec12425a04f813e46c54c05748ca6b29aa9": "0xe15730385467c0000",
        "0x01ff1eb1dead50a7f2f9638fdee6eccf3a7b2ac8": "0x2086ac351052600000",
        "0x020362c3ade878ca90d6b2d889a4cc5510eed5f3": "0x3888e8b311adb38000",
        "0x0203ae01d4c41cae1865e04b1f5b53cdfaecae31": "0x3689cdceb28cd70000",
        "0x02089361a3fe7451fb1f87f01a2d866653dc0b07": "0x22ac74832b5040000",
        "0x021f69043de88c4917ca10f1842897eec0589c7c": "0x6b44cfb81487f40000",
        "0x02290fb5f9a517f82845acdeca0fc846039be233": "0x6c6b935b8bbd400000",
        "0x0239b4f21f8e05cd01512b2be7a0e18a6d974607": "0x3635c9adc5dea00000",
        "0x02477212ffdd75e5155651b76506b1646671a1eb": "0x5f68e8131ecf800000",
        "0x024a098ae702bef5406c9c22b78bd4eb2cc7a293": "0xd8d726b7177a800000",
        "0x024bdd2c7bfd500ee7404f7fb3e9fb31dd20fbd1": "0x9c2007651b2500000",
        "0x025367960304beee34591118e9ac2d1358d8021a": "0x6c6b935b8bbd400000",
        "0x0256149f5b5063bea14e15661ffb58f9b459a957": "0x2629f66e0c53000000",
        "0x02603d7a3bb297c67c877e5d34fbd5b913d4c63a": "0x1158e460913d00000",
        "0x0261ad3a172abf1315f0ffec3270986a8409cb25": "0xb08213bcf8ffe0000",
        "0x026432af37dc5113f1f46d480a4de0b28052237e": "0x1349b786e40bfc0000",
        "0x0266ab1c6b0216230b9395443d5fa75e684568c6": "0x3635c9adc5dea00000",
        "0x02751dc68cb5bd737027abf7ddb77390cd77c16b": "0x1158e460913d00000",
        "0x02778e390fa17510a3428af2870c4273547d386c": "0x36c3c66170c0d720000",
        "0x02ade5db22f8b758ee1443626c64ec2f32aa0a15": "0x43c33c1937564800000",
        "0x02af2459a93d0b3f4d062636236cd4b29e3bcecf": "0x678a932062e4180000",
        "0x02b1af72339b2a2256389fd64607de24f0de600a": "0x6c6b935b8bbd400000",
        "0x02b643d6fabd437a851accbe79abb7fde126dccf": "0x18650127cc3dc800000",
        "0x02b6d65cb00b7b36e1fb5ed3632c4cb20a894130": "0x43c33c1937564800000",
        "0x02b7b1d6b34ce053a40eb65cd4a4f7dddd0e9f30": "0x252248deb6e6940000",
        "0x02c9f7940a7b8b7a410bf83dc9c22333d4275dd3": "0x10f0cf064dd59200000",
        "0x02d4a30968a39e2b3498c3a6a4ed45c1c6646822": "0x6c6b935b8bbd400000",
        "0x02dfcb17a1b87441036374b762a5d3418b1cb4d4": "0x48b02ba9d1ba460000",
        "0x02e4cb22be46258a40e16d4338d802fffd00c151": "0x149696eaceba810000",
        "0x02e816afc1b5c0f39852131959d946eb3b07b5ad": "0x3635c9adc5dea00000",
        "0x02f7f67209b16a17550c694c72583819c80b54ad": "0x5559306a78a700000",
        "0x030973807b2f426914ad00181270acd27b8ff61f": "0x121ea68c114e5100000",
        "0x03097923ba155e16d82f3ad3f6b815540884b92c": "0x62a992e53a0af00000",
        "0x030fb3401f72bd3418b7d1da75bf8c519dd707dc": "0xa2a15d09519be00000",
        "0x031e25db516b0f099faebfd94f890cf96660836b": "0x6c6b935b8bbd400000",
        "0x0328510c09dbcd85194a98d67c33ac49f2f94d60": "0x2544faa778090e00000",
        "0x0329188f080657ab3a2afa522467178279832085": "0xbbf510ddfcb260000",
        "0x03317826d1f70aa4bddfa09be0c4105552d2358b": "0x21a754a6dc5280000",
        "0x03337012ae1d7ff3ee7f697c403e7780188bf0ef": "0xad78ebc5ac6200000",
        "0x03377c0e556b640103289a6189e1aeae63493467": "0x43c33c1937564800000",
        "0x0349634dc2a9e80c3f7721ee2b5046aeaaedfbb5": "0xd8d726b7177a800000",
        "0x0355bcacbd21441e95adeedc30c17218c8a408ce": "0x15af1d78b58c400000",
        "0x036eeff5ba90a6879a14dff4c5043b18ca0460c9": "0x56bc75e2d63100000",
        "0x03714b41d2a6f751008ef8dd4d2b29aecab8f36e": "0x14542ba12a337c00000",
        "0x0372e852582e0934344a0fed2178304df25d4628": "0x43c33c1937564800000",
        "0x0372ee5508bf8163ed284e5eef94ce4d7367e522": "0x56bc75e2d63100000",
        "0x037dd056e7fdbd641db5b6bea2a8780a83fae180": "0x796e3ea3f8ab00000",
        "0x038323b184cff7a82ae2e1bda7793fe4319ca0bf": "0x43c33c1937564800000",
        "0x038779ca2dbe663e63db3fe75683ea0ec62e2383": "0x5a87e7d7f5f6580000",
        "0x038e45eadd3d88b87fe4dab066680522f0dfc8f9": "0x21e19e0c9bab2400000",
        "0x0392549a727f81655429cb928b529f25df4d1385": "0x16c43a0eea0740000",
        "0x0394b90fadb8604f86f43fc1e35d3124b32a5989": "0x296aa140278e700000",
        "0x039e7a4ebc284e2ccd42b1bdd60bd6511c0f7706": "0xf015f25736420000",
        "0x039ef1ce52fe7963f166d5a275c4b1069fe3a832": "0x15af39e4aab2740000",
        "0x03a26cfc4c18316f70d59e9e1a79ee3e8b962f4c": "0x6c6b935b8bbd400000",
        "0x03aa622881236dd0f4940c24c324ff8b7b7e2186": "0xad78ebc5ac62000000",
        "0x03af7ad9d5223cf7c8c13f20df67ebe5ffc5bb41": "0xad78ebc5ac6200000",
        "0x03b0f17cd4469ddccfb7da697e82a91a5f9e7774": "0x1158e460913d00000",
        "0x03b41b51f41df20dd279bae18c12775f77ad771c": "0x3635c9adc5dea00000",
        "0x03be5b4629aefbbcab9de26d39576cb7f691d764": "0xadf30ba70c8970000",
        "0x03c647a9f929b0781fe9ae01caa3e183e876777e": "0x182ab7c20ce5240000",
        "0x03c91d92943603e752203e05340e566013b90045": "0x2b7cc2e9c3225c0000",
        "0x03cb4c4f4516c4ff79a1b6244fbf572e1c7fea79": "0x9489237adb9a500000",
        "0x03cb98d7acd817de9d886d22fab3f1b57d92a608": "0x56bc75e2d631000000",
        "0x03cc9d2d21f86b84ac8ceaf971dba78a90e62570": "0x57473d05dabae80000",
        "0x03d1724fd00e54aabcd2de2a91e8462b1049dd3a": "0x8f1d5c1cae37400000",
        "0x03dedfcd0b3c2e17c705da248790ef98a6bd5751": "0x487a9a304539440000",
        "0x03e8b084537557e709eae2e1e1a5a6bce1ef8314": "0x1158e460913d00000",
        "0x03ea6d26d080e57aee3926b18e8ed73a4e5b2826": "0xad78ebc5ac6200000",
        "0x03eb3cb860f6028da554d344a2bb5a500ae8b86f": "0x6c6b935b8bbd400000",
        "0x03ebc63fda6660a465045e235fbe6e5cf195735f": "0x7b06ce87fdd680000",
        "0x03ef6ad20ff7bd4f002bac58d47544cf879ae728": "0x175c758d0b96e5c0000",
        "0x03f7b92008813ae0a676eb212814afab35221069": "0x6c6b935b8bbd400000",
        "0x041170f581de80e58b2a045c8f7c1493b001b7cb": "0x303c74a1a336940000",
        "0x0413d0cf78c001898a378b918cd6e498ea773c4d": "0xf2dc7d47f15600000",
        "0x04241b41ecbd0bfdf1295e9d4fa59ea09e6c6186": "0x655f769450bc780000",
        "0x043707071e2ae21eed977891dc79cd5d8ee1c2da": "0x6c6b935b8bbd400000",
        "0x044e853144e3364495e7a69fa1d46abea3ac0964": "0x2ab2254b1dc9a8000",
        "0x0455dcec8a7fc4461bfd7f37456fce3f4c3caac7": "0x15af1d78b58c400000",
        "0x045ed7f6d9ee9f252e073268db022c6326adfc5b": "0x56bc75e2d63100000",
        "0x046377f864b0143f282174a892a73d3ec8ec6132": "0xa5aa85009e39c0000",
        "0x0469e8c440450b0e512626fe817e6754a8152830": "0x6c6b935b8bbd400000",
        "0x046d274b1af615fb505a764ad8dda770b1db2f3d": "0x6c6b935b8bbd400000",
        "0x047d5a26d7ad8f8e70600f70a398ddaa1c2db26f": "0x14542ba12a337c00000",
        "0x047e87c8f7d1fce3b01353a85862a948ac049f3e": "0x50c5e761a444080000",
        "0x047f9bf1529daf87d407175e6f171b5e59e9ff3e": "0x233c8fe42703e80000",
        "0x04852732b4c652f6c2e58eb36587e60a62da14db": "0x43c33c1937564800000",
        "0x048a8970ea4145c64d5517b8de5b46d0595aad06": "0x43c33c1937564800000",
        "0x049c5d4bc6f25d4e456c697b52a07811ccd19fb1": "0x104400a2470e680000",
        "0x04a1cada1cc751082ff8da928e3cfa000820a9e9": "0x22b1c8c1227a00000",
        "0x04a80afad53ef1f84165cfd852b0fdf1b1c24ba8": "0x324e964b3eca80000",
        "0x04aafc8ae5ce6f4903c89d7fac9cb19512224777": "0x1b1ae4d6e2ef500000",
        "0x04ba4bb87140022c214a6fac42db5a16dd954045": "0x3635c9adc5dea00000",
        "0x04ba8a3f03f08b895095994dda619edaacee3e7a": "0x6c6b935b8bbd400000",
        "0x04c2c64bb54c3eccd05585e10ec6f99a0cdb01a3": "0x56bc75e2d63100000",
        "0x04ce45f600db18a9d0851b29d9393ebdaafe3dc5": "0x1158e460913d00000",
        "0x04d6b8d4da867407bb997749debbcdc0b358538a": "0x3635c9adc5dea00000",
        "0x04d73896cf6593a691972a13a6e4871ff2c42b13": "0x6c6b935b8bbd400000",
        "0x04d82af9e01a936d97f8f85940b970f9d4db9936": "0xad78ebc5ac6200000",
        "0x04e5f5bc7c923fd1e31735e72ef968fd67110c6e": "0x57551dbc8e624c0000",
        "0x04eca501630abce35218b174956b891ba25efb23": "0x36369ed7747d260000",
        "0x0505a08e22a109015a22f685305354662a5531d5": "0x8cf23f909c0fa00000",
        "0x0514954c3c2fb657f9a06f510ea22748f027cdd3": "0x15af1d78b58c400000",
        "0x051633080d07a557adde319261b074997f14692d": "0x13a6b2b564871a00000",
        "0x0517448dada761cc5ba4033ee881c83037036400": "0x6c4fd1ee246e780000",
        "0x051d424276b21239665186133d653bb8b1862f89": "0x3635c9adc5dea00000",
        "0x0521bc3a9f8711fecb10f50797d71083e341eb9d": "0x1158e460913d00000",
        "0x05236d4c90d065f9e3938358aaffd777b86aec49": "0x1b1ae4d6e2ef500000",
        "0x052a58e035f1fe9cdd169bcf20970345d12b9c51": "0x50c5e761a444080000",
        "0x052eab1f61b6d45517283f41d1441824878749d0": "0xd8d726b7177a800000",
        "0x05336e9a722728d963e7a1cf2759fd0274530fca": "0x31a2443f888a798000",
        "0x053471cd9a41925b3904a5a8ffca3659e034be23": "0xad201a6794ff80000",
        "0x05361d8eb6941d4e90fb7e1418a95a32d5257732": "0x1158e460913d00000",
        "0x05423a54c8d0f9707e704173d923b946edc8e700": "0x6ea03c2bf8ba58000",
        "0x05440c5b073b529b4829209dff88090e07c4f6f5": "0x45d29737e22f200000",
        "0x055ab658c6f0ed4f875ed6742e4bc7292d1abbf0": "0x486cb9799191e0000",
        "0x055bd02caf19d6202bbcdc836d187bd1c01cf261": "0x56bc75e2d63100000",
        "0x055eac4f1ad3f58f0bd024d68ea60dbe01c6afb3": "0x56bc75e2d63100000",
        "0x05665155cc49cbf6aabdd5ae92cbfaad82b8c0c1": "0x15af1d78b58c400000",
        "0x056686078fb6bcf9ba0a8a8dc63a906f5feac0ea": "0x1b181e4bf2343c0000",
        "0x05696b73916bd3033e05521e3211dfec026e98e4": "0x6c6b935b8bbd400000",
        "0x056b1546894f9a85e203fb336db569b16c25e04f": "0x92edb09ff08d88000",
        "0x057949e1ca0570469e4ce3c690ae613a6b01c559": "0xad78ebc5ac6200000",
        "0x057dd29f2d19aa3da42327ea50bce86ff5c911d9": "0xd8d726b7177a800000",
        "0x057f7f81cd7a406fc45994408b5049912c566463": "0x5c283d410394100000",
        "0x05915d4e225a668162aee7d6c25fcfc6ed18db03": "0x398c37279259e0000",
        "0x0596a27dc3ee115fce2f94b481bc207a9e261525": "0x3635c9adc5dea00000",
        "0x05a830724302bc0f6ebdaa1ebeeeb46e6ce00b39": "0x556f64c1fe7fa0000",
        "0x05ae7fd4bbcc80ca11a90a1ec7a301f7cccc83db": "0x3154c9729d05780000",
        "0x05bb64a916be66f460f5e3b64332110d209e19ae": "0xe3aeb5737240a00000",
        "0x05bf4fcfe772e45b826443852e6c351350ce72a2": "0x1b1ae4d6e2ef5000000",
        "0x05c64004a9a826e94e5e4ee267fa2a7632dd4e6f": "0x36dc42ebff90b7f8000",
        "0x05c736d365aa37b5c0be9c12c8ad5cd903c32cf9": "0x1455e7b800a86880000",
        "0x05cb6c3b0072d3116761b532b218443b53e8f6c5": "0x1e02c3d7fca9b6280000",
        "0x05d0f4d728ebe82e84bf597515ad41b60bf28b39": "0xe3aeb5737240a00000",
        "0x05d68dad61d3bbdfb3f779265c49474aff3fcd30": "0x222c55dc1519d8000",
        "0x05e671de55afec964b074de574d5158d5d21b0a3": "0xd5967be4fc3f100000",
        "0x05e97b09492cd68f63b12b892ed1d11d152c0eca": "0x3708baed3d68900000",
        "0x05f3631f5664bdad5d0132c8388d36d7d8920918": "0x1158e460913d00000",
        "0x0609d83a6ce1ffc9b690f3e9a81e983e8bdc4d9d": "0xed2b525841adfc00000",
        "0x061ea4877cd08944eb64c2966e9db8dedcfec06b": "0x3635c9adc5dea00000",
        "0x0625d06056968b002206ff91980140242bfaa499": "0x3635c9adc5dea00000",
        "0x0628bfbe5535782fb588406bc96660a49b011af5": "0x52663ccab1e1c00000",
        "0x0631d18bbbbd30d9e1732bf36edae2ce8901ab80": "0xa3f98855ec39900000",
        "0x0631dc40d74e5095e3729eddf49544ecd4396f67": "0x8ac7230489e800000",
        "0x063759dd1c4e362eb19398951ff9f8fad1d31068": "0x21e19e0c9bab2400000",
        "0x065ff575fd9c16d3cb6fd68ffc8f483fc32ec835": "0xad78ebc5ac6200000",
        "0x06618e9d5762df62028601a81d4487d6a0ecb80e": "0x487a9a304539440000",
        "0x066647cfc85d23d37605573d208ca154b244d76c": "0x21e19e0c9bab2400000",
        "0x0678654ac6761db904a2f7e8595ec1eaac734308": "0x2f98b29c2818f80000",
        "0x06860a93525955ff624940fadcffb8e149fd599c": "0x6c68ccd09b022c0000",
        "0x068ce8bd6e902a45cb83b51541b40f39c4469712": "0x11c0f9bad4a46e00000",
        "0x068e29b3f191c812a6393918f71ab933ae6847f2": "0x6c6acc67d7b1d40000",
        "0x068e655766b944fb263619658740b850c94afa31": "0x1e87f85809dc00000",
        "0x06964e2d17e9189f88a8203936b40ac96e533c06": "0xfc936392801c0000",
        "0x06994cd83aa2640a97b2600b41339d1e0d3ede6c": "0xd8d726b7177a80000",
        "0x069ed0ab7aa77de571f16106051d92afe195f2d0": "0xad78ebc5ac6200000",
        "0x06ac26ad92cb859bd5905ddce4266aa0ec50a9c5": "0x2a034919dfbfbc0000",
        "0x06b0c1e37f5a5ec4bbf50840548f9d3ac0288897": "0xd8d882e1928e7d0000",
        "0x06b0ff834073cce1cbc9ea557ea87b605963e8b4": "0x1043561a8829300000",
        "0x06b106649aa8c421ddcd1b8c32cd0418cf30da1f": "0x878678326eac9000000",
        "0x06b5ede6fdf1d6e9a34721379aeaa17c713dd82a": "0x6c6b935b8bbd400000",
        "0x06cbfa08cdd4fba737bac407be8224f4eef35828": "0x202be5e8382e8b8000",
        "0x06d6cb308481c336a6e1a225a912f6e6355940a1": "0x5f68e8131ecf800000",
        "0x06dc7f18cee7edab5b795337b1df6a9e8bd8ae59": "0x15af1d78b58c400000",
        "0x06f68de3d739db41121eacf779aada3de8762107": "0x18493fba64ef00000",
        "0x06f7dc8d1b9462cef6feb13368a7e3974b097f9f": "0x6c6b935b8bbd400000",
        "0x0701f9f147ec486856f5e1b71de9f117e99e2105": "0x965da717fd5b80000",
        "0x070d5d364cb7bbf822fc2ca91a35bdd441b215d5": "0x6c6b935b8bbd400000",
        "0x071dd90d14d41f4ff7c413c24238d3359cd61a07": "0x7b53f79e888dac00000",
        "0x0726c42e00f45404836eb1e280d073e7059687f5": "0x58003e3fb947a38000",
        "0x0727be0a2a00212048b5520fbefb953ebc9d54a0": "0x21e19e0c9bab2400000",
        "0x0729a8a4a5ba23f579d0025b1ad0f8a0d35cdfd2": "0x20dd68aaf3289100000",
        "0x0729b4b47c09eb16158464c8aa7fd9690b438839": "0x6c68ccd09b022c0000",
        "0x0734a0a81c9562f4d9e9e10a8503da15db46d76e": "0xfc936392801c0000",
        "0x073c67e09b5c713c5221c8a0c7f3f74466c347b0": "0x41bad155e6512200000",
        "0x073f1ed1c9c3e9c52a9b0249a5c1caa0571fdf05": "0x3d0ff0b013b800000",
        "0x0748713145ef83c3f0ef4d31d823786f7e9cc689": "0xf3f20b8dfa69d00000",
        "0x075d15e2d33d8b4fa7dba8b9e607f04a261e340b": "0x678a932062e4180000",
        "0x076561a856455d7ef86e63f87c73dbb628a55f45": "0x30ca024f987b900000",
        "0x076ee99d3548623a03b5f99859d2d785a1778d48": "0xad78ebc5ac6200000",
        "0x0770b43dbae4b1f35a927b4fa8124d3866caf97b": "0x37193ea7ef5b470000",
        "0x0770c61be78772230cb5a3bb2429a72614a0b336": "0x16ee0a299b713418000",
        "0x07723e3c30e8b731ee456a291ee0e798b0204a77": "0x6c6b935b8bbd400000",
        "0x0773eeacc050f74720b4a1bd57895b1cceeb495d": "0x21e19e0c9bab2400000",
        "0x07800d2f8068e448c79a4f69b1f15ef682aae5f6": "0x41bad155e6512200000",
        "0x07a8dadec142571a7d53a4297051786d072cba55": "0x13b6da1139bda8000",
        "0x07af938c1237a27c9030094dcf240750246e3d2c": "0x1b1ae4d6e2ef500000",
        "0x07b1a306cb4312df66482c2cae72d1e061400fcd": "0x43c33c1937564800000",
        "0x07b7a57033f8f11330e4665e185d234e83ec140b": "0xea7ee92a0c9a0b8000",
        "0x07bc2cc8eedc01970700efc9c4fb36735e98cd71": "0xd8d726b7177a800000",
        "0x07d41217badca5e0e60327d845a3464f0f27f84a": "0xd8d726b7177a800000",
        "0x07d4334ec385e8aa54eedaeadb30022f0cdfa4ab": "0x8e91d520f2eb790000",
        "0x07dae622630d1136381933d2ad6b22b839d82102": "0xad78ebc5ac6200000",
        "0x07dc2bf83bc6af19a842ffea661af5b41b67fda1": "0x5150ae84a8cdf00000",
        "0x07dc8c8b927adbedfa8f5d639b4352351f2f36d2": "0x110aed3b5530db0000",
        "0x07ddd0422c86ef65bf0c7fc3452862b1228b08b8": "0x6ff5d2aa8f9fcf0000",
        "0x07e1162ceae3cf21a3f62d105990302e307f4e3b": "0x52f103edb66ba80000",
        "0x07e2b4cdeed9d087b12e556d9e770c13c099615f": "0x243d4d18229ca20000",
        "0x07feef54c136850829badc4b49c3f2a73c89fb9e": "0x6685ac1bfe32c0000",
        "0x080546508a3d2682c8b9884f13637b8847b44db3": "0x6c6b935b8bbd400000",
        "0x08090876baadfee65c3d363ba55312748cfa873d": "0x5c2a99371cffe10000",
        "0x08166f02313feae18bb044e7877c808b55b5bf58": "0x6acb3df27e1f880000",
        "0x0829d0f7bb7c446cfbb0deadb2394d9db7249a87": "0x22ca3587cf4eb0000",
        "0x08306de51981e7aca1856859b7c778696a6b69f9": "0xad78ebc5ac62000000",
        "0x0837539b5f6a522a482cdcd3a9bb7043af39bdd2": "0x14542ba12a337c00000",
        "0x0838a7768d9c2aca8ba279adfee4b1f491e326f1": "0xad78ebc5ac6200000",
        "0x08411652c871713609af0062a8a1281bf1bbcfd9": "0x4be4e7267b6ae00000",
        "0x084d103254759b343cb2b9c2d8ff9e1ac5f14596": "0x19bff2ff57968c00000",
        "0x08504f05643fab5919f5eea55925d7a3ed7d807a": "0x1158e460913d00000",
        "0x085b4ab75d8362d914435cedee1daa2b1ee1a23b": "0xd255d112e103a00000",
        "0x085ba65febe23eefc2c802666ab1262382cfc494": "0x15af1d78b58c400000",
        "0x087498c0464668f31150f4d3c4bcdda5221ba102": "0x1158e460913d00000",
        "0x0877eeaeab78d5c00e83c32b2d98fa79ad51482f": "0x17d22d71da62260000",
        "0x08936a37df85b3a158cafd9de021f58137681347": "0xfc936392801c0000",
        "0x08a9a44e1f41de3dbba7a363a3ab412c124cd15e": "0xad78ebc5ac6200000",
        "0x08b7bdcf944d5570838be70460243a8694485858": "0x6c6b935b8bbd400000",
        "0x08b84536b74c8c01543da88b84d78bb95747d822": "0xad78ebc5ac6200000",
        "0x08c2f236ac4adcd3fda9fbc6e4532253f9da3bec": "0x1158e460913d00000",
        "0x08c802f87758349fa03e6bc2e2fd0791197eea9a": "0x6c6b935b8bbd400000",
        "0x08c9f1bfb689fdf804d769f82123360215aff93b": "0x6acb3df27e1f880000",
        "0x08cac8952641d8fc526ec1ab4f2df826a5e7710f": "0x1043561a8829300000",
        "0x08ccda50e4b26a0ffc0ef92e9205310706bec2c7": "0x149756c3857c6000000",
        "0x08d0864dc32f9acb36bf4ea447e8dd6726906a15": "0x6c6e59e67c78540000",
        "0x08d4267feb15da9700f7ccc3c84a8918bf17cfde": "0x61093d7c2c6d380000",
        "0x08d4311c9c1bbaf87fabe1a1d01463828d5d98ce": "0x130ee8e7179044400000",
        "0x08d54e83ad486a934cfaeae283a33efd227c0e99": "0x38530583245edc0000",
        "0x08d97eadfcb7b064e1ccd9c8979fbee5e77a9719": "0xe6c5da8d67ac18000",
        "0x08da3a7a0f452161cfbcec311bb68ebfdee17e88": "0x6c6b935b8bbd400000",
        "0x08e38ee0ce48c9ca645c1019f73b5355581c56e6": "0x56bc75e2d631000000",
        "0x08ef3fa4c43ccdc57b22a4b9b2331a82e53818f2": "0xd8d726b7177a800000",
        "0x0909648c18a3ce5bae7a047ec2f868d24cdda81d": "0xcf152640c5c8300000",
        "0x090cd67b60e81d54e7b5f6078f3e021ba65b9a1e": "0x3635c9adc5dea00000",
        "0x090cebef292c3eb081a05fd8aaf7d39bf07b89d4": "0xd8d726b7177a800000",
        "0x090fa9367bda57d0d3253a0a8ff76ce0b8e19a73": "0x3635c9adc5dea00000",
        "0x09146ea3885176f07782e1fe30dce3ce24c49e1f": "0x1158e460913d00000",
        "0x0921605f99164e3bcc28f31caece78973182561d": "0x2b07692a9065a80000",
        "0x09261f9acb451c3788844f0c1451a35bad5098e3": "0x1d5ad27502920600000",
        "0x0927220492194b2eda9fc4bbe38f25d681dfd36c": "0x14542ba12a337c00000",
        "0x092acb624b08c05510189bbbe21e6524d644ccad": "0xfc936392801c0000",
        "0x092e815558402d67f90d6bfe6da0b2fffa91455a": "0x340aad21b3b700000",
        "0x095030e4b82692dcf8b8d0912494b9b378ec9328": "0x48a43c54602f700000",
        "0x095270cc42141dd998ad2862dbd1fe9b44e7e650": "0x410d586a20a4c00000",
        "0x095457f8ef8e2bdc362196b9a9125da09c67e3ab": "0xad78ebc5ac6200000",
        "0x0954a8cb5d321fc3351a7523a617d0f58da676a7": "0x87d9bc7aa498e80000",
        "0x095b0ea2b218d82e0aea7c2889238a39c9bf9077": "0x43c33c1937564800000",
        "0x095b949de3333a377d5019d893754a5e4656ff97": "0x126e72a69a50d00000",
        "0x095e0174829f34c3781be1a5e38d1541ea439b7f": "0x14542ba12a337c00000",
        "0x095f5a51d06f6340d80b6d29ea2e88118ad730fe": "0x6c6e59e67c78540000",
        "0x0968ee5a378f8cadb3bafdbed1d19aaacf936711": "0x3635c9adc5dea00000",
        "0x0977bfba038a44fb49b03970d8d8cf2cb61f8b25": "0x16c4abbebea0100000",
        "0x097da12cfc1f7c1a2464def08c29bed5e2f851e9": "0x1158e460913d00000",
        "0x097ecda22567c2d91cb03f8c5215c22e9dcda949": "0x11651ac3e7a758000",
        "0x0989c200440b878991b69d6095dfe69e33a22e70": "0x678a932062e4180000",
        "0x0990e81cd785599ea236bd1966cf526302c35b9c": "0x3635c9adc5dea00000",
        "0x0998d8273115b56af43c505e087aff0676ed3659": "0xd8d6eddf2d2e180000",
        "0x09a025316f967fa8b9a1d60700063f5a68001caa": "0x21221a99b93ec0000",
        "0x09a928d528ec1b3e25ffc83e218c1e0afe8928c7": "0xfc936392801c0000",
        "0x09ae49e37f121df5dc158cfde806f173a06b0c7f": "0xd8309e26aba1d00000",
        "0x09afa73bc047ef46b977fd9763f87286a6be68c6": "0x1b2fb5e8f06a660000",
        "0x09b4668696f86a080f8bebb91db8e6f87015915a": "0x238ff7b34f60010000",
        "0x09b59b8698a7fbd3d2f8c73a008988de3e406b2b": "0x878678326eac9000000",
        "0x09b7a988d13ff89186736f03fdf46175b53d16e0": "0x14542ba12a337c00000",
        "0x09c177f1ae442411ddacf187d46db956148360e7": "0x1e52e336cde22180000",
        "0x09c88f917e4d6ad473fa12e98ea3c4472a5ed6da": "0x21e19e0c9bab2400000",
        "0x09d0b8cd077c69d9f32d9cca43b3c208a21ed48b": "0x821d221b5291f8000",
        "0x09d6cefd75b0c4b3f8f1d687a522c96123f1f539": "0x14542ba12a337c00000",
        "0x09e437d448861228a232b62ee8d37965a904ed9c": "0x498cf401df8842e8000",
        "0x09ee12b1b42b05af9cf207d5fcac255b2ec411f2": "0x331cddd47e0fe8000",
        "0x09f3f601f605441140586ce0656fa24aa5b1d9ae": "0x5373776fe8c4540000",
        "0x09f9575be57d004793c7a4eb84b71587f97cbb6a": "0xad78ebc5ac6200000",
        "0x0a0650861f785ed8e4bf1005c450bbd06eb48fb6": "0xa6413b79144e7e0000",
        "0x0a06fad7dcd7a492cbc053eeabde6934b39d8637": "0x1158e460913d00000",
        "0x0a077db13ffeb09484c217709d5886b8bf9c5a8b": "0xd8d726b7177a800000",
        "0x0a0ecda6636f7716ef1973614687fd89a820a706": "0x155bd9307f9fe80000",
        "0x0a29a8a4d5fd950075ffb34d77afeb2d823bd689": "0xad78ebc5ac6200000",
        "0x0a2ade95b2e8c66d8ae6f0ba64ca57d783be6d44": "0xd8d726b7177a800000",
        "0x0a2b4fc5d81ace67dc4bba03f7b455413d46fe3d": "0xaadec983fcff40000",
        "0x0a2dcb7a671701dbb8f495728088265873356c8e": "0x83f16ce08a06c0000",
        "0x0a3de155d5ecd8e81c1ff9bbf0378301f8d4c623": "0xd8d726b7177a800000",
        "0x0a47ad9059a249fc936b2662353da6905f75c2b9": "0x6c6b935b8bbd400000",
        "0x0a48296f7631708c95d2b74975bc4ab88ac1392a": "0x10f0cf064dd59200000",
        "0x0a4a011995c681bc999fdd79754e9a324ae3b379": "0x8c19ab06eb89af60000",
        "0x0a58fddd71898de773a74fdae45e7bd84ef43646": "0x1158e460913d00000",
        "0x0a5b79d8f23b6483dbe2bdaa62b1064cc76366ae": "0x6ac882100952c78000",
        "0x0a652e2a8b77bd97a790d0e91361c98890dbb04e": "0x3635c9adc5dea00000",
        "0x0a6ebe723b6ed1f9a86a69ddda68dc47465c2b1b": "0x403d2db599d5e40000",
        "0x0a77e7f72b437b574f00128b21f2ac265133528c": "0x6c6b935b8bbd400000",
        "0x0a917f3b5cb0b883047fd9b6593dbcd557f453b9": "0x3635c9adc5dea00000",
        "0x0a931b449ea8f12cdbd5e2c8cc76bad2c27c0639": "0x13f9e8c79fe058000",
        "0x0a9804137803ba6868d93a55f9985fcd540451e4": "0xb98bc829a6f90000",
        "0x0a9ab2638b1cfd654d25dab018a0aebddf85fd55": "0x12e8cb5fe4c4a8000",
        "0x0ab366e6e7d5abbce6b44a438d69a1cabb90d133": "0x1158e460913d000000",
        "0x0ab4281ebb318590abb89a81df07fa3af904258a": "0x1b1ae4d6e2ef500000",
        "0x0ab59d390702c9c059db148eb4f3fcfa7d04c7e7": "0xfc936392801c0000",
        "0x0abfb39b11486d79572866195ba26c630b6784db": "0x19ba8737f96928f00000",
        "0x0aca9a5626913b08cfc9a66d40508dce52b60f87": "0x678a932062e4180000",
        "0x0ad3e44d3c001fa290b393617030544108ac6eb9": "0x6abda0bc30b2df8000",
        "0x0aec2e426ed6cc0cf3c249c1897eac47a7faa9bd": "0xad78ebc5ac6200000",
        "0x0af65f14784e55a6f95667fd73252a1c94072d2a": "0xa763b8e02d44f8000",
        "0x0af6c8d539c96d50259e1ba6719e9c8060f388c2": "0x3635c9adc5dea00000",
        "0x0b06390f2437b20ec4a3d3431b3279c6583e5ed7": "0xa844a7424d9c80000",
        "0x0b0b3862112aeec3a03492b1b05f440eca54256e": "0xd8d726b7177a800000",
        "0x0b0e055b28cbd03dc5ff44aa64f3dce04f5e63fb": "0x6c6b935b8bbd400000",
        "0x0b119df99c6b8de58a1e2c3f297a6744bf552277": "0x6c6b935b8bbd400000",
        "0x0b14891999a65c9ef73308efe3100ca1b20e8192": "0x2b5e3af16b18800000",
        "0x0b2113504534642a1daf102eee10b9ebde76e261": "0x942cdd7c95f2bd8000",
        "0x0b288a5a8b75f3dc4191eb0457e1c83dbd204d25": "0x10714e77bb43ab40000",
        "0x0b369e002e1b4c7913fcf00f2d5e19c58165478f": "0x37f6516288c340000",
        "0x0b43bd2391025581d8956ce42a072579cbbfcb14": "0x104e70464b1580000",
        "0x0b507cf553568daaf65504ae4eaa17a8ea3cdbf5": "0x6c6b935b8bbd400000",
        "0x0b5d66b13c87b392e94d91d5f76c0d450a552843": "0x6c6b935b8bbd400000",
        "0x0b5e2011ebc25a007f21362960498afb8af280fb": "0x6c6b935b8bbd400000",
        "0x0b649da3b96a102cdc6db652a0c07d65b1e443e6": "0x6c6b935b8bbd400000",
        "0x0b6920a64b363b8d5d90802494cf564b547c430d": "0x410d586a20a4c00000",
        "0x0b701101a4109f9cb360dc57b77442673d5e5983": "0x6c6b935b8bbd400000",
        "0x0b71f554122469ef978e2f1fefd7cbb410982772": "0xd255d112e103a00000",
        "0x0b7bb342f01bc9888e6a9af4a887cbf4c2dd2caf": "0x3635c9adc5dea000000",
        "0x0b7d339371e5be6727e6e331b5821fa24bdb9d5a": "0x2e7f81868262010000",
        "0x0b7fc9ddf70576f6330669eaaa71b6a831e99528": "0x796e3ea3f8ab00000",
        "0x0b80fc70282cbdd5fde35bf78984db3bdb120188": "0x3638021cecdab00000",
        "0x0b924df007e9c0878417cfe63b976ea1a382a897": "0x22b1c8c1227a00000",
        "0x0b93fca4a4f09cac20db60e065edcccc11e0a5b6": "0xad78ebc5ac6200000",
        "0x0b9df80fbe232009dacf0aa8cac59376e2476203": "0x6c6b935b8bbd400000",
        "0x0ba6e46af25a13f57169255a34a4dac7ce12be04": "0x1b1ae4d6e2ef500000",
        "0x0ba8705bf55cf219c0956b5e3fc01c4474a6cdc1": "0x525e0595d4d6b8000",
        "0x0baf6ecdb91acb3606a8357c0bc4f45cfd2d7e6f": "0x3635c9adc5dea00000",
        "0x0bb05f7224bb5804856556c07eeadbed87ba8f7c": "0x15be6174e1912e0000",
        "0x0bb0c12682a2f15c9b5741b2385cbe41f034068e": "0x5150ae84a8cdf00000",
        "0x0bb25ca7d188e71e4d693d7b170717d6f8f0a70a": "0x124302a82fadd70000",
        "0x0bb2650ea01aca755bc0c017b64b1ab5a66d82e3": "0x487a9a304539440000",
        "0x0bb54c72fd6610bfa4363397e020384b022b0c49": "0x487a9a304539440000",
        "0x0bb7160aba293762f8734f3e0326ffc9a4cac190": "0x3635c9adc5dea00000",
        "0x0bc95cb32dbb574c832fa8174a81356d38bc92ac": "0x6c6b935b8bbd400000",
        "0x0bd67dbde07a856ebd893b5edc4f3a5be4202616": "0x6c6b935b8bbd400000",
        "0x0bdbc54cc8bdbbb402a08911e2232a5460ce866b": "0xa2a15d09519be00000",
        "0x0bdd58b96e7c916dd2fb30356f2aebfaaf1d8630": "0x6c6b935b8bbd400000",
        "0x0be1bcb90343fae5303173f461bd914a4839056c": "0x14542ba12a337c00000",
        "0x0be1fdf626ee6189102d70d13b31012c95cd1cd6": "0x6c6b935b8bbd400000",
        "0x0be2b94ad950a2a62640c35bfccd6c67dae450f6": "0x692ae8897081d00000",
        "0x0be6a09e4307fe48d412b8d1a1a8284dce486261": "0x40fbff85c0138300000",
        "0x0befb54707f61b2c9fb04715ab026e1bb72042bd": "0xd8d726b7177a800000",
        "0x0bf064428f83626722a7b5b26a9ab20421a7723e": "0x73f75d1a085ba0000",
        "0x0bfbb6925dc75e52cf2684224bbe0550fea685d3": "0x6acb3df27e1f880000",
        "0x0c088006c64b30c4ddafbc36cb5f05469eb62834": "0x6c6b935b8bbd400000",
        "0x0c2073ba44d3ddbdb639c04e191039a71716237f": "0x4d853c8f8908980000",
        "0x0c222c7c41c9b048efcce0a232434362e12d673b": "0x21e8359697677380000",
        "0x0c2808b951ed9e872d7b32790fcc5994ae41ffdc": "0x15996e5b3cd6b3c00000",
        "0x0c28847e4f09dfce5f9b25af7c4e530f59c880fe": "0x3635c9adc5dea00000",
        "0x0c2d5c920538e953caaf24f0737f554cc6927742": "0x3635c9adc5dea00000",
        "0x0c30cacc3f72269f8b4f04cf073d2b05a83d9ad1": "0x6c7974123f64a40000",
        "0x0c3239e2e841242db989a61518c22247e8c55208": "0xe4af6471734640000",
        "0x0c480de9f7461002908b49f60fc61e2b62d3140b": "0x21e19e0c9bab2400000",
        "0x0c48ae62d1539788eba013d75ea60b64eeba4e80": "0x77fbdc43e030998000",
        "0x0c5589a7a89b9ad15b02751930415948a875fbef": "0x6d499ec6c63380000",
        "0x0c67033dd8ee7f0c8ae534d42a51f7d9d4f7978f": "0xad78ebc5ac6200000",
        "0x0c6845bf41d5ee273c3ee6b5b0d69f6fd5eabbf7": "0xa2a1b9682e58090000",
        "0x0c7f869f8e90d53fdc03e8b2819b016b9d18eb26": "0x43c33c1937564800000",
        "0x0c8692eeff2a53d6d1688ed56a9ddbbd68dabba1": "0x6c6b935b8bbd400000",
        "0x0c8f66c6017bce5b20347204b602b743bad78d60": "0x6c6b935b8bbd400000",
        "0x0c8fd7775e54a6d9c9a3bf890e761f6577693ff0": "0x215f835bc769da80000",
        "0x0c925ad5eb352c8ef76d0c222d115b0791b962a1": "0xac635d7fa34e300000",
        "0x0c967e3061b87a753e84507eb60986782c8f3013": "0x56bc75e2d63100000",
        "0x0ca12ab0b9666cf0cec6671a15292f2653476ab2": "0x2c7827c42d22d07c0000",
        "0x0ca670eb2c8b96cba379217f5929c2b892f39ef6": "0x6c6b935b8bbd400000",
        "0x0cae108e6db99b9e637876b064c6303eda8a65c8": "0xa2a15d09519be00000",
        "0x0cbd921dbe121563b98a6871fecb14f1cc7e88d7": "0xad78ebc5ac6200000",
        "0x0cbf8770f0d1082e5c20c5aead34e5fca9ae7ae2": "0x3635c9adc5dea00000",
        "0x0cc67f8273e1bae0867fd42e8b8193d72679dbf8": "0x1b1ae4d6e2ef500000",
        "0x0cd6a141918d126b106d9f2ebf69e102de4d3277": "0x1158e460913d00000",
        "0x0cda12bf72d461bbc479eb92e6491d057e6b5ad1": "0x21e19e0c9bab2400000",
        "0x0cdc960b998c141998160dc179b36c15d28470ed": "0x1b1b6bd7af64c70000",
        "0x0cfb172335b16c87d519cd1475530d20577f5e0e": "0x152d02c7e14af6800000",
        "0x0d1f2a57713ebc6e94de29846e8844d376665763": "0x10f0cf064dd59200000",
        "0x0d3265d3e7bdb93d5e8e8b1ca47f210a793ecc8e": "0xad78ebc5ac6200000",
        "0x0d35408f226566116fb8acdaa9e2c9d59b76683f": "0x32f51edbaaa3300000",
        "0x0d551ec1a2133c981d5fc6a8c8173f9e7c4f47af": "0x6c6b935b8bbd400000",
        "0x0d5d98565c647ca5f177a2adb9d3022fac287f21": "0xad78ebc5ac6200000",
        "0x0d658014a199061cf6b39433140303c20ffd4e5a": "0x1bc85dc2a89bb200000",
        "0x0d678706d037187f3e22e6f69b99a592d11ebc59": "0x55a6e79ccd1d300000",
        "0x0d69100c395ce6c5eaadf95d05d872837ededd21": "0x15af1d78b58c400000",
        "0x0d747ee5969bf79d57381d6fe3a2406cd0d8ce27": "0x152d02c7e14af6800000",
        "0x0d8023929d917234ae40512b1aabb5e8a4512771": "0x805e99fdcc5d00000",
        "0x0d8aab8f74ea862cdf766805009d3f3e42d8d00b": "0x13b80b99c5185700000",
        "0x0d8c40a79e18994ff99ec251ee10d088c3912e80": "0x63664fcd2bbc40000",
        "0x0d8ed7d0d15638330ed7e4eaccab8a458d75737e": "0x6c6b935b8bbd400000",
        "0x0d92582fdba05eabc3e51538c56db8813785b328": "0xa5aa85009e39c0000",
        "0x0d9443a79468a5bbf7c13c6e225d1de91aee07df": "0x3cb71f51fc5580000",
        "0x0d9a825ff2bcd397cbad5b711d9dcc95f1cc112d": "0x2b5e3af16b188000000",
        "0x0d9d3f9bc4a4c6efbd59679b69826bc1f63d9916": "0x2086ac351052600000",
        "0x0da532c910e3ac0dfb14db61cd739a93353fd05f": "0x4878be1ffaf95d0000",
        "0x0da7401262384e2e8b4b26dd154799b55145efa0": "0x1043561a8829300000",
        "0x0dae3ee5b915b36487f9161f19846d101433318a": "0x678a932062e4180000",
        "0x0dbd417c372b8b0d01bcd944706bd32e60ae28d1": "0x126e72a69a50d00000",
        "0x0dc100b107011c7fc0a1339612a16ccec3285208": "0x6c6b935b8bbd400000",
        "0x0dcf9d8c9804459f647c14138ed50fad563b4154": "0x960db77681e940000",
        "0x0dcfe837ea1cf28c65fccec3bef1f84e59d150c0": "0xad78ebc5ac6200000",
        "0x0dd4e674bbadb1b0dc824498713dce3b5156da29": "0x93739534d28680000",
        "0x0dfbd4817050d91d9d625c02053cf61a3ee28572": "0x126e72a69a50d00000",
        "0x0e024e7f029c6aaf3a8b910f5e080873b85795aa": "0x3635c9adc5dea00000",
        "0x0e09646c99af438e99fa274cb2f9c856cb65f736": "0x678a932062e4180000",
        "0x0e0c9d005ea016c295cd795cc9213e87febc33eb": "0xabbcd4ef377580000",
        "0x0e0d6633db1e0c7f234a6df163a10e0ab39c200f": "0xad78ebc5ac6200000",
        "0x0e11d77a8977fac30d268445e531149b31541a24": "0x6c6b935b8bbd400000",
        "0x0e123d7da6d1e6fac2dcadd27029240bb39052fe": "0x3635c9adc5dea00000",
        "0x0e1801e70b6262861b1134ccbc391f568afc92f7": "0xd8d726b7177a800000",
        "0x0e2094ac1654a46ba1c4d3a40bb8c17da7f39688": "0x13683f7f3c15d80000",
        "0x0e21af1b8dbf27fcf63f37e047b87a825cbe7c27": "0xa2a15d09519be00000",
        "0x0e2e504a2d1122b5a9feee5cb1451bf4c2ace87b": "0xd5967be4fc3f100000",
        "0x0e2f8e28a681f77c583bd0ecde16634bdd7e00cd": "0x52738f659bca20000",
        "0x0e320219838e859b2f9f18b72e3d4073ca50b37d": "0x6c6b935b8bbd400000",
        "0x0e33fcbbc003510be35785b52a9c5d216bc005f4": "0x65ea3db75546600000",
        "0x0e3696cf1f4217b163d1bc12a5ea730f1c32a14a": "0xd8d726b7177a800000",
        "0x0e390f44053ddfcef0d608b35e4d9c2cbe9871bb": "0x6acb3df27e1f880000",
        "0x0e3a28c1dfafb0505bdce19fe025f506a6d01ceb": "0x6c6b935b8bbd400000",
        "0x0e3dd7d4e429fe3930a6414035f52bdc599d784d": "0x22ca3587cf4eb0000",
        "0x0e4765790352656bc656682c24fc5ef3e76a23c7": "0x286d7fc0cb4f50000",
        "0x0e498800447177b8c8afc3fdfa7f69f4051bb629": "0x7405b69b8de5610000",
        "0x0e6baaa3deb989f289620076668618e9ac332865": "0xad78ebc5ac6200000",
        "0x0e6cd664ad9c1ed64bf98749f40644b626e3792c": "0xcb49b44ba602d800000",
        "0x0e6dfd553b2e873d2aec15bd5fbb3f8472d8d394": "0x28a857425466f800000",
        "0x0e6ec313376271dff55423ab5422cc3a8b06b22b": "0xd8d726b7177a800000",
        "0x0e6ece99111cad1961c748ed3df51edd69d2a3b1": "0x152d02c7e14af6800000",
        "0x0e83b850481ab44d49e0a229a2e464902c69539b": "0x56bc75e2d63100000",
        "0x0e89eddd3fa0d71d8ab0ff8da5580686e3d4f74f": "0x6c6b935b8bbd400000",
        "0x0e9096d343c060db581a120112b278607ec6e52b": "0x1158e460913d00000",
        "0x0e9c511864a177f49be78202773f60489fe04e52": "0x14542ba12a337c00000",
        "0x0ea2a210312b3e867ee0d1cc682ce1d666f18ed5": "0x21e19e0c9bab2400000",
        "0x0eb189ef2c2d5762a963d6b7bdf9698ea8e7b48a": "0x487a9a304539440000",
        "0x0eb5b662a1c718608fd52f0c25f9378830178519": "0x14a37281a612e740000",
        "0x0ec46696ffac1f58005fa8439824f08eed1df89b": "0x21e19e0c9bab2400000",
        "0x0ec50aa823f465b9464b0bc0c4a57724a555f5d6": "0xc83d1426ac7b1f00000",
        "0x0ec5308b31282e218fc9e759d4fec5db3708cec4": "0x3643aa647986040000",
        "0x0eccf617844fd61fba62cb0e445b7ac68bcc1fbe": "0x14fe4fe63565c60000",
        "0x0ed3bb3a4eb554cfca97947d575507cdfd6d21d8": "0x1db3205fcc23d58000",
        "0x0ed76c2c3b5d50ff8fb50b3eeacd681590be1c2d": "0x56bc75e2d63100000",
        "0x0eda80f4ed074aea697aeddf283b63dbca3dc4da": "0x6c6b935b8bbd400000",
        "0x0edd4b580ff10fe06c4a03116239ef96622bae35": "0xaadec983fcff40000",
        "0x0ee391f03c765b11d69026fd1ab35395dc3802a0": "0xad78ebc5ac6200000",
        "0x0ee414940487fd24e390378285c5d7b9334d8b65": "0x914878a8c05ee00000",
        "0x0ef54ac7264d2254abbb5f8b41adde875157db7c": "0x22b1c8c1227a00000",
        "0x0ef85b49d08a75198692914eddb4b22cf5fa4450": "0x6cae30621d47200000",
        "0x0efd1789eb1244a3dede0f5de582d8963cb1f39f": "0x5150ae84a8cdf00000",
        "0x0f042c9c2fb18766f836bb59f735f27dc329fe3c": "0x21e19e0c9bab2400000",
        "0x0f049a8bdfd761de8ec02cee2829c4005b23c06b": "0xda933d8d8c6700000",
        "0x0f05f120c89e9fbc93d4ab0c5e2b4a0df092b424": "0x65a4da25d3016c00000",
        "0x0f127bbf8e311caea2ba502a33feced3f730ba42": "0xa31062beeed700000",
        "0x0f1c249cd962b00fd114a9349f6a6cc778d76c4d": "0x6c6b935b8bbd400000",
        "0x0f206e1a1da7207ea518b112418baa8b06260328": "0x2086ac351052600000",
        "0x0f24105abbdaa03fa6309ef6c188e51f714a6e59": "0xad78ebc5ac6200000",
        "0x0f26480a150961b8e30750713a94ee6f2e47fc00": "0x3635c9adc5dea00000",
        "0x0f2d8daf04b5414a0261f549ff6477b80f2f1d07": "0x2a5a058fc295ed000000",
        "0x0f2fb884c8aaff6f543ac6228bd08e4f60b0a5fd": "0xaa7da485136b840000",
        "0x0f32d9cb4d0fdaa0150656bb608dcc43ed7d9301": "0x28df8bf440db790000",
        "0x0f3665d48e9f1419cd984fc7fa92788710c8f2e4": "0x6c6b935b8bbd400000",
        "0x0f3a1023cac04dbf44f5a5fa6a9cf8508cd4fddf": "0x62a992e53a0af00000",
        "0x0f4073c1b99df60a1549d69789c7318d9403a814": "0x43c33c1937564800000",
        "0x0f46c81db780c1674ac73d314f06539ee56ebc83": "0x215f835bc769da80000",
        "0x0f4f94b9191bb7bb556aaad7c74ddb288417a50b": "0x4be4e7267b6ae00000",
        "0x0f6000de1578619320aba5e392706b131fb1de6f": "0x1b1ab319f5ec750000",
        "0x0f6e840a3f2a24647d8e43e09d45c7c335df4248": "0x878678326eac900000",
        "0x0f7515ff0e808f695e0c20485ff96ed2f7b79310": "0x3638221660a5aa8000",
        "0x0f789e30397c53bf256fc364e6ef39f853504114": "0xc55325ca7415e00000",
        "0x0f7b61c59b016322e8226cafaee9d9e76d50a1b3": "0xd8d726b7177a800000",
        "0x0f7bea4ef3f73ae0233df1e100718cbe29310bb0": "0x6c6b935b8bbd400000",
        "0x0f7bf6373f771a4601762c4dae5fbbf4fedd9cc9": "0x6c6b935b8bbd400000",
        "0x0f832a93df9d7f74cd0fb8546b7198bf5377d925": "0x7c0860e5a80dc0000",
        "0x0f83461ba224bb1e8fdd9dae535172b735acb4e0": "0xad78ebc5ac6200000",
        "0x0f85e42b1df321a4b3e835b50c00b06173968436": "0x35659ef93f0fc40000",
        "0x0f88aac9346cb0e7347fba70905475ba8b3e5ece": "0x21e19e0c9bab2400000",
        "0x0f929cf895db017af79f3ead2216b1bd69c37dc7": "0x6c6b935b8bbd400000",
        "0x0fa010ce0c731d3b628e36b91f571300e49dbeab": "0x36330322d5238c0000",
        "0x0fa5d8c5b3f294efd495ab69d768f81872508548": "0x6c6b935b8bbd400000",
        "0x0fa6c7b0973d0bae2940540e247d3627e37ca347": "0x3635c9adc5dea00000",
        "0x0fad05507cdc8f24b2be4cb7fa5d927ddb911b88": "0xa2df13f441f0098000",
        "0x0fb5d2c673bfb1ddca141b9894fd6d3f05da6720": "0x56bc75e2d63100000",
        "0x0fc9a0e34145fbfdd2c9d2a499b617d7a02969b9": "0x9c2007651b2500000",
        "0x0fcfc4065008cfd323305f6286b57a4dd7eee23b": "0x43c33c1937564800000",
        "0x0fdd65402395df9bd19fee4507ef5345f745104c": "0x10f0cf064dd59200000",
        "0x0fec4ee0d7ca180290b6bd20f9992342f60ff68d": "0x12207f0edce9718000",
        "0x0fee81ac331efd8f81161c57382bb4507bb9ebec": "0x15af880d8cdb830000",
        "0x0ffea06d7113fb6aec2869f4a9dfb09007facef4": "0xc384681b1e1740000",
        "0x10097198b4e7ee91ff82cc2f3bd95fed73c540c0": "0x6c6b935b8bbd400000",
        "0x100b4d0977fcbad4debd5e64a0497aeae5168fab": "0x110c9073b5245a0000",
        "0x101a0a64f9afcc448a8a130d4dfcbee89537d854": "0x337fe5feaf2d1800000",
        "0x102c477d69aadba9a0b0f62b7459e17fbb1c1561": "0x6c6b935b8bbd400000",
        "0x1031e0ecb54985ae21af1793950dc811888fde7c": "0x1158e460913d00000",
        "0x10346414bec6d3dcc44e50e54d54c2b8c3734e3e": "0xd8d726b7177a800000",
        "0x10389858b800e8c0ec32f51ed61a355946cc409b": "0xad78ebc5ac6200000",
        "0x1059cbc63e36c43e88f30008aca7ce058eeaa096": "0x152d02c7e14af6800000",
        "0x106ed5c719b5261477890425ae7551dc59bd255c": "0x2896a58c95be5880000",
        "0x10711c3dda32317885f0a2fd8ae92e82069b0d0b": "0xd8d726b7177a800000",
        "0x107379d4c467464f235bc18e55938aad3e688ad7": "0x2b5e3af16b1880000",
        "0x1076212d4f758c8ec7121c1c7d74254926459284": "0x7695b59b5c17b4c0000",
        "0x1078d7f61b0e56c74ee6635b2e1819ef1e3d8785": "0x3635c9adc5dea00000",
        "0x107a03cf0842dbdeb0618fb587ca69189ec92ff5": "0x6acb3df27e1f880000",
        "0x1080c1d8358a15bc84dac8253c6883319020df2c": "0x90f534608a72880000",
        "0x108a2b7c336f784779d8b54d02a8d31d9a139c0a": "0x21e19e0c9bab2400000",
        "0x108ba7c2895c50e072dc6f964932d50c282d3034": "0x1b1ae4d6e2ef500000",
        "0x108fe8ee2a13da487b22c6ab6d582ea71064d98c": "0x15ac56edc4d12c0000",
        "0x1091176be19b9964a8f72e0ece6bf8e3cfad6e9c": "0x21f2f6f0fc3c6100000",
        "0x1098c774c20ca1daac5ddb620365316d353f109c": "0x56bc75e2d63100000",
        "0x1098cc20ef84bad5146639c4cd1ca6c3996cb99b": "0xfc936392801c0000",
        "0x10a1c42dc1ba746986b985a522a73c93eae64c63": "0x3635c9adc5dea00000",
        "0x10a93457496f1108cd98e140a1ecdbae5e6de171": "0x15a99062d416180000",
        "0x10b5b34d1248fcf017f8c8ffc408ce899ceef92f": "0xe7eeba3410b740000",
        "0x10cf560964ff83c1c9674c783c0f73fcd89943fc": "0x878678326eac9000000",
        "0x10d32416722ca4e648630548ead91edd79c06aff": "0x56bc75e2d63100000",
        "0x10d945334ecde47beb9ca3816c173dfbbd0b5333": "0x4be4e7267b6ae00000",
        "0x10df681506e34930ac7a5c67a54c3e89ce92b981": "0x74c1fab8adb4540000",
        "0x10e1e3377885c42d7df218522ee7766887c05e6a": "0x1043c43cde1d398000",
        "0x10e390ad2ba33d82b37388d09c4544c6b0225de5": "0xad78ebc5ac6200000",
        "0x10f4bff0caa5027c0a6a2dcfc952824de2940909": "0x6c6b935b8bbd400000",
        "0x11001b89ed873e3aaec1155634b4681643986323": "0x3635c9adc5dea00000",
        "0x110237cf9117e767922fc4a1b78d7964da82df20": "0xd5967be4fc3f100000",
        "0x1111e5dbf45e6f906d62866f1708101788ddd571": "0x467be6533ec2e40000",
        "0x11172b278ddd44eea2fdf4cb1d16962391c453d9": "0xc62f3d9bfd4895f00000",
        "0x112634b4ec30ff786e024159f796a57939ea144e": "0x6c6acc67d7b1d40000",
        "0x11306c7d57588637780fc9fde8e98ecb008f0164": "0x6c6acc67d7b1d40000",
        "0x113612bc3ba0ee4898b49dd20233905f2f458f62": "0x2f6f10780d22cc00000",
        "0x11415fab61e0dfd4b90676141a557a869ba0bde9": "0x6f05b59d3b20000000",
        "0x114cbbbf6fb52ac414be7ec61f7bb71495ce1dfa": "0xa2a15d09519be00000",
        "0x114cfefe50170dd97ae08f0a44544978c599548d": "0x2ec887e7a14a1c0000",
        "0x116108c12084612eeda7a93ddcf8d2602e279e5c": "0x6c6b935b8bbd400000",
        "0x1164caaa8cc5977afe1fad8a7d6028ce2d57299b": "0x15af1d78b58c400000",
        "0x11675a25554607a3b6c92a9ee8f36f75edd3e336": "0x8a9aba557e36c0000",
        "0x116a09df66cb150e97578e297fb06e13040c893c": "0x6c6b935b8bbd400000",
        "0x116fef5e601642c918cb89160fc2293ba71da936": "0x2b7cc2e9c3225c0000",
        "0x1178501ff94add1c5881fe886136f6dfdbe61a94": "0x890b0c2e14fb80000",
        "0x1179c60dbd068b150b074da4be23033b20c68558": "0x24dce54d34a1a00000",
        "0x117d9aa3c4d13bee12c7500f09f5dd1c66c46504": "0xb2ad30490b2780000",
        "0x117db836377fe15455e02c2ebda40b1ceb551b19": "0x14542ba12a337c00000",
        "0x118c18b2dce170e8f445753ba5d7513cb7636d2d": "0x1dd0c885f9a0d800000",
        "0x118fbd753b9792395aef7a4d78d263cdcaabd4f7": "0x36330322d5238c0000",
        "0x11928378d27d55c520ceedf24ceb1e822d890df0": "0x1b1ae4d6e2ef5000000",
        "0x119aa64d5b7d181dae9d3cb449955c89c1f963fa": "0x25f273933db5700000",
        "0x11c0358aa6479de21866fe21071924b65e70f8b9": "0x7b53f79e888dac00000",
        "0x11d2247a221e70c2d66d17ee138d38c55ffb8640": "0x21e19e0c9bab2400000",
        "0x11d7844a471ef89a8d877555583ceebd1439ea26": "0x22369e6ba80c6880000",
        "0x11dd6185d9a8d73ddfdaa71e9b7774431c4dfec2": "0x3635c9adc5dea00000",
        "0x11e7997edd904503d77da6038ab0a4c834bbd563": "0x150894e849b3900000",
        "0x11ec00f849b6319cf51aa8dd8f66b35529c0be77": "0x6c6b935b8bbd400000",
        "0x11efb8a20451161b644a8ccebbc1d343a3bbcb52": "0xad78ebc5ac62000000",
        "0x11fefb5dc1a4598aa712640c517775dfa1d91f8c": "0x21e19e0c9bab2400000",
        "0x120f9de6e0af7ec02a07c609ca8447f157e6344c": "0xe7eeba3410b740000",
        "0x1210f80bdb826c175462ab0716e69e46c24ad076": "0x56bc75e2d63100000",
        "0x12134e7f6b017bf48e855a399ca58e2e892fa5c8": "0x3635c9adc5dea00000",
        "0x12173074980153aeaa4b0dcbc7132eadcec21b64": "0xd02ab486cedc00000",
        "0x121f855b70149ac83473b9706fb44d47828b983b": "0x4be4e7267b6ae00000",
        "0x1227e10a4dbf9caca31b1780239f557615fc35c1": "0xad78ebc5ac6200000",
        "0x122dcfd81addb97d1a0e4925c4b549806e9f3beb": "0x522035cc6e01210000",
        "0x122f56122549d168a5c5e267f52662e5c5cce5c8": "0xa076407d3f7440000",
        "0x12316fc7f178eac22eb2b25aedeadf3d75d00177": "0x43c33be05f6bfb98000",
        "0x123759f333e13e3069e2034b4f05398918119d36": "0x43c33c1937564800000",
        "0x125cc5e4d56b2bcc2ee1c709fb9e68fb177440bd": "0x6c6b935b8bbd400000",
        "0x12632388b2765ee4452b50161d1fffd91ab81f4a": "0x281d901f4fdd100000",
        "0x126897a311a14ad43b78e0920100c4426bfd6bdd": "0x34c726893f2d948000",
        "0x126d91f7ad86debb0557c612ca276eb7f96d00a1": "0x56bc75e2d63100000",
        "0x127d3fc5003bf63c0d83e93957836515fd279045": "0x610c9222e6e750000",
        "0x127db1cadf1b771cbd7475e1b272690f558c8565": "0x2f6f10780d22cc00000",
        "0x1284f0cee9d2ff2989b65574d06ffd9ab0f7b805": "0x15af1d78b58c400000",
        "0x128b908fe743a434203de294c441c7e20a86ea67": "0x26ab14e0c0e13c0000",
        "0x1293c78c7d6a443b9d74b0ba5ee7bb47fd418588": "0x16a6502f15a1e540000",
        "0x1296acded1e063af39fe8ba0b4b63df789f70517": "0x56bf91b1a65eb0000",
        "0x12aa7d86ddfbad301692feac8a08f841cb215c37": "0x76d41c62494840000",
        "0x12afbcba1427a6a39e7ba4849f7ab1c4358ac31b": "0x43c33c1937564800000",
        "0x12b5e28945bb2969f9c64c63cc05b6f1f8d6f4d5": "0x1a29e86913b74050000",
        "0x12cf8b0e465213211a5b53dfb0dd271a282c12c9": "0xd2f13f7789f00000",
        "0x12d20790b7d3dbd88c81a279b812039e8a603bd0": "0x56f985d38644b80000",
        "0x12d60d65b7d9fc48840be5f891c745ce76ee501e": "0x485e5388d0c76840000",
        "0x12d91a92d74fc861a729646db192a125b79f5374": "0xfc936392801c0000",
        "0x12e9a4ad2ad57484dd700565bddb46423bd9bd31": "0x43c30fb0884a96c0000",
        "0x12f32c0a1f2daab676fe69abd9e018352d4ccd45": "0x2b5e3af16b1880000",
        "0x12f460ae646cd2780fd35c50a6af4b9accfa85c6": "0x3635c9adc5dea00000",
        "0x12ffc1128605cb0c13709a7290506f2690977193": "0xb50fcfafebecb00000",
        "0x13032446e7d610aa00ec8c56c9b574d36ca1c016": "0x6c6b935b8bbd400000",
        "0x131c792c197d18bd045d7024937c1f84b60f4438": "0xd8d726b7177a800000",
        "0x131df8d330eb7cc7147d0a55576f05de8d26a8b7": "0xa31062beeed700000",
        "0x131faed12561bb7aee04e5185af802b1c3438d9b": "0xbdf3c4bb0328c0000",
        "0x1321b605026f4ffb296a3e0edcb390c9c85608b7": "0x6c6b935b8bbd400000",
        "0x1321ccf29739b974e5a516f18f3a843671e39642": "0xd8d726b7177a800000",
        "0x1327d759d56e0ab87af37ecf63fe01f310be100a": "0x23bc3cdb68a1800000",
        "0x1329dd19cd4baa9fc64310efeceab22117251f12": "0xad78ebc5ac6200000",
        "0x13371f92a56ea8381e43059a95128bdc4d43c5a6": "0x3635c9adc5dea00000",
        "0x133c490fa5bf7f372888e607d958fab7f955bae1": "0x55a6e79ccd1d300000",
        "0x133e4f15e1e39c53435930aaedf3e0fe56fde843": "0x1158e460913d00000",
        "0x134163be9fbbe1c5696ee255e90b13254395c318": "0xad78ebc5ac6200000",
        "0x135cecd955e5798370769230159303d9b1839f66": "0x10f0cf064dd59200000",
        "0x135d1719bf03e3f866312479fe338118cd387e70": "0x6c6b935b8bbd400000",
        "0x135eb8c0e9e101deedec11f2ecdb66ae1aae8867": "0x43c33c1937564800000",
        "0x1360e87df24c69ee6d51c76e73767ffe19a2131c": "0x4fcc1a89027f00000",
        "0x136c834bf111326d207395295b2e583ea7f33572": "0x56bc75e2d63100000",
        "0x136d4b662bbd1080cfe4445b0fa213864435b7f1": "0xd8d726b7177a800000",
        "0x136f4907cab41e27084b9845069ff2fd0c9ade79": "0xd8d726b7177a800000",
        "0x1374facd7b3f8d68649d60d4550ee69ff0484133": "0xe9ed6e11172da0000",
        "0x137cf341e8516c815814ebcd73e6569af14cf7bc": "0x3635c9adc5dea00000",
        "0x13848b46ea75beb7eaa85f59d866d77fd24cf21a": "0xa968163f0a57b400000",
        "0x139d3531c9922ad56269f6309aa789fb2485f98c": "0xd8d726b7177a800000",
        "0x139e479764b499d666208c4a8a047a97043163dd": "0x2077212aff6df00000",
        "0x13a5eecb38305df94971ef2d9e179ae6cebab337": "0x11e3ab8395c6e80000",
        "0x13acada8980affc7504921be84eb4944c8fbb2bd": "0x56d2aa3a5c09a00000",
        "0x13b9b10715714c09cfd610cf9c9846051cb1d513": "0x6acb3df27e1f880000",
        "0x13ce332dff65a6ab933897588aa23e000980fa82": "0xe020536f028f00000",
        "0x13d67a7e25f2b12cdb85585009f8acc49b967301": "0x6c6acc67d7b1d40000",
        "0x13dee03e3799952d0738843d4be8fc0a803fb20e": "0x6c6b935b8bbd400000",
        "0x13e02fb448d6c84ae17db310ad286d056160da95": "0x6c6b935b8bbd400000",
        "0x13e321728c9c57628058e93fc866a032dd0bda90": "0x26bcca23fe2ea20000",
        "0x13ec812284026e409bc066dfebf9d5a4a2bf801e": "0x57473d05dabae80000",
        "0x140129eaa766b5a29f5b3af2574e4409f8f6d3f1": "0x15af1d78b58c4000000",
        "0x140518a3194bad1350b8949e650565debe6db315": "0x6c6b935b8bbd400000",
        "0x1406854d149e081ac09cb4ca560da463f3123059": "0x487a9a304539440000",
        "0x140ca28ff33b9f66d7f1fc0078f8c1eef69a1bc0": "0x56bc75e2d631000000",
        "0x140fba58dbc04803d84c2130f01978f9e0c73129": "0x15af1d78b58c400000",
        "0x141a5e39ee2f680a600fbf6fa297de90f3225cdd": "0x21e19e0c9bab2400000",
        "0x14254ea126b52d0142da0a7e188ce255d8c47178": "0x2a034919dfbfbc0000",
        "0x142b87c5043ffb5a91df18c2e109ced6fe4a71db": "0xad78ebc5ac6200000",
        "0x143c639752caeecf6a997d39709fc8f19878c7e8": "0x6acb3df27e1f880000",
        "0x143d536b8b1cb84f56a39e0bc81fd5442bcacce1": "0x56bc75e2d63100000",
        "0x143f5f1658d9e578f4f3d95f80c0b1bd3933cbda": "0x50c5e761a444080000",
        "0x14410fb310711be074a80883c635d0ef6afb2539": "0x6c6b935b8bbd400000",
        "0x144b19f1f66cbe318347e48d84b14039466c5909": "0x6c6b935b8bbd400000",
        "0x145250b06e4fa7cb2749422eb817bdda8b54de5f": "0xbdf3c4bb0328c0000",
        "0x145e0600e2a927b2dd8d379356b45a2e7d51d3ae": "0x8a02ab400bb2cb8000",
        "0x145e1de0147911ccd880875fbbea61f6a142d11d": "0xd8d726b7177a800000",
        "0x1463a873555bc0397e575c2471cf77fa9db146e0": "0x21e19e0c9bab2400000",
        "0x1479a9ec7480b74b5db8fc499be352da7f84ee9c": "0x3635c9adc5dea00000",
        "0x147af46ae9ccd18bb35ca01b353b51990e49dce1": "0xd8d726b7177a800000",
        "0x147f4210ab5804940a0b7db8c14c28396b62a6bf": "0x6c6b935b8bbd400000",
        "0x14830704e99aaad5c55e1f502b27b22c12c91933": "0x219c3a7b1966300000",
        "0x149b6dbde632c19f5af47cb493114bebd9b03c1f": "0x28a857425466f800000",
        "0x149ba10f0da2725dc704733e87f5a524ca88515e": "0x1ab2cf7c9f87e200000",
        "0x14a7352066364404db50f0d0d78d754a22198ef4": "0x65ea3db75546600000",
        "0x14ab164b3b524c82d6abfbc0de831126ae8d1375": "0x6c6b935b8bbd400000",
        "0x14b1603ec62b20022033eec4d6d6655ac24a015a": "0x2b5e3af16b1880000",
        "0x14c63ba2dcb1dd4df33ddab11c4f0007fa96a62d": "0x34841b6057afab00000",
        "0x14cdddbc8b09e6675a9e9e05091cb92238c39e1e": "0x11478b7c30abc300000",
        "0x14d00aad39a0a7d19ca05350f7b03727f08dd82e": "0x1b1ae4d6e2ef500000",
        "0x14eec09bf03e352bd6ff1b1e876be664ceffd0cf": "0x116dc3a8994b30000",
        "0x14f221159518783bc4a706676fc4f3c5ee405829": "0xad78ebc5ac6200000",
        "0x14fcd1391e7d732f41766cdacd84fa1deb9ffdd2": "0x6c6b935b8bbd400000",
        "0x150e3dbcbcfc84ccf89b73427763a565c23e60d0": "0x22b1c8c1227a00000",
        "0x1518627b88351fede796d3f3083364fbd4887b0c": "0x3635c9adc5dea000000",
        "0x15224ad1c0face46f9f556e4774a3025ad06bd52": "0xb98bc829a6f90000",
        "0x152f2bd229ddf3cb0fdaf455c183209c0e1e39a2": "0x6c6b935b8bbd400000",
        "0x152f4e860ef3ee806a502777a1b8dbc91a907668": "0x2086ac351052600000",
        "0x153c08aa8b96a611ef63c0253e2a4334829e579d": "0x155bd9307f9fe80000",
        "0x153cf2842cb9de876c276fa64767d1a8ecf573bb": "0x6c6b935b8bbd400000",
        "0x153ef58a1e2e7a3eb6b459a80ab2a547c94182a2": "0x14542ba12a337c000000",
        "0x154459fa2f21318e3434449789d826cdc1570ce5": "0x6c6b935b8bbd400000",
        "0x1547b9bf7ad66274f3413827231ba405ee8c88c1": "0x3a9d5baa4abf1d00000",
        "0x1548b770a5118ede87dba2f690337f616de683ab": "0x1c995685e0bf870000",
        "0x15528350e0d9670a2ea27f7b4a33b9c0f9621d21": "0xd8d8583fa2d52f0000",
        "0x155b3779bb6d56342e2fda817b5b2d81c7f41327": "0x2b8aa3a076c9c0000",
        "0x1565af837ef3b0bd4e2b23568d5023cd34b16498": "0x1551e9724ac4ba0000",
        "0x15669180dee29598869b08a721c7d24c4c0ee63f": "0x3635c9adc5dea00000",
        "0x1572cdfab72a01ce968e78f5b5448da29853fbdd": "0x112626c49060fa60000",
        "0x157559adc55764cc6df79323092534e3d6645a66": "0x14542ba12a337c00000",
        "0x1578bdbc371b4d243845330556fff2d5ef4dff67": "0x56bc75e2d63100000",
        "0x157eb3d3113bd3b597714d3a954edd018982a5cb": "0x6c6b935b8bbd400000",
        "0x1584a2c066b7a455dbd6ae2807a7334e83c35fa5": "0x70c1cc73b00c80000",
        "0x15874686b6733d10d703c9f9bec6c52eb8628d67": "0x6c6b935b8bbd400000",
        "0x158a0d619253bf4432b5cd02c7b862f7c2b75636": "0x75bac7c5b12188000",
        "0x1598127982f2f8ad3b6b8fc3cf27bf617801ba2b": "0x960db77681e940000",
        "0x159adce27aa10b47236429a34a5ac42cad5b6416": "0x6bf90a96edbfa718000",
        "0x15a0aec37ff9ff3d5409f2a4f0c1212aaccb0296": "0x3635c9adc5dea00000",
        "0x15aa530dc36958b4edb38eee6dd9e3c77d4c9145": "0x6c6b935b8bbd400000",
        "0x15acb61568ec4af7ea2819386181b116a6c5ee70": "0x690836c0af5f5600000",
        "0x15b96f30c23b8664e7490651066b00c4391fbf84": "0x1642e9df4876290000",
        "0x15c7edb8118ee27b342285eb5926b47a855bc7a5": "0x1158e460913d00000",
        "0x15d99468507aa0413fb60dca2adc7f569cb36b54": "0x6c6b935b8bbd400000",
        "0x15dbb48c98309764f99ced3692dcca35ee306bac": "0x1fc3842bd1f071c00000",
        "0x15dcafcc2bace7b55b54c01a1c514626bf61ebd8": "0x1fd933494aa5fe00000",
        "0x15e3b584056b62c973cf5eb096f1733e54c15c91": "0x32c75a0223ddf30000",
        "0x15ebd1c7cad2aff19275c657c4d808d010efa0f5": "0xadf30ba70c8970000",
        "0x15ee0fc63ebf1b1fc49d7bb38f8863823a2e17d2": "0x678a932062e4180000",
        "0x15f1b352110d68901d8f67aac46a6cfafe031477": "0xad78ebc5ac6200000",
        "0x15f2b7b16432ee50a5f55b41232f6334ed58bdc0": "0x15af1d78b58c400000",
        "0x16019a4dafab43f4d9bf4163fae0847d848afca2": "0x15bc70139f74a0000",
        "0x160226efe7b53a8af462d117a0108089bdecc2d1": "0xadf30ba70c8970000",
        "0x160ceb6f980e04315f53c4fc988b2bf69e284d7d": "0x10910d4cdc9f60000",
        "0x161caf5a972ace8379a6d0a04ae6e163fe21df2b": "0x152d02c7e14af6800000",
        "0x161d26ef6759ba5b9f20fdcd66f16132c352415e": "0x6c6b935b8bbd400000",
        "0x162110f29eac5f7d02b543d8dcd5bb59a5e33b73": "0x6c6b935b8bbd400000",
        "0x162ba503276214b509f97586bd842110d103d517": "0x1e7ffd8895c22680000",
        "0x162d76c2e6514a3afb6fe3d3cb93a35c5ae783f1": "0x6c6b935b8bbd400000",
        "0x163bad4a122b457d64e8150a413eae4d07023e6b": "0x104e70464b1580000",
        "0x163cc8be227646cb09719159f28ed09c5dc0dce0": "0x487a9a304539440000",
        "0x163dca73d7d6ea3f3e6062322a8734180c0b78ef": "0x9f742003cb7dfc0000",
        "0x164d7aac3eecbaeca1ad5191b753f173fe12ec33": "0x285652b8a468690000",
        "0x16526c9edf943efa4f6d0f0bae81e18b31c54079": "0x35659ef93f0fc40000",
        "0x165305b787322e25dc6ad0cefe6c6f334678d569": "0x6c6b935b8bbd400000",
        "0x1665ab1739d71119ee6132abbd926a279fe67948": "0x56bc75e2d63100000",
        "0x166bf6dab22d841b486c38e7ba6ab33a1487ed8c": "0x43c33c1937564800000",
        "0x167699f48a78c615512515739958993312574f07": "0x21d3bd55e803c0000",
        "0x1678c5f2a522393225196361894f53cc752fe2f3": "0x68f365aea1e4400000",
        "0x167ce7de65e84708595a525497a3eb5e5a665073": "0x1f314773666fc40000",
        "0x167e3e3ae2003348459392f7dfce44af7c21ad59": "0x1b1ae4d6e2ef500000",
        "0x1680cec5021ee93050f8ae127251839e74c1f1fd": "0x2c61461e5d743d68000",
        "0x16816aac0ede0d2d3cd442da79e063880f0f1d67": "0x6c6b935b8bbd400000",
        "0x168b5019b818691644835fe69bf229e17112d52c": "0x5ede20f01a459800000",
        "0x168bdec818eafc6d2992e5ef54aa0e1601e3c561": "0x3637507a30abeb0000",
        "0x168d30e53fa681092b52e9bae15a0dcb41a8c9bb": "0x56bc75e2d63100000",
        "0x169bbefc41cfd7d7cbb8dfc63020e9fb06d49546": "0x6c6b935b8bbd400000",
        "0x16a58e985dccd707a594d193e7cca78b5d027849": "0x49b9ca9a6943400000",
        "0x16a9e9b73ae98b864d1728798b8766dbc6ea8d12": "0x33e7b44b0db5040000",
        "0x16aa52cb0b554723e7060f21f327b0a68315fea3": "0xd8d726b7177a80000",
        "0x16abb8b021a710bdc78ea53494b20614ff4eafe8": "0x890b0c2e14fb80000",
        "0x16afa787fc9f94bdff6976b1a42f430a8bf6fb0f": "0x6c6b935b8bbd400000",
        "0x16bae5d24eff91778cd98b4d3a1cc3162f44aa77": "0x15be6174e1912e0000",
        "0x16bc40215abbd9ae5d280b95b8010b4514ff1292": "0xad78ebc5ac6200000",
        "0x16be75e98a995a395222d00bd79ff4b6e638e191": "0x79f905c6fd34e800000",
        "0x16c1bf5b7dc9c83c179efacbcf2eb174e3561cb3": "0x3635c9adc5dea00000",
        "0x16c7b31e8c376282ac2271728c31c95e35d952c3": "0x6c6b935b8bbd400000",
        "0x16f313cf8ad000914a0a176dc6a4342b79ec2538": "0x6c6b935b8bbd400000",
        "0x16ffac84032940f0121a09668b858a7e79ffa3bb": "0xd24ada6e1087110000",
        "0x1703b4b292b8a9deddede81bb25d89179f6446b6": "0x42b65a455e8b1680000",
        "0x17049311101d817efb1d65910f663662a699c98c": "0x6c68ccd09b022c0000",
        "0x1704cefcfb1331ec7a78388b29393e85c1af7916": "0x15af1d78b58c400000",
        "0x170a88a8997f92d238370f1affdee6347050b013": "0xa2ac77351488300000",
        "0x17108dab2c50f99de110e1b3b3b4cd82f5df28e7": "0x35203b67bccad00000",
        "0x17125b59ac51cee029e4bd78d7f5947d1ea49bb2": "0x4a89f54ef0121c00000",
        "0x171ad9a04bedc8b861e8ed4bddf5717813b1bb48": "0x15af1d78b58c400000",
        "0x171ca02a8b6d62bf4ca47e906914079861972cb2": "0xad78ebc5ac6200000",
        "0x1722c4cbe70a94b6559d425084caeed4d6e66e21": "0xd8d726b7177a800000",
        "0x17580b766f7453525ca4c6a88b01b50570ea088c": "0x56bc75e2d63100000",
        "0x17589a6c006a54cad70103123aae0a82135fdeb4": "0xd8d726b7177a800000",
        "0x175a183a3a235ffbb03ba835675267229417a091": "0x3635c9adc5dea000000",
        "0x175feeea2aa4e0efda12e1588d2f483290ede81a": "0xad78ebc5ac6200000",
        "0x1765361c2ec2f83616ce8363aae21025f2566f40": "0x10f0cf064dd59200000",
        "0x1767525c5f5a22ed80e9d4d7710f0362d29efa33": "0x15af1d78b58c400000",
        "0x17762560e82a93b3f522e0e524adb8612c3a7470": "0x3635c9adc5dea00000",
        "0x177dae78bc0113d8d39c4402f2a641ae2a105ab8": "0x6292425620b4480000",
        "0x1784948bf99848c89e445638504dd698271b5924": "0x1474c410d87baee0000",
        "0x1788da9b57fd05edc4ff99e7fef301519c8a0a1e": "0x6c6b935b8bbd400000",
        "0x178eaf6b8554c45dfde16b78ce0c157f2ee31351": "0x1158e460913d000000",
        "0x17961d633bcf20a7b029a7d94b7df4da2ec5427f": "0xc6ff070f1938b8000",
        "0x1796bcc97b8abc717f4b4a7c6b1036ea2182639f": "0x1341f91cd8e3510000",
        "0x17993d312aa1106957868f6a55a5e8f12f77c843": "0x1865e814f4142e8000",
        "0x179a825e0f1f6e985309668465cffed436f6aea9": "0x1158e460913d00000",
        "0x17b2d6cf65c6f4a347ddc6572655354d8a412b29": "0x6c6b935b8bbd400000",
        "0x17b807afa3ddd647e723542e7b52fee39527f306": "0x15af40ffa7fc010000",
        "0x17c0478657e1d3d17aaa331dd429cecf91f8ae5d": "0x3634fb9f1489a70000",
        "0x17c0fef6986cfb2e4041f9979d9940b69dff3de2": "0xd8d726b7177a800000",
        "0x17d4918dfac15d77c47f9ed400a850190d64f151": "0x6c6b935b8bbd400000",
        "0x17d521a8d9779023f7164d233c3b6420ffd223ed": "0x1158e460913d00000",
        "0x17d931d4c56294dcbe77c8655be4695f006d4a3c": "0x6c6b935b8bbd400000",
        "0x17df49518d73b129f0da36b1c9b40cb66420fdc7": "0x21e19e0c9bab2400000",
        "0x17e4a0e52bac3ee44efe0954e753d4b85d644e05": "0x6c6b935b8bbd400000",
        "0x17e584e810e567702c61d55d434b34cdb5ee30f6": "0x10f0cf064dd59200000",
        "0x17e82e7078dc4fd9e879fb8a50667f53a5c54591": "0xad78ebc5ac6200000",
        "0x17e86f3b5b30c0ba59f2b2e858425ba89f0a10b0": "0x6c6b935b8bbd400000",
        "0x17ee9f54d4ddc84d670eff11e54a659fd72f4455": "0x3635c9adc5dea000000",
        "0x17ef4acc1bf147e326749d10e677dcffd76f9e06": "0x87751f4e0e1b5300000",
        "0x17f14632a7e2820be6e8f6df823558283dadab2d": "0x6c6b935b8bbd400000",
        "0x17f523f117bc9fe978aa481eb4f5561711371bc8": "0x6c69f73e29134e0000",
        "0x17fd9b551a98cb61c2e07fbf41d3e8c9a530cba5": "0x1768c308193048000",
        "0x180478a655d78d0f3b0c4f202b61485bc4002fd5": "0x6c6b935b8bbd400000",
        "0x18136c9df167aa17b6f18e22a702c88f4bc28245": "0xd8d726b7177a800000",
        "0x1815279dff9952da3be8f77249dbe22243377be7": "0x1017cb76e7b26640000",
        "0x181fbba852a7f50178b1c7f03ed9e58d54162929": "0x241a9b4f617a280000",
        "0x1827039f09570294088fddf047165c33e696a492": "0x205b4dfa1ee74780000",
        "0x182db85293f606e88988c3704cb3f0c0bbbfca5a": "0x73f75d1a085ba0000",
        "0x1848003c25bfd4aa90e7fcb5d7b16bcd0cffc0d8": "0x3635c9adc5dea00000",
        "0x184a4f0beb71ffd558a6b6e8f228b78796c4cf3e": "0x28a857425466f800000",
        "0x184d86f3466ae6683b19729982e7a7e1a48347b2": "0x21e19e0c9bab2400000",
        "0x1851a063ccdb30549077f1d139e72de7971197d5": "0x6c6b935b8bbd400000",
        "0x185546e8768d506873818ac9751c1f12116a3bef": "0xad78ebc5ac6200000",
        "0x1858cf11aea79f5398ad2bb22267b5a3c952ea74": "0x215f835bc769da80000",
        "0x185a7fc4ace368d233e620b2a45935661292bdf2": "0x43c33c1937564800000",
        "0x1864a3c7b48155448c54c88c708f166709736d31": "0x73f75d1a085ba0000",
        "0x186afdc085f2a3dce4615edffbadf71a11780f50": "0xad78ebc5ac6200000",
        "0x186b95f8e5effddcc94f1a315bf0295d3b1ea588": "0x6c6acc67d7b1d40000",
        "0x187d9f0c07f8eb74faaad15ebc7b80447417f782": "0x1158e460913d00000",
        "0x1895a0eb4a4372722fcbc5afe6936f289c88a419": "0x3154c9729d05780000",
        "0x1899f69f653b05a5a6e81f480711d09bbf97588c": "0x69fb133df750ac0000",
        "0x18a6d2fc52be73084023c91802f05bc24a4be09f": "0x6c6b935b8bbd400000",
        "0x18b0407cdad4ce52600623bd5e1f6a81ab61f026": "0x1151ccf0c654c68000",
        "0x18b8bcf98321da61fb4e3eacc1ec5417272dc27e": "0x2fb474098f67c00000",
        "0x18c6723a6753299cb914477d04a3bd218df8c775": "0x3635c9adc5dea00000",
        "0x18e113d8177c691a61be785852fa5bb47aeebdaf": "0x487a9a304539440000",
        "0x18e4ce47483b53040adbab35172c01ef64506e0c": "0x1e7e4171bf4d3a00000",
        "0x18e53243981aabc8767da10c73449f1391560eaa": "0x14542ba12a337c00000",
        "0x18fa8625c9dc843c78c7ab259ff87c9599e07f10": "0x3635c9adc5dea00000",
        "0x18fb09188f27f1038e654031924f628a2106703d": "0x6c6b935b8bbd400000",
        "0x18fccf62d2c3395453b7587b9e26f5cff9eb7482": "0x3635c9adc5dea00000",
        "0x191313525238a21c767457a91374f02200c55448": "0x64f5fdf494f780000",
        "0x1914f1eb95d1277e93b6e61b668b7d77f13a11a1": "0x34957444b840e80000",
        "0x1923cfc68b13ea7e2055803645c1e320156bd88d": "0x487a9a304539440000",
        "0x19336a236ded755872411f2e0491d83e3e00159e": "0x32f51edbaaa3300000",
        "0x1933e334c40f3acbad0c0b851158206924beca3a": "0x1995eaf01b896188000",
        "0x1937c5c515057553ccbd46d5866455ce66290284": "0xd3c21bcecceda1000000",
        "0x193ac65183651800e23580f8f0ead3bb597eb8a4": "0x2b62abcfb910a0000",
        "0x193d37ed347d1c2f4e35350d9a444bc57ca4db43": "0x340aad21b3b700000",
        "0x1940dc9364a852165f47414e27f5002445a4f143": "0x24c2dff6a3c7c480000",
        "0x1945fe377fe6d4b71e3e791f6f17db243c9b8b0f": "0x7679e7beb988360000",
        "0x194a6bb302b8aba7a5b579df93e0df1574967625": "0x1b1ae4d6e2ef500000",
        "0x194cebb4929882bf3b4bf9864c2b1b0f62c283f9": "0x1ef861531f74aa0000",
        "0x194ff44aefc17bd20efd7a204c47d1620c86db5d": "0xa29909687f6aa40000",
        "0x194ffe78bbf5d20dd18a1f01da552e00b7b11db1": "0x17b7883c06916600000",
        "0x1953313e2ad746239cb2270f48af34d8bb9c4465": "0x6c6b935b8bbd400000",
        "0x19571a2b8f81c6bcf66ab3a10083295617150003": "0x1ab2cf7c9f87e20000",
        "0x19687daa39c368139b6e7be60dc1753a9f0cbea3": "0x1b1ae4d6e2ef5000000",
        "0x196c02210a450ab0b36370655f717aa87bd1c004": "0xe10ace157dbc00000",
        "0x196e85df7e732b4a8f0ed03623f4db9db0b8fa31": "0x125b92f5cef248000",
        "0x19732bf973055dbd91a4533adaa2149a91d38380": "0x6c6b935b8bbd400000",
        "0x197672fd39d6f246ce66a790d13aa922d70ea109": "0x3635c9adc5dea00000",
        "0x19798cbda715ea9a9b9d6aab942c55121e98bf91": "0x410d586a20a4c00000",
        "0x198bfcf1b07ae308fa2c02069ac9dafe7135fb47": "0x1158e460913d00000",
        "0x198ef1ec325a96cc354c7266a038be8b5c558f67": "0x80d1e4373e7f21da0000",
        "0x19918aa09e7d494e98ffa5db50350892f7156ac6": "0x21e19e0c9bab2400000",
        "0x19b36b0c87ea664ed80318dc77b688dde87d95a5": "0x699f499802303d0000",
        "0x19df9445a81c1b3d804aeaeb6f6e204e4236663f": "0x206d94e6a49878000",
        "0x19e5dea3370a2c746aae34a37c531f41da264e83": "0xad78ebc5ac6200000",
        "0x19e7f3eb7bf67f3599209ebe08b62ad3327f8cde": "0x6c6b935b8bbd400000",
        "0x19e94e620050aad766b9e1bad931238312d4bf49": "0x81e32df972abf00000",
        "0x19ecf2abf40c9e857b252fe1dbfd3d4c5d8f816e": "0x6c6b935b8bbd400000",
        "0x19f5caf4c40e6908813c0745b0aea9586d9dd931": "0x23fed9e1fa2b600000",
        "0x19f643e1a8fa04ae16006028138333a59a96de87": "0x1158e460913d00000",
        "0x19f99f2c0b46ce8906875dc9f90ae104dae35594": "0xf4575a5d4d162a0000",
        "0x19ff244fcfe3d4fa2f4fd99f87e55bb315b81eb6": "0xad78ebc5ac6200000",
        "0x1a04cec420ad432215246d77fe178d339ed0b595": "0x11216185c29f700000",
        "0x1a04d5389eb006f9ce880c30d15353f8d11c4b31": "0x39d84b2186dc9100000",
        "0x1a0841b92a7f7075569dc4627e6b76cab05ade91": "0x52663ccab1e1c00000",
        "0x1a085d43ec92414ea27b914fe767b6d46b1eef44": "0x641e8a13563d8f80000",
        "0x1a09fdc2c7a20e23574b97c69e93deba67d37220": "0x6c4fd1ee246e780000",
        "0x1a0a1ddfb031e5c8cc1d46cf05842d50fddc7130": "0x3635c9adc5dea00000",
        "0x1a1c9a26e0e02418a5cf687da75a275c622c9440": "0x10f0cf064dd59200000",
        "0x1a201b4327cea7f399046246a3c87e6e03a3cda8": "0x3635c9adc5dea00000",
        "0x1a2434cc774422d48d53d59c5d562cce8407c94b": "0x1a055690d9db80000",
        "0x1a25e1c5bc7e5f50ec16f8885f210ea1b938800e": "0xd8d726b7177a800000",
        "0x1a2694ec07cf5e4d68ba40f3e7a14c53f3038c6e": "0x3636cd06e2db3a8000",
        "0x1a3520453582c718a21c42375bc50773255253e1": "0x2ad373ce668e980000",
        "0x1a376e1b2d2f590769bb858d4575320d4e149970": "0x106712576391d180000",
        "0x1a3a330e4fcb69dbef5e6901783bf50fd1c15342": "0xe3aeb5737240a00000",
        "0x1a4ec6a0ae7f5a9427d23db9724c0d0cffb2ab2f": "0x9b41fbf9e0aec0000",
        "0x1a505e62a74e87e577473e4f3afa16bedd3cfa52": "0x1b1ae4d6e2ef500000",
        "0x1a5ee533acbfb3a2d76d5b685277b796c56a052b": "0x6c6b935b8bbd400000",
        "0x1a644a50cbc2aee823bd2bf243e825be4d47df02": "0x56be03ca3e47d8000",
        "0x1a7044e2383f8708305b495bd1176b92e7ef043a": "0xad78ebc5ac6200000",
        "0x1a79c7f4039c67a39d7513884cdc0e2c34222490": "0x1158e460913d00000",
        "0x1a89899cbebdbb64bb26a195a63c08491fcd9eee": "0x6c6b935b8bbd400000",
        "0x1a8a5ce414de9cd172937e37f2d59cff71ce57a0": "0x21e19e0c9bab2400000",
        "0x1a95a8a8082e4652e4170df9271cb4bb4305f0b2": "0x2b5e3af16b1880000",
        "0x1a95c9b7546b5d1786c3858fb1236446bc0ca4ce": "0x6acb3df27e1f880000",
        "0x1a987e3f83de75a42f1bde7c997c19217b4a5f24": "0x6c6b935b8bbd400000",
        "0x1a9e702f385dcd105e8b9fa428eea21c57ff528a": "0x4be4e7267b6ae00000",
        "0x1aa1021f550af158c747668dd13b463160f95a40": "0x4fb0591b9b30380000",
        "0x1aa27699cada8dc3a76f7933aa66c71919040e88": "0x15af1d78b58c400000",
        "0x1aa40270d21e5cde86b6316d1ac3c533494b79ed": "0x1158e460913d00000",
        "0x1ab53a11bcc63ddfaa40a02b9e186496cdbb8aff": "0x6c3f2aac800c000000",
        "0x1abc4e253b080aeb437984ab05bca0979aa43e1c": "0x3635c9adc5dea00000",
        "0x1ac089c3bc4d82f06a20051a9d732dc0e734cb61": "0x25f69d63a6ce0e0000",
        "0x1ad4563ea5786be1159935abb0f1d5879c3e7372": "0x14542ba12a337c00000",
        "0x1ad72d20a76e7fcc6b764058f48d417d496fa6cd": "0x6c6b935b8bbd400000",
        "0x1adaf4abfa867db17f99af6abebf707a3cf55df6": "0x14542ba12a337c00000",
        "0x1af60343360e0b2d75255210375720df21db5c7d": "0x3635c9adc5dea00000",
        "0x1afcc585896cd0ede129ee2de5c19ea811540b64": "0xaf2aba0c8e5bef8000",
        "0x1b05ea6a6ac8af7cb6a8b911a8cce8fe1a2acfc8": "0x6c6b935b8bbd400000",
        "0x1b0b31afff4b6df3653a94d7c87978ae35f34aae": "0x133910453fa9840000",
        "0x1b0d076817e8d68ee2df4e1da1c1142d198c4435": "0x54069233bf7f780000",
        "0x1b130d6fa51d5c48ec8d1d52dc8a227be8735c8a": "0x6c6b935b8bbd400000",
        "0x1b23cb8663554871fbbe0d9e60397efb6faedc3e": "0xad78ebc5ac6200000",
        "0x1b2639588b55c344b023e8de5fd4087b1f040361": "0x5150ae84a8cdf00000",
        "0x1b3920d001c43e72b24e7ca46f0fd6e0c20a5ff2": "0x6c6b935b8bbd400000",
        "0x1b3cb81e51011b549d78bf720b0d924ac763a7c2": "0x7695a92c20d6fe000000",
        "0x1b43232ccd4880d6f46fa751a96cd82473315841": "0x4563918244f400000",
        "0x1b4bbcb18165211b265b280716cb3f1f212176e8": "0x199ad37d03d0608000",
        "0x1b4d07acd38183a61bb2783d2b7b178dd502ac8d": "0xad78ebc5ac6200000",
        "0x1b636b7a496f044d7359596e353a104616436f6b": "0x1388ea95c33f1d0000",
        "0x1b6495891240e64e594493c2662171db5e30ce13": "0x95887d695ed580000",
        "0x1b6610fb68bad6ed1cfaa0bbe33a24eb2e96fafb": "0x83d6c7aab63600000",
        "0x1b799033ef6dc7127822f74542bb22dbfc09a308": "0x56bc75e2d63100000",
        "0x1b7ed974b6e234ce81247498429a5bd4a0a2d139": "0x6c6b935b8bbd400000",
        "0x1b826fb3c012b0d159e294ba5b8a499ff3c0e03c": "0x6c6b935b8bbd400000",
        "0x1b8aa0160cd79f005f88510a714913d70ad3be33": "0xaeffb83079ad00000",
        "0x1b8bd6d2eca20185a78e7d98e8e185678dac4830": "0x3894f0e6f9b9f700000",
        "0x1b9b2dc2960e4cb9408f7405827c9b59071612fd": "0x3635c9adc5dea00000",
        "0x1ba9228d388727f389150ea03b73c82de8eb2e09": "0x18974fbe177c9280000",
        "0x1ba9f7997e5387b6b2aa0135ac2452fe36b4c20d": "0x2e141ea081ca080000",
        "0x1bba03ff6b4ad5bf18184acb21b188a399e9eb4a": "0x61093d7c2c6d380000",
        "0x1bbc199e586790be87afedc849c04726745c5d7b": "0xd8d726b7177a800000",
        "0x1bbc60bcc80e5cdc35c5416a1f0a40a83dae867b": "0x6c6b935b8bbd400000",
        "0x1bc44c8761231ba1f11f5faa40fa669a013e12ce": "0xb0952c45aeaad0000",
        "0x1bcf3441a866bdbe963009ce33c81cbb0261b02c": "0x9ddc1e3b901180000",
        "0x1bd28cd5c78aee51357c95c1ef9235e7c18bc854": "0x6c6b935b8bbd400000",
        "0x1bd8ebaa7674bb18e19198db244f570313075f43": "0x821ab0d4414980000",
        "0x1bd909ac0d4a1102ec98dcf2cca96a0adcd7a951": "0x11651ac3e7a758000",
        "0x1be3542c3613687465f15a70aeeb81662b65cca8": "0x6c6b935b8bbd400000",
        "0x1bea4df5122fafdeb3607eddda1ea4ffdb9abf2a": "0x12c1b6eed03d280000",
        "0x1bec4d02ce85fc48feb62489841d85b170586a9b": "0x821ab0d44149800000",
        "0x1bf974d9904f45ce81a845e11ef4cbcf27af719e": "0x56bc75e2d63100000",
        "0x1c045649cd53dc23541f8ed4d341812808d5dd9c": "0x17b7883c06916600000",
        "0x1c128bd6cda5fca27575e4b43b3253c8c4172afe": "0x6c6b935b8bbd400000",
        "0x1c13d38637b9a47ce79d37a86f50fb409c060728": "0x487a9a304539440000",
        "0x1c2010bd662df417f2a271879afb13ef4c88a3ae": "0xd8d726b7177a800000",
        "0x1c257ad4a55105ea3b58ed374b198da266c85f63": "0x21e19e0c9bab2400000",
        "0x1c2e3607e127caca0fbd5c5948adad7dd830b285": "0x42bf06b78ed3b500000",
        "0x1c356cfdb95febb714633b28d5c132dd84a9b436": "0x15af1d78b58c40000",
        "0x1c35aab688a0cd8ef82e76541ba7ac39527f743b": "0x1b1ae4d6e2ef500000",
        "0x1c3ef05dae9dcbd489f3024408669de244c52a02": "0x43c33c1937564800000",
        "0x1c4af0e863d2656c8635bc6ffec8dd9928908cb5": "0x6c6b935b8bbd400000",
        "0x1c601993789207f965bb865cbb4cd657cce76fc0": "0x5541a7037503f0000",
        "0x1c63fa9e2cbbf23c49fcdef1cbabfe6e0d1e14c1": "0x3635c9adc5dea00000",
        "0x1c6702b3b05a5114bdbcaeca25531aeeb34835f4": "0x58556bead45dcae0000",
        "0x1c68a66138783a63c98cc675a9ec77af4598d35e": "0x2b746f48f0f120000",
        "0x1c73d00b6e25d8eb9c1ff4ad827b6b9e9cf6d20c": "0xad78ebc5ac6200000",
        "0x1c751e7f24df9d94a637a5dedeffc58277b5db19": "0xae8e7a0bb575d00000",
        "0x1c7cb2fe6bf3e09cbcdc187af38fa8f5053a70b6": "0x21c84f742d0cead8000",
        "0x1c89060f987c518fa079ec2c0a5ebfa30f5d20f7": "0x80bfbefcb5f0bc00000",
        "0x1c94d636e684eb155895ce6db4a2588fba1d001b": "0x6c6b935b8bbd400000",
        "0x1c99fe9bb6c6d1066d912099547fd1f4809eacd9": "0x6c6b935b8bbd400000",
        "0x1cb450920078aab2317c7db3b38af7dd298b2d41": "0x126e72a69a50d00000",
        "0x1cb5f33b4d488936d13e3161da33a1da7df70d1b": "0xad78ebc5ac6200000",
        "0x1cb6b2d7cfc559b7f41e6f56ab95c7c958cd0e4c": "0x487a9a304539440000",
        "0x1cc1d3c14f0fb8640e36724dc43229d2ea7a1e48": "0x5c283d410394100000",
        "0x1cc90876004109cd79a3dea866cb840ac364ba1b": "0x6c6b935b8bbd400000",
        "0x1cd1f0a314cbb200de0a0cb1ef97e920709d97c2": "0x6c6b935b8bbd400000",
        "0x1cda411bd5163baeca1e558563601ce720e24ee1": "0xfc936392801c0000",
        "0x1ce81d31a7923022e125bf48a3e03693b98dc9dd": "0x6c6b935b8bbd400000",
        "0x1cebf0985d7f680aaa915c44cc62edb49eab269e": "0x3635c9adc5dea00000",
        "0x1ced6715f862b1ff86058201fcce5082b36e62b2": "0x16a5e60bee273b10000",
        "0x1cf04cb14380059efd3f238b65d5beb86afa14d8": "0x1158e460913d00000",
        "0x1cf105ab23023b554c583e86d7921179ee83169f": "0x6acb3df27e1f880000",
        "0x1cf2eb7a8ccac2adeaef0ee87347d535d3b94058": "0x6c6b935b8bbd400000",
        "0x1cfcf7517f0c08459720942b647ad192aa9c8828": "0x2b5e3af16b18800000",
        "0x1d09ad2412691cc581c1ab36b6f9434cd4f08b54": "0x17b7883c06916600000",
        "0x1d157c5876c5cad553c912caf6ce2d5277e05c73": "0x6c6b935b8bbd400000",
        "0x1d2615f8b6ca5012b663bdd094b0c5137c778ddf": "0x21e19e0c9bab2400000",
        "0x1d29c7aab42b2048d2b25225d498dba67a03fbb2": "0xad78ebc5ac6200000",
        "0x1d341fa5a3a1bd051f7db807b6db2fc7ba4f9b45": "0xfc936392801c0000",
        "0x1d344e962567cb27e44db9f2fac7b68df1c1e6f7": "0x692ae8897081d00000",
        "0x1d36683063b7e9eb99462dabd569bddce71686f2": "0x3635c9adc5dea00000",
        "0x1d37616b793f94911838ac8e19ee9449df921ec4": "0x5150ae84a8cdf00000",
        "0x1d395b30adda1cf21f091a4f4a7b753371189441": "0x152d02c7e14af6800000",
        "0x1d45586eb803ca2190650bf748a2b174312bb507": "0x4be4e7267b6ae00000",
        "0x1d572edd2d87ca271a6714c15a3b37761dcca005": "0x6ebd52a8ddd390000",
        "0x1d633097a85225a1ff4321b12988fdd55c2b3844": "0xd8d726b7177a800000",
        "0x1d69c83d28ff0474ceebeacb3ad227a144ece7a3": "0x128cc03920a62d28000",
        "0x1d96bcd58457bbf1d3c2a46ffaf16dbf7d836859": "0x9497209d8467e8000",
        "0x1d9e6aaf8019a05f230e5def05af5d889bd4d0f2": "0x73f75d1a085ba0000",
        "0x1dab172effa6fbee534c94b17e794edac54f55f8": "0x6acb3df27e1f880000",
        "0x1db9ac9a9eaeec0a523757050c71f47278c72d50": "0x487a9a304539440000",
        "0x1dbe8e1c2b8a009f85f1ad3ce80d2e05350ee39c": "0x7570d6e9ebbe40000",
        "0x1dc7f7dad85df53f1271152403f4e1e4fdb3afa0": "0xad78ebc5ac6200000",
        "0x1dcebcb7656df5dcaa3368a055d22f9ed6cdd940": "0x1b181e4bf2343c0000",
        "0x1dd77441844afe9cc18f15d8c77bccfb655ee034": "0x106eb45579944880000",
        "0x1ddefefd35ab8f658b2471e54790bc17af98dea4": "0x3635c9adc5dea00000",
        "0x1deec01abe5c0d952de9106c3dc30639d85005d6": "0x6c6b935b8bbd400000",
        "0x1df6911672679bb0ef3509038c0c27e394fdfe30": "0x1d460162f516f00000",
        "0x1dfaee077212f1beaf0e6f2f1840537ae154ad86": "0x3635c9adc5dea00000",
        "0x1e060dc6c5f1cb8cc7e1452e02ee167508b56542": "0x2b14f02c864c77e0000",
        "0x1e13ec51142cebb7a26083412c3ce35144ba56a1": "0x10f0cf064dd59200000",
        "0x1e1a4828119be309bd88236e4d482b504dc55711": "0xa030dcebbd2f4c0000",
        "0x1e1aed85b86c6562cb8fa1eb6f8f3bc9dcae6e79": "0xf4d2dd84259b240000",
        "0x1e1c6351776ac31091397ecf16002d979a1b2d51": "0x4be4e7267b6ae00000",
        "0x1e1d7a5f2468b94ea826982dbf2125793c6e4a5a": "0x3634f48417401a0000",
        "0x1e210e7047886daa52aaf70f4b991dac68e3025e": "0xad78ebc5ac6200000",
        "0x1e2bf4ba8e5ef18d37de6d6ad636c4cae489d0cc": "0x6c6b935b8bbd400000",
        "0x1e2fe4e4a77d141ff49a0c7fbc95b0a2b283eeeb": "0x6c6b935b8bbd400000",
        "0x1e33d1c2fb5e084f2f1d54bc5267727fec3f985d": "0x1b1ae4d6e2ef500000",
        "0x1e381adcf801a3bf9fd7bfac9ccc2b8482ad5e66": "0x208972c0010d740000",
        "0x1e3badb1b6e1380e27039c576ae6222e963a5b53": "0x43c33c1937564800000",
        "0x1e484d0621f0f5331b35d5408d9aae4eb1acf21e": "0x1158e460913d00000",
        "0x1e5800227d4dcf75e30f5595c5bed3f72e341e3b": "0xd75dace73417e0000",
        "0x1e596a81b357c6f24970cc313df6dbdaabd0d09e": "0x6c6b935b8bbd400000",
        "0x1e6915ebd9a19c81b692ad99b1218a592c1ac7b1": "0xd8d726b7177a800000",
        "0x1e6e0153fc161bc05e656bbb144c7187bf4fe84d": "0x6c6b935b8bbd400000",
        "0x1e706655e284dcf0bb37fe075d613a18dc12ff4a": "0xed43bf1eee82ac0000",
        "0x1e783e522ab7df0acaac9eeed3593039e5ac7579": "0x2b1446dd6aefe41c0000",
        "0x1e7b5e4d1f572becf2c00fc90cb4767b4a6e33d4": "0x61fc6107593e10000",
        "0x1e8e689b02917cdc29245d0c9c68b094b41a9ed6": "0x6c6b935b8bbd400000",
        "0x1ea334b5750807ea74aac5ab8694ec5f28aa77cf": "0x1ab2cf7c9f87e20000",
        "0x1ea4715504c6af107b0194f4f7b1cb6fcccd6f4b": "0x20043197e0b0270000",
        "0x1ea492bce1ad107e337f4bd4a7ac9a7babcccdab": "0x56bc75e2d63100000",
        "0x1ea6bf2f15ae9c1dbc64daa7f8ea4d0d81aad3eb": "0xe3aeb5737240a00000",
        "0x1eb4bf73156a82a0a6822080c6edf49c469af8b9": "0x678a932062e4180000",
        "0x1ebacb7844fdc322f805904fbf1962802db1537c": "0x21e19e0c9bab2400000",
        "0x1ec4ec4b77bf19d091a868e6f49154180541f90e": "0x6c6b935b8bbd400000",
        "0x1ed06ee51662a86c634588fb62dc43c8f27e7c17": "0xad78ebc5ac6200000",
        "0x1ed8bb3f06778b039e9961d81cb71a73e6787c8e": "0x6c6b935b8bbd400000",
        "0x1eda084e796500ba14c5121c0d90846f66e4be62": "0x1cfdd7468216e80000",
        "0x1eee6cbee4fe96ad615a9cf5857a647940df8c78": "0x10d3aa536e2940000",
        "0x1ef2dcbfe0a500411d956eb8c8939c3d6cfe669d": "0x2a1129d09367200000",
        "0x1ef5c9c73650cfbbde5c885531d427c7c3fe5544": "0x14542ba12a337c00000",
        "0x1f0412bfedcd964e837d092c71a5fcbaf30126e2": "0x1158e460913d00000",
        "0x1f174f40a0447234e66653914d75bc003e5690dc": "0x8ac7230489e800000",
        "0x1f2186ded23e0cf9521694e4e164593e690a9685": "0x1043561a8829300000",
        "0x1f2afc0aed11bfc71e77a907657b36ea76e3fb99": "0xd8d726b7177a800000",
        "0x1f3959fc291110e88232c36b7667fc78a379613f": "0xfc936392801c0000",
        "0x1f3da68fe87eaf43a829ab6d7ec5a6e009b204fb": "0x1e1601758c2c7e0000",
        "0x1f49b86d0d3945590698a6aaf1673c37755ca80d": "0x25f273933db5700000",
        "0x1f5f3b34bd134b2781afe5a0424ac5846cdefd11": "0x55de6a779bbac0000",
        "0x1f6f0030349752061c96072bc3d6eb3549208d6b": "0x14b8de1eb88db8000",
        "0x1f7d8e86d6eeb02545aad90e91327bd369d7d2f3": "0x1158e460913d00000",
        "0x1f8116bd0af5570eaf0c56c49c7ab5e37a580458": "0x6c6b935b8bbd400000",
        "0x1f88f8a1338fc7c10976abcd3fb8d38554b5ec9c": "0xb9f65d00f63c0000",
        "0x1f9c3268458da301a2be5ab08257f77bb5a98aa4": "0xad78ebc5ac6200000",
        "0x1fa2319fed8c2d462adf2e17feec6a6f30516e95": "0x6cae30621d4720000",
        "0x1fb463a0389983df7d593f7bdd6d78497fed8879": "0x1158e460913d00000",
        "0x1fb7bd310d95f2a6d9baaf8a8a430a9a04453a8b": "0xa2a15d09519be00000",
        "0x1fcc7ce6a8485895a3199e16481f72e1f762defe": "0x3635c9adc5dea00000",
        "0x1fcfd1d57f872290560cb62d600e1defbefccc1c": "0x50c5e761a444080000",
        "0x1fd296be03ad737c92f9c6869e8d80a71c5714aa": "0xb98bc829a6f90000",
        "0x1fddd85fc98be9c4045961f40f93805ecc4549e5": "0x8e3f50b173c100000",
        "0x2001bef77b66f51e1599b02fb110194a0099b78d": "0x6c6b935b8bbd400000",
        "0x200264a09f8c68e3e6629795280f56254f8640d0": "0x1158e460913d00000",
        "0x2003717907a72560f4307f1beecc5436f43d21e7": "0x1b1ae4d6e2ef500000",
        "0x200dfc0b71e359b2b465440a36a6cdc352773007": "0x5150ae84a8cdf00000",
        "0x20134cbff88bfadc466b52eceaa79857891d831e": "0x3635c9adc5dea00000",
        "0x2014261f01089f53795630ba9dd24f9a34c2d942": "0x487a9a304539440000",
        "0x2016895df32c8ed5478269468423aea7b7fbce50": "0x1158e460913d00000",
        "0x20181c4b41f6f972b66958215f19f570c15ddff1": "0x56bc75e2d631000000",
        "0x201864a8f784c2277b0b7c9ee734f7b377eab648": "0xf2281400d1d5ec0000",
        "0x2020b81ae53926ace9f7d7415a050c031d585f20": "0x127f19e83eb3480000",
        "0x203c6283f20df7bc86542fdfb4e763ecdbbbeef5": "0x54b40b1f852bda00000",
        "0x204ac98867a7c9c7ed711cb82f28a878caf69b48": "0x14542ba12a337c00000",
        "0x205237c4be146fba99478f3a7dad17b09138da95": "0x6c6b935b8bbd400000",
        "0x2053ac97548a0c4e8b80bc72590cd6a098fe7516": "0xa2325753b460c0000",
        "0x205f5166f12440d85762c967d3ae86184f8f4d98": "0x177224aa844c720000",
        "0x205fc843e19a4913d1881eb69b69c0fa3be5c50b": "0x20dd68aaf3289100000",
        "0x206482ee6f138a778fe1ad62b180ce856fbb23e6": "0x6c6b935b8bbd400000",
        "0x2066774d822793ff25f1760909479cf62491bf88": "0xbae3ac685cb72e00000",
        "0x206d55d5792a514ec108e090599f2a065e501185": "0xadf30ba70c8970000",
        "0x20707e425d2a11d2c89f391b2b809f556c592421": "0x6c6b935b8bbd400000",
        "0x207ef80b5d60b6fbffc51f3a64b8c72036a5abbd": "0x16a6502f15a1e540000",
        "0x20824ba1dbebbef9846ef3d0f6c1b017e6912ec4": "0x184b26e4daf1d350000",
        "0x2084fce505d97bebf1ad8c5ff6826fc645371fb2": "0x1a055690d9db80000",
        "0x208c45732c0a378f17ac8324926d459ba8b658b4": "0xa030dcebbd2f4c0000",
        "0x209377b6ad3fe101c9685b3576545c6b1684e73c": "0x62a992e53a0af00000",
        "0x209e8e29d33beae8fb6baa783d133e1d9ec1bc0b": "0x2d43f3ebfafb2c0000",
        "0x20a15256d50ce058bf0eac43aa533aa16ec9b380": "0x1158e460913d00000",
        "0x20a29c5079e26b3f18318bb2e50e8e8b346e5be8": "0x1b1ab319f5ec750000",
        "0x20a81680e465f88790f0074f60b4f35f5d1e6aa5": "0x456180278f0c778000",
        "0x20b9a9e6bd8880d9994ae00dd0b9282a0beab816": "0x1b1ae4d6e2ef500000",
        "0x20c284ba10a20830fc3d699ec97d2dfa27e1b95e": "0x6c6b935b8bbd400000",
        "0x20d1417f99c569e3beb095856530fe12d0fceaaa": "0x4015f94b1183698000",
        "0x20dd8fcbb46ea46fe381a68b8ca0ea5be21fe9a5": "0x6c6b935b8bbd400000",
        "0x20ff3ede8cadb5c37b48cb14580fb65e23090a7b": "0x8e4d316827686400000",
        "0x2100381d60a5b54adc09d19683a8f6d5bb4bfbcb": "0x21e19e0c9bab2400000",
        "0x2118c116ab0cdf6fd11d54a4309307b477c3fc0f": "0x21e19e0c9bab2400000",
        "0x211b29cefc79ae976744fdebcebd3cbb32c51303": "0x2f6f10780d22cc00000",
        "0x21206ce22ea480e85940d31314e0d64f4e4d3a04": "0x3635c9adc5dea00000",
        "0x2132c0516a2e17174ac547c43b7b0020d1eb4c59": "0x35659ef93f0fc40000",
        "0x21408b4d7a2c0e6eca4143f2cacdbbccba121bd8": "0x43c33c1937564800000",
        "0x214b743955a512de6e0d886a8cbd0282bee6d2a2": "0x6c6b935b8bbd400000",
        "0x214c89c5bd8e7d22bc574bb35e48950211c6f776": "0x10654f258fd358000",
        "0x21546914dfd3af2add41b0ff3e83ffda7414e1e0": "0x14395e7385a502e0000",
        "0x21582e99e502cbf3d3c23bdffb76e901ac6d56b2": "0x56bc75e2d63100000",
        "0x2159240813a73095a7ebf7c3b3743e8028ae5f09": "0x6c6b935b8bbd400000",
        "0x2160b4c02cac0a81de9108de434590a8bfe68735": "0x6acb3df27e1f880000",
        "0x216e41864ef98f060da08ecae19ad1166a17d036": "0x1369fb96128ac480000",
        "0x21846f2fdf5a41ed8df36e5ed8544df75988ece3": "0x6c6acc67d7b1d40000",
        "0x21a6db6527467bc6dad54bc16e9fe2953b6794ed": "0x2f6f10780d22cc00000",
        "0x21a6feb6ab11c766fdd977f8df4121155f47a1c0": "0x319cf38f100580000",
        "0x21b182f2da2b384493cf5f35f83d9d1ee14f2a21": "0x6c6b935b8bbd400000",
        "0x21bfe1b45cacde6274fd8608d9a178bf3eeb6edc": "0x6cee06ddbe15ec0000",
        "0x21c07380484f6cbc8724ad32bc864c3b5ad500b7": "0x3635c9adc5dea00000",
        "0x21c3a8bba267c8cca27b1a9afabad86f607af708": "0x1e4a36c49d998300000",
        "0x21ce6d5b9018cec04ad6967944bea39e8030b6b8": "0x1158e460913d00000",
        "0x21d02705f3f64905d80ed9147913ea8c7307d695": "0x49edb1c09887360000",
        "0x21d13f0c4024e967d9470791b50f22de3afecf1b": "0xf15ad35e2e31e50000",
        "0x21dbdb817a0d8404c6bdd61504374e9c43c9210e": "0x21e18b9e9ab45e48000",
        "0x21df1ec24b4e4bfe79b0c095cebae198f291fbd1": "0x43c33c1937564800000",
        "0x21df2dcdaf74b2bf803404dd4de6a35eabec1bbd": "0x177224aa844c7200000",
        "0x21e219c89ca8ac14ae4cba6130eeb77d9e6d3962": "0x2acd9faaa038ee0000",
        "0x21e5d2bae995ccfd08a5c16bb524e1f630448f82": "0x97c9ce4cf6d5c00000",
        "0x21e5d77320304c201c1e53b261a123d0a1063e81": "0x4b6fa9d33dd460000",
        "0x21eae6feffa9fbf4cd874f4739ace530ccbe5937": "0x10f0cf064dd59200000",
        "0x21ecb2dfa65779c7592d041cd2105a81f4fd4e46": "0x3635c9adc5dea00000",
        "0x21efbca09b3580b98e73f5b2f7f4dc0bf02c529c": "0x6c6b935b8bbd400000",
        "0x21fd0bade5f4ef7474d058b7f3d854cb1300524e": "0x1158e460913d00000",
        "0x21fd47c5256012198fa5abf131c06d6aa1965f75": "0x1ab2cf7c9f87e200000",
        "0x21fd6c5d97f9c600b76821ddd4e776350fce2be0": "0x6c6ad382d4fb610000",
        "0x220dc68df019b6b0ccbffb784b5a5ab4b15d4060": "0xd5967be4fc3f100000",
        "0x220e2b92c0f6c902b513d9f1e6fab6a8b0def3d7": "0x2b5e3af16b18800000",
        "0x22561c5931143536309c17e832587b625c390b9a": "0xd8d726b7177a800000",
        "0x2257fca16a6e5c2a647c3c29f36ce229ab93b17e": "0xd8d726b7177a800000",
        "0x225d35faedb391c7bc2db7fa9071160405996d00": "0x91854fc1862630000",
        "0x225f9eb3fb6ff3e9e3c8447e14a66e8d4f3779f6": "0x6c6b935b8bbd400000",
        "0x2272186ef27dcbe2f5fc373050fdae7f2ace2316": "0x368c8623a8b4d100000",
        "0x2273bad7bc4e487622d175ef7a66988b6a93c4ee": "0x1158e460913d00000",
        "0x2276264bec8526c0c0f270677abaf4f0e441e167": "0x3635c9adc5dea00000",
        "0x228242f8336eecd8242e1f000f41937e71dffbbf": "0x10f0cf064dd59200000",
        "0x22842ab830da509913f81dd1f04f10af9edd1c55": "0x6c6b935b8bbd400000",
        "0x22944fbca9b57963084eb84df7c85fb9bcdfb856": "0xfc118fef90ba388000",
        "0x229cc4711b62755ea296445ac3b77fc633821cf2": "0x223e8b05219328000",
        "0x229e430de2b74f442651ddcdb70176bc054cad54": "0xbbf981bc4aaa8000",
        "0x229f4f1a2a4f540774505b4707a81de44410255b": "0x6c6b935b8bbd400000",
        "0x229ff80bf5708009a9f739e0f8b560914016d5a6": "0x1211ecb56d13488000",
        "0x22a25812ab56dcc423175ed1d8adacce33cd1810": "0x6449e84e47a8a80000",
        "0x22b96ab2cad55db100b53001f9e4db378104c807": "0x21e19e0c9bab2400000",
        "0x22bdffc240a88ff7431af3bff50e14da37d5183e": "0x3635c9adc5dea00000",
        "0x22ce349159eeb144ef06ff2636588aef79f62832": "0xa31062beeed700000",
        "0x22db559f2c3c1475a2e6ffe83a5979599196a7fa": "0x3635c9adc5dea00000",
        "0x22e15158b5ee3e86eb0332e3e6a9ac6cd9b55ecd": "0x8ac7230489e800000",
        "0x22e2488e2da26a49ae84c01bd54b21f2947891c6": "0x5dc892aa1131c80000",
        "0x22e512149a18d369b73c71efa43e86c9edabaf1d": "0x4ee02e6714615c0000",
        "0x22eb7db0ba56b0f8b816ccb206e615d929185b0d": "0x45d29737e22f20000",
        "0x22eed327f8eb1d1338a3cb7b0f8a4baa5907cd95": "0x1455d5f4877088000",
        "0x22f004df8de9e6ebf523ccace457accb26f97281": "0x21e19e0c9bab2400000",
        "0x22f2dcff5ad78c3eb6850b5cb951127b659522e6": "0xbe202d6a0eda0000",
        "0x22f3c779dd79023ea92a78b65c1a1780f62d5c4a": "0x6acb3df27e1f880000",
        "0x22fe884d9037291b4d52e6285ae68dea0be9ffb5": "0x6c6b935b8bbd400000",
        "0x2306df931a940d58c01665fa4d0800802c02edfe": "0x3635c9adc5dea00000",
        "0x2309d34091445b3232590bd70f4f10025b2c9509": "0x21e19e0c9bab2400000",
        "0x23120046f6832102a752a76656691c863e17e59c": "0x11e0e4f8a50bd40000",
        "0x231a15acc199c89fa9cb22441cc70330bdcce617": "0x1b1ae4d6e2ef500000",
        "0x231d94155dbcfe2a93a319b6171f63b20bd2b6fa": "0xcf147bb906e2f80000",
        "0x232832cd5977e00a4c30d0163f2e24f088a6cb09": "0xa2a15d09519be00000",
        "0x232c6d03b5b6e6711efff190e49c28eef36c82b0": "0x487a9a304539440000",
        "0x232cb1cd49993c144a3f88b3611e233569a86bd6": "0x34c606c42d0ac600000",
        "0x232ce782506225fd9860a2edc14a7a3047736da2": "0x1158e460913d00000",
        "0x232f525d55859b7d4e608d20487faadb00293135": "0xd8d726b7177a800000",
        "0x2334c590c7a48769103045c5b6534c8a3469f44a": "0x3b199073df72dc00000",
        "0x23376ecabf746ce53321cf42c86649b92b67b2ff": "0x6c6b935b8bbd400000",
        "0x23378f42926d0184b793b0c827a6dd3e3d334fcd": "0x30927f74c9de00000",
        "0x233842b1d0692fd11140cf5acda4bf9630bae5f8": "0x6c6b935b8bbd400000",
        "0x2339e9492870afea2537f389ac2f838302a33c06": "0x6c6b935b8bbd400000",
        "0x233bdddd5da94852f4ade8d212885682d9076bc6": "0xd8d726b7177a800000",
        "0x234f46bab73fe45d31bf87f0a1e0466199f2ebac": "0x1a4aba225c20740000",
        "0x23551f56975fe92b31fa469c49ea66ee6662f41e": "0x678a932062e4180000",
        "0x23569542c97d566018c907acfcf391d14067e87e": "0x6c6b935b8bbd400000",
        "0x235fa66c025ef5540070ebcf0d372d8177c467ab": "0x7129e1cdf373ee00000",
        "0x2372c4c1c9939f7aaf6cfac04090f00474840a09": "0x21e19e0c9bab2400000",
        "0x23730c357a91026e44b1d0e2fc2a51d071d8d77b": "0xd8d726b7177a800000",
        "0x2376ada90333b1d181084c97e645e810aa5b76f1": "0x28a857425466f80000",
        "0x2378fd4382511e968ed192106737d324f454b535": "0x3635c9adc5dea00000",
        "0x2382a9d48ec83ea3652890fd0ee79c907b5b2dc1": "0x73f75d1a085ba0000",
        "0x2383c222e67e969190d3219ef14da37850e26c55": "0x6c6b935b8bbd400000",
        "0x238a6b7635252f5244486c0af0a73a207385e039": "0x4a4491bd6dcd280000",
        "0x239a733e6b855ac592d663156186a8a174d2449e": "0x58be3758b241f60000",
        "0x23ab09e73f87aa0f3be0139df0c8eb6be5634f95": "0x1b1ae4d6e2ef5000000",
        "0x23abd9e93e7957e5b636be6579051c15e5ce0b0e": "0x3a3c8f7cbf42c380000",
        "0x23b1c4917fbd93ee3d48389306957384a5496cbf": "0xd8d8583fa2d52f0000",
        "0x23ba3864da583dab56f420873c37679690e02f00": "0x21342520d5fec200000",
        "0x23c55aeb5739876f0ac8d7ebea13be729685f000": "0x487a9a304539440000",
        "0x23c99ba087448e19c9701df66e0cab52368331fa": "0x6c6b935b8bbd400000",
        "0x23ccc3c6acd85c2e460c4ffdd82bc75dc849ea14": "0xd8d726b7177a800000",
        "0x23cd2598a20e149ead2ad69379576ecedb60e38e": "0x6c6b935b8bbd400000",
        "0x23df8f48ee009256ea797e1fa369beebcf6bc663": "0x7cd3fac26d19818000",
        "0x23e2c6a8be8e0acfa5c4df5e36058bb7cbac5a81": "0x6c6b935b8bbd400000",
        "0x23ea669e3564819a83b0c26c00a16d9e826f6c46": "0x4d8d6ca968ca130000",
        "0x23eb6fd85671a9063ab7678ebe265a20f61a02b3": "0x6c6b935b8bbd400000",
        "0x23f9ecf3e5dddca38815d3e59ed34b5b90b4a353": "0xb1781a3f0bb200000",
        "0x23fa7eb51a48229598f97e762be0869652dffc66": "0x3635c9adc5dea00000",
        "0x240305727313d01e73542c775ff59d11cd35f819": "0x141885666807f5c8000",
        "0x24046b91da9b61b629cb8b8ec0c351a07e0703e4": "0x6c6b935b8bbd400000",
        "0x240e559e274aaef0c258998c979f671d1173b88b": "0xd8d726b7177a800000",
        "0x241361559feef80ef137302153bd9ed2f25db3ef": "0x43c33c1937564800000",
        "0x243b3bca6a299359e886ce33a30341fafe4d573d": "0x43c33c1937564800000",
        "0x243c84d12420570cc4ef3baba1c959c283249520": "0x7f1f6993a853040000",
        "0x24434a3e32e54ecf272fe3470b5f6f512f675520": "0x14061b9d77a5e980000",
        "0x2448596f91c09baa30bc96106a2d37b5705e5d28": "0x6c6b935b8bbd400000",
        "0x24586ec5451735eeaaeb470dc8736aae752f82e5": "0xf43fc2c04ee00000",
        "0x2458d6555ff98a129cce4037953d00206eff4287": "0xaadec983fcff40000",
        "0x246291165b59332df5f18ce5c98856fae95897d6": "0x5c283d410394100000",
        "0x2467c6a5c696ede9a1e542bf1ad06bcc4b06aca0": "0x100bd33fb98ba0000",
        "0x2476b2bb751ce748e1a4c4ff7b230be0c15d2245": "0xd8d726b7177a800000",
        "0x247a0a11c57f0383b949de540b66dee68604b0a1": "0x39fbae8d042dd00000",
        "0x2487c3c4be86a2723d917c06b458550170c3edba": "0x3635c9adc5dea00000",
        "0x2489ac126934d4d6a94df08743da7b7691e9798e": "0x3635c9adc5dea00000",
        "0x249db29dbc19d1235da7298a04081c315742e9ac": "0x61acff81a78ad40000",
        "0x24a4eb36a7e498c36f99975c1a8d729fd6b305d7": "0xdfc78210eb2c80000",
        "0x24a750eae5874711116dd7d47b7186ce990d3103": "0xad78ebc5ac6200000",
        "0x24aa1151bb765fa3a89ca50eb6e1b1c706417fd4": "0xa80d24677efef00000",
        "0x24aca08d5be85ebb9f3132dfc1b620824edfedf9": "0xfc936392801c0000",
        "0x24b2be118b16d8b2174769d17b4cf84f07ca946d": "0x6c6b935b8bbd400000",
        "0x24b8b446debd1947955dd084f2c544933346d3ad": "0xea696d904039bd8000",
        "0x24b95ebef79500baa0eda72e77f877415df75c33": "0x3154c9729d05780000",
        "0x24b9e6644f6ba4cde126270d81f6ab60f286dff4": "0x73f75d1a085ba0000",
        "0x24bd5904059091d2f9e12d6a26a010ca22ab14e8": "0x65ea3db75546600000",
        "0x24c0c88b54a3544709828ab4ab06840559f6c5e2": "0x90f534608a72880000",
        "0x24c117d1d2b3a97ab11a4679c99a774a9eade8d1": "0x3635c9adc5dea00000",
        "0x24cff0e9336a9f80f9b1cb968caf6b1d1c4932a4": "0xada55474b81340000",
        "0x24daaaddf7b06bbcea9b80590085a88567682b4e": "0x114b2015d2bbd00000",
        "0x24dcc24bd9c7210ceacfb30da98ae04a4d7b8ab9": "0x3635c9adc5dea00000",
        "0x24f7450ddbf18b020feb1a2032d9d54b633edf37": "0x2b5e3af16b1880000",
        "0x24fc73d20793098e09ddab5798506224fa1e1850": "0xad78ebc5ac6200000",
        "0x24fd9a6c874c2fab3ff36e9afbf8ce0d32c7de92": "0x487a9a304539440000",
        "0x250a40cef3202397f240469548beb5626af4f23c": "0x503b203e9fba20000",
        "0x250a69430776f6347703f9529783955a6197b682": "0x692ae8897081d00000",
        "0x250eb7c66f869ddf49da85f3393e980c029aa434": "0xd8d726b7177a800000",
        "0x25106ab6755df86d6b63a187703b0cfea0e594a0": "0x17c405ad41db40000",
        "0x25185f325acf2d64500698f65c769ddf68301602": "0x10f0cf064dd59200000",
        "0x251c12722c6879227992a304eb3576cd18434ea5": "0x6c6b935b8bbd400000",
        "0x251e6838f7cec5b383c1d90146341274daf8e502": "0x7ff1ccb7561df0000",
        "0x25259d975a21d83ae30e33f800f53f37dfa01938": "0x1158e460913d00000",
        "0x25287b815f5c82380a73b0b13fbaf982be24c4d3": "0x22b1c8c1227a00000",
        "0x252b6555afdc80f2d96d972d17db84ea5ad521ac": "0x1ab2cf7c9f87e200000",
        "0x2538532936813c91e653284f017c80c3b8f8a36f": "0x6c8754c8f30c080000",
        "0x253e32b74ea4490ab92606fda0aa257bf23dcb8b": "0x21e19e0c9bab2400000",
        "0x253f1e742a2cec86b0d7b306e5eacb6ccb2f8554": "0x43e5ede1f878c200000",
        "0x2541314a0b408e95a694444977712a50713591ab": "0x589e1a5df4d7b50000",
        "0x254c1ecc630c2877de8095f0a8dba1e8bf1f550c": "0x5c283d410394100000",
        "0x255abc8d08a096a88f3d6ab55fbc7352bddcb9ce": "0x4743682313ede8000",
        "0x255bdd6474cc8262f26a22c38f45940e1ceea69b": "0xd8d726b7177a800000",
        "0x2560b09b89a4ae6849ed5a3c9958426631714466": "0x5c283d410394100000",
        "0x2561a138dcf83bd813e0e7f108642be3de3d6f05": "0x3634f48417401a0000",
        "0x2561ec0f379218fe5ed4e028a3f744aa41754c72": "0xb98bc829a6f90000",
        "0x256292a191bdda34c4da6b6bd69147bf75e2a9ab": "0xc2ff2e0dfb038000",
        "0x25697ef20cccaa70d32d376f8272d9c1070c3d78": "0xad78ebc5ac6200000",
        "0x256fa150cc87b5056a07d004efc84524739e62b5": "0xad78ebc5ac6200000",
        "0x25721c87b0dc21377c7200e524b14a22f0af69fb": "0xd8d726b7177a800000",
        "0x258939bbf00c9de9af5338f5d714abf6d0c1c671": "0x54069233bf7f780000",
        "0x2590126870e0bde8a663ab040a72a5573d8d41c2": "0x10f0cf064dd59200000",
        "0x259ec4d265f3ab536b7c70fa97aca142692c13fc": "0x11b1b5bea89f80000",
        "0x25a500eeec7a662a841552b5168b707b0de21e9e": "0x21f2f6f0fc3c6100000",
        "0x25a5a44d38a2f44c6a9db9cdbc6b1e2e97abb509": "0x39992648a23c8a00000",
        "0x25a74c2ac75dc8baa8b31a9c7cb4b7829b2456da": "0x6c6b935b8bbd400000",
        "0x25adb8f96f39492c9bb47c5edc88624e46075697": "0x5a9940bc56879500000",
        "0x25aee68d09afb71d8817f3f184ec562f7897b734": "0x6c6b935b8bbd400000",
        "0x25b0533b81d02a617b9229c7ec5d6f2f672e5b5a": "0x3635c9adc5dea00000",
        "0x25b78c9fad85b43343f0bfcd0fac11c9949ca5eb": "0x6c6b935b8bbd400000",
        "0x25bc49ef288cd165e525c661a812cf84fbec8f33": "0x125921aebda9d00000",
        "0x25bdfa3ee26f3849617b230062588a97e3cae701": "0x3635e619bb04d40000",
        "0x25c1a37ee5f08265a1e10d3d90d5472955f97806": "0x62a992e53a0af00000",
        "0x25c6e74ff1d928df98137af4df8430df24f07cd7": "0x15245655b102580000",
        "0x25cfc4e25c35c13b69f7e77dbfb08baf58756b8d": "0x878678326eac9000000",
        "0x25dad495a11a86b9eeece1eeec805e57f157faff": "0x3635c9adc5dea000000",
        "0x25e037f00a18270ba5ec3420229ddb0a2ce38fa2": "0x21e19e0c9bab2400000",
        "0x25e661c939863acc044e6f17b5698cce379ec3cc": "0x4a4491bd6dcd280000",
        "0x26048fe84d9b010a62e731627e49bc2eb73f408f": "0xd8d726b7177a800000",
        "0x2606c3b3b4ca1b091498602cb1978bf3b95221c0": "0x15af1d78b58c400000",
        "0x260a230e4465077e0b14ee4442a482d5b0c914bf": "0x5af606a06b5b118000",
        "0x260df8943a8c9a5dba7945327fd7e0837c11ad07": "0xad78ebc5ac6200000",
        "0x2614f42d5da844377578e6b448dc24305bef2b03": "0x6c6b935b8bbd400000",
        "0x2615100ea7e25bba9bca746058afbbb4ffbe4244": "0x1b1ae4d6e2ef500000",
        "0x261575e9cf59c8226fa7aaf91de86fb70f5ac3ae": "0x1043a4436a523f0000",
        "0x261e0fa64c51137465eecf5b90f197f7937fdb05": "0x3cfc82e37e9a7400000",
        "0x262a8bfd7d9dc5dd3ad78161b6bb560824373655": "0x3f6a8384072b760000",
        "0x262aed4bc0f4a4b2c6fb35793e835a49189cdfec": "0x21e19e0c9bab2400000",
        "0x262dc1364ccf6df85c43268ee182554dae692e29": "0x10b202fec74ced80000",
        "0x263814309de4e635cf585e0d365477fc40e66cf7": "0x7ea28327577080000",
        "0x2639eee9873ceec26fcc9454b548b9e7c54aa65c": "0x3635c9adc5dea00000",
        "0x263e57dacbe0149f82fe65a2664898866ff5b463": "0x80bfbefcb5f0bc00000",
        "0x26475419c06d5f147aa597248eb46cf7befa64a5": "0x58e7926ee858a00000",
        "0x264cc8086a8710f91b21720905912cd7964ae868": "0x1731790534df20000",
        "0x265383d68b52d034161bfab01ae1b047942fbc32": "0x47271dee20d745c0000",
        "0x2659facb1e83436553b5b42989adb8075f9953ed": "0x1976576771a5e0000",
        "0x266f2da7f0085ef3f3fa09baee232b93c744db2e": "0xcb49b44ba602d800000",
        "0x267148fd72c54f620a592fb92799319cc4532b5c": "0x1639e49bba16280000",
        "0x26784ade91c8a83a8e39658c8d8277413ccc9954": "0x14542ba12a337c00000",
        "0x267a7e6e82e1b91d51deddb644f0e96dbb1f7f7e": "0x1158e460913d00000",
        "0x2680713d40808e2a50ed013150a2a694b96a7f1d": "0x61093d7c2c6d380000",
        "0x2697b339813b0c2d964b2471eb1c606f4ecb9616": "0x3e8ef795d890c80000",
        "0x26a68eab905a8b3dce00e317308225dab1b9f6b8": "0x6b56051582a9700000",
        "0x26b11d066588ce74a572a85a6328739212aa8b40": "0x6c6b935b8bbd400000",
        "0x26babf42b267fdcf3861fdd4236a5e474848b358": "0x3635c9adc5dea00000",
        "0x26c0054b700d3a7c2dcbe275689d4f4cad16a335": "0x6c6b935b8bbd400000",
        "0x26c2ffc30efdc5273e76183a16c2698d6e531286": "0x2a1129d09367200000",
        "0x26c99f8849c9802b83c861217fd07a9e84cdb79d": "0x1043561a8829300000",
        "0x26cfffd052152bb3f957b478d5f98b233a7c2b92": "0xd8d726b7177a800000",
        "0x26d4a16891f52922789217fcd886f7fce296d400": "0x6c6b935b8bbd400000",
        "0x26d4ec17d5ceb2c894bdc59d0a6a695dad2b43cc": "0x9f1f78761d341a0000",
        "0x26e801b62c827191dd68d31a011990947fd0ebe0": "0x1158e460913d00000",
        "0x26e9e2ad729702626417ef25de0dc800f7a779b3": "0x3635c9adc5dea00000",
        "0x26f9f7cefd7e394b9d3924412bf2c2831faf1f85": "0xd8d726b7177a800000",
        "0x26fe174cbf526650e0cd009bd6126502ce8e684d": "0x277017338a30ae00000",
        "0x26ff0a51e7cece8400276978dbd6236ef162c0e6": "0x152e185627540a500000",
        "0x27101a0f56d39a88c5a84f9b324cdde33e5cb68c": "0x6c6b935b8bbd400000",
        "0x27144ca9a7771a836ad50f803f64d869b2ae2b20": "0xd8d726b7177a800000",
        "0x27146913563aa745e2588430d9348e86ea7c3510": "0x15af1d78b58c400000",
        "0x271d3d481cb88e7671ad216949b6365e06303de0": "0xd8d726b7177a800000",
        "0x2720f9ca426ef2f2cbd2fecd39920c4f1a89e16d": "0x6c6b935b8bbd400000",
        "0x272a131a5a656a7a3aca35c8bd202222a7592258": "0x90f534608a72880000",
        "0x2744ff67464121e35afc2922177164fa2fcb0267": "0x56bc75e2d63100000",
        "0x274a3d771a3d709796fbc4d5f48fce2fe38c79d6": "0x1158e460913d00000",
        "0x274d69170fe7141401882b886ac4618c6ae40edb": "0x33c5499031720c0000",
        "0x27521deb3b6ef1416ea4c781a2e5d7b36ee81c61": "0x6c6b935b8bbd400000",
        "0x275875ff4fbb0cf3a430213127487f7608d04cba": "0x1b1c010e766d580000",
        "0x276a006e3028ecd44cdb62ba0a77ce94ebd9f10f": "0x6194049f30f7200000",
        "0x276b0521b0e68b277df0bb32f3fd48326350bfb2": "0x2b5e3af16b1880000",
        "0x276fd7d24f8f883f5a7a28295bf17151c7a84b03": "0x6c6b935b8bbd400000",
        "0x2770f14efb165ddeba79c10bb0af31c31e59334c": "0xa2a15d09519be00000",
        "0x277677aba1e52c3b53bfa2071d4e859a0af7e8e1": "0x3635c9adc5dea00000",
        "0x27824666d278d70423f03dfe1dc7a3f02f43e2b5": "0x3636c25e66ece70000",
        "0x27830c5f6023afaaf79745676c204a0faccda0ba": "0xd02ab486cedc00000",
        "0x2784903f1d7c1b5cd901f8875d14a79b3cbe2a56": "0x4bda7e9d74ad5500000",
        "0x278c0bde630ec393b1e7267fc9d7d97019e4145b": "0x6c6b935b8bbd400000",
        "0x27987110221a880826adb2e7ab5eca78c6e31aec": "0xd8d726b7177a800000",
        "0x27ac073be79ce657a93aa693ee43bf0fa41fef04": "0xa968163f0a57b400000",
        "0x27b1694eafa165ebd7cc7bc99e74814a951419dc": "0x2b5e3af16b18800000",
        "0x27b62816e1e3b8d19b79d1513d5dfa855b0c3a2a": "0x56af5c1fd69508000",
        "0x27bf943c1633fe32f8bcccdb6302b407a5724e44": "0x32f84c6df408c08000",
        "0x27bf9f44ba7d05c33540c3a53bb02cbbffe7c3c6": "0x6c6b935b8bbd400000",
        "0x27c2d7ca504daa3d9066dc09137dc42f3aaab452": "0x2086ac351052600000",
        "0x27d158ac3d3e1109ab6e570e90e85d3892cd7680": "0x56bc75e2d63100000",
        "0x27e63989ca1e903bc620cf1b9c3f67b9e2ae6581": "0x487a9a304539440000",
        "0x27f03cf1abc5e1b51dbc444b289e542c9ddfb0e6": "0x10f0cf064dd59200000",
        "0x27fc85a49cff90dbcfdadc9ddd40d6b9a2210a6c": "0x56bc75e2d63100000",
        "0x2805415e1d7fdec6dedfb89e521d10592d743c10": "0x56bc75e2d63100000",
        "0x28073efc17d05cab3195c2db332b61984777a612": "0x3635c9adc5dea00000",
        "0x281250a29121270a4ee5d78d24feafe82c70ba3a": "0x3635c9adc5dea00000",
        "0x2813d263fc5ff2479e970595d6b6b560f8d6d6d1": "0x6c6b935b8bbd400000",
        "0x282e80a554875a56799fa0a97f5510e795974c4e": "0x3635c9adc5dea00000",
        "0x283396ce3cac398bcbe7227f323e78ff96d08767": "0x15af1d78b58c400000",
        "0x28349f7ef974ea55fe36a1583b34cec3c45065f0": "0xcb633d49e65590000",
        "0x2836123046b284e5ef102bfd22b1765e508116ad": "0x1653fbb5c427e40000",
        "0x283c2314283c92d4b064f0aef9bb5246a7007f39": "0xad78ebc5ac6200000",
        "0x283e11203749b1fa4f32febb71e49d135919382a": "0x3635c9adc5dea00000",
        "0x283e6252b4efcf4654391acb75f903c59b78c5fb": "0x28a857425466f800000",
        "0x28510e6eff1fc829b6576f4328bc3938ec7a6580": "0x21e19e0c9bab2400000",
        "0x2858acacaf21ea81cab7598fdbd86b452e9e8e15": "0x241a9b4f617a280000",
        "0x285ae51b9500c58d541365d97569f14bb2a3709b": "0x6c6b935b8bbd400000",
        "0x2866b81decb02ee70ae250cee5cdc77b59d7b679": "0x6c6b935b8bbd400000",
        "0x286906b6bd4972e3c71655e04baf36260c7cb153": "0x126e72a69a50d00000",
        "0x286b186d61ea1fd78d9930fe12b06537b05c3d51": "0x3635c9adc5dea00000",
        "0x2874f3e2985d5f7b406627e17baa772b01abcc9e": "0x146050410765f380000",
        "0x287cf9d0902ef819a7a5f149445bf1775ee8c47c": "0x3635c9adc5dea000000",
        "0x28818e18b610001321b31df6fe7d2815cdadc9f5": "0x3635c9adc5dea00000",
        "0x28868324337e11ba106cb481da962f3a8453808d": "0x6c6b935b8bbd400000",
        "0x28904bb7c4302943b709b14d7970e42b8324e1a1": "0x21f97846a072d7e0000",
        "0x2895e80999d406ad592e2b262737d35f7db4b699": "0x692ae8897081d00000",
        "0x28967280214e218a120c5dda37041b111ea36d74": "0xad78ebc5ac6200000",
        "0x28a3da09a8194819ae199f2e6d9d1304817e28a5": "0x6c6b935b8bbd400000",
        "0x28ab165ffb69eda0c549ae38e9826f5f7f92f853": "0x464df6d7c844590000",
        "0x28b77585cb3d55a199ab291d3a18c68fe89a848a": "0x6a4076cf7995a00000",
        "0x28d4ebf41e3d3c451e943bdd7e1f175fae932a3d": "0x14542ba12a337c00000",
        "0x28d7e5866f1d85fd1ceb32bfbe1dfc36db434566": "0x1864231c610351c0000",
        "0x28d8c35fb7eea622582135e3ad47a227c9a663bd": "0xfc936392801c0000",
        "0x28e4af30cd93f686a122ad7bb19f8a8785eee342": "0x71e53b706cc7b40000",
        "0x28eaea78cd4d95faecfb68836eafe83520f3bbb7": "0xad78ebc5ac6200000",
        "0x28efae6356509edface89fc61a7fdcdb39eea8e5": "0x121ea68c114e5100000",
        "0x28fa2580f9ebe420f3e5eefdd371638e3b7af499": "0x14542ba12a337c00000",
        "0x2901f8077f34190bb47a8e227fa29b30ce113b31": "0x56bc75e2d63100000",
        "0x2905b192e83ce659aa355b9d0c204e3e95f9bb9a": "0x75235c1d00393e8000",
        "0x290a56d41f6e9efbdcea0342e0b7929a8cdfcb05": "0x12a5f58168ee600000",
        "0x2915624bcb679137b8dae9ab57d11b4905eaee4b": "0x1158e460913d00000",
        "0x291efe0081dce8c14799f7b2a43619c0c3b3fc1f": "0x410d586a20a4c00000",
        "0x291f929ca59b54f8443e3d4d75d95dee243cef78": "0x1b1a089237073d0000",
        "0x29298ccbdff689f87fe41aa6e98fdfb53deaf37a": "0x4315c32d71a9e600000",
        "0x292f228b0a94748c8eec612d246f989363e08f08": "0xa076407d3f7440000",
        "0x293384c42b6f8f2905ce52b7205c2274376c612b": "0x4be4e7267b6ae00000",
        "0x2934c0df7bbc172b6c186b0b72547ace8bf75454": "0x340aad21b3b700000",
        "0x293c2306df3604ae4fda0d207aba736f67de0792": "0xad78ebc5ac6200000",
        "0x2949fd1def5c76a286b3872424809a07db3966f3": "0x11bd906daa0c9438000",
        "0x294f494b3f2e143c2ffc9738cbfd9501850b874e": "0x796e3ea3f8ab000000",
        "0x2955c357fd8f75d5159a3dfa69c5b87a359dea8c": "0x6c6b935b8bbd400000",
        "0x2961fb391c61957cb5c9e407dda29338d3b92c80": "0x3634fb9f1489a70000",
        "0x29681d9912ddd07eaabb88d05d90f766e862417d": "0x3635c9adc5dea00000",
        "0x296b71c0015819c242a7861e6ff7eded8a5f71e3": "0x6c68ccd09b022c0000",
        "0x296d66b521571a4e4103a7f562c511e6aa732d81": "0x243d4d18229ca20000",
        "0x296f00de1dc3bb01d47a8ccd1e5d1dd9a1eb7791": "0x3635c9adc5dea00000",
        "0x297385e88634465685c231a314a0d5dcd146af01": "0x54069233bf7f780000",
        "0x29763dd6da9a7c161173888321eba6b63c8fb845": "0x11c7ea162e78200000",
        "0x2979741174a8c1ea0b7f9edf658177859417f512": "0x1901966c8496838000",
        "0x297a88921b5fca10e5bb9ded60025437ae221694": "0xad78ebc5ac6200000",
        "0x297d5dbe222f2fb52531acbd0b013dc446ac7368": "0x43c33c1937564800000",
        "0x29824e94cc4348bc963279dcdf47391715324cd3": "0x692ae8897081d00000",
        "0x2982d76a15f847dd41f1922af368fe678d0e681e": "0x56bc75e2d63100000",
        "0x298887bab57c5ba4f0615229d7525fa113b7ea89": "0x22b1c8c1227a00000",
        "0x298ec76b440d8807b3f78b5f90979bee42ed43db": "0x65a4da25d3016c00000",
        "0x299368609042a858d1ecdf1fc0ada5eaceca29cf": "0x6c6b935b8bbd400000",
        "0x299e0bca55e069de8504e89aca6eca21d38a9a5d": "0x302379bf2ca2e0000",
        "0x29ac2b458454a36c7e96c73a8667222a12242c71": "0xd8d726b7177a800000",
        "0x29adcf83b6b20ac6a434abb1993cbd05c60ea2e4": "0x21e19e0c9bab2400000",
        "0x29aef48de8c9fbad4b9e4ca970797a5533eb722d": "0x21e19e0c9bab2400000",
        "0x29b3f561ee7a6e25941e98a5325b78adc79785f3": "0x56bc75e2d63100000",
        "0x29bdc4f28de0180f433c2694eb74f5504ce94337": "0x6c6b935b8bbd400000",
        "0x29cc804d922be91f5909f348b0aaa5d21b607830": "0xd8d726b7177a800000",
        "0x29da3e35b23bb1f72f8e2258cf7f553359d24bac": "0x43c33c1937564800000",
        "0x29e67990e1b6d52e1055ffe049c53195a81542cf": "0x43c33c1937564800000",
        "0x29eaae82761762f4d2db53a9c68b0f6b0b6d4e66": "0x6c6b935b8bbd400000",
        "0x29eb7eefdae9feb449c63ff5f279d67510eb1422": "0x10d3aa536e2940000",
        "0x29f0edc60338e7112085a1d114da8c42ce8f55d6": "0xa05a7f0fd825780000",
        "0x29f8fba4c30772b057edbbe62ae7420c390572e1": "0x3635c9adc5dea00000",
        "0x29f9286c0e738d1721a691c6b95ab3d9a797ede8": "0x2a5a058fc295ed000000",
        "0x2a085e25b64862f5e68d768e2b0f7a8529858eee": "0x6b883acd5766cd0000",
        "0x2a2ab6b74c7af1d9476bb5bcb4524797bedc3552": "0x3635c9adc5dea00000",
        "0x2a39190a4fde83dfb3ddcb4c5fbb83ac6c49755c": "0x3635c9adc5dea00000",
        "0x2a400dff8594de7228b4fd15c32322b75bb87da8": "0x531a17f607a2d0000",
        "0x2a44a7218fe44d65a1b4b7a7d9b1c2c52c8c3e34": "0xd2d06c305a1eb578000",
        "0x2a46d353777176ff8e83ffa8001f4f70f9733aa5": "0x5bf0ba6634f680000",
        "0x2a595f16eee4cb0c17d9a2d939b3c10f6c677243": "0x3ba1910bf341b00000",
        "0x2a59e47ea5d8f0e7c028a3e8e093a49c1b50b9a3": "0x6c6b935b8bbd400000",
        "0x2a5ba9e34cd58da54c9a2712663a3be274c8e47b": "0xaadec983fcff40000",
        "0x2a5e3a40d2cd0325766de73a3d671896b362c73b": "0x152d02c7e14af6800000",
        "0x2a63590efe9986c3fee09b0a0a338b15bed91f21": "0x15e1c4e05ee26d00000",
        "0x2a67660a1368efcd626ef36b2b1b601980941c05": "0x73f75d1a085ba0000",
        "0x2a742b8910941e0932830a1d9692cfd28494cf40": "0x1b1ab319f5ec750000",
        "0x2a746cd44027af3ebd37c378c85ef7f754ab5f28": "0x155bd9307f9fe80000",
        "0x2a81d27cb6d4770ff4f3c4a3ba18e5e57f07517c": "0x6c6b935b8bbd400000",
        "0x2a91a9fed41b7d0e5cd2d83158d3e8a41a9a2d71": "0x692ae8897081d00000",
        "0x2a9c57fe7b6b138a920d676f3c76b6c2a0eef699": "0x1fd933494aa5fe00000",
        "0x2a9c96c19151ffcbe29a4616d0c52b3933b4659f": "0x3c1379b8765e18000",
        "0x2aa192777ca5b978b6b2c2ff800ac1860f753f47": "0x12290f15180bdc0000",
        "0x2aaa35274d742546670b7426264521032af4f4c3": "0x21e19e0c9bab2400000",
        "0x2aaea1f1046f30f109faec1c63ef5c7594eb08da": "0xd8d726b7177a800000",
        "0x2ab97e8d59eee648ab6caf8696f89937143864d6": "0xcf152640c5c8300000",
        "0x2abce1808940cd4ef5b5e05285f82df7a9ab5e03": "0x21342520d5fec200000",
        "0x2abdf1a637ef6c42a7e2fe217773d677e804ebdd": "0x10f0cf064dd59200000",
        "0x2ac1f8d7bf721f3cfe74d20fea9b87a28aaa982c": "0x8ba52e6fc45e40000",
        "0x2acc9c1a32240b4d5b2f777a2ea052b42fc1271c": "0x8d807ee14d836100000",
        "0x2ad6c9d10c261819a1a0ca2c48d8c7b2a71728df": "0x3635c9adc5dea00000",
        "0x2ae53866fc2d14d572ab73b4a065a1188267f527": "0x1b1ae4d6e2ef5000000",
        "0x2ae73a79aea0278533accf21070922b1613f8f32": "0xa7e94bbeae701a8000",
        "0x2ae82dab92a66389eea1abb901d1d57f5a7cca0b": "0x6c6b935b8bbd400000",
        "0x2aec809df9325b9f483996e99f7331097f08aa0e": "0xd8d726b7177a800000",
        "0x2aed2ce531c056b0097efc3c6de10c4762004ed9": "0x2356953ab7ddc380000",
        "0x2afb058c3d31032b353bf24f09ae20d54de57dbe": "0x3ba1910bf341b00000",
        "0x2b0362633614bfcb583569438ecc4ea57b1d337e": "0x43c33c1937564800000",
        "0x2b101e822cd962962a06800a2c08d3b15d82b735": "0x83d6c7aab63600000",
        "0x2b129c26b75dde127f8320bd0f63410c92a9f876": "0x77432217e683600000",
        "0x2b241f037337eb4acc61849bd272ac133f7cdf4b": "0x500b6bca962ab8400000",
        "0x2b3a68db6b0cae8a7c7a476bdfcfbd6205e10687": "0x821ab0d44149800000",
        "0x2b3cf97311ff30f460945a9d8099f4a88e26d456": "0x6c6b935b8bbd400000",
        "0x2b49fba29830360fcdb6da23bbfea5c0bbac5281": "0x1158e460913d00000",
        "0x2b4f4507bb6b9817942ce433781b708fbcd166fd": "0xfc936392801c0000",
        "0x2b5016e2457387956562587115aa8759d8695fdf": "0x2a5a058fc295ed000000",
        "0x2b5c60e84535eeb4d580de127a12eb2677ccb392": "0x43c33c1937564800000",
        "0x2b5ced9987c0765f900e49cf9da2d9f9c1138855": "0x15af1d78b58c400000",
        "0x2b5f4b3f1e11707a227aa5e69fa49dded33fb321": "0x14542ba12a337c00000",
        "0x2b68306ba7f8daaf73f4c644ef7d2743c0f26856": "0x2ee182ca17ddd00000",
        "0x2b6ed29a95753c3ad948348e3e7b1a251080ffb9": "0x34f086f3b33b68400000",
        "0x2b701d16c0d3cc1e4cd85445e6ad02eea4ac012d": "0x2086ac351052600000",
        "0x2b717cd432a323a4659039848d3b87de26fc9546": "0x69e10de76676d0800000",
        "0x2b74c373d04bfb0fd60a18a01a88fbe84770e58c": "0x22b1c8c1227a00000",
        "0x2b77a4d88c0d56a3dbe3bae04a05f4fcd1b757e1": "0x1043561a8829300000",
        "0x2b8488bd2d3c197a3d26151815b5a798d27168dc": "0x16a1f9f5fd7d9600000",
        "0x2b8a0dee5cb0e1e97e15cfca6e19ad21f995efad": "0x1b55438d9a249b0000",
        "0x2b8fe4166e23d11963c0932b8ade8e0145ea0770": "0x92896529baddc880000",
        "0x2b99b42e4f42619ee36baa7e4af2d65eacfcba35": "0x878678326eac9000000",
        "0x2bab0fbe28d58420b52036770a12f9952aea6911": "0xcf152640c5c8300000",
        "0x2bade91d154517620fd4b439ac97157a4102a9f7": "0xd8d726b7177a800000",
        "0x2baf8d6e221174124820ee492b9459ec4fadafbb": "0x6c6b935b8bbd400000",
        "0x2bafbf9e9ed2c219f7f2791374e7d05cb06777e7": "0xbed1d0263d9f00000",
        "0x2bb366b9edcb0da680f0e10b3b6e28748190d6c3": "0x13a62d7b57640640000",
        "0x2bb6f578adfbe7b2a116b3554facf9969813c319": "0x19127a1391ea2a00000",
        "0x2bbe62eac80ca7f4d6fdee7e7d8e28b63acf770e": "0x81e32df972abf00000",
        "0x2bbe672a1857508f630f2a5edb563d9e9de92815": "0x6c6b935b8bbd400000",
        "0x2bc429d618a66a4cf82dbb2d824e9356effa126a": "0x6c6acc67d7b1d40000",
        "0x2bd252e0d732ff1d7c78f0a02e6cb25423cf1b1a": "0x90f534608a72880000",
        "0x2bdd03bebbee273b6ca1059b34999a5bbd61bb79": "0x1158e460913d00000",
        "0x2c04115c3e52961b0dc0b0bf31fba4546f5966fd": "0xad78ebc5ac6200000",
        "0x2c06dd922b61514aafedd84488c0c28e6dcf0e99": "0x152d02c7e14af6800000",
        "0x2c0cc3f951482cc8a2925815684eb9f94e060200": "0x14542ba12a337c00000",
        "0x2c0ee134d8b36145b47beee7af8d2738dbda08e8": "0xae56f730e6d840000",
        "0x2c0f5b9df43625798e7e03c1a5fd6a6d091af82b": "0x1b0fcaab200300000",
        "0x2c128c95d957215101f043dd8fc582456d41016d": "0x2d43f3ebfafb2c0000",
        "0x2c1800f35fa02d3eb6ff5b25285f5e4add13b38d": "0x3122d3adafde100000",
        "0x2c1c19114e3d6de27851484b8d2715e50f8a1065": "0x56bc75e2d63100000",
        "0x2c1cc6e18c152488ba11c2cc1bcefa2df306abd1": "0x5a87e7d7f5f6580000",
        "0x2c1df8a76f48f6b54bcf9caf56f0ee1cf57ab33d": "0x2247f750089da580000",
        "0x2c2147947ae33fb098b489a5c16bfff9abcd4e2a": "0xad78ebc5ac6200000",
        "0x2c234f505ca8dcc77d9b7e01d257c318cc19396d": "0x56bc75e2d63100000",
        "0x2c2428e4a66974edc822d5dbfb241b2728075158": "0x6c6b935b8bbd400000",
        "0x2c2d15ff39561c1b72eda1cc027ffef23743a144": "0xd480ed9ef32b400000",
        "0x2c2db28c3309375eea3c6d72cd6d0eec145afcc0": "0x6c6b935b8bbd400000",
        "0x2c424ee47f583cdce07ae318b6fad462381d4d2b": "0xd8d726b7177a800000",
        "0x2c4b470307a059854055d91ec3794d80b53d0f4a": "0x43c33c1937564800000",
        "0x2c52c984102ee0cd3e31821b84d408930efa1ac7": "0x6c6b935b8bbd400000",
        "0x2c5a2d0abda03bbe215781b4ff296c8c61bdbaf6": "0x1a8e56f48c0228000",
        "0x2c5b7d7b195a371bf9abddb42fe04f2f1d9a9910": "0xad78ebc5ac6200000",
        "0x2c5df866666a194b26cebb407e4a1fd73e208d5e": "0x3635c9adc5dea00000",
        "0x2c603ff0fe93616c43573ef279bfea40888d6ae7": "0x100f4b6d66757900000",
        "0x2c6846a1aa999a2246a287056000ba4dcba8e63d": "0x21f2f6f0fc3c6100000",
        "0x2c6afcd4037c1ed14fa74ff6758e0945a185a8e8": "0xf43fc2c04ee00000",
        "0x2c6b699d9ead349f067f45711a074a641db6a897": "0x1158e460913d00000",
        "0x2c6f5c124cc789f8bb398e3f889751bc4b602d9e": "0x159f20bed00f00000",
        "0x2c83aeb02fcf067d65a47082fd977833ab1cec91": "0x8273823258ac00000",
        "0x2c89f5fdca3d155409b638b98a742e55eb4652b7": "0x14dbb2195ca228900000",
        "0x2c964849b1f69cc7cea4442538ed87fdf16cfc8f": "0x6c6b935b8bbd400000",
        "0x2c9fa72c95f37d08e9a36009e7a4b07f29bad41a": "0xdf6eb0b2d3ca0000",
        "0x2caf6bf4ec7d5a19c5e0897a5eeb011dcece4210": "0x7934835a031160000",
        "0x2cb4c3c16bb1c55e7c6b7a19b127a1ac9390cc09": "0xb82794a9244f0c8000",
        "0x2cb5495a505336c2465410d1cae095b8e1ba5cdd": "0x43c33c1937564800000",
        "0x2cb615073a40dcdb99faa848572e987b3b056efb": "0x2b58addb89a2580000",
        "0x2cba6d5d0dc204ea8a25ada2e26f5675bd5f2fdc": "0x4823ef7ddb9af38000",
        "0x2cbb0c73df91b91740b6693b774a7d05177e8e58": "0x6449e84e47a8a80000",
        "0x2ccb66494d0af689abf9483d365d782444e7dead": "0x3635c9adc5dea00000",
        "0x2ccc1f1cb5f4a8002e186b20885d9dbc030c0894": "0x6c6b935b8bbd400000",
        "0x2ccf80e21898125eb4e807cd82e09b9d28592f6e": "0x6c6b935b8bbd400000",
        "0x2cd19694d1926a0fa9189edebafc671cf1b2caa5": "0x3635c9adc5dea00000",
        "0x2cd39334ac7eac797257abe3736195f5b4b5ce0f": "0x56b47785e37260000",
        "0x2cd79eb52027b12c18828e3eaab2969bfcd287e9": "0x1158e460913d00000",
        "0x2cd87866568dd81ad47d9d3ad0846e5a65507373": "0x15af1d78b58c400000",
        "0x2cdb3944650616e47cb182e060322fa1487978ce": "0x62a992e53a0af00000",
        "0x2ce11a92fad024ff2b3e87e3b542e6c60dcbd996": "0xd8d726b7177a800000",
        "0x2d0326b23f0409c0c0e9236863a133075a94ba18": "0xb679be75be6ae0000",
        "0x2d0dec51a6e87330a6a8fa2a0f65d88d4abcdf73": "0xa076407d3f7440000",
        "0x2d23766b6f6b05737dad80a419c40eda4d77103e": "0xcf152640c5c8300000",
        "0x2d2b032359b363964fc11a518263bfd05431e867": "0x81c1df7629e700000",
        "0x2d3480bf0865074a72c7759ee5137b4d70c51ce9": "0xad78ebc5ac6200000",
        "0x2d35a9df62757f7ffad1049afb06ca4afc464c51": "0x1158e460913d00000",
        "0x2d40558b06f90a3923145592123b6774e46e31f4": "0x3635c9adc5dea00000",
        "0x2d426912d059fad9740b2e390a2eeac0546ff01b": "0x4be4e7267b6ae00000",
        "0x2d532df4c63911d1ce91f6d1fcbff7960f78a885": "0x5a85968a5878da8000",
        "0x2d5391e938b34858cf965b840531d5efda410b09": "0x4be4e7267b6ae00000",
        "0x2d5b42fc59ebda0dfd66ae914bc28c1b0a6ef83a": "0x2bc8b59fdcd836638000",
        "0x2d5d7335acb0362b47dfa3a8a4d3f5949544d380": "0xad78ebc5ac6200000",
        "0x2d61bfc56873923c2b00095dc3eaa0f590d8ae0f": "0x46566dff8ce55600000",
        "0x2d6511fd7a3800b26854c7ec39c0dcb5f4c4e8e8": "0x15adddba2f9e770000",
        "0x2d7d5c40ddafc450b04a74a4dabc2bb5d665002e": "0x6c6b935b8bbd400000",
        "0x2d89a8006a4f137a20dc2bec46fe2eb312ea9654": "0xad78ebc5ac6200000",
        "0x2d8c52329f38d2a2fa9cbaf5c583daf1490bb11c": "0x1158e460913d00000",
        "0x2d8e061892a5dcce21966ae1bb0788fd3e8ba059": "0xd8e5ce617f2d50000",
        "0x2d8e5bb8d3521695c77e7c834e0291bfacee7408": "0x6acb3df27e1f880000",
        "0x2d90b415a38e2e19cdd02ff3ad81a97af7cbf672": "0x5f3c7f64131e40000",
        "0x2d9bad6f1ee02a70f1f13def5cccb27a9a274031": "0x61093d7c2c6d380000",
        "0x2d9c5fecd2b44fbb6a1ec732ea059f4f1f9d2b5c": "0x36ca32661d1aa70000",
        "0x2da617695009cc57d26ad490b32a5dfbeb934e5e": "0x43c33c1937564800000",
        "0x2da76b7c39b420e388ba2c1020b0856b0270648a": "0x6c6b935b8bbd400000",
        "0x2dc79d6e7f55bce2e2d0c02ad07ceca8bb529354": "0x55a6e79ccd1d300000",
        "0x2dca0e449ab646dbdfd393a96662960bcab5ae1e": "0x878678326eac9000000",
        "0x2dd325fdffb97b19995284afa5abdb574a1df16a": "0x1b1ae4d6e2ef500000",
        "0x2dd578f7407dfbd548d05e95ccc39c485429626a": "0xe3aeb5737240a00000",
        "0x2dd8eeef87194abc2ce7585da1e35b7cea780cb7": "0x3635c6204739d98000",
        "0x2ddf40905769bcc426cb2c2938ffe077e1e89d98": "0xa2a15d09519be00000",
        "0x2de0964400c282bdd78a919c6bf77c6b5f796179": "0xad78ebc5ac6200000",
        "0x2de31afd189a13a76ff6fe73ead9f74bb5c4a629": "0x14542ba12a337c00000",
        "0x2dec98329d1f96c3a59caa7981755452d4da49d5": "0xad78ebc5ac6200000",
        "0x2dee90a28f192d676a8773232b56f18f239e2fad": "0x3efa7e747b6d1ad0000",
        "0x2e0880a34596230720f05ac8f065af8681dcb6c2": "0x152d02c7e14af6800000",
        "0x2e0c57b47150f95aa6a7e16ab9b1cbf54328979a": "0x56bc75e2d63100000",
        "0x2e10910ba6e0bc17e055556614cb87090f4d7e5b": "0xad78ebc5ac6200000",
        "0x2e24b597873bb141bdb237ea8a5ab747799af02d": "0x43c33c1937564800000",
        "0x2e2810dee44ae4dff3d86342ab126657d653c336": "0xad78ebc5ac6200000",
        "0x2e2cbd7ad82547b4f5ff8b3ab56f942a6445a3b0": "0xad78ebc5ac6200000",
        "0x2e2d7ea66b9f47d8cc52c01c52b6e191bc7d4786": "0xd8d4602c26bf6c0000",
        "0x2e439348df8a4277b22a768457d1158e97c40904": "0x2a1e9ff26fbf410000",
        "0x2e46fcee6a3bb145b594a243a3913fce5dad6fba": "0x21e19e0c9bab2400000",
        "0x2e47f287f498233713850d3126823cc67dcee255": "0xca9d9ea558b40000",
        "0x2e4ee1ae996aa0a1d92428d06652a6bea6d2d15d": "0x6c6b935b8bbd400000",
        "0x2e52912bc10ea39d54e293f7aed6b99a0f4c73be": "0x15af1d78b58c400000",
        "0x2e619f57abc1e987aa936ae3a2264962e7eb2d9a": "0x28fb9b8a8a53500000",
        "0x2e64a8d71111a22f4c5de1e039b336f68d398a7c": "0x6c6b935b8bbd400000",
        "0x2e6933543d4f2cc00b5350bd8068ba9243d6beb0": "0x6c6b935b8bbd400000",
        "0x2e7e05e29edda7e4ae25c5173543efd71f6d3d80": "0x14542ba12a337c00000",
        "0x2e7f465520ec35cc23d68e75651bb6689544a196": "0x38ec5b721a1a268000",
        "0x2e8eb30a716e5fe15c74233e039bfb1106e81d12": "0x56bc75e2d63100000",
        "0x2e9824b5c132111bca24ddfba7e575a5cd7296c1": "0x3a484516e6d7ffe0000",
        "0x2ea5fee63f337a376e4b918ea82148f94d48a626": "0x650f8e0dd293c50000",
        "0x2eaf4e2a46b789ccc288c8d1d9294e3fb0853896": "0x6c6b935b8bbd400000",
        "0x2eaff9f8f8113064d3957ac6d6e11eee42c8195d": "0x6acb3df27e1f880000",
        "0x2eba0c6ee5a1145c1c573984963a605d880a7a20": "0x1b1ae4d6e2ef500000",
        "0x2ec95822eb887bc113b4712a4dfd7f13b097b5e7": "0x3635c9adc5dea00000",
        "0x2eca6a3c5d9f449d0956bd43fa7b4d7be8435958": "0x6c6bda69709cc20000",
        "0x2ecac504b233866eb5a4a99e7bd2901359e43b3d": "0x43c33c1937564800000",
        "0x2eebf59432b52892f9380bd140aa99dcf8ad0c0f": "0x83d6c7aab63600000",
        "0x2eeed50471a1a2bf53ee30b1232e6e9d80ef866d": "0x1158e460913d00000",
        "0x2eef6b1417d7b10ecfc19b123a8a89e73e526c58": "0x2086ac351052600000",
        "0x2ef869f0350b57d53478d701e3fee529bc911c75": "0x2b5e3af16b1880000",
        "0x2ef9e465716acacfb8c8252fa8e7bc7969ebf6e4": "0x959eb1c0e4ae200000",
        "0x2efc4c647dac6acac35577ad221758fef6616faa": "0x1b1ae4d6e2ef5000000",
        "0x2f13657526b177cad547c3908c840eff647b45d9": "0x3f76849cf1ee2c8000",
        "0x2f187d5a704d5a338c5b2876a090dce964284e29": "0xd8d726b7177a800000",
        "0x2f2523cc834f0086052402626296675186a8e582": "0x3635c9adc5dea000000",
        "0x2f282abbb6d4a3c3cd3b5ca812f7643e80305f06": "0x6449e84e47a8a80000",
        "0x2f2bba1b1796821a766fce64b84f28ec68f15aea": "0x1158e460913d00000",
        "0x2f315d9016e8ee5f536681202f9084b032544d4d": "0x383cd12b9e863c0000",
        "0x2f4da753430fc09e73acbccdcde9da647f2b5d37": "0xad78ebc5ac6200000",
        "0x2f5080b83f7e2dc0a1dd11b092ad042bff788f4c": "0xb4f8fb79231d2b8000",
        "0x2f61efa5819d705f2b1e4ee754aeb8a819506a75": "0x4f2591f896a6500000",
        "0x2f66bfbf2262efcc8d2bd0444fc5b0696298ff1e": "0x21ad935f79f76d00000",
        "0x2f6dce1330c59ef921602154572d4d4bacbd048a": "0x3635c9adc5dea00000",
        "0x2f7d3290851be5c6b4b43f7d4574329f61a792c3": "0x56bc75e2d63100000",
        "0x2f853817afd3b8f3b86e9f60ee77b5d97773c0e3": "0x4eaeea44e368b90000",
        "0x2fa491fb5920a6574ebd289f39c1b2430d2d9a6a": "0x6c6b935b8bbd400000",
        "0x2fb566c94bbba4e3cb67cdda7d5fad7131539102": "0x6c6b935b8bbd400000",
        "0x2fbb504a5dc527d3e3eb0085e2fc3c7dd538cb7a": "0x43c2b18aec3c0a8000",
        "0x2fbc85798a583598b522166d6e9dda121d627dbc": "0xad78ebc5ac6200000",
        "0x2fbcef3384d420e4bf61a0669990bc7054f1a5af": "0x6c6b935b8bbd400000",
        "0x2fc82ef076932341264f617a0c80dd571e6ae939": "0x18424f5f0b1b4e00000",
        "0x2fdd9b79df8df530ad63c20e62af431ae99216b8": "0x1236efcbcbb340000",
        "0x2fe0023f5722650f3a8ac01009125e74e3f82e9b": "0xa2a15d09519be00000",
        "0x2fe0cc424b53a31f0916be08ec81c50bf8eab0c1": "0x2086ac351052600000",
        "0x2fe13a8d0785de8758a5e41876c36e916cf75074": "0xd8d726b7177a800000",
        "0x2fea1b2f834f02fc54333f8a809f0438e5870aa9": "0x11854d0f9cee40000",
        "0x2fee36a49ee50ecf716f1047915646779f8ba03f": "0x394222c4da86d70000",
        "0x2fef81478a4b2e8098db5ff387ba2153f4e22b79": "0x3627e8f712373c0000",
        "0x2ff160c44f72a299b5ec2d71e28ce5446d2fcbaf": "0x138400eca364a00000",
        "0x2ff1ca55fd9cec1b1fe9f0a9abb74c513c1e2aaa": "0xa2a15d09519be00000",
        "0x2ff5cab12c0d957fd333f382eeb75107a64cb8e8": "0x21e19e0c9bab2400000",
        "0x2ff830cf55fb00d5a0e03514fecd44314bd6d9f1": "0x21e19e0c9bab2400000",
        "0x2ffe93ec1a5636e9ee34af70dff52682e6ff7079": "0x6c6b935b8bbd400000",
        "0x30037988702671acbe892c03fe5788aa98af287a": "0x97c9ce4cf6d5c00000",
        "0x30248d58e414b20fed3a6c482b59d9d8f5a4b7e2": "0x340aad21b3b700000",
        "0x303139bc596403d5d3931f774c66c4ba467454db": "0x5c25e14aea283f0000",
        "0x30380087786965149e81423b15e313ba32c5c783": "0xfc936392801c0000",
        "0x303a30ac4286ae17cf483dad7b870c6bd64d7b4a": "0x1b1ae4d6e2ef500000",
        "0x303fbaebbe46b35b6e5b74946a5f99bc1585cae7": "0x2f9ac0695f5bba0000",
        "0x3041445a33ba158741160d9c344eb88e5c306f94": "0x340aad21b3b700000",
        "0x30480164bcd84974ebc0d90c9b9afab626cd1c73": "0x2b5e3af16b18800000",
        "0x304ec69a74545721d7316aef4dcfb41ac59ee2f0": "0xad78ebc5ac6200000",
        "0x30511832918d8034a7bee72ef2bfee440ecbbcf6": "0x368c8623a8b4d100000",
        "0x30513fca9f36fd788cfea7a340e86df98294a244": "0x183b5f03b1479c0000",
        "0x3055efd26029e0d11b930df4f53b162c8c3fd2ce": "0x1b1a089237073d0000",
        "0x305d26c10bdc103f6b9c21272eb7cb2d9108c47e": "0x1b1ae4d6e2ef500000",
        "0x305f78d618b990b4295bac8a2dfa262884f804ea": "0xd8d726b7177a800000",
        "0x3064899a963c4779cbf613cd6980846af1e6ec65": "0x17b773ce6e5df0a0000",
        "0x30730466b8eb6dc90d5496aa76a3472d7dbe0bbe": "0x6c68ccd09b022c0000",
        "0x30742ccdf4abbcd005681f8159345c9e79054b1a": "0x243d4d18229ca20000",
        "0x3083ef0ed4c4401196774a95cf4edc83edc1484f": "0x23ffb7ed6565d6400000",
        "0x308dd21cebe755126704b48c0f0dc234c60ba9b1": "0xad78ebc5ac6200000",
        "0x3090f8130ec44466afadb36ed3c926133963677b": "0xd8d726b7177a800000",
        "0x309544b6232c3dd737f945a03193d19b5f3f65b9": "0x3af342f67ef6c80000",
        "0x3096dca34108085bcf04ae72b94574a13e1a3e1d": "0xad78ebc5ac6200000",
        "0x3098b65db93ecacaf7353c48808390a223d57684": "0x186484cf7bb6a48000",
        "0x30a9da72574c51e7ee0904ba1f73a6b7b83b9b9d": "0x11854d0f9cee40000",
        "0x30acd858875fa24eef0d572fc7d62aad0ebddc35": "0x15af1d78b58c400000",
        "0x30b66150f1a63457023fdd45d0cc6cb54e0c0f06": "0x3635c9adc5dea00000",
        "0x30bb4357cd6910c86d2238bf727cbe8156680e62": "0x56bf91b1a65eb0000",
        "0x30bf61b2d877fe10635126326fa189e4b0b1c3b0": "0x37b48985a5d7e60000",
        "0x30c01142907acb1565f70438b9980ae731818738": "0x6c6b935b8bbd400000",
        "0x30c26a8e971baa1855d633ba703f028cc7873140": "0x21e19e0c9bab2400000",
        "0x30db6b9b107e62102f434a9dd0960c2021f5ce4c": "0x2083179b6e42530000",
        "0x30e33358fc21c85006e40f32357dc8895940aaf0": "0x678a932062e4180000",
        "0x30e60900cacc7203f314dc604347255167fc2a0f": "0x6c6b935b8bbd400000",
        "0x30e789b3d2465e946e6210fa5b35de4e8c93085f": "0x6c6b935b8bbd400000",
        "0x30e9698cf1e08a9d048bd8d8048f28be7ed9409f": "0x16a6502f15a1e540000",
        "0x30e9d5a0088f1ddb2fd380e2a049192266c51cbf": "0xaacacd9b9e22b0000",
        "0x30eac740e4f02cb56eef0526e5d300322600d03e": "0x6acb3df27e1f880000",
        "0x30ec9392244a2108c987bc5cdde0ed9f837a817b": "0x549925f6c9c5250000",
        "0x30ed11b77bc17e5e6694c8bc5b6e4798f68d9ca7": "0x1e6fb3421fe0299e0000",
        "0x30f7d025d16f7bee105580486f9f561c7bae3fef": "0x1b1ae4d6e2ef500000",
        "0x30fbe5885f9fcce9ea5edb82ed4a1196dd259aed": "0x119e47f21381f400000",
        "0x31047d703f63b93424fbbd6e2f1f9e74de13e709": "0x9a8166f7e6b2a78000",
        "0x31313ffd635bf2f3324841a88c07ed146144ceeb": "0x6acb3df27e1f880000",
        "0x3159e90c48a915904adfe292b22fa5fd5e72796b": "0x36afe98f2606100000",
        "0x315db7439fa1d5b423afa7dd7198c1cf74c918bc": "0x2086ac351052600000",
        "0x315ef2da620fd330d12ee55de5f329a696e0a968": "0x821ab0d4414980000",
        "0x316e92a91bbda68b9e2f98b3c048934e3cc0b416": "0x6c6b935b8bbd400000",
        "0x316eb4e47df71b42e16d6fe46825b7327baf3124": "0xd8d726b7177a800000",
        "0x3171877e9d820cc618fc0919b29efd333fda4934": "0x3635c9adc5dea00000",
        "0x317cf4a23cb191cdc56312c29d15e210b3b9b784": "0x7ce66c50e28400000",
        "0x318b2ea5f0aaa879c4d5e548ac9d92a0c67487b7": "0xad78ebc5ac6200000",
        "0x318c76ecfd8af68d70555352e1f601e35988042d": "0x1b31192e68c7f00000",
        "0x318f1f8bd220b0558b95fb33100ffdbb640d7ca6": "0xd8d726b7177a800000",
        "0x31aa3b1ebe8c4dbcb6a708b1d74831e60e497660": "0x15af1d78b58c400000",
        "0x31ab088966ecc7229258f6098fce68cf39b38485": "0x3635c9adc5dea00000",
        "0x31ad4d9946ef09d8e988d946b1227f9141901736": "0x4d853c8f89089800000",
        "0x31b43b015d0081643c6cda46a7073a6dfdbca825": "0xa97916520cd18e80000",
        "0x31ccc616b3118268e75d9ab8996c8858ebd7f3c3": "0x15ae0f771ca1520000",
        "0x31d81d526c195e3f10b5c6db52b5e59afbe0a995": "0xe4fbc69449f200000",
        "0x31e9c00f0c206a4e4e7e0522170dc81e88f3eb70": "0x918ddc3a42a3d40000",
        "0x31ea12d49a35a740780ddeeaece84c0835b26270": "0xad78ebc5ac6200000",
        "0x31ea6eab19d00764e9a95e183f2b1b22fc7dc40f": "0x1158e460913d00000",
        "0x31eb123c95c82bf685ace7a75a1881a289efca10": "0x31e009607371bd0000",
        "0x31ed858788bda4d5270992221cc04206ec62610d": "0x3fc0474948f3600000",
        "0x31f006f3494ed6c16eb92aaf9044fa8abb5fd5a3": "0x1b1ae4d6e2ef500000",
        "0x3201259caf734ad7581c561051ba0bca7fd6946b": "0x261dd1ce2f2088800000",
        "0x32034e8581d9484e8af42a28df190132ec29c466": "0xbb9125542263900000",
        "0x322021022678a0166d204b3aaa7ad4ec4b88b7d0": "0x15af1d78b58c400000",
        "0x3225c1ca5f2a9c88156bb7d9cdc44a326653c214": "0x15af1d78b58c400000",
        "0x322788b5e29bf4f5f55ae1ddb32085fda91b8ebe": "0xad78ebc5ac6200000",
        "0x322d6f9a140d213f4c80cd051afe25c620bf4c7d": "0x1158e460913d00000",
        "0x322e5c43b0f524389655a9b3ff24f2d4db3da10f": "0xfc13b69b3e7e680000",
        "0x323486ca64b375474fb2b759a9e7a135859bd9f6": "0x15af1d78b58c400000",
        "0x323749a3b971959e46c8b4822dcafaf7aaf9bd6e": "0x11671a5b245700000",
        "0x323aad41df4b6fc8fece8c93958aa901fa680843": "0x34957444b840e80000",
        "0x323b3cfe3ee62bbde2a261e53cb3ecc05810f2c6": "0x2eb8eb1a172dcb80000",
        "0x323fca5ed77f699f9d9930f5ceeff8e56f59f03c": "0x487a9a304539440000",
        "0x32485c818728c197fea487fbb6e829159eba8370": "0x3921b413bc4ec08000",
        "0x3250e3e858c26adeccadf36a5663c22aa84c4170": "0x10f0cf064dd59200000",
        "0x3259bd2fddfbbc6fbad3b6e874f0bbc02cda18b5": "0x2846056495b0d188000",
        "0x3275496fd4dd8931fd69fb0a0b04c4d1ff879ef5": "0x182d7e4cfda0380000",
        "0x327bb49e754f6fb4f733c6e06f3989b4f65d4bee": "0x1158e460913d00000",
        "0x3282791d6fd713f1e94f4bfd565eaa78b3a0599d": "0x487a9a304539440000",
        "0x3283eb7f9137dd39bed55ffe6b8dc845f3e1a079": "0x3970ae92155780000",
        "0x32860997d730b2d83b73241a25d3667d51c908ef": "0x1b1a089237073d0000",
        "0x3286d1bc657a312c8847d93cb3cb7950f2b0c6e3": "0x43c33c1937564800000",
        "0x32a20d028e2c6218b9d95b445c771524636a22ef": "0x202fefbf2d7c2f00000",
        "0x32a70691255c9fc9791a4f75c8b81f388e0a2503": "0x35659ef93f0fc40000",
        "0x32b7feebc5c59bf65e861c4c0be42a7611a5541a": "0x77e9aaa8525c100000",
        "0x32ba9a7d0423e03a525fe2ebeb661d2085778bd8": "0x43c33c1937564800000",
        "0x32bb2e9693e4e085344d2f0dbd46a283e3a087fd": "0x15af1d78b58c400000",
        "0x32c2fde2b6aabb80e5aea2b949a217f3cb092283": "0x1306160afdf20378000",
        "0x32d950d5e93ea1d5b48db4714f867b0320b31c0f": "0x3708baed3d68900000",
        "0x32dbb6716c54e83165829a4abb36757849b6e47d": "0x3635c9adc5dea00000",
        "0x32eb64be1b5dede408c6bdefbe6e405c16b7ed02": "0x6acb3df27e1f880000",
        "0x32ef5cdc671df5562a901aee5db716b9be76dcf6": "0x6c6b935b8bbd400000",
        "0x32f29e8727a74c6b4301e3ffff0687c1b870dae9": "0x3635c9adc5dea00000",
        "0x32fa0e86cd087dd68d693190f32d93310909ed53": "0xd8d726b7177a800000",
        "0x32fbeed6f626fcdfd51acafb730b9eeff612f564": "0x6c6b935b8bbd400000",
        "0x3300fb149aded65bcba6c04e9cd6b7a03b893bb1": "0xfc936392801c0000",
        "0x3301d9ca2f3bfe026279cd6819f79a293d98156e": "0xa968163f0a57b400000",
        "0x3308b03466c27a17dfe1aafceb81e16d2934566f": "0x39992648a23c8a00000",
        "0x331a1c26cc6994cdd3c14bece276ffff4b9df77c": "0xfa7aeddf4f068000",
        "0x3326b88de806184454c40b27f309d9dd6dcfb978": "0x3ca5c66d9bc44300000",
        "0x3329eb3baf4345d600ced40e6e9975656f113742": "0x10f08eda8e555098000",
        "0x33320dd90f2baa110dd334872a998f148426453c": "0x36356633ebd8ea0000",
        "0x3336c3ef6e8b50ee90e037b164b7a8ea5faac65d": "0xec8a3a71c22540000",
        "0x33380c6fff5acd2651309629db9a71bf3f20c5ba": "0x368c8623a8b4d100000",
        "0x333ad1596401e05aea2d36ca47318ef4cd2cb3df": "0x9dc05cce28c2b80000",
        "0x334340ee4b9cdc81f850a75116d50ee9b69825bf": "0x6c6b935b8bbd400000",
        "0x33481e856ebed48ea708a27426ef28e867f57cd1": "0xad78ebc5ac6200000",
        "0x33565ba9da2c03e778ce12294f081dfe81064d24": "0x3635c9adc5dea000000",
        "0x33581cee233088c0860d944e0cf1ceabb8261c2e": "0xb98bc829a6f90000",
        "0x335858f749f169cabcfe52b796e3c11ec47ea3c2": "0xad78ebc5ac6200000",
        "0x335e22025b7a77c3a074c78b8e3dfe071341946e": "0x227ca730ab3f6ac0000",
        "0x33629bd52f0e107bc071176c64df108f64777d49": "0x1cfdd7468216e8000",
        "0x337b3bdf86d713dbd07b5dbfcc022b7a7b1946ae": "0xd7c198710e66b00000",
        "0x337cfe1157a5c6912010dd561533791769c2b6a6": "0x3635c9adc5dea00000",
        "0x33b336f5ba5edb7b1ccc7eb1a0d984c1231d0edc": "0x6c6b935b8bbd400000",
        "0x33c407133b84b3ca4c3ded1f4658900c38101624": "0x97c9ce4cf6d5c00000",
        "0x33d172ab075c51db1cd40a8ca8dbff0d93b843bb": "0x136780510d12de38000",
        "0x33e9b71823952e1f66958c278fc28b1196a6c5a4": "0x56bc75e2d63100000",
        "0x33ea6b7855e05b07ab80dab1e14de9b649e99b6c": "0x1cd6fbad57dbd00000",
        "0x33f15223310d44de8b6636685f3a4c3d9c5655a5": "0xd9462c6cb4b5a0000",
        "0x33f4a6471eb1bca6a9f85b3b4872e10755c82be1": "0x6c6b935b8bbd400000",
        "0x33fb577a4d214fe010d32cca7c3eeda63f87ceef": "0x3635c9adc5dea00000",
        "0x33fd718f0b91b5cec88a5dc15eecf0ecefa4ef3d": "0x177224aa844c720000",
        "0x341480cc8cb476f8d01ff30812e7c70e05afaf5d": "0x6c6b935b8bbd400000",
        "0x34272d5e7574315dcae9abbd317bac90289d4765": "0x62a992e53a0af00000",
        "0x3430a16381f869f6ea5423915855e800883525a9": "0x3ca5c66d9bc44300000",
        "0x34318625818ec13f11835ae97353ce377d6f590a": "0x52663ccab1e1c00000",
        "0x34393c5d91b9de597203e75bac4309b5fa3d28c3": "0xa844a7424d9c80000",
        "0x3439998b247cb4bf8bc80a6d2b3527f1dfe9a6d2": "0x796e3ea3f8ab00000",
        "0x34437d1465640b136cb5841c3f934f9ba0b7097d": "0x960db77681e940000",
        "0x344a8db086faed4efc37131b3a22b0782dad7095": "0x1b1ae4d6e2ef500000",
        "0x34664d220fa7f37958024a3332d684bcc6d4c8bd": "0x21e19e0c9bab2400000",
        "0x3466f67e39636c01f43b3a21a0e8529325c08624": "0x2db1167650acd80000",
        "0x3485361ee6bf06ef6508ccd23d94641f814d3e2f": "0x6c6b935b8bbd400000",
        "0x3485f621256433b98a4200dad857efe55937ec98": "0x6c6b935b8bbd400000",
        "0x34958a46d30e30b273ecc6e5d358a212e5307e8c": "0x6c6b935b8bbd400000",
        "0x3497dd66fd118071a78c2cb36e40b6651cc82598": "0x5f1016b5076d00000",
        "0x349a816b17ab3d27bbc0ae0051f6a070be1ff29d": "0x21e19e0c9bab2400000",
        "0x349d2c918fd09e2807318e66ce432909176bd50b": "0x3cb71f51fc55800000",
        "0x34a0431fff5ead927f3c69649616dc6e97945f6f": "0x15af1d78b58c400000",
        "0x34a85d6d243fb1dfb7d1d2d44f536e947a4cee9e": "0x43c33c1937564800000",
        "0x34a901a69f036bcf9f7843c0ba01b426e8c3dc2b": "0xd8d726b7177a800000",
        "0x34b454416e9fb4274e6addf853428a0198d62ee1": "0x161042779f1ffc0000",
        "0x34c8e5f1330fcb4b14ca75cb2580a4b93d204e36": "0x6c6b935b8bbd400000",
        "0x34e2849bea583ab0cc37975190f322b395055582": "0x1a5c5e857fdf2b20000",
        "0x34fa7792bad8bbd7ff64056214a33eb6600c1ea8": "0x2b5e3af16b1880000",
        "0x34ff26eb60a8d1a95a489fae136ee91d4e58084c": "0x2086ac351052600000",
        "0x34ff582952ff24458f7b13d51f0b4f987022c1fe": "0x9806de3da6e9780000",
        "0x35106ba94e8563d4b3cb3c5c692c10e604b7ced8": "0x6c6b935b8bbd400000",
        "0x35145f620397c69cb8e00962961f0f4886643989": "0x14542ba12a337c00000",
        "0x35147430c3106500e79fa2f502462e94703c23b1": "0x6c6acc67d7b1d40000",
        "0x351787843505f8e4eff46566cce6a59f4d1c5fe7": "0x1f5718987664b480000",
        "0x351f16e5e0735af56751b0e225b2421171394090": "0x2d4ca05e2b43ca80000",
        "0x3524a000234ebaaf0789a134a2a417383ce5282a": "0x1317955947d8e2c0000",
        "0x3526eece1a6bdc3ee7b400fe935b48463f31bed7": "0x477879b6d14300000",
        "0x352a785f4a921632504ce5d015f83c49aa838d6d": "0xe9e7e0fb35b7780000",
        "0x352d29a26e8a41818181746467f582e6e84012e0": "0x14542ba12a337c00000",
        "0x352e77c861696ef96ad54934f894aa8ea35151dd": "0x3635c9adc5dea00000",
        "0x352f25babf4a690673e35195efa8f79d05848aad": "0xe253c39be6e7dc00000",
        "0x3536453322c1466cb905af5c335ca8db74bff1e6": "0x183b5f03b1479c0000",
        "0x353dbec42f92b50f975129b93c4c997375f09073": "0x6c5db2a4d815dc0000",
        "0x3540c7bd7a8442d5bee21a2180a1c4edff1649e0": "0x432eac4c6f05b98000",
        "0x3549bd40bbbc2b30095cac8be2c07a0588e0aed6": "0x1158e460913d00000",
        "0x3552a496eba67f12be6eedab360cd13661dc7480": "0x1043561a8829300000",
        "0x3554947b7b947b0040da52ca180925c6d3b88ffe": "0x39fbae8d042dd0000",
        "0x355c0c39f5d5700b41d375b3f17851dcd52401f9": "0xd7b3b7ba5abf4c0000",
        "0x355ccfe0e77d557b971be1a558bc02df9eee0594": "0x5f5cb1afc865280000",
        "0x3571cf7ad304ecaee595792f4bbfa484418549d6": "0x13bcd0d892d9e160000",
        "0x3575c770668a9d179f1ef768c293f80166e2aa3d": "0x19b21248a3ef280000",
        "0x357a02c0a9dfe287de447fb67a70ec5b62366647": "0x1731790534df20000",
        "0x35855ec641ab9e081ed0c2a6dcd81354d0244a87": "0x4127abe993a7aa8000",
        "0x3588895ac9fbafec012092dc05c0c302d90740fa": "0xa2a15d09519be00000",
        "0x3599493ce65772cf93e98af1195ec0955dc98002": "0x5151590c67b3280000",
        "0x35a08081799173e001cc5bd46a02406dc95d1787": "0x21e19e0c9bab2400000",
        "0x35a549e8fd6c368d6dcca6d2e7d18e4db95f5284": "0x1b1a089237073d0000",
        "0x35a6885083c899dabbf530ed6c12f4dd3a204cf5": "0xad78ebc5ac6200000",
        "0x35aaa0465d1c260c420fa30e2629869fb6559207": "0x263781e0e087c80000",
        "0x35ac1d3ed7464fa3db14e7729213ceaa378c095e": "0x52663ccab1e1c00000",
        "0x35af040a0cc2337a76af288154c7561e1a233349": "0x3635c9adc5dea00000",
        "0x35b03ea4245736f57b85d2eb79628f036ddcd705": "0xd8d726b7177a800000",
        "0x35bd246865fab490ac087ac1f1d4f2c10d0cda03": "0x15af1d78b58c400000",
        "0x35bf6688522f35467a7f75302314c02ba176800e": "0x3af418202d954e00000",
        "0x35c8adc11125432b3b77acd64625fe58ebee9d66": "0x6c6b935b8bbd400000",
        "0x35d2970f49dcc81ea9ee707e9c8a0ab2a8bb7463": "0x4e1003b28d92800000",
        "0x35e096120deaa5c1ecb1645e2ccb8b4edbd9299a": "0x1b1ae4d6e2ef500000",
        "0x35ea2163a38cdf9a123f82a5ec00258dae0bc767": "0xd8d726b7177a800000",
        "0x35f1da127b83376f1b88c82a3359f67a5e67dd50": "0x678a932062e4180000",
        "0x35f2949cf78bc219bb4f01907cf3b4b3d3865482": "0xfb5c86c92e4340000",
        "0x35f5860149e4bbc04b8ac5b272be55ad1aca58e0": "0xad78ebc5ac6200000",
        "0x3602458da86f6d6a9d9eb03daf97fe5619d442fa": "0x6c6b935b8bbd400000",
        "0x3605372d93a9010988018f9f315d032ed1880fa1": "0x1b1bcf51896a7d0000",
        "0x3616d448985f5d32aefa8b93a993e094bd854986": "0xb227f63be813c0000",
        "0x3616fb46c81578c9c8eb4d3bf880451a88379d7d": "0xad78ebc5ac6200000",
        "0x361c75931696bc3d427d93e76c77fd13b241f6f4": "0x1dc5d8fc266dd60000",
        "0x361d9ed80b5bd27cf9f1226f26753258ee5f9b3f": "0xbf6914ba7d72c20000",
        "0x361f3ba9ed956b770f257d3672fe1ff9f7b0240c": "0x2086ac351052600000",
        "0x36227cdfa0fd3b9d7e6a744685f5be9aa366a7f0": "0xac2730ee9c6c18000",
        "0x362fbcb10662370a068fc2652602a2577937cce6": "0xad78ebc5ac6200000",
        "0x3630c5e565ceaa8a0f0ffe32875eae2a6ce63c19": "0x937722b3774d00000",
        "0x36339f84a5c2b44ce53dfdb6d4f97df78212a7df": "0x116f18b81715a00000",
        "0x36343aeca07b6ed58a0e62fa4ecb498a124fc971": "0x1043561a8829300000",
        "0x366175403481e0ab15bb514615cbb989ebc68f82": "0x6c6b935b8bbd400000",
        "0x36726f3b885a24f92996da81625ec8ad16d8cbe6": "0x53af75d18148578000",
        "0x3673954399f6dfbe671818259bb278e2e92ee315": "0x2a5a058fc295ed000000",
        "0x36758e049cd98bcea12277a676f9297362890023": "0xd8d726b7177a800000",
        "0x367f59cc82795329384e41e1283115e791f26a01": "0x6c6b935b8bbd400000",
        "0x36810ff9d213a271eda2b8aa798be654fa4bbe06": "0x6c6b935b8bbd400000",
        "0x368c5414b56b8455171fbf076220c1cba4b5ca31": "0x1e3ef911e83d720000",
        "0x3690246ba3c80679e22eac4412a1aefce6d7cd82": "0x43c33c1937564800000",
        "0x36928b55bc861509d51c8cf1d546bfec6e3e90af": "0x6acb3df27e1f880000",
        "0x369822f5578b40dd1f4471706b22cd971352da6b": "0x12c1b6eed03d280000",
        "0x369ef761195f3a373e24ece6cd22520fe0b9e86e": "0x1cffafc94db2088000",
        "0x36a08fd6fd1ac17ce15ed57eefb12a2be28188bf": "0x487a9a304539440000",
        "0x36a0e61e1be47fa87e30d32888ee0330901ca991": "0x1158e460913d00000",
        "0x36b2c85e3aeeebb70d63c4a4730ce2e8e88a3624": "0x21e19e0c9bab2400000",
        "0x36bf43ff35df90908824336c9b31ce33067e2f50": "0x49721510c1c1e9480000",
        "0x36bfe1fa3b7b70c172eb042f6819a8972595413e": "0x3635c9adc5dea00000",
        "0x36c510bf8d6e569bf2f37d47265dbcb502ff2bce": "0x65a4da25d3016c00000",
        "0x36d85dc3683156e63bf880a9fab7788cf8143a27": "0x43c33c1937564800000",
        "0x36df8f883c1273ec8a171f7a33cfd649b1fe6075": "0xc52484ac416890000",
        "0x36e156610cd8ff64e780d89d0054385ca76755aa": "0x2f6f10780d22cc00000",
        "0x36fec62c2c425e219b18448ad757009d8c54026f": "0x15af1d78b58c400000",
        "0x3700e3027424d939dbde5d42fb78f6c4dbec1a8f": "0x22b1c8c1227a00000",
        "0x3702e704cc21617439ad4ea27a5714f2fda1e932": "0x3635c9adc5dea00000",
        "0x3703350c4d6fe337342cddc65bf1e2386bf3f9b2": "0x6d8121a194d1100000",
        "0x3708e59de6b4055088782902e0579c7201a8bf50": "0x2a5a058fc295ed000000",
        "0x3712367e5e55a96d5a19168f6eb2bc7e9971f869": "0x3635c9adc5dea00000",
        "0x37195a635dcc62f56a718049d47e8f9f96832891": "0x6acb3df27e1f880000",
        "0x3727341f26c12001e378405ee38b2d8464ec7140": "0x6c6b935b8bbd400000",
        "0x372e453a6b629f27678cc8aeb5e57ce85ec0aef9": "0xad78ebc5ac6200000",
        "0x3734cb187491ede713ae5b3b2d12284af46b8101": "0xa2a15d09519be00000",
        "0x3737216ee91f177732fb58fa4097267207e2cf55": "0x52663ccab1e1c00000",
        "0x373c547e0cb5ce632e1c5ad66155720c01c40995": "0xfe54dcdce6c55a0000",
        "0x376cd7577383e902951b60a2017ba7ea29e33576": "0x6c6b935b8bbd400000",
        "0x378ea1dc8edc19bae82638029ea8752ce98bcfcd": "0x6c6b935b8bbd400000",
        "0x378f37243f3ff0bef5e1dc85eb4308d9340c29f9": "0x6c6e59e67c78540000",
        "0x37959c20b7e9931d72f5a8ae869dafddad3b6d5c": "0xad78ebc5ac6200000",
        "0x379a7f755a81a17edb7daaa28afc665dfa6be63a": "0x15af1d78b58c40000",
        "0x379c7166849bc24a02d6535e2def13daeef8aa8d": "0x56bc75e2d63100000",
        "0x37a05aceb9395c8635a39a7c5d266ae610d10bf2": "0x65a4da25d3016c00000",
        "0x37a10451f36166cf643dd2de6c1cbba8a011cfa3": "0x14998f32ac78700000",
        "0x37a7a6ff4ea3d60ec307ca516a48d3053bb79cbb": "0x6c6b935b8bbd400000",
        "0x37ab66083a4fa23848b886f9e66d79cdc150cc70": "0x12be22ffb5ec00380000",
        "0x37ac29bda93f497bc4aeaab935452c431510341e": "0x35659ef93f0fc40000",
        "0x37b8beac7b1ca38829d61ab552c766f48a10c32f": "0x15af1d78b58c400000",
        "0x37bbc47212d82fcb5ee08f5225ecc2041ad2da7d": "0xb1cf24ddd0b1400000",
        "0x37cb868d2c3f95b257611eb34a4188d58b749802": "0x6c6b935b8bbd400000",
        "0x37d980a12ee3bf23cc5cdb63b4ae45691f74c837": "0x6c6b935b8bbd400000",
        "0x37e169a93808d8035698f815c7235613c1e659f2": "0x3635c9adc5dea00000",
        "0x37eada93c475ded2f7e15e7787d400470fa52062": "0xad78ebc5ac6200000",
        "0x37fac1e6bc122e936dfb84de0c4bef6e0d60c2d7": "0x6c6b935b8bbd400000",
        "0x3807eff43aa97c76910a19752dd715ee0182d94e": "0xd90156f6fc2fb0000",
        "0x3815b0743f94fc8cc8654fd9d597ed7d8b77c57e": "0x2809d429d896750000",
        "0x381db4c8465df446a4ce15bf81d47e2f17c980bf": "0x6c6b935b8bbd4000000",
        "0x38202c5cd7078d4f887673ab07109ad8ada89720": "0x3635c9adc5dea00000",
        "0x3821862493242c0aeb84b90de05d250c1e50c074": "0x11776c58e946dc0000",
        "0x382591e7217b435e8e884cdbf415fe377a6fe29e": "0x1b2df9d219f57980000",
        "0x382ba76db41b75606dd48a48f0137e9174e031b6": "0x1158e460913d00000",
        "0x3831757eae7557cb8a37a4b10644b63e4d3b3c75": "0xad78ebc5ac6200000",
        "0x383304dd7a5720b29c1a10f60342219f48032f80": "0x12f939c99edab800000",
        "0x383a7c899ee18bc214969870bc7482f6d8f3570e": "0x21e19e0c9bab2400000",
        "0x38430e931d93be01b4c3ef0dc535f1e0a9610063": "0x21e19e0c9bab2400000",
        "0x38439aaa24e3636f3a18e020ea1da7e145160d86": "0x8cf23f909c0fa00000",
        "0x38458e0685573cb4d28f53098829904570179266": "0x22b1c8c1227a00000",
        "0x3847667038f33b01c1cc795d8daf5475eff5a0d4": "0x277b9bf4246c410000",
        "0x38643babea6011316cc797d9b093c897a17bdae7": "0x1220bb7445daa00000",
        "0x38695fc7e1367ceb163ebb053751f9f68ddb07a0": "0x6c6b935b8bbd400000",
        "0x3872f48dc5e3f817bc6b2ad2d030fc5e0471193d": "0xd8d726b7177a800000",
        "0x387eeafd6b4009deaf8bd5b85a72983a8dcc3487": "0xd8d726b7177a800000",
        "0x3881defae1c07b3ce04c78abe26b0cdc8d73f010": "0xad78ebc5ac6200000",
        "0x3883becc08b9be68ad3b0836aac3b620dc0017ef": "0x6c6b935b8bbd400000",
        "0x3885fee67107dc3a3c741ee290c98918c9b99397": "0x1158e460913d00000",
        "0x3887192c7f705006b630091276b39ac680448d6b": "0x340aad21b3b700000",
        "0x38898bbb4553e00bbfd0cf268b2fc464d154add5": "0x1158e460913d000000",
        "0x388bdcdae794fc44082e667501344118ea96cd96": "0x5a87e7d7f5f6580000",
        "0x388c85a9b9207d8146033fe38143f6d34b595c47": "0xad78ebc5ac6200000",
        "0x3896ad743579d38e2302454d1fb6e2ab69e01bfd": "0x65ea3db75546600000",
        "0x38a3dccf2fcfe0c91a2624bd0cbf88ee4a076c33": "0x6c6b935b8bbd400000",
        "0x38a744efa6d5c2137defef8ef9187b649eee1c78": "0xd8d726b7177a800000",
        "0x38ac664ee8e0795e4275cb852bcba6a479ad9c8d": "0x1158e460913d00000",
        "0x38b2197106123387a0d4de368431a8bacdda30e2": "0x1158e460913d00000",
        "0x38b3965c21fa893931079beacfffaf153678b6eb": "0x93c6a0a51e2670000",
        "0x38b403fb1fb7c14559a2d6f6564a5552bca39aff": "0x6c6b935b8bbd400000",
        "0x38b50146e71916a5448de12a4d742135dcf39833": "0x6d190c475169a200000",
        "0x38bf2a1f7a69de0e2546adb808b36335645da9ff": "0x6c700439d9b5600000",
        "0x38c10b90c859cbb7815692f99dae520ab5febf5e": "0x2c9e4966fa5cf240000",
        "0x38c7851f5ffd4cee98df30f3b25597af8a6ca263": "0x8ead3a2f7d7e180000",
        "0x38d2e9154964b41c8d50a7487d391e7ee2c3d3c2": "0xbdbc41e0348b300000",
        "0x38da1ba2de9e2c954b092dd9d81204fd016ba016": "0x2268ed01f34b3300000",
        "0x38df0c4abe7ded5fe068eadf154ac691774324a4": "0x61093d7c2c6d380000",
        "0x38e2af73393ea98a1d993a74df5cd754b98d529a": "0x61093d7c2c6d380000",
        "0x38e46de4453c38e941e7930f43304f94bb7b2be8": "0x6cb7e74867d5e60000",
        "0x38e7dba8fd4f1f850dbc2649d8e84f0952e3eb3c": "0x2b5e3af16b1880000",
        "0x38e8a31af2d265e31a9fff2d8f46286d1245a467": "0x1158e460913d00000",
        "0x38ea6f5b5a7b88417551b4123dc127dfe9342da6": "0x15af1d78b58c400000",
        "0x38eec6e217f4d41aa920e424b9525197041cd4c6": "0xf00d25eb922e670000",
        "0x38f387e1a4ed4a73106ef2b462e474e2e3143ad0": "0x14542ba12a337c00000",
        "0x391161b0e43c302066e8a68d2ce7e199ecdb1d57": "0xd8d726b7177a800000",
        "0x3915eab5ab2e5977d075dec47d96b68b4b5cf515": "0xd07018185120f400000",
        "0x391a77405c09a72b5e8436237aaaf95d68da1709": "0x2a9264af3d1b90000",
        "0x391f20176d12360d724d51470a90703675594a4d": "0x56bc75e2d631000000",
        "0x392433d2ce83d3fb4a7602cca3faca4ec140a4b0": "0x2c3c465ca58ec0000",
        "0x393f783b5cdb86221bf0294fb714959c7b45899c": "0x14061b9d77a5e980000",
        "0x393ff4255e5c658f2e7f10ecbd292572671bc2d2": "0x6c6b935b8bbd400000",
        "0x394132600f4155e07f4d45bc3eb8d9fb72dcd784": "0x9f6e92edea07d40000",
        "0x3951e48e3c869e6b72a143b6a45068cdb9d466d0": "0x1158e460913d00000",
        "0x3954bdfe0bf587c695a305d9244c3d5bdddac9bb": "0x410278327f985608000",
        "0x395d6d255520a8db29abc47d83a5db8a1a7df087": "0x56bc75e2d63100000",
        "0x39636b25811b176abfcfeeca64bc87452f1fdff4": "0x15af1d78b58c400000",
        "0x3969b4f71bb8751ede43c016363a7a614f76118e": "0x6c6b935b8bbd400000",
        "0x39782ffe06ac78822a3c3a8afe305e50a56188ce": "0x21e19e0c9bab2400000",
        "0x397a6ef8763a18f00fac217e055c0d3094101011": "0x6c6b935b8bbd400000",
        "0x397cdb8c80c67950b18d654229610e93bfa6ee1a": "0x3f95c8e08215210000",
        "0x39824f8bced176fd3ea22ec6a493d0ccc33fc147": "0xd8d726b7177a800000",
        "0x39936c2719450b9420cc2522cf91db01f227c1c1": "0x1b1ae4d6e2ef500000",
        "0x3995e096b08a5a726800fcd17d9c64c64e088d2b": "0xad78ebc5ac6200000",
        "0x399aa6f5d078cb0970882bc9992006f8fbdf3471": "0x3635c9adc5dea00000",
        "0x39aa05e56d7d32385421cf9336e90d3d15a9f859": "0x168d28e3f00280000",
        "0x39aaf0854db6eb39bc7b2e43846a76171c0445de": "0x6449e84e47a8a80000",
        "0x39b1c471ae94e12164452e811fbbe2b3cd7275ac": "0x6c6b935b8bbd400000",
        "0x39b299327490d72f9a9edff11b83afd0e9d3c450": "0xad78ebc5ac6200000",
        "0x39bac68d947859f59e9226089c96d62e9fbe3cde": "0x22b1c8c1227a00000",
        "0x39bfd978689bec048fc776aa15247f5e1d7c39a2": "0x43c33c1937564800000",
        "0x39c773367c8825d3596c686f42bf0d14319e3f84": "0x73f75d1a085ba0000",
        "0x39d4a931402c0c79c457186f24df8729cf957031": "0xd8d726b7177a800000",
        "0x39d6caca22bccd6a72f87ee7d6b59e0bde21d719": "0x6c8754c8f30c080000",
        "0x39e0db4d60568c800b8c5500026c2594f5768960": "0x3635c9adc5dea00000",
        "0x39ee4fe00fbced647068d4f57c01cb22a80bccd1": "0x14542ba12a337c00000",
        "0x39f198331e4b21c1b760a3155f4ab2fe00a74619": "0x6c6b935b8bbd400000",
        "0x39f44663d92561091b82a70dcf593d754005973a": "0xad78b2edc21598000",
        "0x3a035594c747476d42d1ee966c36224cdd224993": "0x134af74569f9c50000",
        "0x3a04572847d31e81f7765ca5bfc9d557159f3683": "0x7362d0dabeafd8000",
        "0x3a06e3bb1edcfd0c44c3074de0bb606b049894a2": "0x21e19e0c9bab2400000",
        "0x3a10888b7e149cae272c01302c327d0af01a0b24": "0xebec21ee1da40000",
        "0x3a3108c1e680a33b336c21131334409d97e5adec": "0x1158e460913d00000",
        "0x3a368efe4ad786e26395ec9fc6ad698cae29fe01": "0x2245899675f9f40000",
        "0x3a3dd104cd7eb04f21932fd433ea7affd39369f5": "0x13614f23e242260000",
        "0x3a4297da3c555e46c073669d0478fce75f2f790e": "0x6ac5c62d9486070000",
        "0x3a476bd2c9e664c63ab266aa4c6e4a4825f516c3": "0xad78ebc5ac6200000",
        "0x3a48e0a7098b06a905802b87545731118e89f439": "0x6c6b935b8bbd400000",
        "0x3a4da78dce05aeb87de9aead9185726da1926798": "0xad78ebc5ac6200000",
        "0x3a59a08246a8206f8d58f70bb1f0d35c5bcc71bd": "0xa076407d3f7440000",
        "0x3a72d635aadeee4382349db98a1813a4cfeb3df1": "0x2a5a058fc295ed000000",
        "0x3a7db224acae17de7798797d82cdf8253017dfa8": "0x10f0cf064dd59200000",
        "0x3a805fa0f7387f73055b7858ca8519edd93d634f": "0x6449e84e47a8a80000",
        "0x3a84e950ed410e51b7e8801049ab2634b285fea1": "0x3f52fdaa822d2c80000",
        "0x3a86ee94862b743dd34f410969d94e2c5652d4ad": "0xaede69ad30e810000",
        "0x3a9132b7093d3ec42e1e4fb8cb31ecdd43ae773c": "0x6c6b935b8bbd400000",
        "0x3a9960266df6492063538a99f487c950a3a5ec9e": "0x5150ae84a8cdf000000",
        "0x3a9b111029ce1f20c9109c7a74eeeef34f4f2eb2": "0xd8d726b7177a800000",
        "0x3a9e5441d44b243be55b75027a1ceb9eacf50df2": "0x3635c9adc5dea00000",
        "0x3aa07a34a1afc8967d3d1383b96b62cf96d5fa90": "0x43c33c1937564800000",
        "0x3aa42c21b9b31c3e27ccd17e099af679cdf56907": "0x1b1ae4d6e2ef5000000",
        "0x3aa948ea02397755effb2f9dc9392df1058f7e33": "0x2e141ea081ca080000",
        "0x3aadf98b61e5c896e7d100a3391d3250225d61df": "0xcaf67003701680000",
        "0x3aae4872fd9093cbcad1406f1e8078bab50359e2": "0x222c8eb3ff6640000",
        "0x3abb8adfc604f48d5984811d7f1d52fef6758270": "0xf29719b66f110c0000",
        "0x3ac2f0ff1612e4a1c346d53382abf6d8a25baa53": "0x6c6b935b8bbd400000",
        "0x3ac9dc7a436ae98fd01c7a9621aa8e9d0b8b531d": "0x61093d7c2c6d380000",
        "0x3ad06149b21c55ff867cc3fb9740d2bcc7101231": "0x29b76432b94451200000",
        "0x3ad70243d88bf0400f57c8c1fd57811848af162a": "0x2e9ee5c38653f00000",
        "0x3ad915d550b723415620f5a9b5b88a85f382f035": "0x3635c9adc5dea00000",
        "0x3ae160e3cd60ae31b9d6742d68e14e76bd96c517": "0x1a055690d9db80000",
        "0x3ae62bd271a760637fad79c31c94ff62b4cd12f7": "0x6c6b935b8bbd400000",
        "0x3aea4e82d2400248f99871a41ca257060d3a221b": "0x3635c9adc5dea00000",
        "0x3af65b3e28895a4a001153391d1e69c31fb9db39": "0xd5967be4fc3f100000",
        "0x3b07db5a357f5af2484cbc9d77d73b1fd0519fc7": "0x1b1ae4d6e2ef500000",
        "0x3b0accaf4b607cfe61d17334c214b75cdefdbd89": "0x6c6b935b8bbd400000",
        "0x3b13631a1b89cb566548899a1d60915cdcc4205b": "0x6c6b935b8bbd400000",
        "0x3b159099075207c6807663b1f0f7eda54ac8cce3": "0x6ac4e65b69f92d8000",
        "0x3b1937d5e793b89b63fb8eb5f1b1c9ca6ba0fa8e": "0x6c6b935b8bbd400000",
        "0x3b22da2a0271c8efe102532773636a69b1c17e09": "0x1b36a6444a3e180000",
        "0x3b22dea3c25f1b59c7bd27bb91d3a3eaecef3984": "0x56bc75e2d63100000",
        "0x3b2367f8494b5fe18d683c055d89999c9f3d1b34": "0x21e19e0c9bab2400000",
        "0x3b2c45990e21474451cf4f59f01955b331c7d7c9": "0x6c6b935b8bbd400000",
        "0x3b4100e30a73b0c734b18ffa8426d19b19312f1a": "0xbb5d1aa700afd900000",
        "0x3b42a66d979f582834747a8b60428e9b4eeccd23": "0x21a1c790fadc580000",
        "0x3b4768fd71e2db2cbe7fa050483c27b4eb931df3": "0x6c6b935b8bbd400000",
        "0x3b566a8afad19682dc2ce8679a3ce444a5b0fd4f": "0x6c6b935b8bbd400000",
        "0x3b5c251d7fd7893ba209fe541cecd0ce253a990d": "0x65a4da25d3016c00000",
        "0x3b5e8b3c77f792decb7a8985df916efb490aac23": "0x6c6b935b8bbd400000",
        "0x3b6e814f770748a7c3997806347605480a3fd509": "0x6c6b935b8bbd400000",
        "0x3b7b4f53c45655f3dc5f017edc23b16f9bc536fa": "0x56bc75e2d63100000",
        "0x3b7b8e27de33d3ce7961b98d19a52fe79f6c25be": "0x152d02c7e14af6800000",
        "0x3b7c77dbe95dc2602ce3269a9545d04965fefdbd": "0x6c6b935b8bbd400000",
        "0x3b8098533f7d9bdcd307dbb23e1777ca18418936": "0x6c6b935b8bbd400000",
        "0x3b93b16136f11eaf10996c95990d3b2739ccea5f": "0x21e19e0c9bab2400000",
        "0x3bab4b01a7c84ba13feea9b0bb191b77a3aadca3": "0xad78ebc5ac6200000",
        "0x3bb53598cc20e2055dc553b049404ac9b7dd1e83": "0x21571df77c00be0000",
        "0x3bbc13d04accc0707aebdcaef087d0b87e0b5ee3": "0xbed1d0263d9f000000",
        "0x3bc6e3ee7a56ce8f14a37532590f63716b9966e8": "0x6c6b935b8bbd400000",
        "0x3bc85d6c735b9cda4bba5f48b24b13e70630307b": "0x6acb3df27e1f880000",
        "0x3bd624b548cb659736907ed8aa3c0c705e24b575": "0x6c6b935b8bbd400000",
        "0x3bd9a06d1bd36c4edd27fc0d1f5b088ddae3c72a": "0x1b1a7a420ba00d0000",
        "0x3bddbc8134f77d55597fc97c26d26698090604eb": "0xbe202d6a0eda0000",
        "0x3bf86ed8a3153ec933786a02ac090301855e576b": "0x5f4a8c8375d155400000",
        "0x3bfbd3847c17a61cf3f17b52f8eba1b960b3f39f": "0xa2a15d09519be00000",
        "0x3c03bbc023e1e93fa3a3a6e428cf0cd8f95e1ec6": "0x52663ccab1e1c00000",
        "0x3c0c3defac9cea7acc319a96c30b8e1fedab4574": "0x692ae8897081d00000",
        "0x3c15b3511df6f0342e7348cc89af39a168b7730f": "0x3635c9adc5dea00000",
        "0x3c1f91f301f4b565bca24751aa1f761322709ddd": "0x61093d7c2c6d380000",
        "0x3c286cfb30146e5fd790c2c8541552578de334d8": "0x2291b11aa306e8c0000",
        "0x3c322e611fdb820d47c6f8fc64b6fad74ca95f5e": "0xd258ece1b13150000",
        "0x3c5a241459c6abbf630239c98a30d20b8b3ac561": "0x88b23acffd9900000",
        "0x3c79c863c3d372b3ff0c6f452734a7f97042d706": "0x98a7d9b8314c00000",
        "0x3c83c1701db0388b68210d00f5717cd9bd322c6a": "0x65a4da25d3016c00000",
        "0x3c860e2e663f46db53427b29fe3ea5e5bf62bbcc": "0x556f64c1fe7fa0000",
        "0x3c869c09696523ced824a070414605bb76231ff2": "0x3635c9adc5dea00000",
        "0x3c925619c9b33144463f0537d896358706c520b0": "0x6c6b935b8bbd400000",
        "0x3c98594bf68b57351e8814ae9e6dfd2d254aa06f": "0x1043561a8829300000",
        "0x3cadeb3d3eed3f62311d52553e70df4afce56f23": "0xd8d726b7177a800000",
        "0x3caedb5319fe806543c56e5021d372f71be9062e": "0x878678326eac9000000",
        "0x3cafaf5e62505615068af8eb22a13ad8a9e55070": "0x6c660645aa47180000",
        "0x3cb179cb4801a99b95c3b0c324a2bdc101a65360": "0x168d28e3f00280000",
        "0x3cb561ce86424b359891e364ec925ffeff277df7": "0xad78ebc5ac6200000",
        "0x3ccb71aa6880cb0b84012d90e60740ec06acd78f": "0x6c6b935b8bbd400000",
        "0x3ccef88679573947e94997798a1e327e08603a65": "0x2bc916d69f3b020000",
        "0x3cd1d9731bd548c1dd6fcea61beb75d91754f7d3": "0x1161d01b215cae48000",
        "0x3cd3a6e93579c56d494171fc533e7a90e6f59464": "0x6c6b935b8bbd400000",
        "0x3cd6b7593cbee77830a8b19d0801958fcd4bc57a": "0x1b1ae4d6e2ef500000",
        "0x3cd7f7c7c2353780cde081eeec45822b25f2860c": "0xad78ebc5ac6200000",
        "0x3ce1dc97fcd7b7c4d3a18a49d6f2a5c1b1a906d7": "0xad78ebc5ac6200000",
        "0x3cea302a472a940379dd398a24eafdbadf88ad79": "0xa2a15d09519be00000",
        "0x3ceca96bb1cdc214029cbc5e181d398ab94d3d41": "0x10f0cf064dd592000000",
        "0x3cf484524fbdfadae26dc185e32b2b630fd2e726": "0x185452cb2a91c30000",
        "0x3cf9a1d465e78b7039e3694478e2627b36fcd141": "0x4a60532ad51bf00000",
        "0x3cfbf066565970639e130df2a7d16b0e14d6091c": "0x5c283d410394100000",
        "0x3d09688d93ad07f3abe68c722723cd680990435e": "0x65a4ce99f769e6e0000",
        "0x3d31587b5fd5869845788725a663290a49d3678c": "0x1b1ae4d6e2ef500000",
        "0x3d3fad49c9e5d2759c8e8e5a7a4d60a0dd135692": "0x1158e460913d00000",
        "0x3d574fcf00fae1d98cc8bf9ddfa1b3953b9741bc": "0x6acb3df27e1f880000",
        "0x3d5a8b2b80be8b35d8ecf789b5ed7a0775c5076c": "0x1158e460913d00000",
        "0x3d66cd4bd64d5c8c1b5eea281e106d1c5aad2373": "0x69c4f3a8a110a60000",
        "0x3d6ae053fcbc318d6fd0fbc353b8bf542e680d27": "0xc673ce3c40160000",
        "0x3d6ff82c9377059fb30d9215723f60c775c891fe": "0xd8e5ce617f2d50000",
        "0x3d79a853d71be0621b44e29759656ca075fdf409": "0x6c6b935b8bbd400000",
        "0x3d7ea5bf03528100ed8af8aed2653e921b6e6725": "0x3635c9adc5dea00000",
        "0x3d813ff2b6ed57b937dabf2b381d148a411fa085": "0x56bc75e2d63100000",
        "0x3d881433f04a7d0d27f84944e08a512da3555287": "0x410d586a20a4c00000",
        "0x3d89e505cb46e211a53f32f167a877bec87f4b0a": "0x15b3557f1937f8000",
        "0x3d8d0723721e73a6c0d860aa0557abd14c1ee362": "0x10f0cf064dd59200000",
        "0x3d8f39881b9edfe91227c33fa4cdd91e678544b0": "0x4ab07ba43ada98000",
        "0x3d9d6be57ff83e065985664f12564483f2e600b2": "0x6eace43f23bd800000",
        "0x3da39ce3ef4a7a3966b32ee7ea4ebc2335a8f11f": "0x6c6b935b8bbd400000",
        "0x3daa01ceb70eaf9591fa521ba4a27ea9fb8ede4a": "0x5a63d2c9bc76540000",
        "0x3db5fe6a68bd3612ac15a99a61e555928eeceaf3": "0x55a6e79ccd1d300000",
        "0x3db9ed7f024c7e26372feacf2b050803445e3810": "0x45b148b4996a300000",
        "0x3dbf0dbfd77890800533f09dea8301b9f025d2a6": "0x3635c9adc5dea00000",
        "0x3dcef19c868b15d34eda426ec7e04b18b6017002": "0x6c68ccd09b022c0000",
        "0x3dd12e556a603736feba4a6fa8bd4ac45d662a04": "0x23757b9183e078280000",
        "0x3dde8b15b3ccbaa5780112c3d674f313bba68026": "0x601d515a3e4f940000",
        "0x3ddedbe48923fbf9e536bf9ffb0747c9cdd39eef": "0x368c8623a8b4d100000",
        "0x3deae43327913f62808faa1b6276a2bd6368ead9": "0x6c6b935b8bbd400000",
        "0x3df762049eda8ac6927d904c7af42f94e5519601": "0x6c6b935b8bbd400000",
        "0x3e040d40cb80ba0125f3b15fdefcc83f3005da1b": "0x384524cc70b7780000",
        "0x3e0b8ed86ed669e12723af7572fbacfe829b1e16": "0x514de7f9b812dc0000",
        "0x3e0cbe6a6dcb61f110c45ba2aa361d7fcad3da73": "0x1b2df9d219f57980000",
        "0x3e194b4ecef8bb711ea2ff24fec4e87bd032f7d1": "0x8b9dc1bc1a036a8000",
        "0x3e1b2230afbbd310b4926a4c776d5ae7819c661d": "0x65a4da25d3016c00000",
        "0x3e1c53300e4c168912163c7e99b95da268ad280a": "0x3662325cd18fe00000",
        "0x3e1c962063e0d5295941f210dca3ab531eec8809": "0xa2a15d09519be00000",
        "0x3e2ca0d234baf607ad466a1b85f4a6488ef00ae7": "0x4da21a3483d568000",
        "0x3e2f26235e137a7324e4dc154b5df5af46ea1a49": "0x137aad8032db90000",
        "0x3e3161f1ea2fbf126e79da1801da9512b37988c9": "0xa6dd90cae5114480000",
        "0x3e36c17253c11cf38974ed0db1b759160da63783": "0x17b7883c06916600000",
        "0x3e3cd3bec06591d6346f254b621eb41c89008d31": "0x35dfbeda9f37340000",
        "0x3e45bd55db9060eced923bb9cb733cb3573fb531": "0x58e7926ee858a00000",
        "0x3e4d13c55a84e46ed7e9cb90fd355e8ad991e38f": "0x3635c9adc5dea00000",
        "0x3e4e9265223c9738324cf20bd06006d0073edb8c": "0x73f75d1a085ba0000",
        "0x3e4fbd661015f6461ed6735cefef01f31445de3a": "0x36e342998b8b0200000",
        "0x3e53ff2107a8debe3328493a92a586a7e1f49758": "0x4e69c2a71a405ab0000",
        "0x3e5a39fdda70df1126ab0dc49a7378311a537a1f": "0x821ab0d44149800000",
        "0x3e5abd09ce5af7ba8487c359e0f2a93a986b0b18": "0x21e19e0c9bab2400000",
        "0x3e5cb8928c417825c03a3bfcc52183e5c91e42d7": "0xe731d9c52c962f0000",
        "0x3e5e93fb4c9c9d1246f8f247358e22c3c5d17b6a": "0x821ab0d4414980000",
        "0x3e618350fa01657ab0ef3ebac8e37012f8fc2b6f": "0x9806de3da6e9780000",
        "0x3e63ce3b24ca2865b4c5a687b7aea3597ef6e548": "0x6c6b935b8bbd400000",
        "0x3e66b84769566ab67945d5fa81373556bcc3a1fa": "0x83d6c7aab63600000",
        "0x3e76a62db187aa74f63817533b306cead0e8cebe": "0x69b5afac750bb800000",
        "0x3e7a966b5dc357ffb07e9fe067c45791fd8e3049": "0x3342d60dff1960000",
        "0x3e81772175237eb4cbe0fe2dcafdadffeb6a1999": "0x1dd0c885f9a0d800000",
        "0x3e8349b67f5745449f659367d9ad4712db5b895a": "0x62a992e53a0af00000",
        "0x3e83544f0082552572c782bee5d218f1ef064a9d": "0x56cd55fc64dfe0000",
        "0x3e84b35c5b2265507061d30b6f12da033fe6f8b9": "0x61093d7c2c6d380000",
        "0x3e8641d43c42003f0a33c929f711079deb2b9e46": "0x1b1ae4d6e2ef500000",
        "0x3e8745ba322f5fd6cb50124ec46688c7a69a7fae": "0x10afc1ade3b4ed40000",
        "0x3e914e3018ac00449341c49da71d04dfeeed6221": "0xd8d726b7177a800000",
        "0x3e9410d3b9a87ed5e451a6b91bb8923fe90fb2b5": "0xad78ebc5ac6200000",
        "0x3e94df5313fa520570ef232bc3311d5f622ff183": "0x6c6b935b8bbd400000",
        "0x3e9b34a57f3375ae59c0a75e19c4b641228d9700": "0xf8699329677e0000",
        "0x3eada8c92f56067e1bb73ce378da56dc2cdfd365": "0x77cde93aeb0d480000",
        "0x3eaf0879b5b6db159b589f84578b6a74f6c10357": "0x18938b671fa65a28000",
        "0x3eaf316b87615d88f7adc77c58e712ed4d77966b": "0x56dbc4cee24648000",
        "0x3eb8b33b21d23cda86d8288884ab470e164691b5": "0x1b1ae4d6e2ef500000",
        "0x3eb9ef06d0c259040319947e8c7a6812aa0253d8": "0x90d972f32323c0000",
        "0x3ecc8e1668dde995dc570fe414f44211c534a615": "0x6c6b935b8bbd400000",
        "0x3ecdb532e397579662b2a46141e78f8235936a5f": "0x39fbae8d042dd0000",
        "0x3eee6f1e96360b7689b3069adaf9af8eb60ce481": "0x3635c9adc5dea00000",
        "0x3f08d9ad894f813e8e2148c160d24b353a8e74b0": "0xcb49b44ba602d800000",
        "0x3f0c83aac5717962734e5ceaeaecd39b28ad06be": "0x6c6b935b8bbd400000",
        "0x3f10800282d1b7ddc78fa92d8230074e1bf6aeae": "0x10afc1ade3b4ed40000",
        "0x3f1233714f204de9de4ee96d073b368d8197989f": "0x217c41074e6bb0000",
        "0x3f173aa6edf469d185e59bd26ae4236b92b4d8e1": "0x1158e460913d000000",
        "0x3f1bc420c53c002c9e90037c44fe6a8ef4ddc962": "0x960db77681e940000",
        "0x3f236108eec72289bac3a65cd283f95e041d144c": "0x3634bf39ab98788000",
        "0x3f2da093bb16eb064f8bfa9e30b929d15f8e1c4c": "0x6c6b935b8bbd400000",
        "0x3f2dd55db7eab0ebee65b33ed8202c1e992e958b": "0x2c73c937742c500000",
        "0x3f2f381491797cc5c0d48296c14fd0cd00cdfa2d": "0x2b95bdcc39b6100000",
        "0x3f30d3bc9f602232bc724288ca46cd0b0788f715": "0xd8d726b7177a800000",
        "0x3f3c8e61e5604cef0605d436dd22accd862217fc": "0x487a9a304539440000",
        "0x3f3f46b75cabe37bfacc8760281f4341ca7f463d": "0x20ac448235fae88000",
        "0x3f472963197883bbda5a9b7dfcb22db11440ad31": "0x1a19643cb1eff08000",
        "0x3f4cd1399f8a34eddb9a17a471fc922b5870aafc": "0xad78ebc5ac6200000",
        "0x3f551ba93cd54693c183fb9ad60d65e1609673c9": "0x6c6b935b8bbd400000",
        "0x3f627a769e6a950eb87017a7cd9ca20871136831": "0x2eb8eb1a172dcb80000",
        "0x3f6dd3650ee428dcb7759553b017a96a94286ac9": "0x487a9a304539440000",
        "0x3f747237806fed3f828a6852eb0867f79027af89": "0x5150ae84a8cdf00000",
        "0x3f75ae61cc1d8042653b5baec4443e051c5e7abd": "0x52d542804f1ce0000",
        "0x3fb7d197b3ba4fe045efc23d50a14585f558d9b2": "0x1158e460913d00000",
        "0x3fbc1e4518d73400c6d046359439fb68ea1a49f4": "0x3790bb8551376400000",
        "0x3fbed6e7e0ca9c84fbe9ebcf9d4ef9bb49428165": "0x6c6b935b8bbd400000",
        "0x3fd0bb47798cf44cdfbe4d333de637df4a00e45c": "0x56c5579f722140000",
        "0x3fe40fbd919aad2818df01ee4df46c46842ac539": "0x14542ba12a337c00000",
        "0x3fe801e61335c5140dc7eda2ef5204460a501230": "0x6c6b935b8bbd400000",
        "0x3ff836b6f57b901b440c30e4dbd065cf37d3d48c": "0xad78ebc5ac6200000",
        "0x3ffcb870d4023d255d5167d8a507cefc366b68ba": "0x23343c4354d2ac0000",
        "0x401354a297952fa972ad383ca07a0a2811d74a71": "0xc249fdd327780000",
        "0x4030a925706b2c101c8c5cb9bd05fbb4f6759b18": "0xd8d726b7177a800000",
        "0x403145cb4ae7489fcc90cd985c6dc782b3cc4e44": "0x1453ff387b27cac0000",
        "0x403220600a36f73f24e190d1edb2d61be3f41354": "0x107ad8f556c6c00000",
        "0x4039bd50a2bde15ffe37191f410390962a2b8886": "0xad78ebc5ac6200000",
        "0x403c64896a75cad816a9105e18d8aa5bf80f238e": "0x35659ef93f0fc40000",
        "0x403d53cf620f0922b417848dee96c190b5bc8271": "0x215f835bc769da80000",
        "0x404100db4c5d0eec557823b58343758bcc2c8083": "0x1158e460913d00000",
        "0x4041374b0feef4792e4b33691fb86897a4ff560c": "0x13c9647e25a9940000",
        "0x40467d80e74c35407b7db51789234615fea66818": "0x150894e849b3900000",
        "0x40585200683a403901372912a89834aadcb55fdb": "0x6c6b935b8bbd400000",
        "0x4058808816fdaa3a5fc98ed47cfae6c18315422e": "0xad4c8316a0b0c0000",
        "0x405f596b94b947344c033ce2dcbff12e25b79784": "0x6c6b935b8bbd400000",
        "0x40630024bd2c58d248edd8465617b2bf1647da0e": "0x3635c9adc5dea00000",
        "0x40652360d6716dc55cf9aab21f3482f816cc2cbd": "0x21e19e0c9bab2400000",
        "0x407295ebd94b48269c2d569c9b9af9aa05e83e5e": "0x21e19e0c9bab2400000",
        "0x4073fa49b87117cb908cf1ab512da754a932d477": "0x6acb3df27e1f880000",
        "0x408a69a40715e1b313e1354e600800a1e6dc02a5": "0x1e7b891cc92540000",
        "0x409bd75085821c1de70cdc3b11ffc3d923c74010": "0xd8d726b7177a800000",
        "0x409d5a962edeeebea178018c0f38b9cdb213f289": "0x1158e460913d00000",
        "0x40a331195b977325c2aa28fa2f42cb25ec3c253c": "0x6c6b935b8bbd400000",
        "0x40a7f72867a7dc86770b162b7557a434ed50cce9": "0x3635c9adc5dea00000",
        "0x40ab0a3e83d0c8ac9366910520eab1772bac3b1a": "0x34f10c2dc05e7c0000",
        "0x40ab66fe213ea56c3afb12c75be33f8e32fd085d": "0xd8d726b7177a800000",
        "0x40ad74bc0bce2a45e52f36c3debb1b3ada1b7619": "0x170162de109c6580000",
        "0x40cf890591eae4a18f812a2954cb295f633327e6": "0x29bf736fc591a0000",
        "0x40cf90ef5b768c5da585002ccbe6617650d8e837": "0x36330322d5238c0000",
        "0x40d45d9d7625d15156c932b771ca7b0527130958": "0x152d02c7e14af6800000",
        "0x40db1ba585ce34531edec5494849391381e6ccd3": "0x61093d7c2c6d380000",
        "0x40df495ecf3f8b4cef2a6c189957248fe884bc2b": "0x28a857425466f800000",
        "0x40e0dbf3efef9084ea1cd7e503f40b3b4a8443f6": "0xd8d726b7177a800000",
        "0x40e2440ae142c880366a12c6d4102f4b8434b62a": "0x3635c9adc5dea00000",
        "0x40e3c283f7e24de0410c121bee60a5607f3e29a6": "0x3635c9adc5dea00000",
        "0x40ea5044b204b23076b1a5803bf1d30c0f88871a": "0x2f6f10780d22cc00000",
        "0x40eddb448d690ed72e05c225d34fc8350fa1e4c5": "0x17b7883c06916600000",
        "0x40f4f4c06c732cd35b119b893b127e7d9d0771e4": "0x21e19e0c9bab2400000",
        "0x41010fc8baf8437d17a04369809a168a17ca56fb": "0x56bc75e2d63100000",
        "0x4103299671d46763978fa4aa19ee34b1fc952784": "0xad78ebc5ac6200000",
        "0x41033c1b6d05e1ca89b0948fc64453fbe87ab25e": "0x487a9a304539440000",
        "0x41098a81452317c19e3eef0bd123bbe178e9e9ca": "0x97c9ce4cf6d5c00000",
        "0x411610b178d5617dfab934d293f512a93e5c10e1": "0x93739534d28680000",
        "0x411c831cc6f44f1965ec5757ab4e5b3ca4cffd1f": "0x170a0f5040e5040000",
        "0x412a68f6c645559cc977fc4964047a201d1bb0e2": "0xa968163f0a57b400000",
        "0x413f4b02669ccff6806bc826fcb7deca3b0ea9bc": "0x1158e460913d00000",
        "0x414599092e879ae25372a84d735af5c4e510cd6d": "0x15af1d78b58c400000",
        "0x41485612d03446ec4c05e5244e563f1cbae0f197": "0x34957444b840e80000",
        "0x415d096ab06293183f3c033d25f6cf7178ac3bc7": "0x22b1c8c1227a00000",
        "0x4166fc08ca85f766fde831460e9dc93c0e21aa6c": "0x3635c9adc5dea00000",
        "0x416784af609630b070d49a8bcd12235c6428a408": "0x43c33c1937564800000",
        "0x4167cd48e733418e8f99ffd134121c4a4ab278c4": "0xc55325ca7415e00000",
        "0x416c86b72083d1f8907d84efd2d2d783dffa3efb": "0x6c6acc67d7b1d40000",
        "0x4173419d5c9f6329551dc4d3d0ceac1b701b869e": "0x4c53ecdc18a600000",
        "0x4174fa1bc12a3b7183cbabb77a0b59557ba5f1db": "0x6c6b935b8bbd400000",
        "0x41786a10d447f484d33244ccb7facd8b427b5b8c": "0x3635c9adc5dea00000",
        "0x417a3cd19496530a6d4204c3b5a17ce0f207b1a5": "0x1b1ae4d6e2ef5000000",
        "0x417e4e2688b1fd66d821529e46ed4f42f8b3db3d": "0x6c6b935b8bbd400000",
        "0x419a71a36c11d105e0f2aef5a3e598078e85c80b": "0x10f0cf064dd59200000",
        "0x419bde7316cc1ed295c885ace342c79bf7ee33ea": "0x14542ba12a337c00000",
        "0x41a2f2e6ecb86394ec0e338c0fc97e9c5583ded2": "0x6cee06ddbe15ec0000",
        "0x41a8c2830081b102df6e0131657c07ab635b54ce": "0x6c6acc67d7b1d40000",
        "0x41a8e236a30e6d63c1ff644d132aa25c89537e01": "0x1158e460913d00000",
        "0x41a9a404fc9f5bfee48ec265b12523338e29a8bf": "0x150894e849b3900000",
        "0x41ad369f758fef38a19aa3149379832c818ef2a0": "0x36369ed7747d260000",
        "0x41b2d34fde0b1029262b4172c81c1590405b03ae": "0x3635c9adc5dea00000",
        "0x41b2dbd79dda9b864f6a7030275419c39d3efd3b": "0xad78ebc5ac62000000",
        "0x41c3c2367534d13ba2b33f185cdbe6ac43c2fa31": "0xd8d726b7177a800000",
        "0x41cb9896445f70a10a14215296daf614e32cf4d5": "0x678a932062e4180000",
        "0x41ce79950935cff55bf78e4ccec2fe631785db95": "0x6c6b935b8bbd400000",
        "0x41d3b731a326e76858baa5f4bd89b57b36932343": "0x155bd9307f9fe80000",
        "0x41e4a20275e39bdcefeb655c0322744b765140c2": "0x21e19e0c9bab2400000",
        "0x41ed2d8e7081482c919fc23d8f0091b3c82c4685": "0x463a1e765bd78a0000",
        "0x41f27e744bd29de2b0598f02a0bb9f98e681eaa4": "0x1a4aba225c207400000",
        "0x41f489a1ec747bc29c3e5f9d8db97877d4d1b4e9": "0x73f75d1a085ba0000",
        "0x420fb86e7d2b51401fc5e8c72015decb4ef8fc2e": "0x3635c9adc5dea00000",
        "0x421684baa9c0b4b5f55338e6f6e7c8e146d41cb7": "0x5150ae84a8cdf00000",
        "0x42399659aca6a5a863ea2245c933fe9a35b7880e": "0x6ece32c26c82700000",
        "0x423bca47abc00c7057e3ad34fca63e375fbd8b4a": "0x3cfc82e37e9a7400000",
        "0x423c3107f4bace414e499c64390a51f74615ca5e": "0x6c6b935b8bbd400000",
        "0x423cc4594cf4abb6368de59fd2b1230734612143": "0x6c6b935b8bbd400000",
        "0x4244f1331158b9ce26bbe0b9236b9203ca351434": "0x21e19e0c9bab2400000",
        "0x425177eb74ad0a9d9a5752228147ee6d6356a6e6": "0xb98bc829a6f90000",
        "0x425725c0f08f0811f5f006eec91c5c5c126b12ae": "0x821ab0d4414980000",
        "0x4258fd662fc4ce3295f0d4ed8f7bb1449600a0a9": "0x16c452ed6088ad80000",
        "0x425c1816868f7777cc2ba6c6d28c9e1e796c52b3": "0x21e19e0c9bab2400000",
        "0x425c338a1325e3a1578efa299e57d986eb474f81": "0x6c6b935b8bbd400000",
        "0x426259b0a756701a8b663528522156c0288f0f24": "0x218ae196b8d4f300000",
        "0x426d15f407a01135b13a6b72f8f2520b3531e302": "0x1158e460913d00000",
        "0x426f78f70db259ac8534145b2934f4ef1098b5d8": "0x138400eca364a00000",
        "0x42732d8ef49ffda04b19780fd3c18469fb374106": "0x170b00e5e4a9be0000",
        "0x427417bd16b1b3d22dbb902d8f9657016f24a61c": "0x6c6b935b8bbd400000",
        "0x42746aeea14f27beff0c0da64253f1e7971890a0": "0x54069233bf7f780000",
        "0x427b462ab84e5091f48a46eb0cdc92ddcb26e078": "0x6c6b935b8bbd400000",
        "0x427e4751c3babe78cff8830886febc10f9908d74": "0x6acb3df27e1f880000",
        "0x427ec668ac9404e895cc861511d1620a4912be98": "0x878678326eac9000000",
        "0x4280a58f8bb10b9440de94f42b4f592120820191": "0x6c6b935b8bbd400000",
        "0x428a1ee0ed331d7952ccbe1c7974b2852bd1938a": "0x77b74a4e8de5650000",
        "0x429c06b487e8546abdfc958a25a3f0fba53f6f00": "0xbb644af542198000",
        "0x42a98bf16027ce589c4ed2c95831e2724205064e": "0x21e19e0c9bab2400000",
        "0x42c6edc515d35557808d13cd44dcc4400b2504e4": "0xaba14c59ba7320000",
        "0x42cecfd2921079c2d7df3f08b07aa3beee5e219a": "0x3635c9adc5dea00000",
        "0x42d1a6399b3016a8597f8b640927b8afbce4b215": "0xa18bcec34888100000",
        "0x42d34940edd2e7005d46e2188e4cfece8311d74d": "0x890b0c2e14fb80000",
        "0x42d3a5a901f2f6bd9356f112a70180e5a1550b60": "0x3224f42723d4540000",
        "0x42d6b263d9e9f4116c411424fc9955783c763030": "0x6c6b935b8bbd400000",
        "0x42db0b902559e04087dd5c441bc7611934184b89": "0x6d33b17d253a620000",
        "0x42ddd014dc52bfbcc555325a40b516f4866a1dd3": "0x6c6b935b8bbd400000",
        "0x4319263f75402c0b5325f263be4a5080651087f0": "0x354b0f14631bab0000",
        "0x431f2c19e316b044a4b3e61a0c6ff8c104a1a12f": "0x3635c9adc5dea00000",
        "0x43227d65334e691cf231b4a4e1d339b95d598afb": "0x21e19e0c9bab2400000",
        "0x432809a2390f07c665921ff37d547d12f1c9966a": "0x65a4da25d3016c00000",
        "0x4329fc0931cbeb033880fe4c9398ca45b0e2d11a": "0x6c7120716d33680000",
        "0x432d884bd69db1acc0d89c64ade4cb4fc3a88b7a": "0x869a8c10808eec0000",
        "0x4331ab3747d35720a9d8ca25165cd285acd4bda8": "0x6c6b935b8bbd400000",
        "0x433a3b68e56b0df1862b90586bbd39c840ff1936": "0x6c6b935b8bbd400000",
        "0x433e3ba1c51b810fc467d5ba4dea42f7a9885e69": "0x878678326eac9000000",
        "0x433eb94a339086ed12d9bde9cd1d458603c97dd6": "0x152d02c7e14af6800000",
        "0x4349225a62f70aea480a029915a01e5379e64fa5": "0x8cd67e2334c0d80000",
        "0x4354221e62dc09e6406436163a185ef06d114a81": "0x6c6b935b8bbd400000",
        "0x435443b81dfdb9bd8c6787bc2518e2d47e57c15f": "0x1438d9397881ef20000",
        "0x4361d4846fafb377b6c0ee49a596a78ddf3516a3": "0xc2127af858da700000",
        "0x4364309a9fa07095600f79edc65120cdcd23dc64": "0x21e19e0c9bab2400000",
        "0x4367ae4b0ce964f4a54afd4b5c368496db169e9a": "0x6c6b935b8bbd400000",
        "0x43748928e8c3ec4436a1d092fbe43ac749be1251": "0x15af1d78b58c400000",
        "0x43767bf7fd2af95b72e9312da9443cb1688e4343": "0x1043561a8829300000",
        "0x437983388ab59a4ffc215f8e8269461029c3f1c1": "0x43c33c1937564800000",
        "0x43898c49a34d509bfed4f76041ee91caf3aa6aa5": "0x1043561a8829300000",
        "0x438c2f54ff8e629bab36b1442b760b12a88f02ae": "0x6c6b935b8bbd400000",
        "0x4398628ea6632d393e929cbd928464c568aa4a0c": "0x4be4e7267b6ae00000",
        "0x439d2f2f5110a4d58b1757935015408740fec7f8": "0xcfa5c5150f4c888000",
        "0x439dee3f7679ff1030733f9340c096686b49390b": "0x6c6b935b8bbd400000",
        "0x43b079baf0727999e66bf743d5bcbf776c3b0922": "0x6c6b935b8bbd400000",
        "0x43bc2d4ddcd6583be2c7bc094b28fb72e62ba83b": "0x6c6b935b8bbd400000",
        "0x43c7ebc5b3e7af16f47dc5617ab10e0f39b4afbb": "0x678a932062e4180000",
        "0x43cb9652818c6f4d6796b0e89409306c79db6349": "0x6c6b935b8bbd400000",
        "0x43cc08d0732aa58adef7619bed46558ad7774173": "0xf0e7dcb0122a8f0000",
        "0x43d5a71ce8b8f8ae02b2eaf8eaf2ca2840b93fb6": "0x14542ba12a337c00000",
        "0x43db7ff95a086d28ebbfb82fb8fb5f230a5ebccd": "0xdf6eb0b2d3ca0000",
        "0x43e7ec846358d7d0f937ad1c350ba069d7bf72bf": "0x670ae629214680000",
        "0x43f16f1e75c3c06a9478e8c597a40a3cb0bf04cc": "0x9df7dfa8f760480000",
        "0x43f470ed659e2991c375957e5ddec5bd1d382231": "0x56bc75e2d63100000",
        "0x43f7e86e381ec51ec4906d1476cba97a3db584e4": "0x3635c9adc5dea00000",
        "0x43ff38743ed0cd43308c066509cc8e7e72c862aa": "0x692ae8897081d00000",
        "0x43ff8853e98ed8406b95000ada848362d6a0392a": "0x4ae0b1c4d2e84d00000",
        "0x44098866a69b68c0b6bc168229b9603587058967": "0xa31062beeed700000",
        "0x4419ac618d5dea7cdc6077206fb07dbdd71c1702": "0xd8d726b7177a800000",
        "0x441a52001661fac718b2d7b351b7c6fb521a7afd": "0x15af1d78b58c400000",
        "0x441aca82631324acbfa2468bda325bbd78477bbf": "0x14542ba12a337c00000",
        "0x441f37e8a029fd02482f289c49b5d06d00e408a4": "0x1211ecb56d13488000",
        "0x4420aa35465be617ad2498f370de0a3cc4d230af": "0x6c6b935b8bbd400000",
        "0x44232ff66ddad1fd841266380036afd7cf7d7f42": "0xad78ebc5ac6200000",
        "0x44250d476e062484e9080a3967bf3a4a732ad73f": "0x1158e460913d00000",
        "0x4429a29fee198450672c0c1d073162250bec6474": "0x362aaf8202f2500000",
        "0x44355253b27748e3f34fe9cae1fb718c8f249529": "0xad78ebc5ac6200000",
        "0x4438e880cb2766b0c1ceaec9d2418fceb952a044": "0x73fa073903f080000",
        "0x444caf79b71338ee9aa7c733b02acaa7dc025948": "0x22b1c8c1227a00000",
        "0x445cb8de5e3df520b499efc980f52bff40f55c76": "0x6c6b935b8bbd400000",
        "0x446a8039cecf9dce4879cbcaf3493bf545a88610": "0x17b7883c06916600000",
        "0x4474299d0ee090dc90789a1486489c3d0d645e6d": "0x3635c9adc5dea00000",
        "0x448bf410ad9bbc2fecc4508d87a7fc2e4b8561ad": "0xad6eedd17cf3b8000",
        "0x44901e0d0e08ac3d5e95b8ec9d5e0ff5f12e0393": "0x16a1f9f5fd7d960000",
        "0x4493123c021ece3b33b1a452c9268de14007f9d3": "0x16a6502f15a1e540000",
        "0x449ac4fbe383e36738855e364a57f471b2bfa131": "0x29b76432b94451200000",
        "0x44a01fb04ac0db2cce5dbe281e1c46e28b39d878": "0x6c6acc67d7b1d40000",
        "0x44a63d18424587b9b307bfc3c364ae10cd04c713": "0x1158e460913d00000",
        "0x44a8989e32308121f72466978db395d1f76c3a4b": "0x18850299f42b06a0000",
        "0x44c1110b18870ec81178d93d215838c551d48e64": "0xad6f98593bd8f0000",
        "0x44c14765127cde11fab46c5d2cf4d4b2890023fd": "0x6c6b935b8bbd400000",
        "0x44c54eaa8ac940f9e80f1e74e82fc14f1676856a": "0x1ab2cf7c9f87e200000",
        "0x44cd77535a893fa7c4d5eb3a240e79d099a72d2d": "0x2c73c937742c500000",
        "0x44dfba50b829becc5f4f14d1b04aab3320a295e5": "0x3635c9adc5dea00000",
        "0x44e2fdc679e6bee01e93ef4a3ab1bcce012abc7c": "0x163d194900c5458000",
        "0x44f62f2aaabc29ad3a6b04e1ff6f9ce452d1c140": "0x39992648a23c8a00000",
        "0x44fff37be01a3888d3b8b8e18880a7ddefeeead3": "0xe0c5bfc7dae9a8000",
        "0x4506fe19fa4b006baa3984529d8516db2b2b50ab": "0x6c6b935b8bbd400000",
        "0x451b3699475bed5d7905f8905aa3456f1ed788fc": "0x8ac7230489e8000000",
        "0x451b7070259bdba27100e36e23428a53dfe304e9": "0xb98bc829a6f90000",
        "0x45272b8f62e9f9fa8ce04420e1aea3eba9686eac": "0xd8d726b7177a800000",
        "0x452b64db8ef7d6df87c788639c2290be8482d575": "0x1b1ae4d6e2ef5000000",
        "0x453e359a3397944c5a275ab1a2f70a5e5a3f6989": "0xd02ab486cedc00000",
        "0x4549b15979255f7e65e99b0d5604db98dfcac8bf": "0xd8d726b7177a800000",
        "0x454b61b344c0ef965179238155f277c3829d0b38": "0x6c6b935b8bbd400000",
        "0x454f0141d721d33cbdc41018bd01119aa4784818": "0x14542ba12a337c00000",
        "0x45533390e340fe0de3b3cf5fb9fc8ea552e29e62": "0x4f2591f896a6500000",
        "0x455396a4bbd9bae8af9fb7c4d64d471db9c24505": "0x8ba52e6fc45e40000",
        "0x455b9296921a74d1fc41617f43b8303e6f3ed76c": "0xe3aeb5737240a00000",
        "0x455cb8ee39ffbc752331e5aefc588ef0ee593454": "0x3635463a780def8000",
        "0x456ae0aca48ebcfae166060250525f63965e760f": "0x1043561a8829300000",
        "0x456f8d746682b224679349064d1b368c7c05b176": "0xc893d09c8f51500000",
        "0x457029c469c4548d168cec3e65872e4428d42b67": "0x6c6b935b8bbd400000",
        "0x4571de672b9904bad8743692c21c4fdcea4c2e01": "0xd8d726b7177a800000",
        "0x45781bbe7714a1c8f73b1c747921df4f84278b70": "0x6c6b935b8bbd400000",
        "0x457bcef37dd3d60b2dd019e3fe61d46b3f1e7252": "0x1158e460913d00000",
        "0x458e3cc99e947844a18e6a42918fef7e7f5f5eb3": "0x7b53f79e888dac00000",
        "0x459393d63a063ef3721e16bd9fde45ee9dbd77fb": "0x6abad6a3c153050000",
        "0x45a570dcc2090c86a6b3ea29a60863dde41f13b5": "0xc9a95ee2986520000",
        "0x45a820a0672f17dc74a08112bc643fd1167736c3": "0xad6c43b2815ed8000",
        "0x45b47105fe42c4712dce6e2a21c05bffd5ea47a9": "0x6c6b935b8bbd400000",
        "0x45bb829652d8bfb58b8527f0ecb621c29e212ec3": "0x6c6b935b8bbd400000",
        "0x45c0d19f0b8e054f9e893836d5ecae7901af2812": "0x10f0cf064dd59200000",
        "0x45c4ecb4ee891ea984a7c5cefd8dfb00310b2850": "0x6b56051582a9700000",
        "0x45ca8d956608f9e00a2f9974028640888465668f": "0x6c6b935b8bbd400000",
        "0x45ca9862003b4e40a3171fb5cafa9028cac8de19": "0x2eb8eb1a172dcb80000",
        "0x45d1c9eedf7cab41a779057b79395f5428d80528": "0x6c6b935b8bbd400000",
        "0x45d4b54d37a8cf599821235f062fa9d170ede8a4": "0x1190673b5fda900000",
        "0x45db03bccfd6a5f4d0266b82a22a368792c77d83": "0x1b1ae4d6e2ef5000000",
        "0x45e3a93e72144ada860cbc56ff85145ada38c6da": "0x57473d05dabae80000",
        "0x45e68db8dbbaba5fc2cb337c62bcd0d61b059189": "0x6c6b935b8bbd400000",
        "0x45e68db94c7d0ab7ac41857a71d67147870f4e71": "0x54b40b1f852bda000000",
        "0x45f4fc60f08eaca10598f0336329801e3c92cb46": "0xad78ebc5ac6200000",
        "0x460d5355b2ceeb6e62107d81e51270b26bf45620": "0x6cb7e74867d5e60000",
        "0x46224f32f4ece5c8867090d4409d55e50b18432d": "0x14542ba12a337c00000",
        "0x4627c606842671abde8295ee5dd94c7f549534f4": "0xf895fbd8732f40000",
        "0x462b678b51b584f3ed7ada070b5cd99c0bf7b87f": "0x56bc75e2d63100000",
        "0x464d9c89cce484df000277198ed8075fa63572d1": "0x1158e460913d00000",
        "0x46504e6a215ac83bccf956befc82ab5a679371c8": "0x1c212805c2b4a50000",
        "0x4651dc420e08c3293b27d2497890eb50223ae2f4": "0x43c33c1937564800000",
        "0x46531e8b1bde097fdf849d6d119885608a008df7": "0xad78ebc5ac6200000",
        "0x466292f0e80d43a78774277590a9eb45961214f4": "0x34957444b840e80000",
        "0x4662a1765ee921842ddc88898d1dc8627597bd7e": "0x21e19e0c9bab2400000",
        "0x4665e47396c7db97eb2a03d90863d5d4ba319a94": "0x2086ac351052600000",
        "0x466fda6b9b58c5532750306a10a2a8c768103b07": "0xad6eedd17cf3b8000",
        "0x467124ae7f452f26b3d574f6088894fa5d1cfb3b": "0x925e06eec972b00000",
        "0x46722a36a01e841d03f780935e917d85d5a67abd": "0xcec76f0e71520000",
        "0x46779a5656ff00d73eac3ad0c38b6c853094fb40": "0xc8253c96c6af00000",
        "0x4677b04e0343a32131fd6abb39b1b6156bba3d5b": "0xad78ebc5ac6200000",
        "0x467d5988249a68614716659840ed0ae6f6f457bc": "0x1501a48cefdfde0000",
        "0x467e0ed54f3b76ae0636176e07420815a021736e": "0x6c6b935b8bbd400000",
        "0x467ea10445827ef1e502daf76b928a209e0d4032": "0x6c6b935b8bbd400000",
        "0x467fbf41441600757fe15830c8cd5f4ffbbbd560": "0x21e19e0c9bab2400000",
        "0x469358709332c82b887e20bcddd0220f8edba7d0": "0x3a9d5baa4abf1d00000",
        "0x4697baaf9ccb603fd30430689d435445e9c98bf5": "0xad201a6794ff80000",
        "0x46a30b8a808931217445c3f5a93e882c0345b426": "0xd8db5ebd7b2638000",
        "0x46a430a2d4a894a0d8aa3feac615361415c3f81f": "0x6c6b935b8bbd400000",
        "0x46aa501870677e7f0a504876b4e8801a0ad01c46": "0x2b5e3af16b18800000",
        "0x46bfc5b207eb2013e2e60f775fecd71810c5990c": "0x54069233bf7f780000",
        "0x46c1aa2244b9c8a957ca8fac431b0595a3b86824": "0xd8d726b7177a800000",
        "0x46d80631284203f6288ecd4e5758bb9d41d05dbe": "0x6c6b935b8bbd400000",
        "0x470ac5d1f3efe28f3802af925b571e63868b397d": "0x6c6b935b8bbd400000",
        "0x471010da492f4018833b088d9872901e06129174": "0x1b1ae4d6e2ef500000",
        "0x4712540265cbeec3847022c59f1b318d43400a9e": "0xbdbc41e0348b300000",
        "0x4714cfa4f46bd6bd70737d75878197e08f88e631": "0x27f3edfb34e6e400000",
        "0x472048cc609aeb242165eaaa8705850cf3125de0": "0x3635c9adc5dea00000",
        "0x47219229e8cd56659a65c2a943e2dd9a8f4bfd89": "0x52663ccab1e1c00000",
        "0x4737d042dc6ae73ec73ae2517acea2fdd96487c5": "0x3635c9adc5dea00000",
        "0x474158a1a9dc693c133f65e47b5c3ae2f773a86f": "0xada55474b81340000",
        "0x4745ab181a36aa8cbf2289d0c45165bc7ebe2381": "0x222c8eb3ff6640000",
        "0x475066f9ad26655196d5535327bbeb9b7929cb04": "0xa4cc799563c3800000",
        "0x4752218e54de423f86c0501933917aea08c8fed5": "0x43c33c1937564800000",
        "0x475a6193572d4a4e59d7be09cb960ddd8c530e2f": "0x242cf78cdf07ff8000",
        "0x47648bed01f3cd3249084e635d14daa9e7ec3c8a": "0xa844a7424d9c80000",
        "0x47688410ff25d654d72eb2bc06e4ad24f833b094": "0x8b28d61f3d3ac0000",
        "0x476b5599089a3fb6f29c6c72e49b2e4740ea808d": "0x97c9ce4cf6d5c00000",
        "0x47730f5f8ebf89ac72ef80e46c12195038ecdc49": "0xab4dcf399a3a600000",
        "0x477b24eee8839e4fd19d1250bd0b6645794a61ca": "0x1b1ae4d6e2ef5000000",
        "0x4781a10a4df5eebc82f4cfe107ba1d8a7640bd66": "0x61093d7c2c6d380000",
        "0x47885ababedf4d928e1c3c71d7ca40d563ed595f": "0x62a992e53a0af00000",
        "0x478dc09a1311377c093f9cc8ae74111f65f82f39": "0xd8d726b7177a800000",
        "0x478e524ef2a381d70c82588a93ca7a5fa9d51cbf": "0x35fa97226f8899700000",
        "0x479298a9de147e63a1c7d6d2fce089c7e64083bd": "0x21e19dd3c3c0d798000",
        "0x479abf2da4d58716fd973a0d13a75f530150260a": "0x1158e460913d00000",
        "0x47a281dff64167197855bf6e705eb9f2cef632ea": "0x3636c9796436740000",
        "0x47beb20f759100542aa93d41118b3211d664920e": "0x6c6b935b8bbd400000",
        "0x47c247f53b9fbeb17bba0703a00c009fdb0f6eae": "0x43c33c1937564800000",
        "0x47c7e5efb48b3aed4b7c6e824b435f357df4c723": "0xfc936392801c0000",
        "0x47cf9cdaf92fc999cc5efbb7203c61e4f1cdd4c3": "0x71f8a93d01e540000",
        "0x47d20e6ae4cad3f829eac07e5ac97b66fdd56cf5": "0x3635c9adc5dea00000",
        "0x47d792a756779aedf1343e8883a6619c6c281184": "0x6c6b935b8bbd400000",
        "0x47e25df8822538a8596b28c637896b4d143c351d": "0x110be9eb24b881500000",
        "0x47f4696bd462b20da09fb83ed2039818d77625b3": "0x813ca56906d340000",
        "0x47fef58584465248a0810d60463ee93e5a6ee8d3": "0xf58cd3e1269160000",
        "0x47ff6feb43212060bb1503d7a397fc08f4e70352": "0x6c6b935b8bbd400000",
        "0x47fff42c678551d141eb75a6ee398117df3e4a8d": "0x56beae51fd2d10000",
        "0x48010ef3b8e95e3f308f30a8cb7f4eb4bf60d965": "0x6c6b935b8bbd400000",
        "0x480af52076009ca73781b70e43b95916a62203ab": "0x321972f4083d878000",
        "0x480f31b989311e4124c6a7465f5a44094d36f9d0": "0x3790bb855137640000",
        "0x481115296ab7db52492ff7b647d63329fb5cbc6b": "0x368c8623a8b4d100000",
        "0x481e3a91bfdc2f1c8428a0119d03a41601417e1c": "0x3635c9adc5dea00000",
        "0x4828e4cbe34e1510afb72c2beeac8a4513eaebd9": "0xd5967be4fc3f100000",
        "0x482982ac1f1c6d1721feecd9b9c96cd949805055": "0x21e19e0c9bab2400000",
        "0x48302c311ef8e5dc664158dd583c81194d6e0d58": "0xb6676ce0bccb5c0000",
        "0x483ba99034e900e3aedf61499d3b2bce39beb7aa": "0x35659ef93f0fc40000",
        "0x48548b4ba62bcb2f0d34a88dc69a680e539cf046": "0x56cf1cbbb74320000",
        "0x4863849739265a63b0a2bf236a5913e6f959ce15": "0x52663ccab1e1c00000",
        "0x48659d8f8c9a2fd44f68daa55d23a608fbe500dc": "0x6c6b935b8bbd400000",
        "0x48669eb5a801d8b75fb6aa58c3451b7058c243bf": "0x68d42c138dab9f00000",
        "0x486a6c8583a84484e3df43a123837f8c7e2317d0": "0x1187c571ab80450000",
        "0x487adf7d70a6740f8d51cbdd68bb3f91c4a5ce68": "0x39fbae8d042dd0000",
        "0x487e108502b0b189ef9c8c6da4d0db6261eec6c0": "0x678a932062e4180000",
        "0x4888fb25cd50dbb9e048f41ca47d78b78a27c7d9": "0x3a9d5baa4abf1d00000",
        "0x489334c2b695c8ee0794bd864217fb9fd8f8b135": "0xfc936392801c0000",
        "0x48a30de1c919d3fd3180e97d5f2b2a9dbd964d2d": "0x2629f66e0c5300000",
        "0x48bf14d7b1fc84ebf3c96be12f7bce01aa69b03e": "0x68155a43676e00000",
        "0x48c2ee91a50756d8ce9abeeb7589d22c6fee5dfb": "0xae8e7a0bb575d00000",
        "0x48c5c6970b9161bb1c7b7adfed9cdede8a1ba864": "0xd8d726b7177a800000",
        "0x48d2434b7a7dbbff08223b6387b05da2e5093126": "0x3cfc82e37e9a7400000",
        "0x48d4f2468f963fd79a006198bb67895d2d5aa4d3": "0x4be4e7267b6ae00000",
        "0x48e0cbd67f18acdb7a6291e1254db32e0972737f": "0x56be03ca3e47d8000",
        "0x48f60a35484fe7792bcc8a7b6393d0dda1f6b717": "0xc328093e61ee400000",
        "0x48f883e567b436a27bb5a3124dbc84dec775a800": "0x29d76e869dcd800000",
        "0x490145afa8b54522bb21f352f06da5a788fa8f1d": "0x1f46c62901a03fb0000",
        "0x4909b31998ead414b8fb0e846bd5cbde393935be": "0xd8d726b7177a800000",
        "0x4912d902931676ff39fc34fe3c3cc8fb2182fa7a": "0x1158e460913d00000",
        "0x49136fe6e28b7453fcb16b6bbbe9aaacba8337fd": "0x6c6b935b8bbd400000",
        "0x491561db8b6fafb9007e62d050c282e92c4b6bc8": "0x65a4da25d3016c00000",
        "0x49185dd7c23632f46c759473ebae966008cd3598": "0xdc55fdb17647b0000",
        "0x492cb5f861b187f9df21cd4485bed90b50ffe22d": "0x1b19e50b44977c0000",
        "0x492de46aaf8f1d708d59d79af1d03ad2cb60902f": "0x6c6b935b8bbd400000",
        "0x492e70f04d18408cb41e25603730506b35a2876b": "0x222c8eb3ff6640000",
        "0x493a67fe23decc63b10dda75f3287695a81bd5ab": "0x2fb474098f67c00000",
        "0x493d48bda015a9bfcf1603936eab68024ce551e0": "0x138a388a43c000000",
        "0x494256e99b0f9cd6e5ebca3899863252900165c8": "0x2f6f10780d22cc00000",
        "0x494dec4d5ee88a2771a815f1ee7264942fb58b28": "0x6c6b935b8bbd400000",
        "0x495b641b1cdea362c3b4cbbd0f5cc50b1e176b9c": "0x3635c9adc5dea00000",
        "0x4968a2cedb457555a139295aea28776e54003c87": "0x2231aefc9a6628f0000",
        "0x496d365534530a5fc1577c0a5241cb88c4da7072": "0x61093d7c2c6d380000",
        "0x496e319592b341eaccd778dda7c8196d54cac775": "0x1f5718987664b480000",
        "0x496f5843f6d24cd98d255e4c23d1e1f023227545": "0x5f179fd4a6ee098000",
        "0x4970d3acf72b5b1f32a7003cf102c64ee0547941": "0x1da56a4b0835bf800000",
        "0x4977a7939d0939689455ce2639d0ee5a4cd910ed": "0x62a992e53a0af00000",
        "0x4979194ec9e97db9bee8343b7c77d9d7f3f1dc9f": "0x1158e460913d00000",
        "0x49793463e1681083d6abd6e725d5bba745dccde8": "0x1d98e94c4e471f0000",
        "0x4981c5ff66cc4e9680251fc4cd2ff907cb327865": "0x28a857425466f80000",
        "0x49897fe932bbb3154c95d3bce6d93b6d732904dd": "0xd8d726b7177a800000",
        "0x4989e1ab5e7cd00746b3938ef0f0d064a2025ba5": "0x6c6b935b8bbd400000",
        "0x498abdeb14c26b7b7234d70fceaef361a76dff72": "0xa2a15d09519be00000",
        "0x49a645e0667dfd7b32d075cc2467dd8c680907c4": "0x70601958fcb9c0000",
        "0x49b74e169265f01a89ec4c9072c5a4cd72e4e835": "0x368c8623a8b4d100000",
        "0x49bdbc7ba5abebb6389e91a3285220d3451bd253": "0x3635c9adc5dea00000",
        "0x49c941e0e5018726b7290fc473b471d41dae80d1": "0x1b1ae4d6e2ef500000",
        "0x49c9771fca19d5b9d245c891f8158fe49f47a062": "0x21e19e0c9bab2400000",
        "0x49cf1e54be363106b920729d2d0ba46f0867989a": "0xe873f44133cb00000",
        "0x49d2c28ee9bc545eaaf7fd14c27c4073b4bb5f1a": "0x4fe9b806b40daf0000",
        "0x49ddee902e1d0c99d1b11af3cc8a96f78e4dcf1a": "0xacea5e4c18c530000",
        "0x49f028395b5a86c9e07f7778630e4c2e3d373a77": "0x6a74a5038db918000",
        "0x4a192035e2619b24b0709d56590e9183ccf2c1d9": "0x21e19e0c9bab2400000",
        "0x4a4053b31d0ee5dbafb1d06bd7ac7ff3222c47d6": "0x4be4e7267b6ae00000",
        "0x4a430170152de5172633dd8262d107a0afd96a0f": "0xab4dcf399a3a600000",
        "0x4a47fc3e177f567a1e3893e000e36bba23520ab8": "0x6c6b935b8bbd400000",
        "0x4a52bad20357228faa1e996bed790c93674ba7d0": "0x487a9a304539440000",
        "0x4a53dcdb56ce4cdce9f82ec0eb13d67352e7c88b": "0xe3aeb5737240a00000",
        "0x4a5fae3b0372c230c125d6d470140337ab915656": "0x56bc75e2d631000000",
        "0x4a719061f5285495b37b9d7ef8a51b07d6e6acac": "0xad4c8316a0b0c0000",
        "0x4a73389298031b8816cca946421c199e18b343d6": "0x223868b879146f0000",
        "0x4a735d224792376d331367c093d31c8794341582": "0x66ffcbfd5e5a300000",
        "0x4a7494cce44855cc80582842be958a0d1c0072ee": "0x821ab0d44149800000",
        "0x4a75c3d4fa6fccbd5dd5a703c15379a1e783e9b7": "0x62a992e53a0af00000",
        "0x4a81abe4984c7c6bef63d69820e55743c61f201c": "0x36401004e9aa3470000",
        "0x4a82694fa29d9e213202a1a209285df6e745c209": "0xd8d726b7177a800000",
        "0x4a835c25824c47ecbfc79439bf3f5c3481aa75cd": "0x4be4e7267b6ae00000",
        "0x4a918032439159bb315b6725b6830dc83697739f": "0x12a32ef678334c0000",
        "0x4a97e8fcf4635ea7fc5e96ee51752ec388716b60": "0x1d9945ab2b03480000",
        "0x4a9a26fd0a8ba10f977da4f77c31908dab4a8016": "0x61093d7c2c6d380000",
        "0x4aa148c2c33401e66a2b586e6577c4b292d3f240": "0xbb860b285f7740000",
        "0x4aa693b122f314482a47b11cc77c68a497876162": "0x6acb3df27e1f880000",
        "0x4ab2d34f04834fbf7479649cab923d2c4725c553": "0xbed1d0263d9f000000",
        "0x4ac07673e42f64c1a25ec2fa2d86e5aa2b34e039": "0x6c6b935b8bbd400000",
        "0x4ac5acad000b8877214cb1ae00eac9a37d59a0fd": "0xd8d726b7177a800000",
        "0x4ac9905a4cb6ab1cfd62546ee5917300b87c4fde": "0x3708baed3d68900000",
        "0x4acfa9d94eda6625c9dfa5f9f4f5d107c4031fdf": "0x222c8eb3ff6640000",
        "0x4ad047fae67ef162fe68fedbc27d3b65caf10c36": "0x6acb3df27e1f880000",
        "0x4ad95d188d6464709add2555fb4d97fe1ebf311f": "0x12c1b6eed03d280000",
        "0x4adbf4aae0e3ef44f7dd4d8985cfaf096ec48e98": "0x821ab0d4414980000",
        "0x4ae2a04d3909ef454e544ccfd614bfefa71089ae": "0x1801159df1eef80000",
        "0x4ae93082e45187c26160e66792f57fad3551c73a": "0x4961520daff82280000",
        "0x4af0db077bb9ba5e443e21e148e59f379105c592": "0x2086ac351052600000",
        "0x4b0619d9d8aa313a9531ac7dbe04ca0d6a5ad1b6": "0x6c6b935b8bbd400000",
        "0x4b0bd8acfcbc53a6010b40d4d08ddd2d9d69622d": "0x243d4d18229ca20000",
        "0x4b19eb0c354bc1393960eb06063b83926f0d67b2": "0x19274b259f6540000",
        "0x4b29437c97b4a844be71cca3b648d4ca0fdd9ba4": "0x824719834cfac0000",
        "0x4b31bf41abc75c9ae2cd8f7f35163b6e2b745054": "0x14b550a013c7380000",
        "0x4b3a7cc3a7d7b00ed5282221a60259f25bf6538a": "0x3635c9adc5dea00000",
        "0x4b3aab335ebbfaa870cc4d605e7d2e74c668369f": "0xcb49b44ba602d800000",
        "0x4b3c7388cc76da3d62d40067dabccd7ef0433d23": "0x56cd55fc64dfe0000",
        "0x4b3dfbdb454be5279a3b8addfd0ed1cd37a9420d": "0x6c6b935b8bbd400000",
        "0x4b470f7ba030bc7cfcf338d4bf0432a91e2ea5ff": "0x6c6b935b8bbd400000",
        "0x4b53ae59c784b6b5c43616b9a0809558e684e10c": "0x410d586a20a4c00000",
        "0x4b58101f44f7e389e12d471d1635b71614fdd605": "0x8ac7230489e800000",
        "0x4b5cdb1e428c91dd7cb54a6aed4571da054bfe52": "0x4c53ecdc18a600000",
        "0x4b60a3e253bf38c8d5662010bb93a473c965c3e5": "0x50c5e761a444080000",
        "0x4b74f5e58e2edf76daf70151964a0b8f1de0663c": "0x1190ae4944ba120000",
        "0x4b762166dd1118e84369f804c75f9cd657bf730c": "0x1b1ae4d6e2ef500000",
        "0x4b792e29683eb586e394bb33526c6001b397999e": "0x2086ac351052600000",
        "0x4b904e934bd0cc8b20705f879e905b93ea0ccc30": "0x6c6b935b8bbd400000",
        "0x4b9206ba6b549a1a7f969e1d5dba867539d1fa67": "0x1ab2cf7c9f87e200000",
        "0x4b984ef26c576e815a2eaed2f5177f07dbb1c476": "0x54915956c409600000",
        "0x4b9e068fc4680976e61504912985fd5ce94bab0d": "0x243d4d18229ca20000",
        "0x4ba0d9e89601772b496847a2bb4340186787d265": "0x3635c9adc5dea00000",
        "0x4ba53ab549e2016dfa223c9ed5a38fad91288d07": "0x4be4e7267b6ae00000",
        "0x4ba8e0117fc0b6a3e56b24a3a58fe6cef442ff98": "0x131beb925ffd3200000",
        "0x4bac846af4169f1d95431b341d8800b22180af1a": "0x1158e460913d00000",
        "0x4bb6d86b8314c22d8d37ea516d0019f156aae12d": "0x3635c9adc5dea00000",
        "0x4bb9655cfb2a36ea7c637a7b859b4a3154e26ebe": "0x3635c9adc5dea000000",
        "0x4bbcbf38b3c90163a84b1cd2a93b58b2a3348d87": "0x1b1ae4d6e2ef5000000",
        "0x4bd6dd0cff23400e1730ba7b894504577d14e74a": "0x2ba0ccddd0df73b00000",
        "0x4be8628a8154874e048d80c142181022b180bcc1": "0x340aad21b3b700000",
        "0x4be90d412129d5a4d0424361d6649d4e47a62316": "0x3708baed3d68900000",
        "0x4bea288eea42c4955eb9faad2a9faf4783cbddac": "0x618be1663c4af490000",
        "0x4bf4479799ef82eea20943374f56a1bf54001e5e": "0xd5967be4fc3f100000",
        "0x4bf8bf1d35a231315764fc8001809a949294fc49": "0x39fbae8d042dd0000",
        "0x4bf8e26f4c2790da6533a2ac9abac3c69a199433": "0xad78ebc5ac6200000",
        "0x4c0aca508b3caf5ee028bc707dd1e800b838f453": "0xfc936392801c0000",
        "0x4c0b1515dfced7a13e13ee12c0f523ae504f032b": "0xa968163f0a57b400000",
        "0x4c13980c32dcf3920b78a4a7903312907c1b123f": "0x3410015faae0c0000",
        "0x4c1579af3312e4f88ae93c68e9449c2e9a68d9c4": "0x6c6b935b8bbd400000",
        "0x4c23b370fc992bb67cec06e26715b62f0b3a4ac3": "0x21e19e0c9bab2400000",
        "0x4c24b78baf2bafc7fcc69016426be973e20a50b2": "0xa2a15d09519be00000",
        "0x4c2f1afef7c5868c44832fc77cb03b55f89e6d6e": "0x43c33c1937564800000",
        "0x4c377bb03ab52c4cb79befa1dd114982924c4ae9": "0x631603ccd38dd70000",
        "0x4c3e95cc3957d252ce0bf0c87d5b4f2234672e70": "0x878678326eac900000",
        "0x4c423c76930d07f93c47a5cc4f615745c45a9d72": "0x56bc75e2d63100000",
        "0x4c45d4c9a725d11112bfcbca00bf31186ccaadb7": "0x15af1d78b58c400000",
        "0x4c4e6f13fb5e3f70c3760262a03e317982691d10": "0x56bc75e2d63100000",
        "0x4c5afe40f18ffc48d3a1aec41fc29de179f4d297": "0x6c6b935b8bbd400000",
        "0x4c5b3dc0e2b9360f91289b1fe13ce12c0fbda3e1": "0x6c6b935b8bbd400000",
        "0x4c666b86f1c5ee8ca41285f5bde4f79052081406": "0x1b1ae4d6e2ef500000",
        "0x4c696be99f3a690440c3436a59a7d7e937d6ba0d": "0xbb9125542263900000",
        "0x4c6a248fc97d705def495ca20759169ef0d36471": "0x29331e6558f0e00000",
        "0x4c6a9dc2cab10abb2e7c137006f08fecb5b779e1": "0x1b0d04202f47ec0000",
        "0x4c6b93a3bec16349540cbfcae96c9621d6645010": "0x6c6b935b8bbd400000",
        "0x4c759813ad1386bed27ffae9e4815e3630cca312": "0x6c6b935b8bbd400000",
        "0x4c760cd9e195ee4f2d6bce2500ff96da7c43ee91": "0xcb49b44ba602d800000",
        "0x4c767b65fd91161f4fbdcc6a69e2f6ad711bb918": "0x270801d946c9400000",
        "0x4c7e2e2b77ad0cd6f44acb2861f0fb8b28750ef9": "0x1158e460913d00000",
        "0x4c85ed362f24f6b9f04cdfccd022ae535147cbb9": "0x5150ae84a8cdf00000",
        "0x4c935bb250778b3c4c7f7e07fc251fa630314aab": "0x5150ae84a8cdf00000",
        "0x4c997992036c5b433ac33d25a8ea1dc3d4e4e6d8": "0x1953b3d4ab1680000",
        "0x4c99dae96481e807c1f99f8b7fbde29b7547c5bf": "0x821ab0d4414980000",
        "0x4c9a862ad115d6c8274ed0b944bdd6a5500510a7": "0x56bc75e2d63100000",
        "0x4ca783b556e5bf53aa13c8116613d65782c9b642": "0x5561840b4ad83c00000",
        "0x4ca7b717d9bc8793b04e051a8d23e1640f5ba5e3": "0x43b514549ecf620000",
        "0x4ca8db4a5efefc80f4cd9bbcccb03265931332b6": "0xad78ebc5ac6200000",
        "0x4cac91fb83a147d2f76c3267984b910a79933348": "0x75792a8abdef7c0000",
        "0x4cadf573ce4ceec78b8e1b21b0ed78eb113b2c0e": "0x6c6b935b8bbd400000",
        "0x4cb5c6cd713ca447b848ae2f56b761ca14d7ad57": "0xe7eeba3410b740000",
        "0x4cc22c9bc9ad05d875a397dbe847ed221c920c67": "0x6c6b935b8bbd400000",
        "0x4cd0b0a6436362595ceade052ebc9b929fb6c6c0": "0x6c6b935b8bbd400000",
        "0x4cda41dd533991290794e22ae324143e309b3d3d": "0x821ab0d44149800000",
        "0x4cee901b4ac8b156c5e2f8a6f1bef572a7dceb7e": "0x3635c9adc5dea00000",
        "0x4cefbe2398e47d52e78db4334c8b697675f193ae": "0xd96fce90cfabcc0000",
        "0x4cf5537b85842f89cfee359eae500fc449d2118f": "0x3635c9adc5dea00000",
        "0x4d08471d68007aff2ae279bc5e3fe4156fbbe3de": "0x878678326eac9000000",
        "0x4d200110124008d56f76981256420c946a6ff45c": "0xad6eedd17cf3b8000",
        "0x4d24b7ac47d2f27de90974ba3de5ead203544bcd": "0x56bc75e2d63100000",
        "0x4d29fc523a2c1629532121da9998e9b5ab9d1b45": "0xdb44e049bb2c0000",
        "0x4d38d90f83f4515c03cc78326a154d358bd882b7": "0xa076407d3f7440000",
        "0x4d4cf5807429615e30cdface1e5aae4dad3055e6": "0x2086ac351052600000",
        "0x4d57e716876c0c95ef5eaebd35c8f41b069b6bfe": "0x6c6b935b8bbd400000",
        "0x4d67f2ab8599fef5fc413999aa01fd7fce70b43d": "0x21e19e0c9bab2400000",
        "0x4d6e8fe109ccd2158e4db114132fe75fecc8be5b": "0x15b3557f1937f8000",
        "0x4d71a6eb3d7f327e1834278e280b039eddd31c2f": "0x14542ba12a337c00000",
        "0x4d7cfaa84cb33106800a8c802fb8aa463896c599": "0x61093d7c2c6d380000",
        "0x4d801093c19ca9b8f342e33cc9c77bbd4c8312cf": "0x12b3e7fb95cda48000",
        "0x4d828894752f6f25175daf2177094487954b6f9f": "0x4f212bc2c49c838000",
        "0x4d82d7700c123bb919419bbaf046799c6b0e2c66": "0x43c33c1937564800000",
        "0x4d836d9d3b0e2cbd4de050596faa490cffb60d5d": "0x1043561a8829300000",
        "0x4d8697af0fbf2ca36e8768f4af22133570685a60": "0x1158e460913d00000",
        "0x4d9279962029a8bd45639737e98b511eff074c21": "0x487a9a304539440000",
        "0x4d93696fa24859f5d2939aebfa54b4b51ae1dccc": "0x10910d4cdc9f60000",
        "0x4d9c77d0750c5e6fbc247f2fd79274686cb353d6": "0x1158e460913d00000",
        "0x4da5edc688b0cb62e1403d1700d9dcb99ffe3fd3": "0x6c6b935b8bbd400000",
        "0x4da8030769844bc34186b85cd4c7348849ff49e9": "0x21e19e0c9bab2400000",
        "0x4db1c43a0f834d7d0478b8960767ec1ac44c9aeb": "0x2f5181305627370000",
        "0x4db21284bcd4f787a7556500d6d7d8f36623cf35": "0x6928374f77a3630000",
        "0x4dc3da13b2b4afd44f5d0d3189f444d4ddf91b1b": "0x6c6b935b8bbd400000",
        "0x4dc4bf5e7589c47b28378d7503cf96488061dbbd": "0x5f68e8131ecf800000",
        "0x4dc9d5bb4b19cecd94f19ec25d200ea72f25d7ed": "0x6c6b935b8bbd400000",
        "0x4dcd11815818ae29b85d01367349a8a7fb12d06b": "0x1ac4286100191f00000",
        "0x4dcf62a3de3f061db91498fd61060f1f6398ff73": "0x6c6acc67d7b1d40000",
        "0x4dd131c74a068a37c90aded4f309c2409f6478d3": "0x15af39e4aab2740000",
        "0x4ddda7586b2237b053a7f3289cf460dc57d37a09": "0x21e19e0c9bab2400000",
        "0x4de3fe34a6fbf634c051997f47cc7f48791f5824": "0x6c5db2a4d815dc0000",
        "0x4df140ba796585dd5489315bca4bba680adbb818": "0x90f534608a72880000",
        "0x4e020779b5ddd3df228a00cb48c2fc979da6ae38": "0x6c6b935b8bbd400000",
        "0x4e0bd32473c4c51bf25654def69f797c6b29a232": "0x56c95de8e8ca1d0000",
        "0x4e2225a1bb59bc88a2316674d333b9b0afca6655": "0x8670e9ec6598c0000",
        "0x4e2310191ead8d3bc6489873a5f0c2ec6b87e1be": "0x3635c9adc5dea00000",
        "0x4e232d53b3e6be8f895361d31c34d4762b12c82e": "0x5f68e8131ecf800000",
        "0x4e2bfa4a466f82671b800eee426ad00c071ba170": "0xd8d726b7177a800000",
        "0x4e3edad4864dab64cae4c5417a76774053dc6432": "0x2008fb478cbfa98000",
        "0x4e4318f5e13e824a54edfe30a7ed4f26cd3da504": "0x6c6b935b8bbd400000",
        "0x4e5b77f9066159e615933f2dda7477fa4e47d648": "0xad78ebc5ac6200000",
        "0x4e6600806289454acda330a2a3556010dfacade6": "0x14542ba12a337c00000",
        "0x4e73cf2379f124860f73d6d91bf59acc5cfc845b": "0x22ca3587cf4eb0000",
        "0x4e7aa67e12183ef9d7468ea28ad239c2eef71b76": "0x10afc1ade3b4ed40000",
        "0x4e7b54474d01fefd388dfcd53b9f662624418a05": "0x1b1ae4d6e2ef5000000",
        "0x4e892e8081bf36e488fddb3b2630f3f1e8da30d2": "0x28aba30752451fc0000",
        "0x4e8a6d63489ccc10a57f885f96eb04ecbb546024": "0x3eae3130ecc96900000",
        "0x4e8e47ae3b1ef50c9d54a38e14208c1abd3603c2": "0x7928db1276660c0000",
        "0x4e90ccb13258acaa9f4febc0a34292f95991e230": "0xdb44e049bb2c0000",
        "0x4ea56e1112641c038d0565a9c296c463afefc17e": "0x9ddc1e3b901180000",
        "0x4ea70f04313fae65c3ff224a055c3d2dab28dddf": "0x43c30fb0884a96c0000",
        "0x4eb1454b573805c8aca37edec7149a41f61202f4": "0x1043561a8829300000",
        "0x4eb87ba8788eba0df87e5b9bd50a8e45368091c1": "0x1158e460913d00000",
        "0x4ebc5629f9a6a66b2cf3363ac4895c0348e8bf87": "0x3637096c4bcc690000",
        "0x4ec768295eeabafc42958415e22be216cde77618": "0x33b1dbc39c5480000",
        "0x4ecc19948dd9cd87b4c7201ab48e758f28e7cc76": "0x1b1dab61d3aa640000",
        "0x4ed14d81b60b23fb25054d8925dfa573dcae6168": "0x126e72a69a50d00000",
        "0x4ee13c0d41200b46d19dee5c4bcec71d82bb8e38": "0x1abee13ccbeefaf8000",
        "0x4eead40aad8c73ef08fc84bc0a92c9092f6a36bf": "0x1731790534df20000",
        "0x4eebe80cb6f3ae5904f6f4b28d907f907189fcab": "0x6c6acc67d7b1d40000",
        "0x4eebf1205d0cc20cee6c7f8ff3115f56d48fba26": "0x10d3aa536e2940000",
        "0x4ef1c214633ad9c0703b4e2374a2e33e3e429291": "0x487a9a304539440000",
        "0x4efcd9c79fb4334ca6247b0a33bd9cc33208e272": "0x487a9a304539440000",
        "0x4f06246b8d4bd29661f43e93762201d286935ab1": "0x105394ffc4636110000",
        "0x4f152b2fb8659d43776ebb1e81673aa84169be96": "0x6c6b935b8bbd400000",
        "0x4f177f9d56953ded71a5611f393322c30279895c": "0xd55ef90a2da180000",
        "0x4f1a2da54a4c6da19d142412e56e815741db2325": "0x56bc75e2d63100000",
        "0x4f23b6b817ffa5c664acdad79bb7b726d30af0f9": "0x5f68e8131ecf800000",
        "0x4f26690c992b7a312ab12e1385d94acd58288e7b": "0x2f6f10780d22cc00000",
        "0x4f2b47e2775a1fa7178dad92985a5bbe493ba6d6": "0xad78ebc5ac6200000",
        "0x4f3a4854911145ea01c644044bdb2e5a960a982f": "0xd8d726b7177a800000",
        "0x4f3f2c673069ac97c2023607152981f5cd6063a0": "0x2086ac351052600000",
        "0x4f4a9be10cd5d3fb5de48c17be296f895690645b": "0x878678326eac9000000",
        "0x4f52ad6170d25b2a2e850eadbb52413ff2303e7f": "0xa4cc799563c3800000",
        "0x4f5801b1eb30b712d8a0575a9a71ff965d4f34eb": "0x1043561a8829300000",
        "0x4f5df5b94357de948604c51b7893cddf6076baad": "0xcbd47b6eaa8cc00000",
        "0x4f64a85e8e9a40498c0c75fceb0337fb49083e5e": "0x3635c9adc5dea00000",
        "0x4f67396d2553f998785f704e07a639197dd1948d": "0x104472521ba7380000",
        "0x4f6d4737d7a940382487264886697cf7637f8015": "0x5a87e7d7f5f6580000",
        "0x4f7330096f79ed264ee0127f5d30d2f73c52b3d8": "0x1b1a7a420ba00d0000",
        "0x4f767bc8794aef9a0a38fea5c81f14694ff21a13": "0x1bc433f23f83140000",
        "0x4f85bc1fc5cbc9c001e8f1372e07505370d8c71f": "0x32f51edbaaa3300000",
        "0x4f88dfd01091a45a9e2676021e64286cd36b8d34": "0x3635c9adc5dea00000",
        "0x4f8972838f70c903c9b6c6c46162e99d6216d451": "0xf9e89a0f2c56c80000",
        "0x4f8ae80238e60008557075ab6afe0a7f2e74d729": "0x56bc75e2d63100000",
        "0x4f8e8d274fb22a3fd36a47fe72980471544b3434": "0xad78ebc5ac6200000",
        "0x4f9ce2af9b8c5e42c6808a3870ec576f313545d1": "0x21e19e0c9bab2400000",
        "0x4fa3f32ef4086448b344d5f0a9890d1ce4d617c3": "0x5150ae84a8cdf00000",
        "0x4fa554ab955c249217386a4d3263bbf72895434e": "0x1154e53217ddb0000",
        "0x4fa983bb5e3073a8edb557effeb4f9fb1d60ef86": "0x56b9af57e575ec0000",
        "0x4faf90b76ecfb9631bf9022176032d8b2c207009": "0x36363b5d9a77700000",
        "0x4fc46c396e674869ad9481638f0013630c87caac": "0x3635c9adc5dea00000",
        "0x4fcc19ea9f4c57dcbce893193cfb166aa914edc5": "0x17b8baa7f19546a0000",
        "0x4fce8429ba49caa0369d1e494db57e89eab2ad39": "0x2a5a058fc295ed000000",
        "0x4fdac1aa517007e0089430b3316a1badd12c01c7": "0x1b1ae4d6e2ef500000",
        "0x4fe56ab3bae1b0a44433458333c4b05a248f8241": "0x762d93d1dd6f900000",
        "0x4feb846be43041fd6b34202897943e3f21cb7f04": "0x482fe260cbca90000",
        "0x4fee50c5f988206b09a573469fb1d0b42ebb6dce": "0x6cee06ddbe15ec0000",
        "0x4ff676e27f681a982d8fd9d20e648b3dce05e945": "0x97c9ce4cf6d5c00000",
        "0x4ff67fb87f6efba9279930cfbd1b7a343c79fade": "0x15af1d78b58c400000",
        "0x5006fe4c22173980f00c74342b39cd231c653129": "0x6c6b935b8bbd400000",
        "0x500c16352e901d48ba8d04e2c767121772790b02": "0x1a3a6824973098000",
        "0x500c902958f6421594d1b6ded712490d52ed6c44": "0x6acb3df27e1f880000",
        "0x500e34cde5bd9e2b71bb92d7cf55eee188d5fa0c": "0x121ea68c114e5100000",
        "0x5032e4bcf7932b49fdba377b6f1499636513cfc3": "0x56bc75e2d63100000",
        "0x50378af7ef54043f892ab7ce97d647793511b108": "0x11164759ffb320000",
        "0x503bdbd8bc421c32a443032deb2e3e4cd5ba8b4e": "0x6c6b935b8bbd400000",
        "0x504666ce8931175e11a5ed11c1dcaa06e57f4e66": "0x27f3edfb34e6e400000",
        "0x50584d9206a46ce15c301117ee28f15c30e60e75": "0xb9f65d00f63c0000",
        "0x505a33a18634dd4800693c67f48a1d693d4833f8": "0x18921b79941dcd00000",
        "0x505e4f7c275588c533a20ebd2ac13b409bbdea3c": "0xf43fc2c04ee00000",
        "0x5062e5134c612f12694dbd0e131d4ce197d1b6a4": "0x3635c9adc5dea00000",
        "0x506411fd79003480f6f2b6aac26b7ba792f094b2": "0x1b1ae4d6e2ef500000",
        "0x5067f4549afbfe884c59cbc12b96934923d45db0": "0x3635c9adc5dea00000",
        "0x50763add868fd7361178342fc055eaa2b95f6846": "0x39f9046e0898f0000",
        "0x508cf19119db70aa86454253da764a2cb1b2be1a": "0x3635c9adc5dea00000",
        "0x509982f56237ee458951047e0a2230f804e2e895": "0x3b4ad496106b7f00000",
        "0x509a20bc48e72be1cdaf9569c711e8648d957334": "0x6c6b935b8bbd400000",
        "0x509c8668036d143fb8ae70b11995631f3dfcad87": "0x3635c9adc5dea00000",
        "0x50ad187ab21167c2b6e78be0153f44504a07945e": "0x56cd55fc64dfe0000",
        "0x50b9fef0a1329b02d16506255f5a2db71ec92d1f": "0x47da821564085c0000",
        "0x50bb67c8b8d8bd0f63c4760904f2d333f400aace": "0x6c6b935b8bbd400000",
        "0x50bef2756248f9a7a380f91b051ba3be28a649ed": "0x6c69f73e29134e0000",
        "0x50ca86b5eb1d01874df8e5f34945d49c6c1ab848": "0x3635c9adc5dea00000",
        "0x50cd97e9378b5cf18f173963236c9951ef7438a5": "0x4be4e7267b6ae00000",
        "0x50dcbc27bcad984093a212a9b4178eabe9017561": "0x7e362790b5ca40000",
        "0x50e13023bd9ca96ad4c53fdfd410cb6b1f420bdf": "0xad78ebc5ac6200000",
        "0x50e1c8ec98415bef442618708799437b86e6c205": "0x14542ba12a337c00000",
        "0x50f8fa4bb9e2677c990a4ee8ce70dd1523251e4f": "0x1693d23164f6b0000",
        "0x50fb36c27107ee2ca9a3236e2746cca19ace6b49": "0x6c6b935b8bbd400000",
        "0x50fef296955588caae74c62ec32a23a454e09ab8": "0x411dffabc507380000",
        "0x5102a4a42077e11c58df4773e3ac944623a66d9f": "0x6c7015fd52ed408000",
        "0x51039377eed0c573f986c5e8a95fb99a59e9330f": "0x6acb3df27e1f880000",
        "0x5103bc09933e9921fd53dc536f11f05d0d47107d": "0xd8d726b7177a800000",
        "0x5104ecc0e330dd1f81b58ac9dbb1a9fbf88a3c85": "0x152d02c7e14af6800000",
        "0x510d8159cc945768c7450790ba073ec0d9f89e30": "0x8ac7230489e8000000",
        "0x510eda5601499a0d5e1a006bfffd833672f2e267": "0x6c6b935b8bbd400000",
        "0x51126446ab3d8032557e8eba65597d75fadc815c": "0x1174a5cdf88bc80000",
        "0x5118557d600d05c2fcbf3806ffbd93d02025d730": "0x267d3ab6423f5800000",
        "0x511e0efb04ac4e3ff2e6550e498295bfcd56ffd5": "0x243d4d18229ca20000",
        "0x512116817ba9aaf843d1507c65a5ea640a7b9eec": "0x2b5e3af16b1880000",
        "0x5126460d692c71c9af6f05574d93998368a23799": "0x2d1a51c7e00500000",
        "0x51277fe7c81eebd252a03df69a6b9f326e272207": "0x3402e79cab44c8000",
        "0x51296f5044270d17707646129c86aad1645eadc1": "0x487c72b310d4648000",
        "0x512b91bbfaa9e581ef683fc90d9db22a8f49f48b": "0x41a522386d9b95c00000",
        "0x5135fb8757600cf474546252f74dc0746d06262c": "0x6c6b935b8bbd400000",
        "0x514632efbd642c04de6ca342315d40dd90a2dba6": "0x90f534608a72880000",
        "0x514b7512c9ae5ea63cbf11715b63f21e18d296c1": "0x6c6acc67d7b1d40000",
        "0x5153a0c3c8912881bf1c3501bf64b45649e48222": "0xd8d726b7177a800000",
        "0x515651d6db4faf9ecd103a921bbbbe6ae970fdd4": "0x43c33c1937564800000",
        "0x515f30bc90cdf4577ee47d65d785fbe2e837c6bc": "0x2271b5e018ba0580000",
        "0x5160ed612e1b48e73f3fc15bc4321b8f23b8a24b": "0x1e826b422865d80000",
        "0x5161fd49e847f67455f1c8bb7abb36e985260d03": "0x410d586a20a4c00000",
        "0x516954025fca2608f47da81c215eedfd844a09ff": "0x14b550a013c7380000",
        "0x5169c60aee4ceed1849ab36d664cff97061e8ea8": "0xa2a15d09519be00000",
        "0x517c75430de401c341032686112790f46d4d369e": "0x150894e849b3900000",
        "0x517cd7608e5d0d83a26b717f3603dac2277dc3a4": "0x6c6b935b8bbd400000",
        "0x51865db148881951f51251710e82b9be0d7eadb2": "0x6c6b935b8bbd400000",
        "0x51891b2ccdd2f5a44b2a8bc49a5d9bca6477251c": "0x10ce1d3d8cb3180000",
        "0x518cef27b10582b6d14f69483ddaa0dd3c87bb5c": "0x2086ac351052600000",
        "0x51a6d627f66a8923d88d6094c4715380d3057cb6": "0x3e73d27a35941e0000",
        "0x51a8c2163602a32ee24cf4aa97fd9ea414516941": "0x368f7e6b8672c0000",
        "0x51b4758e9e1450e7af4268c3c7b1e7bd6f5c7550": "0x3635c9adc5dea00000",
        "0x51ca8bd4dc644fac47af675563d5804a0da21eeb": "0x2ab7b260ff3fd00000",
        "0x51d24bc3736f88dd63b7222026886630b6eb878d": "0x6c6b935b8bbd400000",
        "0x51d78b178d707e396e8710965c4f41b1a1d9179d": "0x5fee222041e340000",
        "0x51e32f14f4ca5e287cdac057a7795ea9e0439953": "0x1b1ae4d6e2ef500000",
        "0x51e43fe0d25c782860af81ea89dd793c13f0cbb1": "0x340aad21b3b700000",
        "0x51e7b55c2f9820eed73884361b5066a59b6f45c6": "0x6c6b935b8bbd400000",
        "0x51ea1c0934e3d04022ed9c95a087a150ef705e81": "0x1547081e7224d200000",
        "0x51ee0cca3bcb10cd3e983722ced8493d926c0866": "0x36356633ebd8ea0000",
        "0x51f4663ab44ff79345f427a0f6f8a6c8a53ff234": "0x43c33c1937564800000",
        "0x51f55ef47e6456a418ab32b9221ed27dba6608ee": "0xe3aeb5737240a00000",
        "0x51f9c432a4e59ac86282d6adab4c2eb8919160eb": "0x703b5b89c3a6e7400000",
        "0x520f66a0e2657ff0ac4195f2f064cf2fa4b24250": "0x22b1c8c1227a00000",
        "0x52102354a6aca95d8a2e86d5debda6de69346076": "0x6c6b935b8bbd400000",
        "0x5213f459e078ad3ab95a0920239fcf1633dc04ca": "0x8cf2187c2afb188000",
        "0x5215183b8f80a9bc03d26ce91207832a0d39e620": "0x3635c9adc5dea00000",
        "0x52214378b54004056a7cc08c891327798ac6b248": "0x337fe5feaf2d1800000",
        "0x522323aad71dbc96d85af90f084b99c3f09decb7": "0x14542ba12a337c00000",
        "0x523e140dc811b186dee5d6c88bf68e90b8e096fd": "0x6c6b935b8bbd400000",
        "0x523f6d64690fdacd942853591bb0ff20d3656d95": "0x62a992e53a0af00000",
        "0x524fb210522c5e23bb67dfbf8c26aa616da49955": "0x363562a66d34238000",
        "0x5255dc69155a45b970c604d30047e2f530690e7f": "0x1158e460913d00000",
        "0x5260dc51ee07bddaababb9ee744b393c7f4793a6": "0x1d8665fa5fa4c0000",
        "0x5267f4d41292f370863c90d793296903843625c7": "0x4be4e7267b6ae00000",
        "0x526bb533b76e20c8ee1ebf123f1e9ff4148e40be": "0xaadec983fcff40000",
        "0x526cb09ce3ada3672eec1deb46205be89a4b563e": "0x85ca615bf9c0100000",
        "0x52738c90d860e04cb12f498d96fdb5bf36fc340e": "0x1a055690d9db80000",
        "0x527a8ca1268633a6c939c5de1b929aee92aeac8d": "0x30ca024f987b900000",
        "0x528101ce46b720a2214dcdae6618a53177ffa377": "0x1b9612b9dc01ae0000",
        "0x5281733473e00d87f11e9955e589b59f4ac28e7a": "0x8bd62ff4eec559200000",
        "0x5298ab182a19359ffcecafd7d1b5fa212dede6dd": "0x1158e460913d00000",
        "0x529aa002c6962a3a8545027fd8b05f22b5bf9564": "0x5a87e7d7f5f6580000",
        "0x529e824fa072582b4032683ac7eecc1c04b4cac1": "0x6c6b935b8bbd400000",
        "0x52a5e4de4393eeccf0581ac11b52c683c76ea15d": "0x43c30fb0884a96c0000",
        "0x52b4257cf41b6e28878d50d57b99914ffa89873a": "0xd50dc9aa2c41770000",
        "0x52b8a9592634f7300b7c5c59a3345b835f01b95c": "0x6c6b935b8bbd400000",
        "0x52bdd9af5978850bc24110718b3723759b437e59": "0x5dc892aa1131c80000",
        "0x52cd20403ba7eda6bc307a3d63b5911b817c1263": "0x1158e460913d00000",
        "0x52d380511df19d5ec2807bbcb676581b67fd37a3": "0xb9f65d00f63c0000",
        "0x52e1731350f983cc2c4189842fde0613fad50ce1": "0x277017338a30ae00000",
        "0x52e46783329a769301b175009d346768f4c87ee4": "0x6c6b935b8bbd400000",
        "0x52f058d46147e9006d29bf2c09304ad1cddd6e15": "0x5150ae84a8cdf00000",
        "0x52f15423323c24f19ae2ab673717229d3f747d9b": "0x37a034cbe8e3f38000",
        "0x52f8b509fee1a874ab6f9d87367fbeaf15ac137f": "0x3635c9adc5dea00000",
        "0x52fb46ac5d00c3518b2c3a1c177d442f8165555f": "0x5150ae84a8cdf00000",
        "0x530077c9f7b907ff9cec0c77a41a70e9029add4a": "0x6c6b935b8bbd400000",
        "0x530319db0a8f93e5bb7d4dbf4816314fbed8361b": "0x6c6b935b8bbd400000",
        "0x53047dc8ac9083d90672e8b3473c100ccd278323": "0x22b1c8c1227a00000",
        "0x530b61e42f39426d2408d40852b9e34ab5ebebc5": "0xe7eeba3410b740000",
        "0x530ffac3bc3412e2ec0ea47b7981c770f5bb2f35": "0x73f75d1a085ba0000",
        "0x5317ecb023052ca7f5652be2fa854cfe4563df4d": "0x1b1ab319f5ec750000",
        "0x53194d8afa3e883502767edbc30586af33b114d3": "0x6c6b935b8bbd400000",
        "0x532a7da0a5ad7407468d3be8e07e69c7dd64e861": "0x1b1ae4d6e2ef500000",
        "0x532d32b00f305bcc24dcef56817d622f34fb2c24": "0x6194049f30f7200000",
        "0x533444584082eba654e1ad30e149735c6f7ba922": "0x5dc892aa1131c80000",
        "0x5338ef70eac9dd9af5a0503b5efad1039e67e725": "0x90f534608a72880000",
        "0x53396f4a26c2b4604496306c5442e7fcba272e36": "0x43f2f08d40e5afc0000",
        "0x533a73a4a2228eee05c4ffd718bbf3f9c1b129a7": "0x14542ba12a337c00000",
        "0x533c06928f19d0a956cc28866bf6c8d8f4191a94": "0xfd8c14338e6300000",
        "0x534065361cb854fac42bfb5c9fcde0604ac919da": "0x6c6b935b8bbd400000",
        "0x53437fecf34ab9d435f4deb8ca181519e2592035": "0xa31062beeed700000",
        "0x535201a0a1d73422801f55ded4dfaee4fbaa6e3b": "0x226211f7915428000",
        "0x53608105ce4b9e11f86bf497ffca3b78967b5f96": "0x43c33c1937564800000",
        "0x536e4d8029b73f5579dca33e70b24eba89e11d7e": "0x6acb3df27e1f880000",
        "0x53700d53254d430f22781a4a76a463933b5d6b08": "0x6acb3df27e1f880000",
        "0x537f9d4d31ef70839d84b0d9cdb72b9afedbdf35": "0xed2b525841adfc00000",
        "0x5381448503c0c702542b1de7cc5fb5f6ab1cf6a5": "0x1b1ae4d6e2ef5000000",
        "0x53942e7949d6788bb780a7e8a0792781b1614b84": "0x35deb46684f10c80000",
        "0x5395a4455d95d178b4532aa4725b193ffe512961": "0x3635c9adc5dea00000",
        "0x53989ed330563fd57dfec9bd343c3760b0799390": "0x150894e849b39000000",
        "0x53a244672895480f4a2b1cdf7da5e5a242ec4dbc": "0x3635c9adc5dea00000",
        "0x53a714f99fa00fef758e23a2e746326dad247ca7": "0x50c5e761a444080000",
        "0x53af32c22fef99803f178cf90b802fb571c61cb9": "0xd255d112e103a00000",
        "0x53c0bb7fc88ea422d2ef7e540e2d8f28b1bb8183": "0x1158e460913d00000",
        "0x53c5fe0119e1e848640cee30adea96940f2a5d8b": "0x49ada5fa8c10c880000",
        "0x53c9eca40973f63bb5927be0bc6a8a8be1951f74": "0x6c6b935b8bbd400000",
        "0x53ce88e66c5af2f29bbd8f592a56a3d15f206c32": "0x7a28c31cc36040000",
        "0x53cec6c88092f756efe56f7db11228a2db45b122": "0xd8d726b7177a800000",
        "0x53e35b12231f19c3fd774c88fec8cbeedf1408b2": "0x1bc16d674ec8000000",
        "0x53e4d9696dcb3f4d7b3f70dcaa4eecb71782ff5c": "0xad78ebc5ac6200000",
        "0x53faf165be031ec18330d9fce5bd1281a1af08db": "0x796e3ea3f8ab00000",
        "0x540a1819bd7c35861e791804e5fbb3bc97c9abb1": "0x4ed7dac64230200000",
        "0x540c072802014ef0d561345aec481e8e11cb3570": "0x1b1ae4d6e2ef5000000",
        "0x540cf23dd95c4d558a279d778d2b3735b3164191": "0x21e19e0c9bab2400000",
        "0x541060fc58c750c40512f83369c0a63340c122b6": "0x6acb3df27e1f880000",
        "0x5413c97ffa4a6e2a7bba8961dc9fce8530a787d7": "0x3635c9adc5dea00000",
        "0x541db20a80cf3b17f1621f1b3ff79b882f50def3": "0x3635c9adc5dea00000",
        "0x542e8096bafb88162606002e8c8a3ed19814aeac": "0x6c6b935b8bbd400000",
        "0x54310b3aa88703a725dfa57de6e646935164802c": "0x678a932062e4180000",
        "0x5431b1d18751b98fc9e2888ac7759f1535a2db47": "0x6c6b935b8bbd400000",
        "0x5431ca427e6165a644bae326bd09750a178c650d": "0x6c6b935b8bbd400000",
        "0x5435c6c1793317d32ce13bba4c4ffeb973b78adc": "0xd8e6b1c1285ef0000",
        "0x543629c95cdef428ad37d453ca9538a9f90900ac": "0x92896529baddc880000",
        "0x54391b4d176d476cea164e5fb535c69700cb2535": "0x56cd55fc64dfe0000",
        "0x543a8c0efb8bcd15c543e2a6a4f807597631adef": "0x13f80e7e14f2d440000",
        "0x543f8c674e2462d8d5daa0e80195a8708e11a29e": "0x37758833b3a7a0000",
        "0x544b5b351d1bc82e9297439948cf4861dac9ae11": "0x4a89f54ef0121c00000",
        "0x544dda421dc1eb73bb24e3e56a248013b87c0f44": "0x6acb3df27e1f880000",
        "0x54575c3114751e3c631971da6a2a02fd3ffbfcc8": "0x692ae8897081d00000",
        "0x545bb070e781172eb1608af7fc2895d6cb87197e": "0x79a5c17ec748900000",
        "0x5475d7f174bdb1f789017c7c1705989646079d49": "0x1fd933494aa5fe00000",
        "0x548558d08cfcb101181dac1eb6094b4e1a896fa6": "0x6c6acc67d7b1d40000",
        "0x54939ff08921b467cf2946751d856378296c63ed": "0x3635c9adc5dea00000",
        "0x549b47649cfad993e4064d2636a4baa0623305cc": "0x209d922f5259c50000",
        "0x549d51af29f724c967f59423b85b2681e7b15136": "0xcbd47b6eaa8cc00000",
        "0x54a1370116fe22099e015d07cd2669dd291cc9d1": "0x1158e460913d00000",
        "0x54a62bf9233e146ffec3876e45f20ee8414adeba": "0x21e19e0c9bab2400000",
        "0x54b4429b182f0377be7e626939c5db6440f75d7a": "0x6acb3df27e1f880000",
        "0x54bcb8e7f73cda3d73f4d38b2d0847e600ba0df8": "0x3a70415882df180000",
        "0x54c93e03a9b2e8e4c3672835a9ee76f9615bc14e": "0x10d3aa536e2940000",
        "0x54ce88275956def5f9458e3b95decacd484021a0": "0x6c6b935b8bbd400000",
        "0x54db5e06b4815d31cb56a8719ba33af2d73e7252": "0x24521e2a3017b80000",
        "0x54e01283cc8b384538dd646770b357c960d6cacd": "0x10f0cf064dd59200000",
        "0x54ec7300b81ac84333ed1b033cd5d7a33972e234": "0xad78ebc5ac6200000",
        "0x54febcce20fe7a9098a755bd90988602a48c089e": "0x22b1c8c1227a000000",
        "0x550aadae1221b07afea39fba2ed62e05e5b7b5f9": "0x1158e460913d00000",
        "0x550c306f81ef5d9580c06cb1ab201b95c748a691": "0x2417d4c470bf140000",
        "0x551999ddd205563327b9b530785acff9bc73a4ba": "0x14542ba12a337c00000",
        "0x551e7784778ef8e048e495df49f2614f84a4f1dc": "0x2086ac351052600000",
        "0x5529830a61c1f13c197e550beddfd6bd195c9d02": "0x21e19e0c9bab2400000",
        "0x552987f0651b915b2e1e5328c121960d4bdd6af4": "0x61093d7c2c6d380000",
        "0x553b6b1c57050e88cf0c31067b8d4cd1ff80cb09": "0x15af1d78b58c400000",
        "0x553f37d92466550e9fd775ae74362df030179132": "0x6c6b935b8bbd400000",
        "0x554336ee4ea155f9f24f87bca9ca72e253e12cd2": "0x56bc75e2d63100000",
        "0x5543dd6d169eec8a213bbf7a8af9ffd15d4ff759": "0xfc936392801c0000",
        "0x5547fdb4ae11953e01292b7807fa9223d0e4606a": "0x55d117dcb1d260000",
        "0x5552f4b3ed3e1da79a2f78bb13e8ae5a68a9df3b": "0x3635c9adc5dea00000",
        "0x555ca9f05cc134ab54ae9bea1c3ff87aa85198ca": "0x56bc75e2d63100000",
        "0x555d8d3ce1798aca902754f164b8be2a02329c6c": "0x21e19e0c9bab2400000",
        "0x555df19390c16d01298772bae8bc3a1152199cbd": "0xad78ebc5ac6200000",
        "0x555ebe84daa42ba256ea789105cec4b693f12f18": "0x56bc75e2d63100000",
        "0x557f5e65e0da33998219ad4e99570545b2a9d511": "0x2559cbb985842400000",
        "0x558360206883dd1b6d4a59639e5629d0f0c675d0": "0x6c6b935b8bbd400000",
        "0x5584423050e3c2051f0bbd8f44bd6dbc27ecb62c": "0xa2a15d09519be00000",
        "0x55852943492970f8d629a15366cdda06a94f4513": "0x6c6b935b8bbd400000",
        "0x55866486ec168f79dbe0e1abb18864d98991ae2c": "0xdf6eb0b2d3ca0000",
        "0x558c54649a8a6e94722bd6d21d14714f71780534": "0x6c6b935b8bbd400000",
        "0x559194304f14b1b93afe444f0624e053c23a0009": "0x15af1d78b58c400000",
        "0x5593c9d4b664730fd93ca60151c25c2eaed93c3b": "0xad78ebc5ac6200000",
        "0x559706c332d20779c45f8a6d046a699159b74921": "0x149b442e85a3cf8000",
        "0x5598b3a79a48f32b1f5fc915b87b645d805d1afe": "0x1b1ae4d6e2ef500000",
        "0x55a3df57b7aaec16a162fd5316f35bec082821cf": "0x6acb3df27e1f880000",
        "0x55a4cac0cb8b582d9fef38c5c9fff9bd53093d1f": "0x6acb3df27e1f880000",
        "0x55a61b109480b5b2c4fcfdef92d90584160c0d35": "0x26c564d2b53f60000",
        "0x55aa5d313ebb084da0e7801091e29e92c5dec3aa": "0x6c6b935b8bbd400000",
        "0x55ab99b0e0e55d7bb874b7cfe834de631c97ec23": "0x37e98ce36899e40000",
        "0x55af092f94ba6a79918b0cf939eab3f01b3f51c7": "0x820d5e39576120000",
        "0x55c564664166a1edf3913e0169f1cd451fdb5d0c": "0x8217ea49508e6c0000",
        "0x55ca6abe79ea2497f46fdbb830346010fe469cbe": "0x1369fb96128ac480000",
        "0x55caff4bba04d220c9a5d2018672ec85e31ef83e": "0x6c6b935b8bbd400000",
        "0x55d057bcc04bd0f4af9642513aa5090bb3ff93fe": "0x3bfe452c8edd4c0000",
        "0x55d42eb495bf46a634997b5f2ea362814918e2b0": "0x5c0d265b5b2a80000",
        "0x55da9dcdca61cbfe1f133c7bcefc867b9c8122f9": "0x2fb474098f67c00000",
        "0x55e220876262c218af4f56784798c7e55da09e91": "0x73d99c15645d30000",
        "0x55fd08d18064bd202c0ec3d2cce0ce0b9d169c4d": "0x6acb3df27e1f880000",
        "0x5600730a55f6b20ebd24811faa3de96d1662abab": "0x65ea3db75546600000",
        "0x5603241eb8f08f721e348c9d9ad92f48e390aa24": "0xad78ebc5ac6200000",
        "0x560536794a9e2b0049d10233c41adc5f418a264a": "0x3635c9adc5dea00000",
        "0x5607590059a9fec1881149a44b36949aef85d560": "0x6c6b935b8bbd400000",
        "0x560becdf52b71f3d8827d927610f1a980f33716f": "0x17474d705f56d08000",
        "0x560da37e956d862f81a75fd580a7135c1b246352": "0x21e19e0c9bab2400000",
        "0x560fc08d079f047ed8d7df75551aa53501f57013": "0x19bff2ff57968c00000",
        "0x561be9299b3e6b3e63b79b09169d1a948ae6db01": "0x1b1ae4d6e2ef500000",
        "0x562020e3ed792d2f1835fe5f55417d5111460c6a": "0x43c33c1937564800000",
        "0x5620f46d1451c2353d6243a5d4b427130be2d407": "0x340aad21b3b700000",
        "0x562105e82b099735de49f62692cc87cd38a8edcd": "0x14542ba12a337c00000",
        "0x562a8dcbbeeef7b360685d27303bd69e094accf6": "0x21e19e0c9bab2400000",
        "0x562bced38ab2ab6c080f3b0541b8456e70824b3f": "0x22ca3587cf4eb00000",
        "0x562be95aba17c5371fe2ba828799b1f55d2177d6": "0x816d37e87b9d1e00000",
        "0x562f16d79abfcec3943e34b20f05f97bdfcda605": "0xd8d726b7177a800000",
        "0x56373daab46316fd7e1576c61e6affcb6559ddd7": "0xbac715d146c9e0000",
        "0x56397638bb3cebf1f62062794b5eb942f916171d": "0x6c6b935b8bbd400000",
        "0x563a03ab9c56b600f6d25b660c21e16335517a75": "0x3635c9adc5dea00000",
        "0x563cb8803c1d32a25b27b64114852bd04d9c20cd": "0xb149ead0ad9d80000",
        "0x56586391040c57eec6f5affd8cd4abde10b50acc": "0xd8d726b7177a800000",
        "0x566c10d638e8b88b47d6e6a414497afdd00600d4": "0x56b394263a40c0000",
        "0x566c28e34c3808d9766fe8421ebf4f2b1c4f7d77": "0x6acb3df27e1f880000",
        "0x568df31856699bb5acfc1fe1d680df9960ca4359": "0x4acf5552f3b2498000",
        "0x5691dd2f6745f20e22d2e1d1b955aa2903d65656": "0x6ac5c62d9486070000",
        "0x56a1d60d40f57f308eebf087dee3b37f1e7c2cba": "0x3edcaec82d06f80000",
        "0x56ac20d63bd803595cec036da7ed1dc66e0a9e07": "0x3772a53ccdc658000",
        "0x56b6c23dd2ec90b4728f3bb2e764c3c50c85f144": "0x3635c9adc5dea00000",
        "0x56df05bad46c3f00ae476ecf017bb8c877383ff1": "0xab15daaef70400000",
        "0x56ee197f4bbf9f1b0662e41c2bbd9aa1f799e846": "0x3635c9adc5dea00000",
        "0x56f493a3d108aaa2d18d98922f8efe1662cfb73d": "0x6d8121a194d1100000",
        "0x56fc1a7bad4047237ce116146296238e078f93ad": "0x9a63f08ea63880000",
        "0x56febf9e1003af15b1bd4907ec089a4a1b91d268": "0xad78ebc5ac6200000",
        "0x5717cc9301511d4a81b9f583148beed3d3cc8309": "0x8cf23f909c0fa00000",
        "0x5717f2d8f18ffcc0e5fe247d3a4219037c3a649c": "0xd8bb6549b02bb80000",
        "0x571950ea2c90c1427d939d61b4f2de4cf1cfbfb0": "0x1158e460913d00000",
        "0x5719f49b720da68856f4b9e708f25645bdbc4b41": "0x22b1c8c1227a000000",
        "0x572ac1aba0de23ae41a7cae1dc0842d8abfc103b": "0x678a932062e4180000",
        "0x572dd8cd3fe399d1d0ec281231b7cefc20b9e4bb": "0x233c8fe42703e800000",
        "0x574921838cc77d6c98b17d903a3ae0ee0da95bd0": "0xb5328178ad0f2a00000",
        "0x574ad9355390e4889ef42acd138b2a27e78c00ae": "0x5467b732a913340000",
        "0x574de1b3f38d915846ae3718564a5ada20c2f3ed": "0xd8d726b7177a800000",
        "0x575c00c2818210c28555a0ff29010289d3f82309": "0x21e19e0c9bab2400000",
        "0x5773b6026721a1dd04b7828cd62b591bfb34534c": "0x5b7ac4553de7ae00000",
        "0x5777441c83e03f0be8dd340bde636850847c620b": "0x21e19e0c9bab2400000",
        "0x5778ffdc9b94c5a59e224eb965b6de90f222d170": "0x122d7ff36603fc0000",
        "0x577aeee8d4bc08fc97ab156ed57fb970925366be": "0x120df1147258bf0000",
        "0x577b2d073c590c50306f5b1195a4b2ba9ecda625": "0x1440bdd49515f00000",
        "0x577bfe64e3a1e3800e94db1c6c184d8dc8aafc66": "0x5134ed17417f280000",
        "0x57825aeb09076caa477887fbc9ae37e8b27cc962": "0x56bc75e2d63100000",
        "0x57883010b4ac857fedac03eab2551723a8447ffb": "0x3635c9adc5dea00000",
        "0x5789d01db12c816ac268e9af19dc0dd6d99f15df": "0xad78ebc5ac6200000",
        "0x5792814f59a33a1843faa01baa089eb02ffb5cf1": "0x1b1ab319f5ec750000",
        "0x5793abe6f1533311fd51536891783b3f9625ef1c": "0x2cd8a656f23fda0000",
        "0x5797b60fd2894ab3c2f4aede86daf2e788d745ad": "0x14542ba12a337c00000",
        "0x57a852fdb9b1405bf53ccf9508f83299d3206c52": "0x6c6b935b8bbd400000",
        "0x57b23d6a1adc06c652a779c6a7fb6b95b9fead66": "0xad78ebc5ac6200000",
        "0x57bc20e2d62b3d19663cdb4c309d5b4f2fc2db8f": "0x56bc75e2d63100000",
        "0x57bddf078834009c89d88e6282759dc45335b470": "0x74717cfb6883100000",
        "0x57beea716cbd81700a73d67f9ff039529c2d9025": "0xad78ebc5ac6200000",
        "0x57d032a43d164e71aa2ef3ffd8491b0a4ef1ea5b": "0x6c6b935b8bbd400000",
        "0x57d3df804f2beee6ef53ab94cb3ee9cf524a18d3": "0x1556616b9606670000",
        "0x57d5fd0e3d3049330ffcdcd020456917657ba2da": "0x6bf20195f554d40000",
        "0x57dd9471cbfa262709f5f486bcb774c5f527b8f8": "0xaadec983fcff40000",
        "0x57df23bebdc65eb75feb9cb2fad1c073692b2baf": "0xd8d726b7177a800000",
        "0x5800cd8130839e94495d2d8415a8ea2c90e0c5cb": "0xad78ebc5ac6200000",
        "0x5803e68b34da121aef08b602badbafb4d12481ca": "0x3cfc82e37e9a7400000",
        "0x5816c2687777b6d7d2a2432d59a41fa059e3a406": "0x1c4fe43adb0a5e900000",
        "0x581a3af297efa4436a29af0072929abf9826f58b": "0x6c6b935b8bbd400000",
        "0x581b9fd6eae372f3501f42eb9619eec820b78a84": "0x42be2c00ca53b8d8000",
        "0x581bdf1bb276dbdd86aedcdb397a01efc0e00c5b": "0x3635c9adc5dea00000",
        "0x581f34b523e5b41c09c87c298e299cbc0e29d066": "0x3d5833aafd39758000",
        "0x5824a7e22838277134308c5f4b50dab65e43bb31": "0x14542ba12a337c00000",
        "0x582b70669c97aab7d68148d8d4e90411e2810d56": "0x36356633ebd8ea0000",
        "0x582e7cc46f1d7b4e6e9d95868bfd370573178f4c": "0x6c6b935b8bbd400000",
        "0x583e83ba55e67e13e0e76f8392d873cd21fbf798": "0x1158e460913d00000",
        "0x5869fb867d71f1387f863b698d09fdfb87c49b5c": "0xc6bbf858b316080000",
        "0x587d6849b168f6c3332b7abae7eb6c42c37f48bf": "0x2fb474098f67c00000",
        "0x5887dc6a33dfed5ac1edefe35ef91a216231ac96": "0xd8d726b7177a80000",
        "0x588ed990a2aff44a94105d58c305257735c868ac": "0x368c8623a8b4d100000",
        "0x58ae2ddc5f4c8ada97e06c0086171767c423f5d7": "0x57473d05dabae80000",
        "0x58aed6674affd9f64233272a578dd9386b99c263": "0xb8507a820728200000",
        "0x58b808a65b51e6338969afb95ec70735e451d526": "0x8784bc1b9837a380000",
        "0x58b8ae8f63ef35ed0762f0b6233d4ac14e64b64d": "0x6c6b935b8bbd400000",
        "0x58ba1569650e5bbbb21d35d3e175c0d6b0c651a9": "0x1b1ae4d6e2ef500000",
        "0x58c555bc293cdb16c6362ed97ae9550b92ea180e": "0x1158e460913d00000",
        "0x58c650ced40bb65641b8e8a924a039def46854df": "0x100bd33fb98ba0000",
        "0x58c90754d2f20a1cb1dd330625e04b45fa619d5c": "0x6c6b935b8bbd400000",
        "0x58e2f11223fc8237f69d99c6289c148c0604f742": "0x5150ae84a8cdf000000",
        "0x58e554af3d87629620da61d538c7f5b4b54c4afe": "0x46509d694534728000",
        "0x58e5c9e344c806650dacfc904d33edba5107b0de": "0x10910d4cdc9f60000",
        "0x58e661d0ba73d6cf24099a5562b808f7b3673b68": "0x6c6b935b8bbd400000",
        "0x58f05b262560503ca761c61890a4035f4c737280": "0x1b1ae4d6e2ef5000000",
        "0x58fb947364e7695765361ebb1e801ffb8b95e6d0": "0xad78ebc5ac6200000",
        "0x590181d445007bd0875aaf061c8d51153900836a": "0x6c6b935b8bbd400000",
        "0x5902e44af769a87246a21e079c08bf36b06efeb3": "0x3635c9adc5dea00000",
        "0x590acbda37290c0d3ec84fc2000d7697f9a4b15d": "0x1b1ae4d6e2ef500000",
        "0x590ccb5911cf78f6f622f535c474375f4a12cfcf": "0x43c33c1937564800000",
        "0x5910106debd291a1cd80b0fbbb8d8d9e93a7cc1e": "0x6c6b935b8bbd400000",
        "0x59161749fedcf1c721f2202d13ade2abcf460b3d": "0x6c6b935b8bbd400000",
        "0x591bef3171d1c5957717a4e98d17eb142c214e56": "0x43c33c1937564800000",
        "0x59203cc37599b648312a7cc9e06dacb589a9ae6a": "0x80f7971b6400e8000",
        "0x59268171b833e0aa13c54b52ccc0422e4fa03aeb": "0xa2a15d09519be00000",
        "0x592777261e3bd852c48eca95b3a44c5b7f2d422c": "0x43c33c1937564800000",
        "0x593044670faeff00a55b5ae051eb7be870b11694": "0x73f75d1a085ba0000",
        "0x593b45a1864ac5c7e8f0caaeba0d873cd5d113b2": "0x14542ba12a337c00000",
        "0x593c48935beaff0fde19b04d309cd530a28e52ce": "0xd8d726b7177a800000",
        "0x59473cd300fffae240f5785626c65dfec792b9af": "0x1158e460913d00000",
        "0x5948bc3650ed519bf891a572679fd992f8780c57": "0xaadec983fcff40000",
        "0x594a76f06935388dde5e234696a0668bc20d2ddc": "0x97c9ce4cf6d5c00000",
        "0x59569a21d28fba4bda37753405a081f2063da150": "0xd8d726b7177a800000",
        "0x5956b28ec7890b76fc061a1feb52d82ae81fb635": "0x6c6b935b8bbd400000",
        "0x595e23d788a2d4bb85a15df7136d264a635511b3": "0xd5967be4fc3f100000",
        "0x597038ff91a0900cbbab488af483c790e6ec00a0": "0x21e19e0c9bab2400000",
        "0x5970fb1b144dd751e4ce2eca7caa20e363dc4da3": "0x21e19e0c9bab2400000",
        "0x5975b9528f23af1f0e2ec08ac8ebaa786a2cb8e0": "0x12bf50503ae3038000",
        "0x5975d78d974ee5bb9e4d4ca2ae77c84b9c3b4b82": "0x4a4491bd6dcd280000",
        "0x5985c59a449dfc5da787d8244e746c6d70caa55f": "0x56bc75e2d63100000",
        "0x598aaabae9ed833d7bc222e91fcaa0647b77580b": "0x6194049f30f7200000",
        "0x5992624c54cdec60a5ae938033af8be0c50cbb0a": "0xc454e0f8870f2b0000",
        "0x599728a78618d1a17b9e34e0fed8e857d5c40622": "0x2f6f10780d22cc00000",
        "0x5997ffefb3c1d9d10f1ae2ac8ac3c8e2d2292783": "0x3635c9adc5dea00000",
        "0x59a087b9351ca42f58f36e021927a22988284f38": "0x100bd33fb98ba0000",
        "0x59a12df2e3ef857aceff9306b309f6a500f70134": "0x3635c9adc5dea00000",
        "0x59b96deb8784885d8d3b4a166143cc435d2555a1": "0x487a9a304539440000",
        "0x59b9e733cba4be00429b4bd9dfa64732053a7d55": "0x1158e460913d00000",
        "0x59c5d06b170ee4d26eb0a0eb46cb7d90c1c91019": "0x21e19e0c9bab2400000",
        "0x59c7f785c93160e5807ed34e5e534bc6188647a7": "0x22b1c8c1227a000000",
        "0x59d139e2e40c7b97239d23dfaca33858f602d22b": "0x6c6b935b8bbd400000",
        "0x59f6247b0d582aaa25e5114765e4bf3c774f43c2": "0x2b5e3af16b1880000",
        "0x59fe00696dbd87b7976b29d1156c8842a2e17914": "0x6c6b935b8bbd400000",
        "0x5a0d609aae2332b137ab3b2f26615a808f37e433": "0x21e19e0c9bab24000000",
        "0x5a192b964afd80773e5f5eda6a56f14e25e0c6f3": "0x1b1ae4d6e2ef500000",
        "0x5a1a336962d6e0c63031cc83c6a5c6a6f4478ecb": "0x3635c9adc5dea00000",
        "0x5a1d2d2d1d520304b6208849570437eb3091bb9f": "0x6acb3df27e1f880000",
        "0x5a267331facb262daaecd9dd63a9700c5f5259df": "0x56bc75e2d63100000",
        "0x5a285755391e914e58025faa48cc685f4fd4f5b8": "0x581767ba6189c400000",
        "0x5a2916b8d2e8cc12e207ab464d433e2370d823d9": "0x6c6b935b8bbd400000",
        "0x5a2b1c853aeb28c45539af76a00ac2d8a8242896": "0x15af1d78b58c40000",
        "0x5a2daab25c31a61a92a4c82c9925a1d2ef58585e": "0xc380da9c7950c0000",
        "0x5a30feac37ac9f72d7b4af0f2bc73952c74fd5c3": "0x6c6b935b8bbd400000",
        "0x5a5468fa5ca226c7532ecf06e1bc1c45225d7ec9": "0x678a932062e4180000",
        "0x5a565285374a49eedd504c957d510874d00455bc": "0x56bc75e2d63100000",
        "0x5a5ee8e9bb0e8ab2fecb4b33d29478be50bbd44b": "0x2a1129d09367200000",
        "0x5a5f8508da0ebebb90be9033bd4d9e274105ae00": "0x16a6502f15a1e540000",
        "0x5a6071bcebfcba4ab57f4db96fc7a68bece2ba5b": "0x6c6b935b8bbd400000",
        "0x5a60c924162873fc7ea4da7f972e350167376031": "0x487f277a885798000",
        "0x5a6686b0f17e07edfc59b759c77d5bef164d3879": "0x50c5e761a444080000",
        "0x5a70106f20d63f875265e48e0d35f00e17d02bc9": "0x1158e460913d00000",
        "0x5a74ba62e7c81a3474e27d894fed33dd24ad95fe": "0xfc936392801c0000",
        "0x5a7735007d70b06844da9901cdfadb11a2582c2f": "0x14542ba12a337c00000",
        "0x5a82f96cd4b7e2d93d10f3185dc8f43d4b75aa69": "0x6c633fbab98c040000",
        "0x5a87f034e6f68f4e74ffe60c64819436036cf7d7": "0x1158e460913d00000",
        "0x5a891155f50e42074374c739baadf7df2651153a": "0x102da6fd0f73a3c0000",
        "0x5a9c8b69fc614d69564999b00dcb42db67f97e90": "0xb9e615abad3a778000",
        "0x5aaf1c31254a6e005fba7f5ab0ec79d7fc2b630e": "0x14061b9d77a5e980000",
        "0x5ab1a5615348001c7c775dc75748669b8be4de14": "0x256a72fb29e69c0000",
        "0x5abfec25f74cd88437631a7731906932776356f9": "0x9d83cc0dfa11177ff8000",
        "0x5ac2908b0f398c0df5bac2cb13ca7314fba8fa3d": "0xad4c8316a0b0c0000",
        "0x5ac99ad7816ae9020ff8adf79fa9869b7cea6601": "0x472698b413b43200000",
        "0x5ad12c5ed4fa827e2150cfa0d68c0aa37b1769b8": "0x2b5e3af16b18800000",
        "0x5ad5e420755613886f35aa56ac403eebdfe4b0d0": "0x10f0cf064dd592000000",
        "0x5ade77fd81c25c0af713b10702768c1eb2f975e7": "0x1158e460913d00000",
        "0x5ae64e853ba0a51282cb8db52e41615e7c9f733f": "0x6c6b935b8bbd400000",
        "0x5aed0e6cfe95f9d680c76472a81a2b680a7f93e2": "0xaadec983fcff40000",
        "0x5aef16a226dd68071f2483e1da42598319f69b2c": "0x6c6b935b8bbd400000",
        "0x5af46a25ac09cb73616b53b14fb42ff0a51cddb2": "0xd8d726b7177a800000",
        "0x5af7c072b2c5acd71c76addcce535cf7f8f93585": "0x1158e460913d00000",
        "0x5afda9405c8e9736514574da928de67456010918": "0x145b8b0239a46920000",
        "0x5b06d1e6930c1054692b79e3dbe6ecce53966420": "0xb227f63be813c0000",
        "0x5b25cae86dcafa2a60e7723631fc5fa49c1ad87d": "0x870c58510e85200000",
        "0x5b287c7e734299e727626f93fb1187a60d5057fe": "0x57cd934a914cb0000",
        "0x5b290c01967c812e4dc4c90b174c1b4015bae71e": "0x820eb348d52b90000",
        "0x5b2b64e9c058e382a8b299224eecaa16e09c8d92": "0x8ba52e6fc45e40000",
        "0x5b2e2f1618552eab0db98add55637c2951f1fb19": "0x28a857425466f800000",
        "0x5b30608c678e1ac464a8994c3b33e5cdf3497112": "0x15af1d78b58c400000",
        "0x5b333696e04cca1692e71986579c920d6b2916f9": "0x1b1ae4d6e2ef500000",
        "0x5b430d779696a3653fc60e74fbcbacf6b9c2baf1": "0x2f6f10780d22cc00000",
        "0x5b437365ae3a9a2ff97c68e6f90a7620188c7d19": "0x6c8754c8f30c080000",
        "0x5b49afcd75447838f6e7ceda8d21777d4fc1c3c0": "0xd8d726b7177a800000",
        "0x5b4c0c60f10ed2894bdb42d9dd1d210587810a0d": "0x1b1ae4d6e2ef500000",
        "0x5b4ea16db6809b0352d4b6e81c3913f76a51bb32": "0x15af1d78b58c400000",
        "0x5b5be0d8c67276baabd8edb30d48ea75640b8b29": "0x2cb1f55fb7be100000",
        "0x5b5d517029321562111b43086d0b043591109a70": "0x8cf23f909c0fa00000",
        "0x5b5d8c8eed6c85ac215661de026676823faa0a0c": "0x43c33c1937564800000",
        "0x5b6d55f6712967405c659129f4b1de09acf2cb7b": "0xe7eeba3410b740000",
        "0x5b70c49cc98b3df3fbe2b1597f5c1b6347a388b7": "0x34957444b840e80000",
        "0x5b736eb18353629bde9676dadd165034ce5ecc68": "0x6acb3df27e1f880000",
        "0x5b759fa110a31c88469f54d44ba303d57dd3e10f": "0x5b46dd2f0ea3b80000",
        "0x5b7784caea01799ca30227827667ce207c5cbc76": "0x6c6b935b8bbd400000",
        "0x5b78eca27fbdea6f26befba8972b295e7814364b": "0x6c6b935b8bbd400000",
        "0x5b800bfd1b3ed4a57d875aed26d42f1a7708d72a": "0x15a82d1d5bb88e00000",
        "0x5b85e60e2af0544f2f01c64e2032900ebd38a3c7": "0x6c6b935b8bbd400000",
        "0x5ba2c6c35dfaec296826591904d544464aeabd5e": "0x1158e460913d00000",
        "0x5baf6d749620803e8348af3710e5c4fbf20fc894": "0x10f4002615dfe900000",
        "0x5bc1f95507b1018642e45cd9c0e22733b9b1a326": "0x56bc75e2d63100000",
        "0x5bd23547477f6d09d7b2a005c5ee650c510c56d7": "0x21e19e0c9bab2400000",
        "0x5bd24aac3612b20c609eb46779bf95698407c57c": "0x6acb3df27e1f880000",
        "0x5bd6862d517d4de4559d4eec0a06cad05e2f946e": "0xad78ebc5ac6200000",
        "0x5be045512a026e3f1cebfd5a7ec0cfc36f2dc16b": "0x68155a43676e00000",
        "0x5bf9f2226e5aeacf1d80ae0a59c6e38038bc8db5": "0x14542ba12a337c00000",
        "0x5bfafe97b1dd1d712be86d41df79895345875a87": "0x1b1ae4d6e2ef500000",
        "0x5c0f2e51378f6b0d7bab617331580b6e39ad3ca5": "0x2086ac3510526000000",
        "0x5c29f9e9a523c1f8669448b55c48cbd47c25e610": "0x3446a0dad04cb00000",
        "0x5c308bac4857d33baea074f3956d3621d9fa28e1": "0x10f08eda8e555098000",
        "0x5c312a56c784b122099b764d059c21ece95e84ca": "0x52663ccab1e1c0000",
        "0x5c31996dcac015f9be985b611f468730ef244d90": "0xad78ebc5ac6200000",
        "0x5c323457e187761a8276e359b7b7af3f3b6e3df6": "0x21e19e0c9bab2400000",
        "0x5c3c1c645b917543113b3e6c1c054da1fe742b9a": "0x2b5e3af16b18800000",
        "0x5c3d19441d196cb443662020fcad7fbb79b29e78": "0xc673ce3c40160000",
        "0x5c3f567faff7bad1b5120022e8cbcaa82b4917b3": "0x6c6b935b8bbd400000",
        "0x5c4368918ace6409c79eca80cdaae4391d2b624e": "0xd8d726b7177a800000",
        "0x5c464197791c8a3da3c925436f277ab13bf2faa2": "0x1b1ae4d6e2ef5000000",
        "0x5c4881165cb42bb82e97396c8ef44adbf173fb99": "0x5fee222041e340000",
        "0x5c4892907a0720df6fd3413e63ff767d6b398023": "0x2cb009fd3b5790f8000",
        "0x5c4f24e994ed8f850ea7818f471c8fac3bcf0452": "0x5d80688d9e31c00000",
        "0x5c5419565c3aad4e714e0739328e3521c98f05cc": "0x1c9f78d2893e400000",
        "0x5c6136e218de0a61a137b2b3962d2a6112b809d7": "0xff3dbb65ff4868000",
        "0x5c61ab79b408dd3229f662593705d72f1e147bb8": "0x4d0243d3498cd840000",
        "0x5c6d041da7af4487b9dc48e8e1f60766d0a56dbc": "0x4f070a003e9c740000",
        "0x5c6f36af90ab1a656c6ec8c7d521512762bba3e1": "0x6c68ccd09b022c0000",
        "0x5c7b9ec7a2438d1e3c7698b545b9c3fd77b7cd55": "0x3635c9adc5dea00000",
        "0x5c936f3b9d22c403db5e730ff177d74eef42dbbf": "0x410d586a20a4c0000",
        "0x5cb731160d2e8965670bde925d9de5510935347d": "0x22b1c8c1227a00000",
        "0x5cb953a0e42f5030812226217fffc3ce230457e4": "0x56bc75e2d63100000",
        "0x5cbd8daf27ddf704cdd0d909a789ba36ed4f37b2": "0xb9f65d00f63c0000",
        "0x5cc4cba621f220637742057f6055b80dffd77e13": "0x878477b7d253b660000",
        "0x5cc7d3066d45d27621f78bb4b339473e442a860f": "0x21e1899f0377aea0000",
        "0x5cccf1508bfd35c20530aa642500c10dee65eaed": "0x2e141ea081ca080000",
        "0x5cce72d068c7c3f55b1d2819545e77317cae8240": "0x692ae8897081d00000",
        "0x5cd0e475b54421bdfc0c12ea8e082bd7a5af0a6a": "0x332ca1b67940c0000",
        "0x5cd588a14ec648ccf64729f9167aa7bf8be6eb3d": "0x3635c9adc5dea00000",
        "0x5cd8af60de65f24dc3ce5730ba92653022dc5963": "0x61093d7c2c6d380000",
        "0x5cdc4708f14f40dcc15a795f7dc8cb0b7faa9e6e": "0x1d1c5f3eda20c40000",
        "0x5ce0b6862cce9162e87e0849e387cb5df4f9118c": "0x5a87e7d7f5f6580000",
        "0x5ce2e7ceaaa18af0f8aafa7fbad74cc89e3cd436": "0x43c33c1937564800000",
        "0x5ce44068b8f4a3fe799e6a8311dbfdeda29dee0e": "0x6c6b935b8bbd400000",
        "0x5cebe30b2a95f4aefda665651dc0cf7ef5758199": "0xfc936392801c0000",
        "0x5cf18fa7c8a7c0a2b3d5efd1990f64ddc569242c": "0x3635c9adc5dea00000",
        "0x5cf44e10540d65716423b1bcb542d21ff83a94cd": "0x21e19e0c9bab2400000",
        "0x5cf8c03eb3e872e50f7cfd0c2f8d3b3f2cb5183a": "0xad78ebc5ac6200000",
        "0x5cfa8d568575658ca4c1a593ac4c5d0e44c60745": "0xfc66fae3746ac0000",
        "0x5cfa9877f719c79d9e494a08d1e41cf103fc87c9": "0xad78ebc5ac6200000",
        "0x5d1dc3387b47b8451e55106c0cc67d6dc72b7f0b": "0x6c6b935b8bbd400000",
        "0x5d231a70c1dfeb360abd97f616e2d10d39f3cab5": "0x15af1d78b58c400000",
        "0x5d24bdbc1c47f0eb83d128cae48ac33c4817e91f": "0x3635c9adc5dea00000",
        "0x5d2819e8d57821922ee445650ccaec7d40544a8d": "0xad78ebc5ac6200000",
        "0x5d2f7f0b04ba4be161e19cb6f112ce7a5e7d7fe4": "0x1e87f85809dc00000",
        "0x5d32f6f86e787ff78e63d78b0ef95fe6071852b8": "0x15be6174e1912e0000",
        "0x5d39ef9ea6bdfff15d11fe91f561a6f9e31f5da5": "0x6c6b935b8bbd400000",
        "0x5d3f3b1f7130b0bb21a0fd32396239179a25657f": "0xd3ab8ea5e8fd9e80000",
        "0x5d5751819b4f3d26ed0c1ac571552735271dbefa": "0x3635c9adc5dea00000",
        "0x5d5c2c1099bbeefb267e74b58880b444d94449e0": "0xdbf0bd181e2e70000",
        "0x5d5cdbe25b2a044b7b9be383bcaa5807b06d3c6b": "0x6c6b935b8bbd400000",
        "0x5d5d6e821c6eef96810c83c491468560ef70bfb5": "0x6c6b935b8bbd400000",
        "0x5d68324bcb776d3ffd0bf9fea91d9f037fd6ab0f": "0x6c6b935b8bbd400000",
        "0x5d6ae8cbd6b3393c22d16254100d0238e808147c": "0x2707e56d51a30c0000",
        "0x5d6c5c720d66a6abca8397142e63d26818eaab54": "0x22b1c8c1227a00000",
        "0x5d6ccf806738091042ad97a6e095fe8c36aa79c5": "0xa31062beeed700000",
        "0x5d71799c8df3bccb7ee446df50b8312bc4eb71c5": "0xad78ebc5ac6200000",
        "0x5d822d9b3ef4b502627407da272f67814a6becd4": "0x1158e460913d00000",
        "0x5d83b21bd2712360436b67a597ee3378db3e7ae4": "0x6c6b935b8bbd400000",
        "0x5d872b122e994ef27c71d7deb457bf65429eca6c": "0x1b1aded81d394108000",
        "0x5d8d31faa864e22159cd6f5175ccecc53fa54d72": "0x5b696b70dd567100000",
        "0x5d958a9bd189c2985f86c58a8c69a7a78806e8da": "0x228f16f861578600000",
        "0x5da2a9a4c2c0a4a924cbe0a53ab9d0c627a1cfa0": "0x27bf38c6544df50000",
        "0x5da4ca88935c27f55c311048840e589e04a8a049": "0x4563918244f400000",
        "0x5da54785c9bd30575c89deb59d2041d20a39e17b": "0x6aa209f0b91d658000",
        "0x5db69fe93e6fb6fbd450966b97238b110ad8279a": "0x878678326eac9000000",
        "0x5db7bba1f9573f24115d8c8c62e9ce8895068e9f": "0x2b5aad72c65200000",
        "0x5db84400570069a9573cab04b4e6b69535e202b8": "0x20dd68aaf3289100000",
        "0x5dc36de5359450a1ec09cb0c44cf2bb42b3ae435": "0x3c946d893b33060000",
        "0x5dc6f45fef26b06e3302313f884daf48e2746fb9": "0x1b1ae4d6e2ef500000",
        "0x5dcdb6b87a503c6d8a3c65c2cf9a9aa883479a1e": "0x1f2bba5d84f99c00000",
        "0x5dd112f368c0e6ceff77a9df02a5481651a02fb7": "0x93472c85c6d540000",
        "0x5dd53ae897526b167d39f1744ef7c3da5b37a293": "0x1b1ae4d6e2ef5000000",
        "0x5dded049a6e1f329dc4b971e722c9c1f2ade83f0": "0x3635c9adc5dea00000",
        "0x5de598aba344378cab4431555b4f79992dc290c6": "0x487a9a304539440000",
        "0x5de9e7d5d1b667d095dd34099c85b0421a0bc681": "0x1158e460913d00000",
        "0x5df3277ca85936c7a0d2c0795605ad25095e7159": "0x6c6b935b8bbd400000",
        "0x5dff811dad819ece3ba602c383fb5dc64c0a3a48": "0xa1544be879ea80000",
        "0x5e031b0a724471d476f3bcd2eb078338bf67fbef": "0xfc936392801c0000",
        "0x5e0785532c7723e4c0af9357d5274b73bdddddde": "0x54b41ea9bdb61dc0000",
        "0x5e11ecf69d551d7f4f84df128046b3a13240a328": "0x1158e460913d00000",
        "0x5e1fbd4e58e2312b3c78d7aaaafa10bf9c3189e3": "0x878678326eac9000000",
        "0x5e32c72191b8392c55f510d8e3326e3a60501d62": "0x9513ea9de0243800000",
        "0x5e51b8a3bb09d303ea7c86051582fd600fb3dc1a": "0x1158e460913d00000",
        "0x5e58e255fc19870a04305ff2a04631f2ff294bb1": "0xf43fc2c04ee00000",
        "0x5e5a441974a83d74c687ebdc633fb1a49e7b1ad7": "0xa2a15d09519be00000",
        "0x5e65458be964ae449f71773704979766f8898761": "0x1ca7cc735b6f7c0000",
        "0x5e67df8969101adabd91accd6bb1991274af8df2": "0x1b1ae4d6e2ef500000",
        "0x5e6e9747e162f8b45c656e0f6cae7a84bac80e4e": "0x6c6b935b8bbd400000",
        "0x5e731b55ced452bb3f3fe871ddc3ed7ee6510a8f": "0xa2a15d09519be00000",
        "0x5e74ed80e9655788e1bb269752319667fe754e5a": "0x30927f74c9de00000",
        "0x5e772e27f28800c50dda973bb33e10762e6eea20": "0x61093d7c2c6d380000",
        "0x5e7b8c54dc57b0402062719dee7ef5e37ea35d62": "0x9bf9810fd05c840000",
        "0x5e7f70378775589fc66a81d3f653e954f55560eb": "0x83f289181d84c80000",
        "0x5e806e845730f8073e6cc9018ee90f5c05f909a3": "0x201e96dacceaf200000",
        "0x5e8e4df18cf0af770978a8df8dac90931510a679": "0x6c6b935b8bbd400000",
        "0x5e90c85877198756b0366c0e17b28e52b446505a": "0x144a4a18efeb680000",
        "0x5e95fe5ffcf998f9f9ac0e9a81dab83ead77003d": "0x1d42c20d32797f0000",
        "0x5ead29037a12896478b1296ab714e9cb95428c81": "0x3e043072d406e0000",
        "0x5eb371c407406c427b3b7de271ad3c1e04269579": "0xa2a15d09519be00000",
        "0x5ecdbaeab9106ffe5d7b519696609a05baeb85ad": "0x1158e460913d00000",
        "0x5ed0d6338559ef44dc7a61edeb893fa5d83fa1b5": "0xbed1d0263d9f00000",
        "0x5ed3bbc05240e0d399eb6ddfe60f62de4d9509af": "0x2914c02475f9d6d30000",
        "0x5ed3f1ebe2ae6756b5d8dc19cad02c419aa5778b": "0x0",
        "0x5ed56115bd6505a88273df5c56839470d24a2db7": "0x38e6591ee56668000",
        "0x5ef8c96186b37984cbfe04c598406e3b0ac3171f": "0x1fd933494aa5fe00000",
        "0x5efbdfe5389999633c26605a5bfc2c1bb5959393": "0x3c057c95cd9080000",
        "0x5f13154631466dcb1353c890932a7c97e0878e90": "0x14542ba12a337c00000",
        "0x5f167aa242bc4c189adecb3ac4a7c452cf192fcf": "0x6c6b4c4da6ddbe0000",
        "0x5f1c8a04c90d735b8a152909aeae636fb0ce1665": "0x17b7827618c5a370000",
        "0x5f23ba1f37a96c45bc490259538a54c28ba3b0d5": "0x410d586a20a4c00000",
        "0x5f26cf34599bc36ea67b9e7a9f9b4330c9d542a3": "0x3635c9adc5dea00000",
        "0x5f29c9de765dde25852af07d33f2ce468fd20982": "0x6c6b935b8bbd400000",
        "0x5f2f07d2d697e8c567fcfdfe020f49f360be2139": "0x6c6b935b8bbd400000",
        "0x5f321b3daaa296cadf29439f9dab062a4bffedd6": "0x47025903ea7ae0000",
        "0x5f333a3b2310765a0d1832b9be4c0a03704c1c09": "0x3635c9adc5dea00000",
        "0x5f344b01c7191a32d0762ac188f0ec2dd460911d": "0x3635c9adc5dea00000",
        "0x5f363e0ab747e02d1b3b66abb69ea53c7baf523a": "0x277017338a30ae00000",
        "0x5f375b86600c40cca8b2676b7a1a1d1644c5f52c": "0x44618d74c623f0000",
        "0x5f3e1e6739b0c62200e00a003691d9efb238d89f": "0xa2a15d09519be00000",
        "0x5f483ffb8f680aedf2a38f7833afdcde59b61e4b": "0x6c6b935b8bbd400000",
        "0x5f4ace4c1cc13391e01f00b198e1f20b5f91cbf5": "0x10f0fa8b9d3811a0000",
        "0x5f521282e9b278dc8c034c72af53ee29e5443d78": "0x161732d2f8f3ae00000",
        "0x5f68a24c7eb4117667737b33393fb3c2148a53b6": "0x2cede918d453c0000",
        "0x5f708eaf39d823946c51b3a3e9b7b3c003e26341": "0x62a992e53a0af00000",
        "0x5f742e487e3ab81af2f94afdbe1b9b8f5ccc81bc": "0x75c445d41163e60000",
        "0x5f74ed0e24ff80d9b2c4a44baa9975428cd6b935": "0xa18bcec34888100000",
        "0x5f76f0a306269c78306b3d650dc3e9c37084db61": "0x821ab0d44149800000",
        "0x5f77a107ab1226b3f95f10ee83aefc6c5dff3edc": "0x1b1ae4d6e2ef500000",
        "0x5f7b3bbac16dab831a4a0fc53b0c549dc36c31ca": "0x692ae8897081d00000",
        "0x5f93ff832774db5114c55bb4bf44ccf3b58f903f": "0x28a9c91a263458290000",
        "0x5f9616c47b4a67f406b95a14fe6fc268396f1721": "0xad78ebc5ac6200000",
        "0x5f981039fcf50225e2adf762752112d1cc26b6e3": "0x1b1a416a2153a50000",
        "0x5f99dc8e49e61d57daef606acdd91b4d7007326a": "0xa2a15d09519be00000",
        "0x5fa61f152de6123516c751242979285f796ac791": "0xb0f11972963b00000",
        "0x5fa7bfe043886127d4011d8356a47e947963aca8": "0x62a992e53a0af00000",
        "0x5fa8a54e68176c4fe2c01cf671c515bfbdd528a8": "0x45e155fa0110fa400000",
        "0x5fad960f6b2c84569c9f4d47bf1985fcb2c65da6": "0x36356633ebd8ea0000",
        "0x5fc6c11426b4a1eae7e51dd512ad1090c6f1a85b": "0x93fe5c57d710680000",
        "0x5fcd84546896dd081db1a320bd4d8c1dd1528c4c": "0x1158e460913d00000",
        "0x5fcda847aaf8d7fa8bca08029ca2849166aa15a3": "0x21cab81259a3bf0000",
        "0x5fd1c3e31778276cb42ea740f5eae9c641dbc701": "0xa844a7424d9c80000",
        "0x5fd3d6777ec2620ae83a05528ed425072d3ca8fd": "0x6c6b935b8bbd400000",
        "0x5fd973af366aa5157c54659bcfb27cbfa5ac15d6": "0xd8d726b7177a800000",
        "0x5fe77703808f823e6c399352108bdb2c527cb87c": "0x6a4076cf7995a00000",
        "0x5fec49c665e64ee89dd441ee74056e1f01e92870": "0x1569b9e733474c00000",
        "0x5ff326cd60fd136b245e29e9087a6ad3a6527f0d": "0x65ea3db75546600000",
        "0x5ff93de6ee054cad459b2d5eb0f6870389dfcb74": "0xbed1d0263d9f00000",
        "0x6006e36d929bf45d8f16231b126a011ae283d925": "0x98a7d9b8314c00000",
        "0x6021e85a8814fce1e82a41abd1d3b2dad2faefe0": "0x6c6b935b8bbd400000",
        "0x6038740ae28d66ba93b0be08482b3205a0f7a07b": "0x11216185c29f700000",
        "0x603f2fab7afb6e017b94766069a4b43b38964923": "0x59d2db2414da990000",
        "0x6042276df2983fe2bc4759dc1943e18fdbc34f77": "0x6acb3df27e1f880000",
        "0x6042c644bae2b96f25f94d31f678c90dc96690db": "0x6c6b935b8bbd400000",
        "0x604cdf18628dbfa8329194d478dd5201eecc4be7": "0x13f306a2409fc0000",
        "0x604e9477ebf4727c745bcabbedcb6ccf29994022": "0x36369ed7747d260000",
        "0x60676d1fa21fca052297e24bf96389c5b12a70d7": "0xd177c5a7a68d60000",
        "0x60676e92d18b000509c61de540e6c5ddb676d509": "0x410d586a20a4c00000",
        "0x606f177121f7855c21a5062330c8762264a97b31": "0xd8d726b7177a800000",
        "0x60864236930d04d8402b5dcbeb807f3caf611ea2": "0xd8d726b7177a800000",
        "0x60ab71cd26ea6d6e59a7a0f627ee079c885ebbf6": "0x1731790534df20000",
        "0x60af0ee118443c9b37d2fead77f5e521debe1573": "0x678a932062e4180000",
        "0x60b358cb3dbefa37f47df2d7365840da8e3bc98c": "0x1158e460913d00000",
        "0x60b8d6b73b79534fb08bb8cbcefac7f393c57bfe": "0x5f68e8131ecf800000",
        "0x60be6f953f2a4d25b6256ffd2423ac1438252e4e": "0x821ab0d4414980000",
        "0x60c3714fdddb634659e4a2b1ea42c4728cc7b8ba": "0xb98bc829a6f90000",
        "0x60cc3d445ebdf76a7d7ae571c6971dff68cc8585": "0x3635c9adc5dea00000",
        "0x60d5667140d12614b21c8e5e8a33082e32dfcf23": "0x43c33c1937564800000",
        "0x60de22a1507432a47b01cc68c52a0bf8a2e0d098": "0x10910d4cdc9f60000",
        "0x60e0bdd0a259bb9cb09d3f37e5cd8b9daceabf8a": "0x4a4491bd6dcd280000",
        "0x60e3cc43bcdb026aad759c7066f555bbf2ac66f5": "0x6c6b935b8bbd400000",
        "0x61042b80fd6095d1b87be2f00f109fabafd157a6": "0x56bc75e2d63100000",
        "0x6107d71dd6d0eefb11d4c916404cb98c753e117d": "0x6c6b935b8bbd400000",
        "0x610fd6ee4eebab10a8c55d0b4bd2e7d6ef817156": "0x1159561065d5d0000",
        "0x6114b0eae5576903f80bfb98842d24ed92237f1e": "0x56bc75e2d63100000",
        "0x6121af398a5b2da69f65c6381aec88ce9cc6441f": "0x22b1c8c1227a000000",
        "0x612667f172135b950b2cd1de10afdece6857b873": "0x3635c9adc5dea00000",
        "0x612ced8dc0dc9e899ee46f7962333315f3f55e44": "0x125e35f9cd3d9b0000",
        "0x6134d942f037f2cc3d424a230c603d67abd3edf7": "0x6c6b935b8bbd400000",
        "0x613ac53be565d46536b820715b9b8d3ae68a4b95": "0xcbd47b6eaa8cc00000",
        "0x613fab44b16bbe554d44afd178ab1d02f37aeaa5": "0x6c6b935b8bbd400000",
        "0x614e8bef3dd2c59b59a4145674401018351884ea": "0x1158e460913d00000",
        "0x61518464fdd8b73c1bb6ac6db600654938dbf17a": "0xad78ebc5ac6200000",
        "0x61547d376e5369bcf978fc162c3c56ae453547e8": "0xad78ebc5ac6200000",
        "0x6158e107c5eb54cb7604e0cd8dc1e07500d91c3c": "0x2b5e3af16b1880000",
        "0x615a6f36777f40d6617eb5819896186983fd3731": "0x14061b9d77a5e980000",
        "0x615f82365c5101f071e7d2cb6af14f7aad2c16c6": "0x1158e460913d00000",
        "0x6170dd0687bd55ca88b87adef51cfdc55c4dd458": "0x6cb32f5c34fe440000",
        "0x61733947fab820dbd351efd67855ea0e881373a0": "0x1158e460913d00000",
        "0x6179979907fe7f037e4c38029d60bcbab832b3d6": "0x57473d05dabae80000",
        "0x617f20894fa70e94a86a49cd74e03238f64d3cd9": "0x10f0dbae61009528000",
        "0x617ff2cc803e31c9082233b825d025be3f7b1056": "0x6acb3df27e1f880000",
        "0x6191ddc9b64a8e0890b4323709d7a07c48b92a64": "0x2a034919dfbfbc0000",
        "0x6196c3d3c0908d254366b7bca55745222d9d4db1": "0xd8d726b7177a800000",
        "0x619f171445d42b02e2e07004ad8afe694fa53d6a": "0x1158e460913d00000",
        "0x61adf5929a5e2981684ea243baa01f7d1f5e148a": "0x5fabf6c984f230000",
        "0x61b1b8c012cd4c78f698e470f90256e6a30f48dd": "0xad78ebc5ac6200000",
        "0x61b3df2e9e9fd968131f1e88f0a0eb5bd765464d": "0xd8d726b7177a800000",
        "0x61b902c5a673885826820d1fe14549e4865fbdc2": "0x1224efed2ae1918000",
        "0x61b905de663fc17386523b3a28e2f7d037a655cd": "0x1b1ae4d6e2ef500000",
        "0x61ba87c77e9b596de7ba0e326fddfeec2163ef66": "0xad78ebc5ac6200000",
        "0x61bf84d5ab026f58c873f86ff0dfca82b55733ae": "0x6c6b935b8bbd400000",
        "0x61c4ee7c864c4d6b5e37ea1331c203739e826b2f": "0x1a1353b382a918000",
        "0x61c830f1654718f075ccaba316faacb85b7d120b": "0x15af1d78b58c400000",
        "0x61c8f1fa43bf846999ecf47b2b324dfb6b63fe3a": "0x2b5e3af16b18800000",
        "0x61c9dce8b2981cb40e98b0402bc3eb28348f03ac": "0xaacacd9b9e22b0000",
        "0x61cea71fa464d62a07063f920b0cc917539733d8": "0x5a87e7d7f5f6580000",
        "0x61d101a033ee0e2ebb3100ede766df1ad0244954": "0x1b1ae4d6e2ef500000",
        "0x61ed5596c697207f3d55b2a51aa7d50f07fa09e8": "0x6c6b935b8bbd400000",
        "0x61ff8e67b34d9ee6f78eb36ffea1b9f7c15787af": "0x58e7926ee858a00000",
        "0x6205c2d5647470848a3840f3887e9b015d34755c": "0x6194049f30f7200000",
        "0x6228ade95e8bb17d1ae23bfb0518414d497e0eb8": "0x15af1d78b58c400000",
        "0x6229dcc203b1edccfdf06e87910c452a1f4d7a72": "0x6e1d41a8f9ec3500000",
        "0x622be4b45495fcd93143efc412d699d6cdc23dc5": "0xf015f25736420000",
        "0x62331df2a3cbee3520e911dea9f73e905f892505": "0x6c6b935b8bbd400000",
        "0x625644c95a873ef8c06cdb9e9f6d8d7680043d62": "0x6194049f30f7200000",
        "0x6265b2e7730f36b776b52d0c9d02ada55d8e3cb6": "0x3635c9adc5dea00000",
        "0x62680a15f8ccb8bdc02f7360c25ad8cfb57b8ccd": "0x3635c9adc5dea00000",
        "0x6294eae6e420a3d5600a39c4141f838ff8e7cc48": "0xa030dcebbd2f4c0000",
        "0x62971bf2634cee0be3c9890f51a56099dbb9519b": "0x238fd42c5cf0400000",
        "0x629be7ab126a5398edd6da9f18447e78c692a4fd": "0x6c6b935b8bbd400000",
        "0x62b4a9226e61683c72c183254690daf511b4117a": "0xe18398e7601900000",
        "0x62b9081e7710345e38e02e16449ace1b85bcfc4e": "0x3154c9729d05780000",
        "0x62c37c52b97f4b040b1aa391d6dec152893c4707": "0x3635c9adc5dea00000",
        "0x62c9b271ffd5b770a5eee4edc9787b5cdc709714": "0x6c6b935b8bbd400000",
        "0x62d5cc7117e18500ac2f9e3c26c86b0a94b0de15": "0x5b12aefafa8040000",
        "0x62dc72729024375fc37cbb9c7c2393d10233330f": "0x6c6b935b8bbd400000",
        "0x62e6b2f5eb94fa7a43831fc87e254a3fe3bf8f89": "0xd8d726b7177a80000",
        "0x62f2e5ccecd52cc4b95e0597df27cc079715608c": "0x7c0860e5a80dc0000",
        "0x62fb8bd1f0e66b90533e071e6cbe6111fef0bc63": "0x3ba1910bf341b000000",
        "0x630a913a9031c9492abd4c41dbb15054cfec4416": "0x13458db67af35e00000",
        "0x630c5273126d517ce67101811cab16b8534cf9a8": "0x1feccc62573bbd38000",
        "0x631030a5b27b07288a45696f189e1114f12a81c0": "0x1b1a7a420ba00d0000",
        "0x6310b020fd98044957995092090f17f04e52cdfd": "0x55a6e79ccd1d300000",
        "0x632b9149d70178a7333634275e82d5953f27967b": "0x25f273933db5700000",
        "0x632cecb10cfcf38ec986b43b8770adece9200221": "0x1158e460913d00000",
        "0x6331028cbb5a21485bc51b565142993bdb2582a9": "0x1cfdd7468216e80000",
        "0x63334fcf1745840e4b094a3bb40bb76f9604c04c": "0xd7a5d703a717e80000",
        "0x63340a57716bfa63eb6cd133721202575bf796f0": "0xb61e0a20c12718000",
        "0x634efc24371107b4cbf03f79a93dfd93e431d5fd": "0x423582e08edc5c8000",
        "0x635c00fdf035bca15fa3610df3384e0fb79068b1": "0x1e7e4171bf4d3a00000",
        "0x63612e7862c27b587cfb6daf9912cb051f030a9f": "0x25b19d4bfe8ed0000",
        "0x63666755bd41b5986997783c13043008242b3cb5": "0x1b1ae4d6e2ef500000",
        "0x637be71b3aa815ff453d5642f73074450b64c82a": "0x6c6b935b8bbd400000",
        "0x637d67d87f586f0a5a479e20ee13ea310a10b647": "0xa3a5926afa1e7300000",
        "0x637f5869d6e4695f0eb9e27311c4878aff333380": "0x6ac04e68aaec860000",
        "0x63977cad7d0dcdc52b9ac9f2ffa136e8642882b8": "0x410d586a20a4c0000",
        "0x63a61dc30a8e3b30a763c4213c801cbf98738178": "0x3635c9adc5dea00000",
        "0x63ac545c991243fa18aec41d4f6f598e555015dc": "0x2086ac351052600000",
        "0x63b9754d75d12d384039ec69063c0be210d5e0e3": "0x920b860cc8ecfd8000",
        "0x63bb664f9117037628594da7e3c5089fd618b5b5": "0x1158e460913d00000",
        "0x63c2a3d235e5eeabd0d4a6afdb89d94627396495": "0x434ef05b9d84820000",
        "0x63c8dfde0b8e01dadc2e748c824cc0369df090b3": "0xd255d112e103a00000",
        "0x63d55ad99b9137fd1b20cc2b4f03d42cbaddf334": "0x15af1d78b58c400000",
        "0x63d80048877596e0c28489e650cd4ac180096a49": "0xf2dc7d47f15600000",
        "0x63e414603e80d4e5a0f5c18774204642258208e4": "0x10f0cf064dd59200000",
        "0x63e88e2e539ffb450386b4e46789b223f5476c45": "0x155170a778e25d00000",
        "0x63ef2fbc3daf5edaf4a295629ccf31bcdf4038e5": "0x4f2591f896a6500000",
        "0x63f0e5a752f79f67124eed633ad3fd2705a397d4": "0xd5967be4fc3f100000",
        "0x63f5b53d79bf2e411489526530223845fac6f601": "0x65a4da25d3016c00000",
        "0x63fc93001305adfbc9b85d29d9291a05f8f1410b": "0x3635c9adc5dea00000",
        "0x63fe6bcc4b8a9850abbe75803730c932251f145b": "0xfc936392801c0000",
        "0x6403d062549690c8e8b63eae41d6c109476e2588": "0x6c6b935b8bbd400000",
        "0x64042ba68b12d4c151651ca2813b7352bd56f08e": "0x2086ac351052600000",
        "0x6405dd13e93abcff377e700e3c1a0086eca27d29": "0xfc936392801c0000",
        "0x640aba6de984d94517377803705eaea7095f4a11": "0x21e19e0c9bab2400000",
        "0x640bf87415e0cf407301e5599a68366da09bbac8": "0x1abc9f416098158000",
        "0x6420f8bcc8164a6152a99d6b99693005ccf7e053": "0x36356633ebd8ea0000",
        "0x64241a7844290e0ab855f1d4aa75b55345032224": "0x56bc75e2d631000000",
        "0x64264aedd52dcae918a012fbcd0c030ee6f71821": "0x3635c9adc5dea00000",
        "0x64370e87202645125a35b207af1231fb6072f9a7": "0xad78ebc5ac6200000",
        "0x643d9aeed4b180947ed2b9207cce4c3ddc55e1f7": "0xad78ebc5ac6200000",
        "0x6443b8ae639de91cf73c5ae763eeeed3ddbb9253": "0x6c6b935b8bbd400000",
        "0x64457fa33b0832506c4f7d1180dce48f46f3e0ff": "0x6c6b935b8bbd400000",
        "0x64464a6805b462412a901d2db8174b06c22deea6": "0x19c846a029c7c80000",
        "0x644ba6c61082e989109f5c11d4b40e991660d403": "0xd8d726b7177a800000",
        "0x64628c6fb8ec743adbd87ce5e018d531d9210437": "0x1731790534df20000",
        "0x6463f715d594a1a4ace4bb9c3b288a74decf294d": "0x6acb3df27e1f880000",
        "0x646628a53c2c4193da88359ce718dadd92b7a48d": "0xad8006c2f5ef00000",
        "0x64672da3ab052821a0243d1ce4b6e0a36517b8eb": "0xad78ebc5ac6200000",
        "0x646afba71d849e80c0ed59cac519b278e7f7abe4": "0x3635c9adc5dea00000",
        "0x646e043d0597a664948fbb0dc15475a3a4f3a6ed": "0x1158e460913d00000",
        "0x6470a4f92ec6b0fccd01234fa59023e9ff1f3aac": "0xa2a15d09519be00000",
        "0x647b85044df2cf0b4ed4882e88819fe22ae5f793": "0x36363b5d9a77700000",
        "0x6485470e61db110aebdbafd536769e3c599cc908": "0x2086ac351052600000",
        "0x648f5bd2a2ae8902db37847d1cb0db9390b06248": "0x1a535ecf0760a048000",
        "0x649a2b9879cd8fb736e6703b0c7747849796f10f": "0x18ee22da01ad34f0000",
        "0x649a85b93653075fa6562c409a565d087ba3e1ba": "0x6c6b935b8bbd400000",
        "0x64adcceec53dd9d9dd15c8cc1a9e736de4241d2c": "0x30927f74c9de00000",
        "0x64cf0935bf19d2cebbecd8780d27d2e2b2c34166": "0x6acb3df27e1f880000",
        "0x64d80c3b8ba68282290b75e65d8978a15a87782c": "0x6acb3df27e1f880000",
        "0x64dba2d6615b8bd7571836dc75bc79d314f5ecee": "0x21e19e0c9bab2400000",
        "0x64e0217a5b38aa40583625967fa9883690388b6f": "0xad78ebc5ac6200000",
        "0x64e02abb016cc23a2934f6bcddb681905021d563": "0x3635c9adc5dea00000",
        "0x64e03ef070a54703b7184e48276c5c0077ef4b34": "0x1158e460913d000000",
        "0x64e2de21200b1899c3a0c0653b5040136d0dc842": "0x43c33c1937564800000",
        "0x64ec8a5b743f3479e707dae9ee20ddaa4f40f1d9": "0xad78ebc5ac6200000",
        "0x6503860b191008c15583bfc88158099301762828": "0x3635c9adc5dea00000",
        "0x65053191319e067a25e6361d47f37f6318f83419": "0x155bd9307f9fe80000",
        "0x65093b239bbfba23c7775ca7da5a8648a9f54cf7": "0x15af1d78b58c400000",
        "0x6509eeb1347e842ffb413e37155e2cbc738273fd": "0x6c6b935b8bbd400000",
        "0x650b425555e4e4c51718146836a2c1ee77a5b421": "0x43c33c1937564800000",
        "0x650cf67db060cce17568d5f2a423687c49647609": "0x56bc75e2d63100000",
        "0x6510df42a599bcb0a519cca961b488759a6f6777": "0x6c6b935b8bbd400000",
        "0x653675b842d7d8b461f722b4117cb81dac8e639d": "0x1ae361fc1451c0000",
        "0x654b7e808799a83d7287c67706f2abf49a496404": "0x6acb3df27e1f880000",
        "0x654f524847b3a6acc0d3d5f1f362b603edf65f96": "0x1b1ae4d6e2ef5000000",
        "0x655934da8e744eaa3de34dbbc0894c4eda0b61f2": "0xad78ebc5ac6200000",
        "0x655d5cd7489629e2413c2105b5a172d933c27af8": "0xdb03186cd840a60000",
        "0x656018584130db83ab0591a8128d9381666a8d0e": "0x3779f912019fc0000",
        "0x6560941328ff587cbc56c38c78238a7bb5f442f6": "0x2861906b59c47a0000",
        "0x656579daedd29370d9b737ee3f5cd9d84bc2b342": "0x4d853c8f8908980000",
        "0x657473774f63ac3d6279fd0743d5790c4f161503": "0xad78ebc5ac6200000",
        "0x6580b1bc94390f04b397bd73e95d96ef11eaf3a8": "0x1158e460913d00000",
        "0x65849be1af20100eb8a3ba5a5be4d3ae8db5a70e": "0x15af1d78b58c400000",
        "0x659c0a72c767a3a65ced0e1ca885a4c51fd9b779": "0x6c6b935b8bbd400000",
        "0x65a52141f56bef98991724c6e7053381da8b5925": "0x3429c335d57fe0000",
        "0x65a9dad42e1632ba3e4e49623fab62a17e4d3611": "0x50c4cb2a10c600000",
        "0x65af8d8b5b1d1eedfa77bcbc96c1b133f83306df": "0x55005f0c614480000",
        "0x65af9087e05167715497c9a5a749189489004def": "0x2d43f3ebfafb2c0000",
        "0x65b42faecc1edfb14283ca979af545f63b30e60c": "0xfc936392801c0000",
        "0x65d33eb39cda6453b19e61c1fe4db93170ef9d34": "0xb98bc829a6f90000",
        "0x65d8dd4e251cbc021f05b010f2d5dc520c3872e0": "0x2d43579a36a90e0000",
        "0x65ea26eabbe2f64ccccfe06829c25d4637520225": "0x25f273933db5700000",
        "0x65ea67ad3fb56ad5fb94387dd38eb383001d7c68": "0x56bc75e2d63100000",
        "0x65ebaed27edb9dcc1957aee5f452ac2105a65c0e": "0x937dfadae25e29b8000",
        "0x65ee20b06d9ad589a7e7ce04b9f5f795f402aece": "0x6c6b935b8bbd400000",
        "0x65f534346d2ffb787fa9cf185d745ba42986bd6e": "0x1b1ae4d6e2ef500000",
        "0x65f5870f26bce089677dfc23b5001ee492483428": "0x112b1f155aa32a30000",
        "0x65fd02d704a12a4dace9471b0645f962a89671c8": "0x18d1ce6e427cd8000",
        "0x65ff874fafce4da318d6c93d57e2c38a0d73e820": "0x3638021cecdab00000",
        "0x660557bb43f4be3a1b8b85e7df7b3c5bcd548057": "0x14542ba12a337c00000",
        "0x66082c75a8de31a53913bbd44de3a0374f7faa41": "0x4f2591f896a6500000",
        "0x6611ce59a98b072ae959dc49ad511daaaaa19d6b": "0xad78ebc5ac6200000",
        "0x66201bd227ae6dc6bdfed5fbde811fecfe5e9dd9": "0x203e9e8492788c0000",
        "0x662334814724935b7931ddca6100e00d467727cd": "0x2288269d0783d40000",
        "0x66274fea82cd30b6c29b23350e4f4f3d310a5899": "0x70370550ab82980000",
        "0x662cfa038fab37a01745a364e1b98127c503746d": "0xd5967be4fc3f100000",
        "0x6635b46f711d2da6f0e16370cd8ee43efb2c2d52": "0x6c6b935b8bbd400000",
        "0x663604b0503046e624cd26a8b6fb4742dce02a6f": "0x38b9b797ef68c0000",
        "0x6636d7ac637a48f61d38b14cfd4865d36d142805": "0x1b1ae4d6e2ef500000",
        "0x6640ccf053555c130ae2b656647ea6e31637b9ab": "0x6acb3df27e1f880000",
        "0x66424bd8785b8cb461102a900283c35dfa07ef6a": "0x22e2db26666fc8000",
        "0x664cd67dccc9ac8228b45c55db8d76550b659cdc": "0x155bd9307f9fe80000",
        "0x664e43119870af107a448db1278b044838ffcdaf": "0x15af1d78b58c400000",
        "0x6651736fb59b91fee9c93aa0bd6ea2f7b2506180": "0x1b1ae4d6e2ef500000",
        "0x665b000f0b772750cc3c217a5ef429a92bf1ccbb": "0xd8d726b7177a800000",
        "0x66662006015c1f8e3ccfcaebc8ee6807ee196303": "0x1b1b3a1ac261ec0000",
        "0x666746fb93d1935c5a3c684e725010c4fad0b1d8": "0x1158e460913d00000",
        "0x666b4f37d55d63b7d056b615bb74c96b3b01991a": "0xd8d726b7177a800000",
        "0x66719c0682b2ac7f9e27abebec7edf8decf0ae0d": "0x1158e460913d00000",
        "0x6671b182c9f741a0cd3c356c73c23126d4f9e6f4": "0xad78ebc5ac6200000",
        "0x6679aeecd87a57a73f3356811d2cf49d0c4d96dc": "0x2086ac351052600000",
        "0x667b61c03bb937a9f5d0fc5a09f1ea3363c77035": "0xe664992288f2280000",
        "0x6685fd2e2544702c360b8bb9ee78f130dad16da5": "0x6c6b935b8bbd400000",
        "0x668b6ba8ab08eace39c502ef672bd5ccb6a67a20": "0x697d95d4201333c0000",
        "0x66925de3e43f4b41bf9dadde27d5488ef569ea0d": "0x222c8eb3ff6640000",
        "0x66b0c100c49149935d14c0dc202cce907cea1a3d": "0x6acb3df27e1f880000",
        "0x66b1a63da4dcd9f81fe54f5e3fcb4055ef7ec54f": "0xaeb272adf9cfa0000",
        "0x66b39837cb3cac8a802afe3f12a258bbca62dacd": "0x15af1d78b58c400000",
        "0x66c8331efe7198e98b2d32b938688e3241d0e24f": "0x2098051970e39d00000",
        "0x66cc8ab23c00d1b82acd7d73f38c99e0d05a4fa6": "0x56bc75e2d63100000",
        "0x66dcc5fb4ee7fee046e141819aa968799d644491": "0x487a9a304539440000",
        "0x66e09427c1e63deed7e12b8c55a6a19320ef4b6a": "0x93739534d28680000",
        "0x66ec16ee9caab411c55a6629e318de6ee216491d": "0x2ee449550898e40000",
        "0x66f50406eb1b11a946cab45927cca37470e5a208": "0x6c6b935b8bbd400000",
        "0x66fdc9fee351fa1538eb0d87d819fcf09e7c106a": "0x14627b5d93781b20000",
        "0x67048f3a12a4dd1f626c64264cb1d7971de2ca38": "0x9c2007651b2500000",
        "0x6704f169e0d0b36b57bbc39f3c45437b5ee3d28d": "0x155bd9307f9fe80000",
        "0x671015b97670b10d5e583f3d62a61c1c79c5143f": "0x15af1d78b58c400000",
        "0x6710c2c03c65992b2e774be52d3ab4a6ba217ef7": "0x274d656ac90e3400000",
        "0x671110d96aaff11523cc546bf9940eedffb2faf7": "0xd8d726b7177a800000",
        "0x6715c14035fb57bb3d667f7b707498c41074b855": "0x25f273933db5700000",
        "0x671bbca099ff899bab07ea1cf86965c3054c8960": "0x2b5e3af16b1880000",
        "0x6727daf5b9d68efcab489fedec96d7f7325dd423": "0x6c6b935b8bbd400000",
        "0x672cbca8440a8577097b19aff593a2ad9d28a756": "0x4563918244f400000",
        "0x672ec42faa8cd69aaa71b32cc7b404881d52ff91": "0x21e19e0c9bab2400000",
        "0x672fa0a019088db3166f6119438d07a99f8ba224": "0x2d4ca05e2b43ca80000",
        "0x673144f0ec142e770f4834fee0ee311832f3087b": "0x1b1b6bd7af64c70000",
        "0x67350b5331926f5e28f3c1e986f96443809c8b8c": "0x1314fb370629800000",
        "0x673706b1b0e4dc7a949a7a796258a5b83bb5aa83": "0x368c8623a8b4d100000",
        "0x6742a2cfce8d79a2c4a51b77747498912245cd6a": "0xdfd5b80b7e4680000",
        "0x674adb21df4c98c7a347ac4c3c24266757dd7039": "0x6c6b935b8bbd400000",
        "0x67518e5d02b205180f0463a32004471f753c523e": "0x6b918aac494b168000",
        "0x675d5caa609bf70a18aca580465d8fb7310d1bbb": "0x43c33c1937564800000",
        "0x67632046dcb25a54936928a96f423f3320cbed92": "0x6c6b935b8bbd400000",
        "0x6765df25280e8e4f38d4b1cf446fc5d7eb659e34": "0x56bc75e2d63100000",
        "0x6776e133d9dc354c12a951087b639650f539a433": "0x68155a43676e00000",
        "0x6785513cf732e47e87670770b5419be10cd1fc74": "0x6c6b935b8bbd400000",
        "0x679437eacf437878dc293d48a39c87b7421a216c": "0x37f81821db2680000",
        "0x679b9a109930517e8999099ccf2a914c4c8dd934": "0x340aad21b3b700000",
        "0x67a80e0190721f94390d6802729dd12c31a895ad": "0x6c6b1375bc91560000",
        "0x67b8a6e90fdf0a1cac441793301e8750a9fa7957": "0x30849ebe16369c0000",
        "0x67bc85e87dc34c4e80aafa066ba8d29dbb8e438e": "0x15d1cf4176aeba0000",
        "0x67c926093e9b8927933810d98222d62e2b8206bb": "0x678a932062e4180000",
        "0x67cfda6e70bf7657d39059b59790e5145afdbe61": "0x23050d095866580000",
        "0x67d682a282ef73fb8d6e9071e2614f47ab1d0f5e": "0x3635c9adc5dea00000",
        "0x67d6a8aa1bf8d6eaf7384e993dfdf10f0af68a61": "0xabcbb5718974b8000",
        "0x67da922effa472a6b124e84ea8f86b24e0f515aa": "0x1158e460913d00000",
        "0x67df242d240dd4b8071d72f8fcf35bb3809d71e8": "0xd8d726b7177a800000",
        "0x67ee406ea4a7ae6a3a381eb4edd2f09f174b4928": "0x3829635f0968b00000",
        "0x67f2bb78b8d3e11f7c458a10b5c8e0a1d374467d": "0x61093d7c2c6d380000",
        "0x67fc527dce1785f0fb8bc7e518b1c669f7ecdfb5": "0xd02ab486cedc00000",
        "0x68027d19558ed7339a08aee8de3559be063ec2ea": "0x6c6b935b8bbd400000",
        "0x680640838bd07a447b168d6d923b90cf6c43cdca": "0x5dc892aa1131c80000",
        "0x6807ddc88db489b033e6b2f9a81553571ab3c805": "0x19f8e7559924c0000",
        "0x680d5911ed8dd9eec45c060c223f89a7f620bbd5": "0x43c33c1937564800000",
        "0x6811b54cd19663b11b94da1de2448285cd9f68d9": "0x3ba1910bf341b00000",
        "0x68190ca885da4231874c1cfb42b1580a21737f38": "0xcf152640c5c8300000",
        "0x682897bc4f8e89029120fcffb787c01a93e64184": "0x21e19e0c9bab2400000",
        "0x68295e8ea5afd9093fc0a465d157922b5d2ae234": "0x1154e53217ddb0000",
        "0x682e96276f518d31d7e56e30dfb009c1218201bd": "0x1158e460913d00000",
        "0x6835c8e8b74a2ca2ae3f4a8d0f6b954a3e2a8392": "0x3429c335d57fe0000",
        "0x683633010a88686bea5a98ea53e87997cbf73e69": "0x56b394263a40c0000",
        "0x683dba36f7e94f40ea6aea0d79b8f521de55076e": "0x796e3ea3f8ab00000",
        "0x68419c6dd2d3ce6fcbb3c73e2fa079f06051bde6": "0x6acb3df27e1f880000",
        "0x68473b7a7d965904bedba556dfbc17136cd5d434": "0x56bc75e2d63100000",
        "0x6847825bdee8240e28042c83cad642f286a3bddc": "0x5150ae84a8cdf00000",
        "0x684a44c069339d08e19a75668bdba303be855332": "0xed2b525841adfc00000",
        "0x68531f4dda808f5320767a03113428ca0ce2f389": "0x10d3aa536e2940000",
        "0x687927e3048bb5162ae7c15cf76bd124f9497b9e": "0x6c6b935b8bbd400000",
        "0x68809af5d532a11c1a4d6e32aac75c4c52b08ead": "0x21e19e0c9bab2400000",
        "0x6886ada7bbb0617bda842191c68c922ea3a8ac82": "0x3ee23bde0e7d200000",
        "0x68883e152e5660fee59626e7e3b4f05110e6222f": "0xb94633be975a62a0000",
        "0x688a569e965524eb1d0ac3d3733eab909fb3d61e": "0x478eae0e571ba00000",
        "0x688eb3853bbcc50ecfee0fa87f0ab693cabdef02": "0x6b10a18400647c00000",
        "0x68a7425fe09eb28cf86eb1793e41b211e57bd68d": "0x243d4d18229ca20000",
        "0x68a86c402388fddc59028fec7021e98cbf830eac": "0x10910d4cdc9f60000",
        "0x68acdaa9fb17d3c309911a77b05f5391fa034ee9": "0x1e52e336cde22180000",
        "0x68addf019d6b9cab70acb13f0b3117999f062e12": "0x2b51212e6b7c88000",
        "0x68b31836a30a016ada157b638ac15da73f18cfde": "0x168d28e3f00280000",
        "0x68b6854788a7c6496cdbf5f84b9ec5ef392b78bb": "0x42bf06b78ed3b500000",
        "0x68c08490c89bf0d6b6f320b1aca95c8312c00608": "0xd8d726b7177a800000",
        "0x68c7d1711b011a33f16f1f55b5c902cce970bdd7": "0x83d6c7aab63600000",
        "0x68c8791dc342c373769ea61fb7b510f251d32088": "0x3635c9adc5dea00000",
        "0x68df947c495bebaeb8e889b3f953d533874bf106": "0x1d9945ab2b03480000",
        "0x68e8022740f4af29eb48db32bcecddfd148d3de3": "0x3635c9adc5dea00000",
        "0x68ec79d5be7155716c40941c79d78d17de9ef803": "0x1b233877b5208c0000",
        "0x68eec1e288ac31b6eaba7e1fbd4f04ad579a6b5d": "0x6c6b935b8bbd400000",
        "0x68f525921dc11c329b754fbf3e529fc723c834cd": "0x57473d05dabae80000",
        "0x68f719ae342bd7fef18a05cbb02f705ad38ed5b2": "0x38ebad5cdc90280000",
        "0x68f7573cd457e14c03fea43e302d30347c10705c": "0x10f0cf064dd59200000",
        "0x68f8f45155e98c5029a4ebc5b527a92e9fa83120": "0xf07b44b40793208000",
        "0x68fe1357218d095849cd579842c4aa02ff888d93": "0x6c6b935b8bbd400000",
        "0x690228e4bb12a8d4b5e0a797b0c5cf2a7509131e": "0x65ea3db75546600000",
        "0x690594d306613cd3e2fd24bca9994ad98a3d73f8": "0x6c6b935b8bbd400000",
        "0x69073269729e6414b26ec8dc0fd935c73b579f1e": "0x65a4da25d3016c00000",
        "0x6919dd5e5dfb1afa404703b9faea8cee35d00d70": "0x14061b9d77a5e980000",
        "0x693492a5c51396a482881669ccf6d8d779f00951": "0x12bf50503ae3038000",
        "0x693d83be09459ef8390b2e30d7f7c28de4b4284e": "0x6c6b935b8bbd400000",
        "0x69517083e303d4fbb6c2114514215d69bc46a299": "0x56bc75e2d63100000",
        "0x695550656cbf90b75d92ad9122d90d23ca68ca4d": "0x3635c9adc5dea00000",
        "0x6958f83bb2fdfb27ce0409cd03f9c5edbf4cbedd": "0x43c33c1937564800000",
        "0x695b0f5242753701b264a67071a2dc880836b8db": "0xe398811bec680000",
        "0x695b4cce085856d9e1f9ff3e79942023359e5fbc": "0x10f0cf064dd59200000",
        "0x6966063aa5de1db5c671f3dd699d5abe213ee902": "0x1b1ae4d6e2ef5000000",
        "0x6974c8a414ceaefd3c2e4dfdbef430568d9a960b": "0x121ea68c114e510000",
        "0x6978696d5150a9a263513f8f74c696f8b1397cab": "0x167f482d3c5b1c00000",
        "0x69797bfb12c9bed682b91fbc593591d5e4023728": "0x21e19e0c9bab2400000",
        "0x697f55536bf85ada51841f0287623a9f0ed09a17": "0x21e19e0c9bab2400000",
        "0x6982fe8a867e93eb4a0bd051589399f2ec9a5292": "0x6c6b935b8bbd400000",
        "0x698a8a6f01f9ab682f637c7969be885f6c5302bf": "0x10d3aa536e2940000",
        "0x698ab9a2f33381e07c0c47433d0d21d6f336b127": "0x1158e460913d00000",
        "0x6994fb3231d7e41d491a9d68d1fa4cae2cc15960": "0xd8d726b7177a800000",
        "0x699c9ee47195511f35f862ca4c22fd35ae8ffbf4": "0x4563918244f400000",
        "0x699fc6d68a4775573c1dcdaec830fefd50397c4e": "0x340aad21b3b700000",
        "0x69af28b0746cac0da17084b9398c5e36bb3a0df2": "0x3677036edf0af60000",
        "0x69b80ed90f84834afa3ff82eb964703b560977d6": "0x1731790534df20000",
        "0x69b81d5981141ec7a7141060dfcf8f3599ffc63e": "0x10f0cf064dd59200000",
        "0x69bcfc1d43b4ba19de7b274bdffb35139412d3d7": "0x35659ef93f0fc40000",
        "0x69bd25ade1a3346c59c4e930db2a9d715ef0a27a": "0xd8d726b7177a800000",
        "0x69c08d744754de709ce96e15ae0d1d395b3a2263": "0x3635c9adc5dea00000",
        "0x69c2d835f13ee90580408e6a3283c8cca6a434a2": "0x238fd42c5cf0400000",
        "0x69c94e07c4a9be3384d95dfa3cb9290051873b7b": "0x3cb71f51fc5580000",
        "0x69cb3e2153998d86e5ee20c1fcd1a6baeeb2863f": "0xd8d726b7177a800000",
        "0x69d39d510889e552a396135bfcdb06e37e387633": "0xd8d726b7177a800000",
        "0x69d98f38a3ba3dbc01fa5c2c1427d862832f2f70": "0x152d02c7e14af6800000",
        "0x69e2e2e704307ccc5b5ca3f164fece2ea7b2e512": "0x17b7883c06916600000",
        "0x69ff429074cb9b6c63bc914284bce5f0c8fbf7d0": "0x1b1ae4d6e2ef500000",
        "0x69ff8901b541763f817c5f2998f02dcfc1df2997": "0x22b1c8c1227a00000",
        "0x6a023af57d584d845e698736f130db9db40dfa9a": "0x55b201c8900980000",
        "0x6a04f5d53fc0f515be942b8f12a9cb7ab0f39778": "0xa9aab3459be1940000",
        "0x6a05b21c4f17f9d73f5fb2b0cb89ff5356a6cc7e": "0x5150ae84a8cdf00000",
        "0x6a0f056066c2d56628850273d7ecb7f8e6e9129e": "0x10f0d293cc7a5880000",
        "0x6a13d5e32c1fd26d7e91ff6e053160a89b2c8aad": "0x2e62f20a69be40000",
        "0x6a2e86469a5bf37cee82e88b4c3863895d28fcaf": "0x1c229266385bbc0000",
        "0x6a3694424c7cc6b8bcd9bccaba540cc1f5df18d7": "0x6c6b935b8bbd400000",
        "0x6a42ca971c6578d5ade295c3e7f4ad331dd3424e": "0x14542ba12a337c00000",
        "0x6a44af96b3f032ae641beb67f4b6c83342d37c5d": "0x19274b259f6540000",
        "0x6a4c8907b600248057b1e46354b19bdc859c991a": "0x1158e460913d00000",
        "0x6a514e6242f6b68c137e97fea1e78eb555a7e5f7": "0x1158e460913d00000",
        "0x6a53d41ae4a752b21abed5374649953a513de5e5": "0x6c6b935b8bbd400000",
        "0x6a6159074ab573e0ee581f0f3df2d6a594629b74": "0x10ce1d3d8cb3180000",
        "0x6a6337833f8f6a6bf10ca7ec21aa810ed444f4cb": "0x37bd24345ce8a40000",
        "0x6a6353b971589f18f2955cba28abe8acce6a5761": "0xa2a15d09519be00000",
        "0x6a63fc89abc7f36e282d80787b7b04afd6553e71": "0x8ac7230489e800000",
        "0x6a679e378fdce6bfd97fe62f043c6f6405d79e99": "0xd8d726b7177a800000",
        "0x6a686bf220b593deb9b7324615fb9144ded3f39d": "0x4f2591f896a6500000",
        "0x6a6b18a45a76467e2e5d5a2ef911c3e12929857b": "0x115d3a99a9614f400000",
        "0x6a74844d8e9cb5581c45079a2e94462a6cee8821": "0x3ab53a552dd4c90000",
        "0x6a7b2e0d88867ff15d207c222bebf94fa6ce8397": "0xcb49b44ba602d800000",
        "0x6a7c252042e7468a3ff773d6450bba85efa26391": "0x1b1ae4d6e2ef500000",
        "0x6a8a4317c45faa0554ccdb482548183e295a24b9": "0x3635c9adc5dea00000",
        "0x6a8cea2de84a8df997fd3f84e3083d93de57cda9": "0x56be03ca3e47d8000",
        "0x6a9758743b603eea3aa0524b42889723c4153948": "0x22385a827e815500000",
        "0x6aa5732f3b86fb8c81efbe6b5b47b563730b06c8": "0x3635c9adc5dea00000",
        "0x6ab323ae5056ed0a453072c5abe2e42fcf5d7139": "0x2fb474098f67c00000",
        "0x6ab5b4c41cddb829690c2fda7f20c85e629dd5d5": "0x64d4af714c32900000",
        "0x6ac40f532dfee5118117d2ad352da77d4f6da2c8": "0x15af1d78b58c400000",
        "0x6ac4d4be2db0d99da3faaaf7525af282051d6a90": "0x458ca58a962b28000",
        "0x6acddca3cd2b4990e25cd65c24149d0912099e79": "0xa2a1e07c9f6c908000",
        "0x6ad90be252d9cd464d998125fab693060ba8e429": "0xd8d726b7177a800000",
        "0x6add932193cd38494aa3f03aeccc4b7ab7fabca2": "0x4db73254763000000",
        "0x6ae57f27917c562a132a4d1bf7ec0ac785832926": "0x14542ba12a337c00000",
        "0x6aeb9f74742ea491813dbbf0d6fcde1a131d4db3": "0x17e554308aa0300000",
        "0x6af235d2bbe050e6291615b71ca5829658810142": "0xa2a15d09519be00000",
        "0x6af6c7ee99df271ba15bf384c0b764adcb4da182": "0x36356633ebd8ea0000",
        "0x6af8e55969682c715f48ad4fc0fbb67eb59795a3": "0x6c6b935b8bbd400000",
        "0x6af940f63ec9b8d876272aca96fef65cdacecdea": "0xa2a15d09519be00000",
        "0x6af9f0dfeeaebb5f64bf91ab771669bf05295553": "0x15af1d78b58c400000",
        "0x6aff1466c2623675e3cb0e75e423d37a25e442eb": "0x5dc892aa1131c80000",
        "0x6b0da25af267d7836c226bcae8d872d2ce52c941": "0x14542ba12a337c00000",
        "0x6b10f8f8b3e3b60de90aa12d155f9ff5ffb22c50": "0x6c6b935b8bbd400000",
        "0x6b17598a8ef54f797ae515ccb6517d1859bf8011": "0x56bc75e2d63100000",
        "0x6b20c080606a79c73bd8e75b11717a4e8db3f1c3": "0x103f735803f0140000",
        "0x6b2284440221ce16a8382de5ff0229472269deec": "0x3635c9adc5dea00000",
        "0x6b30f1823910b86d3acb5a6afc9defb6f3a30bf8": "0xe3aeb5737240a00000",
        "0x6b38de841fad7f53fe02da115bd86aaf662466bd": "0x5dc892aa1131c80000",
        "0x6b4b99cb3fa9f7b74ce3a48317b1cd13090a1a7a": "0x31b327e695de20000",
        "0x6b5ae7bf78ec75e90cb503c778ccd3b24b4f1aaf": "0x2b5e3af16b18800000",
        "0x6b63a2dfb2bcd0caec0022b88be30c1451ea56aa": "0x2bdb6bf91f7f4c8000",
        "0x6b6577f3909a4d6de0f411522d4570386400345c": "0x65ea3db75546600000",
        "0x6b72a8f061cfe6996ad447d3c72c28c0c08ab3a7": "0xe78c6ac79912620000",
        "0x6b760d4877e6a627c1c967bee451a8507ddddbab": "0x3154c9729d05780000",
        "0x6b83bae7b565244558555bcf4ba8da2011891c17": "0x6c6b935b8bbd400000",
        "0x6b925dd5d8ed6132ab6d0860b82c44e1a51f1fee": "0x503b203e9fba200000",
        "0x6b94615db750656ac38c7e1cf29a9d13677f4e15": "0x28a857425466f800000",
        "0x6b951a43274eeafc8a0903b0af2ec92bf1efc839": "0x56bc75e2d63100000",
        "0x6b992521ec852370848ad697cc2df64e63cc06ff": "0x3635c9adc5dea00000",
        "0x6ba8f7e25fc2d871618e24e40184199137f9f6aa": "0x15af64869a6bc20000",
        "0x6ba9b21b35106be159d1c1c2657ac56cd29ffd44": "0xf2dc7d47f156000000",
        "0x6baf7a2a02ae78801e8904ad7ac05108fc56cff6": "0x3635c9adc5dea00000",
        "0x6bb2aca23fa1626d18efd6777fb97db02d8e0ae4": "0x878678326eac9000000",
        "0x6bb4a661a33a71d424d49bb5df28622ed4dffcf4": "0x222c8eb3ff66400000",
        "0x6bb50813146a9add42ee22038c9f1f7469d47f47": "0xada55474b81340000",
        "0x6bbc3f358a668dd1a11f0380f3f73108426abd4a": "0xd8d726b7177a800000",
        "0x6bbd1e719390e6b91043f8b6b9df898ea8001b34": "0x6c6c4fa6c3da588000",
        "0x6bc85acd5928722ef5095331ee88f484b8cf8357": "0x9c2007651b2500000",
        "0x6bd3e59f239fafe4776bb9bddd6bee83ba5d9d9f": "0x3635c9adc5dea00000",
        "0x6bd457ade051795df3f2465c3839aed3c5dee978": "0x3634bf39ab98788000",
        "0x6be16313643ebc91ff9bb1a2e116b854ea933a45": "0x1b1ae4d6e2ef500000",
        "0x6be7595ea0f068489a2701ec4649158ddc43e178": "0x6c6b935b8bbd400000",
        "0x6be9030ee6e2fbc491aca3de4022d301772b7b7d": "0x1731790534df20000",
        "0x6bec311ad05008b4af353c958c40bd06739a3ff3": "0x377f62a0f0a62700000",
        "0x6bf7b3c065f2c1e7c6eb092ba0d15066f393d1b8": "0x15af1d78b58c400000",
        "0x6bf86f1e2f2b8032a95c4d7738a109d3d0ed8104": "0x62a992e53a0af00000",
        "0x6c05e34e5ef2f42ed09deff1026cd66bcb6960bb": "0x6c6b935b8bbd400000",
        "0x6c08a6dc0173c7342955d1d3f2c065d62f83aec7": "0x1158e460913d00000",
        "0x6c0ae9f043c834d44271f13406593dfe094f389f": "0x52442ae133b62a8000",
        "0x6c0cc917cbee7d7c099763f14e64df7d34e2bf09": "0xd8d726b7177a80000",
        "0x6c0e712f405c59725fe829e9774bf4df7f4dd965": "0xc2868889ca68a440000",
        "0x6c101205b323d77544d6dc52af37aca3cec6f7f1": "0x21e19e0c9bab2400000",
        "0x6c15ec3520bf8ebbc820bd0ff19778375494cf9d": "0x6cb7e74867d5e60000",
        "0x6c1ddd33c81966dc8621776071a4129482f2c65f": "0x878678326eac9000000",
        "0x6c25327f8dcbb2f45e561e86e35d8850e53ab059": "0x3bcdf9bafef2f00000",
        "0x6c2e9be6d4ab450fd12531f33f028c614674f197": "0xc2127af858da700000",
        "0x6c359e58a13d4578a9338e335c67e7639f5fb4d7": "0xbd15b94fc8b280000",
        "0x6c3d18704126aa99ee3342ce60f5d4c85f1867cd": "0x2b5e3af16b1880000",
        "0x6c474bc66a54780066aa4f512eefa773abf919c7": "0x5188315f776b80000",
        "0x6c4e426e8dc005dfa3516cb8a680b02eea95ae8e": "0x487a9a304539440000",
        "0x6c52cf0895bb35e656161e4dc46ae0e96dd3e62c": "0xd8d8583fa2d52f0000",
        "0x6c5422fb4b14e6d98b6091fdec71f1f08640419d": "0x15af1d78b58c400000",
        "0x6c5c3a54cda7c2f118edba434ed81e6ebb11dd7a": "0xad78ebc5ac6200000",
        "0x6c63f84556d290bfcd99e434ee9997bfd779577a": "0x6c6b935b8bbd400000",
        "0x6c63fc85029a2654d79b2bea4de349e4524577c5": "0x23c757072b8dd00000",
        "0x6c6564e5c9c24eaaa744c9c7c968c9e2c9f1fbae": "0x499b42a21139640000",
        "0x6c67d6db1d03516c128b8ff234bf3d49b26d2941": "0x152d02c7e14af6800000",
        "0x6c67e0d7b62e2a08506945a5dfe38263339f1f22": "0x6acb3df27e1f880000",
        "0x6c6aa0d30b64721990b9504a863fa0bfb5e57da7": "0x925e06eec972b00000",
        "0x6c714a58fff6e97d14b8a5e305eb244065688bbd": "0xd8d726b7177a800000",
        "0x6c800d4b49ba07250460f993b8cbe00b266a2553": "0x1ab2cf7c9f87e20000",
        "0x6c808cabb8ff5fbb6312d9c8e84af8cf12ef0875": "0xd8d8583fa2d52f0000",
        "0x6c822029218ac8e98a260c1e064029348839875b": "0x10f97b787e1e3080000",
        "0x6c84cba77c6db4f7f90ef13d5ee21e8cfc7f8314": "0x6c6b935b8bbd400000",
        "0x6c8687e3417710bb8a93559021a1469e6a86bc77": "0x25b2da278d96b7b8000",
        "0x6c882c27732cef5c7c13a686f0a2ea77555ac289": "0x152d02c7e14af6800000",
        "0x6ca5de00817de0cedce5fd000128dede12648b3c": "0x1158e460913d00000",
        "0x6ca6a132ce1cd288bee30ec7cfeffb85c1f50a54": "0x6c6b935b8bbd400000",
        "0x6cb11ecb32d3ce829601310636f5a10cf7cf9b5f": "0x43fe8949c3801f50000",
        "0x6cc1c878fa6cde8a9a0b8311247e741e4642fe6d": "0x35659ef93f0fc40000",
        "0x6ccb03acf7f53ce87aadcc21a9932de915f89804": "0x1b1ae4d6e2ef5000000",
        "0x6cd212aee04e013f3d2abad2a023606bfb5c6ac7": "0x6c6acc67d7b1d40000",
        "0x6cd228dc712169307fe27ceb7477b48cfc8272e5": "0x434ea94db8a500000",
        "0x6ce1b0f6adc47051e8ab38b39edb4186b03babcc": "0x41799794cd24cc0000",
        "0x6ceae3733d8fa43d6cd80c1a96e8eb93109c83b7": "0x102794ad20da680000",
        "0x6d0569e5558fc7df2766f2ba15dc8aeffc5beb75": "0xd8e6001e6c302b0000",
        "0x6d120f0caae44fd94bcafe55e2e279ef96ba5c7a": "0xd8d726b7177a800000",
        "0x6d1456fff0104ee844a3314737843338d24cd66c": "0x7b06ce87fdd680000",
        "0x6d20ef9704670a500bb269b5832e859802049f01": "0x70c1cc73b00c80000",
        "0x6d2f976734b9d0070d1883cf7acab8b3e4920fc1": "0x21e19e0c9bab2400000",
        "0x6d39a9e98f81f769d73aad2cead276ac1387babe": "0x155bd9307f9fe80000",
        "0x6d3b7836a2b9d899721a4d237b522385dce8dfcd": "0x3636c25e66ece70000",
        "0x6d3f2ba856ccbb0237fa7661156b14b013f21240": "0x3635c9adc5dea00000",
        "0x6d4008b4a888a826f248ee6a0b0dfde9f93210b9": "0x127fcb8afae20d00000",
        "0x6d40ca27826d97731b3e86effcd7b92a4161fe89": "0x6c6b935b8bbd400000",
        "0x6d44974a31d187eda16ddd47b9c7ec5002d61fbe": "0x32f51edbaaa3300000",
        "0x6d4b5c05d06a20957e1748ab6df206f343f92f01": "0x21f360699bf825f8000",
        "0x6d4cbf3d8284833ae99344303e08b4d614bfda3b": "0x28a857425466f800000",
        "0x6d59b21cd0e2748804d9abe064eac2bef0c95f27": "0x6c6b935b8bbd400000",
        "0x6d63d38ee8b90e0e6ed8f192eda051b2d6a58bfd": "0x1a055690d9db80000",
        "0x6d6634b5b8a40195d949027af4828802092ceeb6": "0xa2a15d09519be00000",
        "0x6d7d1c949511f88303808c60c5ea0640fcc02683": "0x21e19e0c9bab2400000",
        "0x6d846dc12657e91af25008519c3e857f51707dd6": "0xf8d30bc92342f80000",
        "0x6d9193996b194617211106d1635eb26cc4b66c6c": "0x15aa1e7e9dd51c0000",
        "0x6d9997509882027ea947231424bedede2965d0ba": "0x6c81c7b31195e00000",
        "0x6da0ed8f1d69339f059f2a0e02471cb44fb8c3bb": "0x32bc38bb63a8160000",
        "0x6db72bfd43fef465ca5632b45aab7261404e13bf": "0x6c6b935b8bbd400000",
        "0x6dbe8abfa1742806263981371bf3d35590806b6e": "0x43c33c1937564800000",
        "0x6dc3f92baa1d21dab7382b893261a0356fa7c187": "0x5dc892aa1131c80000",
        "0x6dc7053a718616cfc78bee6382ee51add0c70330": "0x6c6b935b8bbd400000",
        "0x6dcc7e64fcafcbc2dc6c0e5e662cb347bffcd702": "0x43c33c1937564800000",
        "0x6dda5f788a6c688ddf921fa3852eb6d6c6c62966": "0x22b1c8c1227a00000",
        "0x6ddb6092779d5842ead378e21e8120fd4c6bc132": "0x6c6b935b8bbd400000",
        "0x6ddfef639155daab0a5cb4953aa8c5afaa880453": "0x62a992e53a0af00000",
        "0x6de02f2dd67efdb7393402fa9eaacbcf589d2e56": "0x40138b917edfb80000",
        "0x6de4b581385cf7fc9fe8c77d131fe2ee7724c76a": "0x7d2997733dcce40000",
        "0x6de4d15219182faf3aa2c5d4d2595ff23091a727": "0x55a6e79ccd1d300000",
        "0x6dedf62e743f4d2c2a4b87a787f5424a7aeb393c": "0x9c2007651b2500000",
        "0x6df24f6685a62f791ba337bf3ff67e91f3d4bc3a": "0x756b49d40a48180000",
        "0x6df5c84f7b909aab3e61fe0ecb1b3bf260222ad2": "0xd8d726b7177a800000",
        "0x6dff90e6dc359d2590882b1483edbcf887c0e423": "0x3635c9adc5dea00000",
        "0x6e01e4ad569c95d007ada30d5e2db12888492294": "0xd8d726b7177a800000",
        "0x6e073b66d1b8c66744d88096a8dd99ec7e0228da": "0xd8d726b7177a800000",
        "0x6e0ee70612c976287d499ddfa6c0dcc12c06deea": "0x70bd5b95621460000",
        "0x6e12b51e225b4a4372e59ad7a2a1a13ea3d3a137": "0x30046c8cc775f040000",
        "0x6e1a046caf5b4a57f4fd4bc173622126b4e2fd86": "0x61093d7c2c6d380000",
        "0x6e1ea4b183e252c9bb7767a006d4b43696cb8ae9": "0xff3783c85eed08000",
        "0x6e255b700ae7138a4bacf22888a9e2c00a285eec": "0xd8d726b7177a800000",
        "0x6e270ad529f1f0b8d9cb6d2427ec1b7e2dc64a74": "0xad78ebc5ac6200000",
        "0x6e2eab85dc89fe29dc0aa1853247dab43a523d56": "0x4563918244f400000",
        "0x6e3a51db743d334d2fe88224b5fe7c008e80e624": "0x5bf0ba6634f680000",
        "0x6e4c2ab7db026939dbd3bc68384af660a61816b2": "0x90d972f32323c0000",
        "0x6e4d2e39c8836629e5b487b1918a669aebdd9536": "0x3635c9adc5dea00000",
        "0x6e5c2d9b1c546a86eefd5d0a5120c9e4e730190e": "0xad201a6794ff80000",
        "0x6e60aee1a78f8eda8b424c73e353354ae67c3042": "0xbd35a48d9919e60000",
        "0x6e64e6129f224e378c0e6e736a7e7a06c211e9ec": "0x3635c9adc5dea00000",
        "0x6e6d5bbbb9053b89d744a27316c2a7b8c09b547d": "0x3152710a023e6d8000",
        "0x6e72b2a1186a8e2916543b1cb36a68870ea5d197": "0xa1544be879ea80000",
        "0x6e761eaa0f345f777b5441b73a0fa5b56b85f22d": "0x6c6b935b8bbd400000",
        "0x6e79edd4845b076e4cd88d188b6e432dd93f35aa": "0x33c5499031720c0000",
        "0x6e8212b722afd408a7a73ed3e2395ee6454a0330": "0x89e917994f71c0000",
        "0x6e84876dbb95c40b6656e42ba9aea08a993b54dc": "0x3bbc60e3b6cbbe0000",
        "0x6e84c2fd18d8095714a96817189ca21cca62bab1": "0x127b6c702621cd8000",
        "0x6e866d032d405abdd65cf651411d803796c22311": "0x6c6b935b8bbd400000",
        "0x6e899e59a9b41ab7ea41df7517860f2acb59f4fd": "0x43c33c1937564800000",
        "0x6e89c51ea6de13e06cdc748b67c4410fe9bcab03": "0xd8d726b7177a800000",
        "0x6e8a26689f7a2fdefd009cbaaa5310253450daba": "0x6f213717bad8d30000",
        "0x6e96faeda3054302c45f58f161324c99a3eebb62": "0x1158e460913d00000",
        "0x6eb0a5a9ae96d22cf01d8fd6483b9f38f08c2c8b": "0xd8d726b7177a800000",
        "0x6eb3819617404058268f0c3cff3596bfe9148c1c": "0x5a87e7d7f5f6580000",
        "0x6eb5578a6bb7c32153195b0d8020a6914852c059": "0x8bc2abf40221f4800000",
        "0x6ebb5e6957aa821ef659b6018a393a504cae4450": "0x6c6b935b8bbd400000",
        "0x6ebcf9957f5fc5e985add475223b04b8c14a7aed": "0x5dc892aa1131c80000",
        "0x6ec3659571b11f889dd439bcd4d67510a25be57e": "0x6aaf7c8516d0c0000",
        "0x6ec89b39f9f5276a553e8da30e6ec17aa47eefc7": "0x18424f5f0b1b4e0000",
        "0x6ec96d13bdb24dc7a557293f029e02dd74b97a55": "0xd8d726b7177a800000",
        "0x6ecaefa6fc3ee534626db02c6f85a0c395571e77": "0x2086ac351052600000",
        "0x6ed2a12b02f8c688c7b5d3a6ea14d63687dab3b6": "0x6c6b935b8bbd400000",
        "0x6ed884459f809dfa1016e770edaf3e9fef46fa30": "0xb852d6782093f10000",
        "0x6edf7f5283725c953ee64317f66188af1184b033": "0x1b464311d45a6880000",
        "0x6ee8aad7e0a065d8852d7c3b9a6e5fdc4bf50c00": "0x1158e460913d00000",
        "0x6eefdc850e87b715c72791773c0316c3559b58a4": "0xd8d726b7177a800000",
        "0x6ef9e8c9b6217d56769af97dbb1c8e1b8be799d2": "0x9ddc1e3b901180000",
        "0x6efba8fb2ac5b6730729a972ec224426a287c3ad": "0xf5985fbcbe1680000",
        "0x6efd90b535e00bbd889fda7e9c3184f879a151db": "0x22385a827e815500000",
        "0x6f051666cb4f7bd2b1907221b829b555d7a3db74": "0x5f68e8131ecf800000",
        "0x6f0edd23bcd85f6015f9289c28841fe04c83efeb": "0x10910d4cdc9f60000",
        "0x6f137a71a6f197df2cbbf010dcbd3c444ef5c925": "0x6c6b935b8bbd400000",
        "0x6f176065e88e3c6fe626267d18a088aaa4db80bc": "0xbed1d0263d9f000000",
        "0x6f18ec767e320508195f1374500e3f2e125689ff": "0x3635c9adc5dea00000",
        "0x6f1f4907b8f61f0c51568d692806b382f50324f5": "0x6c6b935b8bbd400000",
        "0x6f24c9af2b763480515d1b0951bb77a540f1e3f9": "0x6acb3df27e1f880000",
        "0x6f2576da4de283bbe8e3ee69ddd66e5e711db3f5": "0x44591d67fecc800000",
        "0x6f29bb375be5ed34ed999bb830ee2957dde76d16": "0x6c6b935b8bbd400000",
        "0x6f2a31900e240395b19f159c1d00dfe4d898ebdf": "0x6c660645aa47180000",
        "0x6f2a42e6e033d01061131929f7a6ee1538021e52": "0x6c6b935b8bbd400000",
        "0x6f39cc37caaa2ddc9b610f6131e0619fae772a3c": "0x1b1ae4d6e2ef500000",
        "0x6f44ca09f0c6a8294cbd519cdc594ad42c67579f": "0x2b5e3af16b1880000",
        "0x6f50929777824c291a49c46dc854f379a6bea080": "0x138400eca364a00000",
        "0x6f6cf20649a9e973177ac67dbadee4ebe5c7bdda": "0x11363297d01a8600000",
        "0x6f791d359bc3536a315d6382b88311af8ed6da47": "0x4fcc1a89027f00000",
        "0x6f794dbdf623daa6e0d00774ad6962737c921ea4": "0x6c6b935b8bbd400000",
        "0x6f7ac681d45e418fce8b3a1db5bc3be6f06c9849": "0x6c6b935b8bbd400000",
        "0x6f81f3abb1f933b1df396b8e9cc723a89b7c9806": "0xf2dc7d47f15600000",
        "0x6f8f0d15cc96fb7fe94f1065bc6940f8d12957b2": "0x3635c9adc5dea00000",
        "0x6f92d6e4548c78996509ee684b2ee29ba3c532b4": "0x3635c9adc5dea00000",
        "0x6fa60df818a5446418b1bbd62826e0b9825e1318": "0x2cb92cc8f6714400000",
        "0x6fa6388d402b30afe59934c3b9e13d1186476018": "0x24521e2a3017b80000",
        "0x6fa72015fa78696efd9a86174f7f1f21019286b1": "0x487a9a304539440000",
        "0x6fc25e7e00ca4f60a9fe6f28d1fde3542e2d1079": "0x2aef353bcddd600000",
        "0x6fc53662371dca587b59850de78606e2359df383": "0x9c2007651b2500000",
        "0x6fcc2c732bdd934af6ccd16846fb26ef89b2aa9b": "0x21e2b1d42261d490000",
        "0x6fd4e0f3f32bee6d3767fdbc9d353a6d3aab7899": "0x25b064a875ea940000",
        "0x6fd947d5a73b175008ae6ee8228163da289b167d": "0x65a4da25d3016c00000",
        "0x6fd98e563d12ce0fd60f4f1f850ae396a9823c02": "0x445be3f2ef87940000",
        "0x6fddbd9bca66e28765c2162c8433548c1052ed11": "0x1184429b82a818800000",
        "0x6ff5d361b52ad0b68b1588607ec304ae5665fc98": "0x692ae8897081d00000",
        "0x6ff6cc90d649de4e96cffee1077a5b302a848dcb": "0x18ce79c78802c0000",
        "0x6ffe5cf82cc9ea5e36cad7c2974ce7249f3749e6": "0x692ae8897081d00000",
        "0x7005a772282b1f62afda63f89b5dc6ab64c84cb9": "0x3cfc82e37e9a7400000",
        "0x700711e311bb947355f755b579250ca7fd765a3e": "0x61093d7c2c6d380000",
        "0x7010be2df57bd0ab9ae8196cd50ab0c521aba9f9": "0x6acb3df27e1f880000",
        "0x7023c70956e04a92d70025aad297b539af355869": "0x6c6b935b8bbd400000",
        "0x7025965d2b88da197d4459be3dc9386344cc1f31": "0x6cb7e74867d5e60000",
        "0x702802f36d00250fab53adbcd696f0176f638a49": "0x6c6b935b8bbd400000",
        "0x704819d2e44d6ed1da25bfce84c49fcca25613e5": "0x15af1d78b58c400000",
        "0x704a6eb41ba34f13addde7d2db7df04915c7a221": "0x62a992e53a0af00000",
        "0x704ab1150d5e10f5e3499508f0bf70650f028d4b": "0xd8d726b7177a800000",
        "0x704ae21d762d6e1dde28c235d13104597236db1a": "0x6c6b935b8bbd400000",
        "0x704d243c2978e46c2c86adbecd246e3b295ff633": "0x6d121bebf795f00000",
        "0x704d5de4846d39b53cd21d1c49f096db5c19ba29": "0x83d6c7aab63600000",
        "0x705ddd38355482b8c7d3b515bda1500dd7d7a817": "0x15af1d78b58c400000",
        "0x70616e2892fa269705b2046b8fe3e72fa55816d3": "0x43c33c1937564800000",
        "0x70670fbb05d33014444b8d1e8e7700258b8caa6d": "0x6c6b935b8bbd400000",
        "0x7081fa6baad6cfb7f51b2cca16fb8970991a64ba": "0xcaec005f6c0f68000",
        "0x7085ae7e7e4d932197b5c7858c00a3674626b7a5": "0x14542ba12a337c00000",
        "0x7086b4bde3e35d4aeb24b825f1a215f99d85f745": "0x6c68ccd09b022c0000",
        "0x708a2af425ceb01e87ffc1be54c0f532b20eacd6": "0x745d483b1f5a18000",
        "0x708ea707bae4357f1ebea959c3a250acd6aa21b3": "0x1b1ae4d6e2ef500000",
        "0x708fa11fe33d85ad1befcbae3818acb71f6a7d7e": "0xfc936392801c0000",
        "0x7091303116d5f2389b23238b4d656a8596d984d3": "0x3b4e7e80aa58330000",
        "0x7099d12f6ec656899b049a7657065d62996892c8": "0x15af1d78b58c400000",
        "0x709fe9d2c1f1ce42207c9585044a60899f35942f": "0x6c6b935b8bbd400000",
        "0x70a03549aa6168e97e88a508330a5a0bea74711a": "0x487a9a304539440000",
        "0x70a4067d448cc25dc8e70e651cea7cf84e92109e": "0x98a7d9b8314c00000",
        "0x70ab34bc17b66f9c3b63f151274f2a727c539263": "0x6c6b935b8bbd400000",
        "0x70c213488a020c3cfb39014ef5ba6404724bcaa3": "0x692ae8897081d00000",
        "0x70d25ed2c8ada59c088cf70dd22bf2db93acc18a": "0x39474545e4adbc0000",
        "0x70e5e9da735ff077249dcb9aaf3db2a48d9498c0": "0x3635c9adc5dea00000",
        "0x70fee08b00c6c2c04a3c625c1ff77caf1c32df01": "0xad78ebc5ac6200000",
        "0x7101bd799e411cde14bdfac25b067ac890eab8e8": "0x4e9b8aae48de470000",
        "0x7109dd011d15f3122d9d3a27588c10d77744508b": "0x6c6b935b8bbd400000",
        "0x710b0274d712c77e08a5707d6f3e70c0ce3d92cf": "0x15af1d78b58c4000000",
        "0x710be8fd5e2918468be2aabea80d828435d79612": "0xf43fc2c04ee00000",
        "0x71135d8f05963c905a4a07922909235a896a52ea": "0xa2a15d09519be00000",
        "0x711ecf77d71b3d0ea95ce4758afecdb9c131079d": "0x29331e6558f0e00000",
        "0x71213fca313404204ecba87197741aa9dfe96338": "0x340aad21b3b700000",
        "0x712b76510214dc620f6c3a1dd29aa22bf6d214fb": "0x14542ba12a337c00000",
        "0x712ff7370a13ed360973fedc9ff5d2c93a505e9e": "0xd5967be4fc3f100000",
        "0x7133843a78d939c69d4486e10ebc7b602a349ff7": "0x11d5cacce21f840000",
        "0x7148aef33261d8031fac3f7182ff35928daf54d9": "0xde42ee1544dd900000",
        "0x7163758cbb6c4c525e0414a40a049dcccce919bb": "0xad78ebc5ac6200000",
        "0x7168b3bb8c167321d9bdb023a6e9fd11afc9afd9": "0x61093d7c2c6d380000",
        "0x7169724ee72271c534cad6420fb04ee644cb86fe": "0x163c2b40dba5520000",
        "0x716ad3c33a9b9a0a18967357969b94ee7d2abc10": "0x1a2117fe412a480000",
        "0x716ba01ead2a91270635f95f25bfaf2dd610ca23": "0x979e7012056aa780000",
        "0x716d50cca01e938500e6421cc070c3507c67d387": "0x6c6b935b8bbd400000",
        "0x71762c63678c18d1c6378ce068e666381315147e": "0x6c6b935b8bbd400000",
        "0x71784c105117c1f68935797fe159abc74e43d16a": "0x6c81c7b31195e00000",
        "0x7179726f5c71ae1b6d16a68428174e6b34b23646": "0x18ea250097cbaf60000",
        "0x717cf9beab3638308ded7e195e0c86132d163fed": "0x3326ee6f865f4220000",
        "0x7180b83ee5574317f21c8072b191d895d46153c3": "0x18efc84ad0c7b00000",
        "0x71946b7117fc915ed107385f42d99ddac63249c2": "0x6c6b935b8bbd400000",
        "0x719e891fbcc0a33e19c12dc0f02039ca05b801df": "0x14f5538463a1b540000",
        "0x71c7230a1d35bdd6819ed4b9a88e94a0eb0786dd": "0xeca08b353d24140000",
        "0x71d2cc6d02578c65f73c575e76ce8fbcfadcf356": "0x3ecc078688a480000",
        "0x71d9494e50c5dd59c599dba3810ba1755e6537f0": "0xd8d726b7177a800000",
        "0x71e38ff545f30fe14ca863d4f5297fd48c73a5ce": "0xc2127af858da700000",
        "0x71ea5b11ad8d29b1a4cb67bf58ca6c9f9c338c16": "0x56bc75e2d631000000",
        "0x71ec3aec3f8f9221f9149fede06903a0f9a232f2": "0xad78ebc5ac6200000",
        "0x71f2cdd1b046e2da2fbb5a26723422b8325e25a3": "0x56b394263a40c0000",
        "0x71fa22cc6d33206b7d701a163a0dab31ae4d31d6": "0x57473d05dabae80000",
        "0x7201d1c06920cd397ae8ad869bcda6e47ffb1b5a": "0x1158e460913d00000",
        "0x72072a0ef1cff3d567cdd260e708ddc11cbc9a31": "0x56bc75e2d63100000",
        "0x72094f3951ffc9771dced23ada080bcaf9c7cca7": "0x14542ba12a337c00000",
        "0x720994dbe56a3a95929774e20e1fe525cf3704e4": "0x1b1ae4d6e2ef5000000",
        "0x720e6b22bf430966fa32b6acb9a506eebf662c61": "0x83d6c7aab63600000",
        "0x721158be5762b119cc9b2035e88ee4ee78f29b82": "0x21e19e0c9bab2400000",
        "0x721f9d17e5a0e74205947aeb9bc6a7938961038f": "0x2d041d705a2c60000",
        "0x7222fec7711781d26eaa4e8485f7aa3fac442483": "0x18b84570022a200000",
        "0x72393d37b451effb9e1ff3b8552712e2a970d8c2": "0x35659ef93f0fc40000",
        "0x723d8baa2551d2addc43c21b45e8af4ca2bfb2c2": "0x5f68e8131ecf800000",
        "0x72402300e81d146c2e644e2bbda1da163ca3fb56": "0x17b7883c06916600000",
        "0x72480bede81ad96423f2228b5c61be44fb523100": "0x15af1d78b58c4000000",
        "0x724ce858857ec5481c86bd906e83a04882e5821d": "0xa2a15d09519be00000",
        "0x726a14c90e3f84144c765cffacba3e0df11b48be": "0x21e19e0c9bab2400000",
        "0x7283cd4675da58c496556151dafd80c7f995d318": "0x29331e6558f0e00000",
        "0x7286e89cd9de8f7a8a00c86ffdb53992dd9251d1": "0x692ae8897081d00000",
        "0x728f9ab080157db3073156dbca1a169ef3179407": "0x1b1ae4d6e2ef500000",
        "0x7294c918b1aefb4d25927ef9d799e71f93a28e85": "0xaadec983fcff40000",
        "0x7294ec9da310bc6b4bbdf543b0ef45abfc3e1b4d": "0x4a89f54ef0121c00000",
        "0x729aad4627744e53f5d66309aa74448b3acdf46f": "0x6c6b935b8bbd400000",
        "0x72a2fc8675feb972fa41b50dffdbbae7fa2adfb7": "0x9ab4fc67b528c80000",
        "0x72a8260826294726a75bf39cd9aa9e07a3ea14cd": "0x6c6b935b8bbd400000",
        "0x72b05962fb2ad589d65ad16a22559eba1458f387": "0x73f75d1a085ba0000",
        "0x72b5633fe477fe542e742facfd690c137854f216": "0x5a87e7d7f5f6580000",
        "0x72b7a03dda14ca9c661a1d469fd33736f673c8e8": "0x6c6b935b8bbd400000",
        "0x72b904440e90e720d6ac1c2ad79c321dcc1c1a86": "0x54069233bf7f780000",
        "0x72b90a4dc097239492c5b9777dcd1e52ba2be2c2": "0x14542ba12a337c00000",
        "0x72bb27cb99f3e2c2cf90a98f707d30e4a201a071": "0x58e7926ee858a00000",
        "0x72c083beadbdc227c5fb43881597e32e83c26056": "0x43c33c1937564800000",
        "0x72cd048a110574482983492dfb1bd27942a696ba": "0x6c6b935b8bbd400000",
        "0x72d03d4dfab3500cf89b86866f15d4528e14a195": "0xf34b82fd8e91200000",
        "0x72dabb5b6eed9e99be915888f6568056381608f8": "0xb4c96c52cb4fe8000",
        "0x72fb49c29d23a18950c4b2dc0ddf410f532d6f53": "0x6c6b935b8bbd400000",
        "0x72feaf124579523954645b7fafff0378d1c8242e": "0x3635c9adc5dea00000",
        "0x7301dc4cf26d7186f2a11bf8b08bf229463f64a3": "0x6c6b935b8bbd400000",
        "0x730447f97ce9b25f22ba1afb36df27f9586beb9b": "0x2c73c937742c500000",
        "0x7306de0e288b56cfdf987ef0d3cc29660793f6dd": "0x1b8abfb62ec8f60000",
        "0x730d8763c6a4fd824ab8b859161ef7e3a96a1200": "0x43c33c1937564800000",
        "0x73128173489528012e76b41a5e28c68ba4e3a9d4": "0x3635c9adc5dea00000",
        "0x7313461208455455465445a459b06c3773b0eb30": "0x6c6b935b8bbd400000",
        "0x732fead60f7bfdd6a9dec48125e3735db1b6654f": "0x1158e460913d00000",
        "0x734223d27ff23e5906caed22595701bb34830ca1": "0x6c6b935b8bbd400000",
        "0x73473e72115110d0c3f11708f86e77be2bb0983c": "0x1158e460913d00000",
        "0x7352586d021ad0cf77e0e928404a59f374ff4582": "0xb8507a820728200000",
        "0x73550beb732ba9ddafda7ae406e18f7feb0f8bb2": "0x97c9ce4cf6d5c00000",
        "0x735b97f2fc1bd24b12076efaf3d1288073d20c8c": "0x1158e460913d00000",
        "0x735e328666ed5637142b3306b77ccc5460e72c3d": "0x6ab8f37879c9910000",
        "0x7363cd90fbab5bb8c49ac20fc62c398fe6fb744c": "0x6c6b935b8bbd400000",
        "0x736b44503dd2f6dd5469ff4c5b2db8ea4fec65d0": "0x1104ee759f21e30000",
        "0x736bf1402c83800f893e583192582a134eb532e9": "0x21e19d293c01f260000",
        "0x738ca94db7ce8be1c3056cd6988eb376359f3353": "0x5665b96cf35acf00000",
        "0x73914b22fc2f131584247d82be4fecbf978ad4ba": "0x6c6b935b8bbd400000",
        "0x73932709a97f02c98e51b091312865122385ae8e": "0x4d853c8f8908980000",
        "0x7393cbe7f9ba2165e5a7553500b6e75da3c33abf": "0x56bc75e2d63100000",
        "0x73b4d499de3f38bf35aaf769a6e318bc6d123692": "0x6c6b935b8bbd400000",
        "0x73bedd6fda7ba3272185087b6351fc133d484e37": "0x11226bf9dce59780000",
        "0x73bfe7710f31cab949b7a2604fbf5239cee79015": "0x6c6b935b8bbd400000",
        "0x73cf80ae9688e1580e68e782cd0811f7aa494d2c": "0x1a4aba225c207400000",
        "0x73d7269ff06c9ffd33754ce588f74a966abbbbba": "0x165c96647b38a200000",
        "0x73d8fee3cb864dce22bb26ca9c2f086d5e95e63b": "0x3635c9adc5dea00000",
        "0x73df3c3e7955f4f2d859831be38000b1076b3884": "0x6acb3df27e1f880000",
        "0x73e4a2b60cf48e8baf2b777e175a5b1e4d0c2d8f": "0x56bc75e2d63100000",
        "0x740af1eefd3365d78ba7b12cb1a673e06a077246": "0x42bf06b78ed3b500000",
        "0x740bfd52e01667a3419b029a1b8e45576a86a2db": "0x38ebad5cdc902800000",
        "0x740f641614779dcfa88ed1d425d60db42a060ca6": "0x3622c6760810570000",
        "0x7412c9bc30b4df439f023100e63924066afd53af": "0x1b1ae4d6e2ef500000",
        "0x741693c30376508513082020cc2b63e9fa92131b": "0x410d586a20a4c00000",
        "0x7421ce5be381738ddc83f02621974ff0686c79b8": "0x58788cb94b1d800000",
        "0x74316adf25378c10f576d5b41a6f47fa98fce33d": "0x1238131e5c7ad50000",
        "0x743651b55ef8429df50cf81938c2508de5c8870f": "0x6c6b935b8bbd400000",
        "0x743de50026ca67c94df54f066260e1d14acc11ac": "0x6c6b935b8bbd400000",
        "0x7445202f0c74297a004eb3726aa6a82dd7c02fa1": "0x6c6b935b8bbd400000",
        "0x744b03bba8582ae5498e2dc22d19949467ab53fc": "0x1b1ae4d6e2ef500000",
        "0x744c0c77ba7f236920d1e434de5da33e48ebf02c": "0x6acb3df27e1f880000",
        "0x7450ff7f99eaa9116275deac68e428df5bbcd8b9": "0x6c6b935b8bbd400000",
        "0x7456c5b2c5436e3e571008933f1805ccfe34e9ec": "0x3635c9adc5dea00000",
        "0x745ad3abc6eeeb2471689b539e789ce2b8268306": "0x3d4194bea011928000",
        "0x745aecbaf9bb39b74a67ea1ce623de368481baa6": "0x21e19e0c9bab2400000",
        "0x745ccf2d819edbbddea8117b5c49ed3c2a066e93": "0xd8d726b7177a800000",
        "0x7462c89caa9d8d7891b2545def216f7464d5bb21": "0x5eaed54a28b310000",
        "0x74648caac748dd135cd91ea14c28e1bd4d7ff6ae": "0xa80d24677efef00000",
        "0x7471f72eeb300624eb282eab4d03723c649b1b58": "0x1b1ae4d6e2ef5000000",
        "0x747abc9649056d3926044d28c3ad09ed17b67d70": "0x10f0dbae61009528000",
        "0x747ff7943b71dc4dcdb1668078f83dd7cc4520c2": "0x340aad21b3b700000",
        "0x7480de62254f2ba82b578219c07ba5be430dc3cb": "0x17da3a04c7b3e000000",
        "0x7484d26becc1eea8c6315ec3ee0a450117dc86a0": "0x28a857425466f800000",
        "0x74863acec75d03d53e860e64002f2c165e538377": "0x3635c9adc5dea00000",
        "0x7489cc8abe75cda4ef0d01cef2605e47eda67ab1": "0x73f75d1a085ba0000",
        "0x748c285ef1233fe4d31c8fb1378333721c12e27a": "0x6c6b935b8bbd400000",
        "0x749087ac0f5a97c6fad021538bf1d6cda18e0daa": "0x3635c9adc5dea00000",
        "0x7495ae78c0d90261e2140ef2063104731a60d1ed": "0x1db50718925210000",
        "0x749a4a768b5f237248938a12c623847bd4e688dc": "0x3e733628714200000",
        "0x749ad6f2b5706bbe2f689a44c4b640b58e96b992": "0x56bc75e2d63100000",
        "0x74a17f064b344e84db6365da9591ff1628257643": "0x1158e460913d00000",
        "0x74aeec915de01cc69b2cb5a6356feea14658c6c5": "0xc9a95ee2986520000",
        "0x74afe54902d615782576f8baac13ac970c050f6e": "0x9a1aaa3a9fba70000",
        "0x74b7e0228baed65957aebb4d916d333aae164f0e": "0x6c6b935b8bbd400000",
        "0x74bc4a5e2045f4ff8db184cf3a9b0c065ad807d2": "0x6c6b935b8bbd400000",
        "0x74bce9ec38362d6c94ccac26d5c0e13a8b3b1d40": "0x363526410442f50000",
        "0x74bf7a5ab59293149b5c60cf364263e5ebf1aa0d": "0x6470c3e771e3c0000",
        "0x74c73c90528a157336f1e7ea20620ae53fd24728": "0x1e63a2e538f16e30000",
        "0x74d1a4d0c7524e018d4e06ed3b648092b5b6af2c": "0x2b5e3af16b1880000",
        "0x74d366b07b2f56477d7c7077ac6fe497e0eb6559": "0x10f0cf064dd59200000",
        "0x74d37a51747bf8b771bfbf43943933d100d21483": "0x3635c9adc5dea00000",
        "0x74d671d99cbea1ab57906375b63ff42b50451d17": "0x3635c9adc5dea00000",
        "0x74ebf4425646e6cf81b109ce7bf4a2a63d84815f": "0x22b1c8c1227a00000",
        "0x74ed33acf43f35b98c9230b9e6642ecb5330839e": "0x24f6dffb498d280000",
        "0x74ef2869cbe608856045d8c2041118579f2236ea": "0x33cd64591956e0000",
        "0x74fc5a99c0c5460503a13b0509459da19ce7cd90": "0xad78ebc5ac6200000",
        "0x750bbb8c06bbbf240843cc75782ee02f08a97453": "0x2d43f3ebfafb2c0000",
        "0x7514adbdc63f483f304d8e94b67ff3309f180b82": "0x21c4a06e2d13598000",
        "0x7517f16c28d132bb40e3ba36c6aef131c462da17": "0xfc936392801c0000",
        "0x751a2ca34e7187c163d28e3618db28b13c196d26": "0x1b1ae4d6e2ef500000",
        "0x751abcb6cc033059911815c96fd191360ab0442d": "0x1b1ae4d6e2ef5000000",
        "0x7526e482529f0a14eec98871dddd0e721b0cd9a2": "0x1158e460913d00000",
        "0x7529f3797bb6a20f7ea6492419c84c867641d81c": "0x6c6b935b8bbd400000",
        "0x752a5ee232612cd3005fb26e5b597de19f776be6": "0x127fcb8afae20d00000",
        "0x752c9febf42f66c4787bfa7eb17cf5333bba5070": "0x6a99f2b54fdd580000",
        "0x7539333046deb1ef3c4daf50619993f444e1de68": "0x40138b917edfb80000",
        "0x7553aa23b68aa5f57e135fe39fdc235eaca8c98c": "0x3635c9adc5dea00000",
        "0x755a60bf522fbd8fff9723446b7e343a7068567e": "0x43c33c1937564800000",
        "0x755f587e5efff773a220726a13d0f2130d9f896b": "0x3635c9adc5dea00000",
        "0x75621865b6591365606ed378308c2d1def4f222c": "0xa80d24677efef00000",
        "0x75636cdb109050e43d5d6ec47e359e218e857eca": "0x4d8b2276c8962280000",
        "0x7566496162ba584377be040a4f87777a707acaeb": "0xd8d726b7177a800000",
        "0x756b84eb85fcc1f4fcdcc2b08db6a86e135fbc25": "0xae8e7a0bb575d00000",
        "0x756f45e3fa69347a9a973a725e3c98bc4db0b5a0": "0xad78ebc5ac6200000",
        "0x757b65876dbf29bf911d4f0692a2c9beb1139808": "0xdf93a59337d6dd8000",
        "0x757fa55446c460968bb74b5ebca96c4ef2c709c5": "0x3708baed3d68900000",
        "0x75804aac64b4199083982902994d9c5ed8828f11": "0x1e3d07b0a620e40000",
        "0x7592c69d067b51b6cc639d1164d5578c60d2d244": "0x1158e460913d00000",
        "0x75abe5270f3a78ce007cf37f8fbc045d489b7bb1": "0x6c6acc67d7b1d40000",
        "0x75ac547017134c04ae1e11d60e63ec04d18db4ef": "0x14542ba12a337c00000",
        "0x75b0e9c942a4f0f6f86d3f95ff998022fa67963b": "0x50c5e761a444080000",
        "0x75b95696e8ec4510d56868a7c1a735c68b244890": "0x15af1d78b58c4000000",
        "0x75be8ff65e5788aec6b2a52d5fa7b1e7a03ba675": "0x3abcdc5343d740000",
        "0x75c11d024d12ae486c1095b7a7b9c4af3e8edeb9": "0x1158e460913d00000",
        "0x75c1ad23d23f24b384d0c3149177e86697610d21": "0x15c5bcd6c288bbd0000",
        "0x75c2ffa1bef54919d2097f7a142d2e14f9b04a58": "0x90f358504032a10000",
        "0x75d67ce14e8d29e8c2ffe381917b930b1aff1a87": "0xa2a15d09519be00000",
        "0x75de7e9352e90b13a59a5878ffecc7831cac4d82": "0x9489237adb9a500000",
        "0x75f7539d309e9039989efe2e8b2dbd865a0df088": "0x855b5ba65c84f00000",
        "0x7608f437b31f18bc0b64d381ae86fd978ed7b31f": "0x2b5e3af16b1880000",
        "0x760ff3354e0fde938d0fb5b82cef5ba15c3d2916": "0x21e19e0c9bab2400000",
        "0x761a6e362c97fbbd7c5977acba2da74687365f49": "0x9f74ae1f953d00000",
        "0x761e6caec189c230a162ec006530193e67cf9d19": "0x6c6b935b8bbd400000",
        "0x761f8a3a2af0a8bdbe1da009321fb29764eb62a1": "0x21e19e0c9bab2400000",
        "0x762998e1d75227fced7a70be109a4c0b4ed86414": "0x1158e460913d00000",
        "0x762d6f30dab99135e4eca51d5243d6c8621102d5": "0xf498941e664280000",
        "0x76331e30796ce664b2700e0d4153700edc869777": "0x6c6b935b8bbd400000",
        "0x763886e333c56feff85be3951ab0b889ce262e95": "0x6c6b935b8bbd400000",
        "0x763a7cbab70d7a64d0a7e52980f681472593490c": "0x2086ac351052600000",
        "0x763eece0b08ac89e32bfa4bece769514d8cb5b85": "0xd8d726b7177a800000",
        "0x7640a37f8052981515bce078da93afa4789b5734": "0x6c6b935b8bbd400000",
        "0x7641f7d26a86cddb2be13081810e01c9c83c4b20": "0xb98bc829a6f90000",
        "0x764692cccb33405dd0ab0c3379b49caf8e6221ba": "0x1158e460913d00000",
        "0x764d5212263aff4a2a14f031f04ec749dc883e45": "0x6449e84e47a8a80000",
        "0x764fc46d428b6dbc228a0f5f55c9508c772eab9f": "0x581767ba6189c400000",
        "0x76506eb4a780c951c74a06b03d3b8362f0999d71": "0x1b1ae4d6e2ef500000",
        "0x765be2e12f629e6349b97d21b62a17b7c830edab": "0x14542ba12a337c00000",
        "0x76628150e2995b5b279fc83e0dd5f102a671dd1c": "0x878678326eac9000000",
        "0x766b3759e8794e926dac473d913a8fb61ad0c2c9": "0x4b06dbbb40f4a0000",
        "0x7670b02f2c3cf8fd4f4730f3381a71ea431c33c7": "0xe7eeba3410b740000",
        "0x767a03655af360841e810d83f5e61fb40f4cd113": "0x35659ef93f0fc40000",
        "0x767ac690791c2e23451089fe6c7083fe55deb62b": "0x2c73c937742c500000",
        "0x767fd7797d5169a05f7364321c19843a8c348e1e": "0x104e70464b1580000",
        "0x76846f0de03b5a76971ead298cdd08843a4bc6c6": "0xd71b0fe0a28e0000",
        "0x768498934e37e905f1d0e77b44b574bcf3ec4ae8": "0x43c33c1937564800000",
        "0x768ce0daa029b7ded022e5fc574d11cde3ecb517": "0x1174a5cdf88bc80000",
        "0x7693bdeb6fc82b5bca721355223175d47a084b4d": "0x4a89f54ef0121c00000",
        "0x76aaf8c1ac012f8752d4c09bb46607b6651d5ca8": "0x1158e460913d00000",
        "0x76ab87dd5a05ad839a4e2fc8c85aa6ba05641730": "0x6c6b935b8bbd400000",
        "0x76afc225f4fa307de484552bbe1d9d3f15074c4a": "0xa290b5c7ad39680000",
        "0x76becae4a31d36f3cb577f2a43594fb1abc1bb96": "0x543a9ce0e1332f00000",
        "0x76c27535bcb59ce1fa2d8c919cabeb4a6bba01d1": "0x6c6b935b8bbd400000",
        "0x76ca22bcb8799e5327c4aa2a7d0949a1fcce5f29": "0x52a03f228c5ae20000",
        "0x76cac488111a4fd595f568ae3a858770fc915d5f": "0xad78ebc5ac6200000",
        "0x76cb9c8b69f4387675c48253e234cb7e0d74a426": "0x190f4482eb91dae0000",
        "0x76f83ac3da30f7092628c7339f208bfc142cb1ee": "0x9a18ffe7427d640000",
        "0x76f9ad3d9bbd04ae055c1477c0c35e7592cb2a20": "0x8833f11e3458f200000",
        "0x76ffc157ad6bf8d56d9a1a7fddbc0fea010aabf4": "0x3635c9adc5dea00000",
        "0x77028e409cc43a3bd33d21a9fc53ec606e94910e": "0xd255d112e103a00000",
        "0x770c2fb2c4a81753ac0182ea460ec09c90a516f8": "0x1158e460913d00000",
        "0x770d98d31b4353fceee8560c4ccf803e88c0c4e0": "0x2086ac351052600000",
        "0x7713ab8037411c09ba687f6f9364f0d3239fac28": "0x21e19e0c9bab2400000",
        "0x771507aeee6a255dc2cd9df55154062d0897b297": "0x121ea68c114e510000",
        "0x7719888795ad745924c75760ddb1827dffd8cda8": "0x6c6b4c4da6ddbe0000",
        "0x7727af101f0aaba4d23a1cafe17c6eb5dab1c6dc": "0x6c6b935b8bbd400000",
        "0x772c297f0ad194482ee8c3f036bdeb01c201d5cc": "0xad78ebc5ac6200000",
        "0x77306ffe2e4a8f3ca826c1a249f7212da43aeffd": "0x43c33c1937564800000",
        "0x773141127d8cf318aebf88365add3d5527d85b6a": "0x3636d7af5ec98e0000",
        "0x7746b6c6699c8f34ca2768a820f1ffa4c207fe05": "0xd8d8583fa2d52f0000",
        "0x7751f363a0a7fd0533190809ddaf9340d8d11291": "0x1158e460913d00000",
        "0x7757a4b9cc3d0247ccaaeb9909a0e56e1dd6dcc2": "0x1158e460913d00000",
        "0x775c10c93e0db7205b2643458233c64fc33fd75b": "0x6c6b935b8bbd400000",
        "0x77617ebc4bebc5f5ddeb1b7a70cdeb6ae2ffa024": "0x6acb3df27e1f880000",
        "0x776943ffb2ef5cdd35b83c28bc046bd4f4677098": "0xa2a15d09519be00000",
        "0x77701e2c493da47c1b58f421b5495dee45bea39b": "0x148f649cf6142a58000",
        "0x77798f201257b9c35204957057b54674aefa51df": "0x813ca56906d340000",
        "0x778c43d11afe3b586ff374192d96a7f23d2b9b7f": "0x8bb4fcfa3b7d6b8000",
        "0x778c79f4de1953ebce98fe8006d53a81fb514012": "0x36330322d5238c0000",
        "0x779274bf1803a336e4d3b00ddd93f2d4f5f4a62e": "0x3635c9adc5dea00000",
        "0x77a17122fa31b98f1711d32a99f03ec326f33d08": "0x5c283d410394100000",
        "0x77a34907f305a54c85db09c363fde3c47e6ae21f": "0x35659ef93f0fc40000",
        "0x77a769fafdecf4a638762d5ba3969df63120a41d": "0x6c6b935b8bbd400000",
        "0x77be6b64d7c733a436adec5e14bf9ad7402b1b46": "0x3635c9adc5dea00000",
        "0x77bfe93ccda750847e41a1affee6b2da96e7214e": "0x1043561a8829300000",
        "0x77c4a697e603d42b12056cbba761e7f51d0443f5": "0x24dce54d34a1a00000",
        "0x77cc02f623a9cf98530997ea67d95c3b491859ae": "0x497303c36ea0c20000",
        "0x77d43fa7b481dbf3db530cfbf5fdced0e6571831": "0x6c6b935b8bbd400000",
        "0x77da5e6c72fb36bce1d9798f7bcdf1d18f459c2e": "0x13695bb6cf93e0000",
        "0x77f4e3bdf056883cc87280dbe640a18a0d02a207": "0xa81993a2bfb5b0000",
        "0x77f609ca8720a023262c55c46f2d26fb3930ac69": "0xf015f25736420000",
        "0x77f81b1b26fc84d6de97ef8b9fbd72a33130cc4a": "0x3635c9adc5dea00000",
        "0x7819b0458e314e2b53bfe00c38495fd4b9fdf8d6": "0x1158e460913d00000",
        "0x781b1501647a2e06c0ed43ff197fccec35e1700b": "0xa2a15d09519be00000",
        "0x782f52f0a676c77716d574c81ec4684f9a020a97": "0x2e14e206b730ad8000",
        "0x78355df0a230f83d032c703154414de3eedab557": "0x6c6b935b8bbd400000",
        "0x7836f7ef6bc7bd0ff3acaf449c84dd6b1e2c939f": "0xe08de7a92cd97c0000",
        "0x7837fcb876da00d1eb3b88feb3df3fa4042fac82": "0x5f68e8131ecf800000",
        "0x783eec8aa5dac77b2e6623ed5198a431abbaee07": "0x17da3a04c7b3e00000",
        "0x785c8ea774d73044a734fa790a1b1e743e77ed7c": "0xcf152640c5c830000",
        "0x7860a3de38df382ae4a4dce18c0c07b98bce3dfa": "0x3635c9adc5dea00000",
        "0x78634371e17304cbf339b1452a4ce438dc764cce": "0x21e19e0c9bab2400000",
        "0x7864dc999fe4f8e003c0f43decc39aae1522dc0f": "0x51e102bd8ece00000",
        "0x78746a958dced4c764f876508c414a68342cecb9": "0x2be374fe8e2c40000",
        "0x787d313fd36b053eeeaedbce74b9fb0678333289": "0x5c058b7842719600000",
        "0x78859c5b548b700d9284cee4b6633c2f52e529c2": "0xa030dcebbd2f4c0000",
        "0x788e809741a3b14a22a4b1d937c82cfea489eebe": "0x17b7883c06916600000",
        "0x78a1e254409fb1b55a7cb4dd8eba3b30c8bad9ef": "0x56bc75e2d63100000",
        "0x78a5e89900bd3f81dd71ba869d25fec65261df15": "0xafd812fee03d5700000",
        "0x78b978a9d7e91ee529ea4fc4b76feaf8762f698c": "0x6c6b935b8bbd4000000",
        "0x78ce3e3d474a8a047b92c41542242d0a08c70f99": "0x21e19e0c9bab2400000",
        "0x78cf8336b328db3d87813a472b9e89b75e0cf3bc": "0x3635c9adc5dea00000",
        "0x78d4f8c71c1e68a69a98f52fcb45da8af56ea1a0": "0x6c6b935b8bbd400000",
        "0x78df2681d6d602e22142d54116dea15d454957aa": "0x102794ad20da680000",
        "0x78e08bc533413c26e291b3143ffa7cc9afb97b78": "0xad78ebc5ac6200000",
        "0x78e83f80b3678c7a0a4e3e8c84dccde064426277": "0x61093d7c2c6d380000",
        "0x78f5c74785c5668a838072048bf8b453594ddaab": "0x15af1d78b58c400000",
        "0x790f91bd5d1c5cc4739ae91300db89e1c1303c93": "0x6c6b935b8bbd400000",
        "0x7917e5bd82a9790fd650d043cdd930f7799633db": "0xd8d4602c26bf6c0000",
        "0x7919e7627f9b7d54ea3b14bb4dd4649f4f39dee0": "0x5a87e7d7f5f6580000",
        "0x791f6040b4e3e50dcf3553f182cd97a90630b75d": "0xd8d726b7177a800000",
        "0x7930c2d9cbfa87f510f8f98777ff8a8448ca5629": "0xad6eedd17cf3b8000",
        "0x794529d09d017271359730027075b87ad83dae6e": "0x10ce1d3d8cb3180000",
        "0x794b51c39e53d9e762b0613b829a44b472f4fff3": "0x2435e0647841cc8000",
        "0x79551cede376f747e3716c8d79400d766d2e0195": "0x9cb37afa4ff78680000",
        "0x795ebc2626fc39b0c86294e0e837dcf523553090": "0x3635c9adc5dea00000",
        "0x796ebbf49b3e36d67694ad79f8ff36767ac6fab0": "0x34bc4fdde27c00000",
        "0x796f87ba617a2930b1670be92ed1281fb0b346e1": "0x6f5e86fb528280000",
        "0x797427e3dbf0feae7a2506f12df1dc40326e8505": "0x3635c9adc5dea00000",
        "0x797510e386f56393ced8f477378a444c484f7dad": "0x3635c9adc5dea00000",
        "0x797bb7f157d9feaa17f76da4f704b74dc1038341": "0xb50fcfafebecb00000",
        "0x7988901331e387f713faceb9005cb9b65136eb14": "0x6acb3df27e1f880000",
        "0x7989d09f3826c3e5af8c752a8115723a84d80970": "0x1686f8614cf0ad0000",
        "0x7995bd8ce2e0c67bf1c7a531d477bca1b2b97561": "0x14248d617829ece0000",
        "0x79aeb34566b974c35a5881dec020927da7df5d25": "0x6c6b935b8bbd400000",
        "0x79b120eb8806732321288f675a27a9225f1cd2eb": "0x85a0bf37dec9e40000",
        "0x79b48d2d6137c3854d611c01ea42427a0f597bb7": "0xa5aa85009e39c0000",
        "0x79b8aad879dd30567e8778d2d231c8f37ab8734e": "0x6c6b935b8bbd400000",
        "0x79bf2f7b6e328aaf26e0bb093fa22da29ef2f471": "0x61093d7c2c6d380000",
        "0x79c130c762b8765b19d2abc9a083ab8f3aad7940": "0xd5967be4fc3f100000",
        "0x79c1be19711f73bee4e6316ae7549459aacea2e0": "0x15af1d78b58c400000",
        "0x79c6002f8452ca157f1317e80a2faf24475559b7": "0x1158e460913d00000",
        "0x79cac6494f11ef2798748cb53285bd8e22f97cda": "0x6c6b935b8bbd400000",
        "0x79cfa9780ae6d87b2c31883f09276986c89a6735": "0x3635c9adc5dea00000",
        "0x79dba256472db4e058f2e4cdc3ea4e8a42773833": "0x4f2591f896a6500000",
        "0x79ed10cf1f6db48206b50919b9b697081fbdaaf3": "0x6c6b935b8bbd400000",
        "0x79f08e01ce0988e63c7f8f2908fade43c7f9f5c9": "0xfc936392801c0000",
        "0x79fd6d48315066c204f9651869c1096c14fc9781": "0x6c6b935b8bbd400000",
        "0x79ffb4ac13812a0b78c4a37b8275223e176bfda5": "0xf015f25736420000",
        "0x7a0589b143a8e5e107c9ac66a9f9f8597ab3e7ab": "0x51e932d76e8f7b0000",
        "0x7a0a78a9cc393f91c3d9e39a6b8c069f075e6bf5": "0x487a9a304539440000",
        "0x7a1370a742ec2687e761a19ac5a794329ee67404": "0xa2a1326761e2920000",
        "0x7a2dfc770e24368131b7847795f203f3d50d5b56": "0x269fec7f0361d200000",
        "0x7a33834e8583733e2d52aead589bd1affb1dd256": "0x3635c9adc5dea00000",
        "0x7a36aba5c31ea0ca7e277baa32ec46ce93cf7506": "0x43c33c1937564800000",
        "0x7a381122bada791a7ab1f6037dac80432753baad": "0x21e19e0c9bab2400000",
        "0x7a48d877b63a8f8f9383e9d01e53e80c528e955f": "0x1b1ae4d6e2ef5000000",
        "0x7a4f9b850690c7c94600dbee0ca4b0a411e9c221": "0x678a932062e4180000",
        "0x7a63869fc767a4c6b1cd0e0649f3634cb121d24b": "0x433874f632cc60000",
        "0x7a67dd043a504fc2f2fc7194e9becf484cecb1fb": "0xd8d726b7177a80000",
        "0x7a6b26f438d9a352449155b8876cbd17c9d99b64": "0x14542ba12a337c00000",
        "0x7a6d781c77c4ba1fcadf687341c1e31799e93d27": "0xeda838c4929080000",
        "0x7a7068e1c3375c0e599db1fbe6b2ea23b8f407d2": "0x6c6b935b8bbd400000",
        "0x7a74cee4fa0f6370a7894f116cd00c1147b83e59": "0x2b5e3af16b18800000",
        "0x7a79e30ff057f70a3d0191f7f53f761537af7dff": "0x15af1d78b58c400000",
        "0x7a7a4f807357a4bbe68e1aa806393210c411ccb3": "0x65a4da25d3016c00000",
        "0x7a8563867901206f3f2bf0fa3e1c8109cabccd85": "0x76d41c62494840000",
        "0x7a8797690ab77b5470bf7c0c1bba612508e1ac7d": "0x1e09296c3378de40000",
        "0x7a8c89c014509d56d7b68130668ff6a3ecec7370": "0x1043561a8829300000",
        "0x7a94b19992ceb8ce63bc92ee4b5aded10c4d9725": "0x38d1a8064bb64c80000",
        "0x7aa79ac04316cc8d08f20065baa6d4142897d54e": "0x4be4e7267b6ae00000",
        "0x7aad4dbcd3acf997df93586956f72b64d8ad94ee": "0xd8d726b7177a800000",
        "0x7ab256b204800af20137fabcc916a23258752501": "0x43c33c1937564800000",
        "0x7aba56f63a48bc0817d6b97039039a7ad62fae2e": "0x2086ac351052600000",
        "0x7abb10f5bd9bc33b8ec1a82d64b55b6b18777541": "0x43c33c1937564800000",
        "0x7ac48d40c664cc9a6d89f1c5f5c80a1c70e744e6": "0xa31062beeed7000000",
        "0x7ac58f6ffc4f8107ae6e30378e4e9f99c57fbb24": "0x22b1c8c1227a00000",
        "0x7ad3f307616f19dcb143e6444dab9c3c33611f52": "0x2b5e3af16b1880000",
        "0x7ad82caea1a8b4ed05319b9c9870173c814e06ee": "0x2164b7a04ac8a00000",
        "0x7ade5d66b944bb860c0efdc86276d58f4653f711": "0x6c6b935b8bbd400000",
        "0x7adfedb06d91f3cc7390450b85550270883c7bb7": "0x1178fa40515db40000",
        "0x7ae1c19e53c71cee4c73fae2d7fc73bf9ab5e392": "0x3635c9adc5dea00000",
        "0x7ae659eb3bc46852fa86fac4e21c768d50388945": "0xf810c1cb501b80000",
        "0x7aea25d42b2612286e99c53697c6bc4100e2dbbf": "0x6c6b935b8bbd400000",
        "0x7aef7b551f0b9c46e755c0f38e5b3a73fe1199f5": "0x50c5e761a444080000",
        "0x7b0b31ff6e24745ead8ed9bb85fc0bf2fe1d55d4": "0x2b5e3af16b18800000",
        "0x7b0fea1176d52159333a143c294943da36bbddb4": "0x1fc7da64ea14c100000",
        "0x7b11673cc019626b290cbdce26046f7e6d141e21": "0x1b1ae4d6e2ef500000",
        "0x7b122162c913e7146cad0b7ed37affc92a0bf27f": "0x51af096b2301d18000",
        "0x7b1bf53a9cbe83a7dea434579fe72aac8d2a0cd0": "0xad4c8316a0b0c0000",
        "0x7b1daf14891b8a1e1bd429d8b36b9a4aa1d9afbf": "0x1b1ae4d6e2ef500000",
        "0x7b1fe1ab4dfd0088cdd7f60163ef59ec2aee06f5": "0x6c6b935b8bbd400000",
        "0x7b25bb9ca8e702217e9333225250e53c36804d48": "0x65ea3db75546600000",
        "0x7b27d0d1f3dd3c140294d0488b783ebf4015277d": "0x15af1d78b58c400000",
        "0x7b4007c45e5a573fdbb6f8bd746bf94ad04a3c26": "0x33821f5135d259a0000",
        "0x7b43c7eea8d62355b0a8a81da081c6446b33e9e0": "0xd8d726b7177a800000",
        "0x7b4d2a38269069c18557770d591d24c5121f5e83": "0x25f273933db5700000",
        "0x7b6175ec9befc738249535ddde34688cd36edf25": "0x21e19e0c9bab2400000",
        "0x7b66126879844dfa34fe65c9f288117fefb449ad": "0x14542ba12a337c00000",
        "0x7b6a84718dd86e63338429ac811d7c8a860f21f1": "0x61093d7c2c6d380000",
        "0x7b712c7af11676006a66d2fc5c1ab4c479ce6037": "0x1b1ae4d6e2ef5000000",
        "0x7b73242d75ca9ad558d650290df17692d54cd8b8": "0x6c6e59e67c78540000",
        "0x7b761feb7fcfa7ded1f0eb058f4a600bf3a708cb": "0xf95dd2ec27cce00000",
        "0x7b827cae7ff4740918f2e030ab26cb98c4f46cf5": "0x194684c0b39de100000",
        "0x7b893286427e72db219a21fc4dcd5fbf59283c31": "0x21e19e0c9bab2400000",
        "0x7b9226d46fe751940bc416a798b69ccf0dfab667": "0xe3aeb5737240a00000",
        "0x7b98e23cb96beee80a168069ebba8f20edd55ccf": "0xba0c91587c14a0000",
        "0x7bb0fdf5a663b5fba28d9c902af0c811e252f298": "0xad78ebc5ac6200000",
        "0x7bb9571f394b0b1a8eba5664e9d8b5e840677bea": "0x11164759ffb320000",
        "0x7bb984c6dbb9e279966afafda59c01d02627c804": "0x1b464311d45a6880000",
        "0x7bbbec5e70bdead8bb32b42805988e9648c0aa97": "0x3636d7af5ec98e0000",
        "0x7bca1da6c80a66baa5db5ac98541c4be276b447d": "0x24cf049680fa3c0000",
        "0x7bddb2ee98de19ee4c91f661ee8e67a91d054b97": "0x3635c9adc5dea00000",
        "0x7be2f7680c802da6154c92c0194ae732517a7169": "0xfc936392801c0000",
        "0x7be7f2456971883b9a8dbe4c91dec08ac34e8862": "0xa2a15d09519be00000",
        "0x7be8ccb4f11b66ca6e1d57c0b5396221a31ba53a": "0x1158e460913d00000",
        "0x7beb81fb2f5e91526b2ac9795e76c69bcff04bc0": "0xeb22e794f0a8d600000",
        "0x7c0883054c2d02bc7a852b1f86c42777d0d5c856": "0x1b1ae4d6e2ef500000",
        "0x7c0f5e072043c9ee740242197e78cc4b98cdf960": "0xad78ebc5ac6200000",
        "0x7c1df24a4f7fb2c7b472e0bb006cb27dcd164156": "0x3635c9adc5dea00000",
        "0x7c29d47d57a733f56b9b217063b513dc3b315923": "0xd8d726b7177a800000",
        "0x7c2b9603884a4f2e464eceb97d17938d828bc02c": "0xa2a15d09519be00000",
        "0x7c382c0296612e4e97e440e02d3871273b55f53b": "0xab640391201300000",
        "0x7c3eb713c4c9e0381cd8154c7c9a7db8645cde17": "0xad78ebc5ac6200000",
        "0x7c4401ae98f12ef6de39ae24cf9fc51f80eba16b": "0xad78ebc5ac6200000",
        "0x7c45f0f8442a56dbd39dbf159995415c52ed479b": "0x6c6b935b8bbd400000",
        "0x7c532db9e0c06c26fd40acc56ac55c1ee92d3c3a": "0x3f870857a3e0e3800000",
        "0x7c60a05f7a4a5f8cf2784391362e755a8341ef59": "0x6694f0182a37ae0000",
        "0x7c60e51f0be228e4d56fdd2992c814da7740c6bc": "0xad78ebc5ac6200000",
        "0x7c6924d07c3ef5891966fe0a7856c87bef9d2034": "0x6c6b935b8bbd400000",
        "0x7c8bb65a6fbb49bd413396a9d7e31053bbb37aa9": "0x14542ba12a337c00000",
        "0x7c9a110cb11f2598b2b20e2ca400325e41e9db33": "0x581767ba6189c400000",
        "0x7cbca88fca6a0060b960985c9aa1b02534dc2208": "0x19127a1391ea2a0000",
        "0x7cbeb99932e97e6e02058cfc62d0b26bc7cca52b": "0x6c6b935b8bbd400000",
        "0x7cc24a6a958c20c7d1249660f7586226950b0d9a": "0x6acb3df27e1f880000",
        "0x7cd20eccb518b60cab095b720f571570caaa447e": "0x1b1ae4d6e2ef500000",
        "0x7cd5d81eab37e11e6276a3a1091251607e0d7e38": "0x3684d5ef981f40000",
        "0x7cdf74213945953db39ad0e8a9781add792e4d1d": "0x6c6b935b8bbd400000",
        "0x7ce4686446f1949ebed67215eb0d5a1dd72c11b8": "0x7839d321b81ab80000",
        "0x7cef4d43aa417f9ef8b787f8b99d53f1fea1ee88": "0x678a932062e4180000",
        "0x7d0350e40b338dda736661872be33f1f9752d755": "0x2b4f5a6f191948000",
        "0x7d04d2edc058a1afc761d9c99ae4fc5c85d4c8a6": "0x42a9c4675c9467d00000",
        "0x7d0b255efb57e10f7008aa22d40e9752dfcf0378": "0x19f8e7559924c0000",
        "0x7d13d6705884ab2157dd8dcc7046caf58ee94be4": "0x1d0da07cbb3ee9c00000",
        "0x7d273e637ef1eac481119413b91c989dc5eac122": "0x1b1ae4d6e2ef500000",
        "0x7d2a52a7cf0c8436a8e007976b6c26b7229d1e15": "0x17bf06b32a241c0000",
        "0x7d34803569e00bd6b59fff081dfa5c0ab4197a62": "0x5cd87cb7b9fb860000",
        "0x7d34ff59ae840a7413c6ba4c5bb2ba2c75eab018": "0xa2a15d09519be00000",
        "0x7d392852f3abd92ff4bb5bb26cb60874f2be6795": "0x3636c25e66ece70000",
        "0x7d445267c59ab8d2a2d9e709990e09682580c49f": "0x3635c9adc5dea00000",
        "0x7d551397f79a2988b064afd0efebee802c7721bc": "0x857e0d6f1da76a00000",
        "0x7d5aa33fc14b51841a06906edb2bb49c2a117269": "0x104400a2470e680000",
        "0x7d5d2f73949dadda0856b206989df0078d51a1e5": "0x23c757072b8dd000000",
        "0x7d6e990daa7105de2526339833f77b5c0b85d84f": "0x43c33c1937564800000",
        "0x7d73863038ccca22f96affda10496e51e1e6cd48": "0x1158e460913d00000",
        "0x7d7dd5ee614dbb6fbfbcd26305247a058c41faa1": "0x6c6b935b8bbd400000",
        "0x7d7e7c61779adb7706c94d32409a2bb4e994bf60": "0x2ef20d9fc71a140000",
        "0x7d82e523cc2dc591da3954e8b6bb2caf6461e69c": "0x7d8dc2efffb1a90000",
        "0x7d858493f07415e0912d05793c972113eae8ae88": "0x628dd177d2bc280000",
        "0x7d901b28bf7f88ef73d8f73cca97564913ea8a24": "0x33c5499031720c0000",
        "0x7d980f4b566bb045517e4c14c87750de9346744b": "0x487a9a304539440000",
        "0x7d9c59631e2ba2e8e82891f3979922aaa3b567a1": "0x1b1ae4d6e2ef5000000",
        "0x7d9d221a3df89ddd7b5f61c1468c6787d6b333e6": "0x77b227cd83be80000",
        "0x7da7613445a21299aa74f0ad71431ec43fbb1be9": "0x3afb087b876900000",
        "0x7db4c7d5b797e9296e6382f203693db409449d62": "0x15af1d78b58c400000",
        "0x7db9eacc52e429dc83b461c5f4d86010e5383a28": "0x3635c9adc5dea00000",
        "0x7dd46da677e161825e12e80dc446f58276e1127c": "0x2c73c937742c500000",
        "0x7dd8d7a1a34fa1f8e73ccb005fc2a03a15b8229c": "0xad78ebc5ac6200000",
        "0x7ddd57165c87a2707f025dcfc2508c09834759bc": "0x4be4e7267b6ae00000",
        "0x7de442c82386154d2e993cbd1280bb7ca6b12ada": "0xd8f2e8247ec9480000",
        "0x7de7fe419cc61f91f408d234cc80d5ca3d054d99": "0x1158e460913d00000",
        "0x7dece6998ae1900dd3770cf4b93812bad84f0322": "0x56bc75e2d63100000",
        "0x7dfc342dffcf45dfee74f84c0995397bd1a63172": "0xd8d726b7177a80000",
        "0x7dfd2962b575bcbeee97f49142d63c30ab009f66": "0xd8d726b7177a800000",
        "0x7e1e29721d6cb91057f6c4042d8a0bbc644afe73": "0x8a9aba557e36c0000",
        "0x7e236666b2d06e63ea4e2ab84357e2dfc977e50e": "0x36356633ebd8ea0000",
        "0x7e24d9e22ce1da3ce19f219ccee523376873f367": "0x13fd9079caa60ff0000",
        "0x7e24fbdad290175eb2df6d180a19b9a9f41370be": "0x3635c9adc5dea00000",
        "0x7e268f131ddf687cc325c412f78ba961205e9112": "0x36364ee7d301b3c0000",
        "0x7e29290038493559194e946d4e460b96fc38a156": "0x10c13c527763880000",
        "0x7e2ba86da52e785d8625334f3397ba1c4bf2e8d1": "0xaadec983fcff40000",
        "0x7e3f63e13129a221ba1ab06326342cd98b5126ae": "0x56a02659a523340000",
        "0x7e47637e97c14622882be057bea229386f4052e5": "0x17da3a04c7b3e00000",
        "0x7e4e9409704121d1d77997026ff06ea9b19a8b90": "0x8d16549ed58fa40000",
        "0x7e59dc60be8b2fc19abd0a5782c52c28400bce97": "0x3635c9adc5dea00000",
        "0x7e5b19ae1be94ff4dee635492a1b012d14db0213": "0x56bc75e2d63100000",
        "0x7e5d9993104e4cb545e179a2a3f971f744f98482": "0x6c6b935b8bbd400000",
        "0x7e71171f2949fa0c3ac254254b1f0440e5e6a038": "0x22b1c8c1227a00000",
        "0x7e7c1e9a61a08a83984835c70ec31d34d3eaa87f": "0xa5aa85009e39c0000",
        "0x7e7f18a02eccaa5d61ab8fbf030343c434a25ef7": "0x39fbae8d042dd0000",
        "0x7e81f6449a03374191f3b7cb05d938b72e090dff": "0x56bc75e2d63100000",
        "0x7e8649e690fc8c1bfda1b5e186581f649b50fe33": "0x556f64c1fe7fa0000",
        "0x7e87863ec43a481df04d017762edcb5caa629b5a": "0x222c8eb3ff6640000",
        "0x7e8f96cc29f57b0975120cb593b7dd833d606b53": "0xaadec983fcff40000",
        "0x7e972a8a7c2a44c93b21436c38d21b9252c345fe": "0x61093d7c2c6d380000",
        "0x7e99dfbe989d3ba529d19751b7f4317f8953a3e2": "0x15af1d78b58c400000",
        "0x7ea0f96ee0a573a330b56897761f3d4c0130a8e3": "0x487a9a304539440000",
        "0x7ea791ebab0445a00efdfc4e4a8e9a7e7565136d": "0xfc936392801c0000",
        "0x7eaba035e2af3793fd74674b102540cf190addb9": "0x45026c835b60440000",
        "0x7eb4b0185c92b6439a08e7322168cb353c8a774a": "0x227196ca04983ca0000",
        "0x7ebd95e9c470f7283583dc6e9d2c4dce0bea8f84": "0x2f6f10780d22cc00000",
        "0x7ed0a5a847bef9a9da7cba1d6411f5c316312619": "0x228eb37e8751d0000",
        "0x7edafba8984baf631a820b6b92bbc2c53655f6bd": "0x6c6b935b8bbd400000",
        "0x7edb02c61a227287611ad950696369cc4e647a68": "0xeda838c4929080000",
        "0x7ee5ca805dce23af89c2d444e7e40766c54c7404": "0xd0bd412edbd820000",
        "0x7ee604c7a9dc2909ce321de6b9b24f5767577555": "0x12bf9c7985cf62d8000",
        "0x7ef16fd8d15b378a0fba306b8d03dd98fc92619f": "0x25f273933db5700000",
        "0x7ef98b52bee953bef992f305fda027f8911c5851": "0x1be722206996bc8000",
        "0x7efc90766a00bc52372cac97fabd8a3c831f8ecd": "0x890b0c2e14fb80000",
        "0x7efec0c6253caf397f71287c1c07f6c9582b5b86": "0x1a2cbcb84f30d58000",
        "0x7f01dc7c3747ca608f983dfc8c9b39e755a3b914": "0xb386cad5f7a5a0000",
        "0x7f0662b410298c99f311d3a1454a1eedba2fea76": "0xad78ebc5ac6200000",
        "0x7f06c89d59807fa60bc60136fcf814cbaf2543bd": "0x21e19e0c9bab2400000",
        "0x7f0b90a1fdd48f27b268feb38382e55ddb50ef0f": "0x32f51edbaaa3300000",
        "0x7f0ec3db804692d4d1ea3245365aab0590075bc4": "0xd8d726b7177a800000",
        "0x7f0f04fcf37a53a4e24ede6e93104e78be1d3c9e": "0x6c6b935b8bbd400000",
        "0x7f13d760498d7193ca6859bc95c901386423d76c": "0x10f0cf064dd59200000",
        "0x7f150afb1a77c2b45928c268c1e9bdb4641d47d8": "0x6c6b935b8bbd400000",
        "0x7f1619988f3715e94ff1d253262dc5581db3de1c": "0x30ca024f987b900000",
        "0x7f1c81ee1697fc144b7c0be5493b5615ae7fddca": "0x1b1dab61d3aa640000",
        "0x7f2382ffd8f83956467937f9ba72374623f11b38": "0x2086ac351052600000",
        "0x7f3709391f3fbeba3592d175c740e87a09541d02": "0x1a055690d9db800000",
        "0x7f389c12f3c6164f6446566c77669503c2792527": "0x556f64c1fe7fa0000",
        "0x7f3a1e45f67e92c880e573b43379d71ee089db54": "0x152d02c7e14af6800000",
        "0x7f3d7203c8a447f7bf36d88ae9b6062a5eee78ae": "0x14542ba12a337c00000",
        "0x7f46bb25460dd7dae4211ca7f15ad312fc7dc75c": "0x16a6502f15a1e540000",
        "0x7f49e7a4269882bd8722d4a6f566347629624079": "0x6c6b935b8bbd400000",
        "0x7f49f20726471ac1c7a83ef106e9775ceb662566": "0x14061b9d77a5e980000",
        "0x7f4b5e278578c046cceaf65730a0e068329ed5b6": "0x65ea3db75546600000",
        "0x7f4f593b618c330ba2c3d5f41eceeb92e27e426c": "0x966edc756b7cfc0000",
        "0x7f541491d2ac00d2612f94aa7f0bcb014651fbd4": "0x14620c57dddae00000",
        "0x7f5ae05ae0f8cbe5dfe721f044d7a7bef4c27997": "0x340aad21b3b700000",
        "0x7f603aec1759ea5f07c7f8d41a1428fbbaf9e762": "0x1158e460913d00000",
        "0x7f616c6f008adfa082f34da7d0650460368075fb": "0x3635c9adc5dea00000",
        "0x7f61fa6cf5f898b440dac5abd8600d6d691fdef9": "0xf2dc7d47f15600000",
        "0x7f655c6789eddf455cb4b88099720639389eebac": "0x14542ba12a337c00000",
        "0x7f6b28c88421e4857e459281d78461692489d3fb": "0x6c6b935b8bbd400000",
        "0x7f6efb6f4318876d2ee624e27595f44446f68e93": "0x54069233bf7f780000",
        "0x7f7192c0df1c7db6d9ed65d71184d8e4155a17ba": "0x453728d33942c0000",
        "0x7f7a3a21b3f5a65d81e0fcb7d52dd00a1aa36dba": "0x56bc75e2d63100000",
        "0x7f8dbce180ed9c563635aad2d97b4cbc428906d9": "0x90f534608a72880000",
        "0x7f993ddb7e02c282b898f6155f680ef5b9aff907": "0x43c33c1937564800000",
        "0x7f9f9b56e4289dfb58e70fd5f12a97b56d35c6a5": "0x6acb3df27e1f880000",
        "0x7fa37ed67887751a471f0eb306be44e0dbcd6089": "0x3976747fe11a100000",
        "0x7faa30c31519b584e97250ed2a3cf3385ed5fd50": "0x6c6b935b8bbd400000",
        "0x7fcf5ba6666f966c5448c17bf1cb0bbcd8019b06": "0x56bc3d0aebe498000",
        "0x7fd679e5fb0da2a5d116194dcb508318edc580f3": "0x1639e49bba162800000",
        "0x7fdba031c78f9c096d62d05a369eeab0bccc55e5": "0x97c9ce4cf6d5c00000",
        "0x7fdbc3a844e40d96b2f3a635322e6065f4ca0e84": "0x6c6b935b8bbd400000",
        "0x7fdfc88d78bf1b285ac64f1adb35dc11fcb03951": "0x7c06fda02fb0360000",
        "0x7fea1962e35d62059768c749bedd96cab930d378": "0x6c6b935b8bbd400000",
        "0x7fef8c38779fb307ec6f044bebe47f3cfae796f1": "0x92340f86cf09e8000",
        "0x7ff0c63f70241bece19b737e5341b12b109031d8": "0x12c1b6eed03d280000",
        "0x7ffabfbc390cbe43ce89188f0868b27dcb0f0cad": "0x1595182224b26480000",
        "0x7ffd02ed370c7060b2ae53c078c8012190dfbb75": "0x21e19e0c9bab2400000",
        "0x80022a1207e910911fc92849b069ab0cdad043d3": "0xb98bc829a6f90000",
        "0x8009a7cbd192b3aed4adb983d5284552c16c7451": "0xd8d726b7177a800000",
        "0x800e7d631c6e573a90332f17f71f5fd19b528cb9": "0x83d6c7aab63600000",
        "0x80156d10efa8b230c99410630d37e269d4093cea": "0x6c6b935b8bbd400000",
        "0x801732a481c380e57ed62d6c29de998af3fa3b13": "0x56bc75e2d63100000",
        "0x801d65c518b11d0e3f4f470221417013c8e53ec5": "0xd8d726b7177a800000",
        "0x8026435aac728d497b19b3e7e57c28c563954f2b": "0x5dc892aa1131c80000",
        "0x802dc3c4ff2d7d925ee2859f4a06d7ba60f1308c": "0x550940c8fd34c0000",
        "0x8030b111c6983f0485ddaca76224c6180634789f": "0x4563918244f400000",
        "0x8035bcffaefdeeea35830c497d14289d362023de": "0x1043561a8829300000",
        "0x8035fe4e6b6af27ae492a578515e9d39fa6fa65b": "0xd8d726b7177a800000",
        "0x8043ed22f997e5a2a4c16e364486ae64975692c4": "0x3d4904ffc9112e8000",
        "0x8043fdd0bc4c973d1663d55fc135508ec5d4f4fa": "0x1158e460913d00000",
        "0x804ca94972634f633a51f3560b1d06c0b293b3b1": "0xad78ebc5ac6200000",
        "0x80522ddf944ec52e27d724ed4c93e1f7be6083d6": "0xad78ebc5ac6200000",
        "0x80591a42179f34e64d9df75dcd463b28686f5574": "0x43c33c1937564800000",
        "0x805ce51297a0793b812067f017b3e7b2df9bb1f9": "0x56bc75e2d63100000",
        "0x805d846fb0bc02a7337226d685be9ee773b9198a": "0x43c30fb0884a96c0000",
        "0x8063379a7bf2cb923a84c5093e68dac7f75481c5": "0x1176102e6e32df0000",
        "0x806854588ecce541495f81c28a290373df0274b2": "0x1f8cdf5c6e8d580000",
        "0x806f44bdeb688037015e84ff218049e382332a33": "0x6c5db2a4d815dc0000",
        "0x80744618de396a543197ee4894abd06398dd7c27": "0x6c6b935b8bbd400000",
        "0x8077c3e4c445586e094ce102937fa05b737b568c": "0x56bc75e2d63100000",
        "0x80907f593148b57c46c177e23d25abc4aae18361": "0x56bc75e2d63100000",
        "0x80977316944e5942e79b0e3abad38da746086519": "0x21a754a6dc5280000",
        "0x80a0f6cc186cf6201400736e065a391f52a9df4a": "0x21e19e0c9bab2400000",
        "0x80abec5aa36e5c9d098f1b942881bd5acac6963d": "0x6c6b935b8bbd400000",
        "0x80b23d380b825c46e0393899a85556462da0e18c": "0x6c6b935b8bbd400000",
        "0x80b42de170dbd723f454e88f7716452d92985092": "0x104623c0762dd10000",
        "0x80b79f338390d1ba1b3737a29a0257e5d91e0731": "0x1158e460913d00000",
        "0x80bf995ed8ba92701d10fec49f9e7d014dbee026": "0x1f0437ca1a7e128000",
        "0x80c04efd310f440483c73f744b5b9e64599ce3ec": "0x410d586a20a4c00000",
        "0x80c3a9f695b16db1597286d1b3a8b7696c39fa27": "0x56bc75e2d63100000",
        "0x80c53ee7e3357f94ce0d7868009c208b4a130125": "0x6c6b935b8bbd400000",
        "0x80cc21bd99f39005c58fe4a448909220218f66cb": "0x3636c9796436740000",
        "0x80d5c40c59c7f54ea3a55fcfd175471ea35099b3": "0x3635c9adc5dea00000",
        "0x80da2fdda29a9e27f9e115975e69ae9cfbf3f27e": "0xad78ebc5ac6200000",
        "0x80e7b3205230a566a1f061d922819bb4d4d2a0e1": "0x2f6f10780d22cc00000",
        "0x80ea1acc136eca4b68c842a95adf6b7fee7eb8a2": "0xd8d726b7177a800000",
        "0x80f07ac09e7b2c3c0a3d1e9413a544c73a41becb": "0x1158e460913d00000",
        "0x810db25675f45ea4c7f3177f37ce29e22d67999c": "0xad78ebc5ac6200000",
        "0x81139bfdcca656c430203f72958c543b6580d40c": "0x6c6b935b8bbd400000",
        "0x811461a2b0ca90badac06a9ea16e787b33b196cc": "0x8e3f50b173c100000",
        "0x81164deb10814ae08391f32c08667b6248c27d7a": "0x155bd9307f9fe80000",
        "0x81186931184137d1192ac88cd3e1e5d0fdb86a74": "0x9d3595ab2438d00000",
        "0x812a55c43caedc597218379000ce510d548836fd": "0xfc936392801c0000",
        "0x812ea7a3b2c86eed32ff4f2c73514cc63bacfbce": "0x3635c9adc5dea00000",
        "0x8134dd1c9df0d6c8a5812426bb55c761ca831f08": "0x6a2160bb57ccc0000",
        "0x814135da8f9811075783bf1ab67062af8d3e9f40": "0x1158e460913d00000",
        "0x81498ca07b0f2f17e8bbc7e61a7f4ae7be66b78b": "0x581fbb5b33bb00000",
        "0x81556db27349ab8b27004944ed50a46e941a0f5f": "0xd8bb6549b02bb80000",
        "0x8155fa6c51eb31d808412d748aa086105018122f": "0x65ea3db75546600000",
        "0x8156360bbd370961ceca6b6691d75006ad204cf2": "0x878678326eac9000000",
        "0x8161d940c3760100b9080529f8a60325030f6edc": "0x1043561a8829300000",
        "0x8164e78314ae16b28926cc553d2ccb16f356270d": "0x1ca134e95fb32c80000",
        "0x8165cab0eafb5a328fc41ac64dae715b2eef2c65": "0x3635c9adc5dea00000",
        "0x8168edce7f2961cf295b9fcd5a45c06cdeda6ef5": "0xad78ebc5ac6200000",
        "0x816d9772cf11399116cc1e72c26c6774c9edd739": "0xad78ebc5ac6200000",
        "0x8173c835646a672e0152be10ffe84162dd256e4c": "0x1aabdf2145b4300000",
        "0x817493cd9bc623702a24a56f9f82e3fd48f3cd31": "0x9e4b23f12d4ca00000",
        "0x8179c80970182cc5b7d82a4df06ea94db63a25f3": "0x276f259de66bf40000",
        "0x817ac33bd8f847567372951f4a10d7a91ce3f430": "0xad7c406c66dc18000",
        "0x818ffe271fc3973565c303f213f6d2da89897ebd": "0x136e05342fee1b98000",
        "0x8197948121732e63d9c148194ecad46e30b749c8": "0xd8d726b7177a800000",
        "0x819af9a1c27332b1c369bbda1b3de1c6e933d640": "0x1109e654b98f7a0000",
        "0x819cdaa5303678ef7cec59d48c82163acc60b952": "0x31351545f79816c0000",
        "0x819eb4990b5aba5547093da12b6b3c1093df6d46": "0x3635c9adc5dea00000",
        "0x81a88196fac5f23c3e12a69dec4b880eb7d97310": "0x6c6b935b8bbd400000",
        "0x81bccbff8f44347eb7fca95b27ce7c952492aaad": "0x840c12165dd780000",
        "0x81bd75abd865e0c3f04a0b4fdbcb74d34082fbb7": "0xd8d726b7177a800000",
        "0x81c18c2a238ddc4cba230a072dd7dc101e620273": "0x487a9a304539440000",
        "0x81c9e1aee2d3365d53bcfdcd96c7c538b0fd7eec": "0x62a992e53a0af00000",
        "0x81cfad760913d3c322fcc77b49c2ae3907e74f6e": "0xaadec983fcff40000",
        "0x81d619ff5726f2405f12904c72eb1e24a0aaee4f": "0x43c33c1937564800000",
        "0x81efe296ae76c860d1c5fbd33d47e8ce9996d157": "0x3635c9adc5dea00000",
        "0x81f8de2c283d5fd4afbda85dedf9760eabbbb572": "0xa2a15d09519be00000",
        "0x820c19291196505b65059d9914b7090be1db87de": "0x796e3ea3f8ab00000",
        "0x821cb5cd05c7ef909fe1be60733d8963d760dc41": "0xd8d726b7177a800000",
        "0x821d798af19989c3ae5b84a7a7283cd7fda1fabe": "0x43c33c1937564800000",
        "0x821eb90994a2fbf94bdc3233910296f76f9bf6e7": "0x21e19e0c9bab2400000",
        "0x82249fe70f61c6b16f19a324840fdc020231bb02": "0x20336b08a93635b0000",
        "0x8228ebc087480fd64547ca281f5eace3041453b9": "0x6acb3df27e1f880000",
        "0x8229ceb9f0d70839498d44e6abed93c5ca059f5d": "0x1a1c1b3c989a20100000",
        "0x822edff636563a6106e52e9a2598f7e6d0ef2782": "0x1f4f9693d42d38000",
        "0x823219a25976bb2aa4af8bad41ac3526b493361f": "0x6c6b935b8bbd400000",
        "0x8232d1f9742edf8dd927da353b2ae7b4cbce7592": "0x243d4d18229ca20000",
        "0x8234f463d18485501f8f85ace4972c9b632dbccc": "0x6c6b935b8bbd400000",
        "0x823768746737ce6da312d53e54534e106f967cf3": "0x1158e460913d00000",
        "0x823ba7647238d113bce9964a43d0a098118bfe4d": "0xad78ebc5ac6200000",
        "0x824074312806da4748434266ee002140e3819ac2": "0x51b1d3839261ac0000",
        "0x82438fd2b32a9bdd674b49d8cc5fa2eff9781847": "0x1158e460913d00000",
        "0x82485728d0e281563758c75ab27ed9e882a0002d": "0x7f808e9291e6c0000",
        "0x824b3c3c443e19295d7ef6faa7f374a4798486a8": "0x1158e460913d00000",
        "0x8251358ca4e060ddb559ca58bc0bddbeb4070203": "0x6c6b935b8bbd400000",
        "0x825135b1a7fc1605614c8aa4d0ac6dbad08f480e": "0x4d853c8f8908980000",
        "0x825309a7d45d1812f51e6e8df5a7b96f6c908887": "0x8034f7d9b166d40000",
        "0x825a7f4e10949cb6f8964268f1fa5f57e712b4c4": "0x1158e460913d00000",
        "0x8261fa230c901d43ff579f4780d399f31e6076bc": "0x6c6b935b8bbd400000",
        "0x8262169b615870134eb4ac6c5f471c6bf2f789fc": "0x19127a1391ea2a0000",
        "0x8263ece5d709e0d7ae71cca868ed37cd2fef807b": "0x35ab028ac154b80000",
        "0x826ce5790532e0548c6102a30d3eac836bd6388f": "0x3cfc82e37e9a7400000",
        "0x826eb7cd7319b82dd07a1f3b409071d96e39677f": "0x3635c9adc5dea00000",
        "0x827531a6c5817ae35f82b00b9754fcf74c55e232": "0xc328093e61ee400000",
        "0x8275cd684c3679d5887d03664e338345dc3cdde1": "0xdb44e049bb2c0000",
        "0x8284923b62e68bbf7c2b9f3414d13ef6c812a904": "0xd255d112e103a00000",
        "0x828ba651cb930ed9787156299a3de44cd08b7212": "0x487a9a304539440000",
        "0x82a15cef1d6c8260eaf159ea3f0180d8677dce1c": "0x6c6b935b8bbd400000",
        "0x82a8b96b6c9e13ebec1e9f18ac02a60ea88a48ff": "0x6c6b8c408e73b30000",
        "0x82a8cbbfdff02b2e38ae4bbfca15f1f0e83b1aea": "0x49b991c27ef6d8000",
        "0x82e4461eb9d849f0041c1404219e4272c4900ab4": "0x6c6b935b8bbd400000",
        "0x82e577b515cb2b0860aafe1ce09a59e09fe7d040": "0x2086ac351052600000",
        "0x82ea01e3bf2e83836e71704e22a2719377efd9c3": "0xa4cc799563c3800000",
        "0x82f2e991fd324c5f5d17768e9f61335db6319d6c": "0x1b1ae4d6e2ef500000",
        "0x82f39b2758ae42277b86d69f75e628d958ebcab0": "0x878678326eac9000000",
        "0x82f854c9c2f087dffa985ac8201e626ca5467686": "0x152d02c7e14af6800000",
        "0x82ff716fdf033ec7e942c909d9831867b8b6e2ef": "0x61093d7c2c6d380000",
        "0x8308ed0af7f8a3c1751fafc877b5a42af7d35882": "0x3635c9adc5dea00000",
        "0x831c44b3084047184b2ad218680640903750c45d": "0x6acb3df27e1f880000",
        "0x83210583c16a4e1e1dac84ebd37e3d0f7c57eba4": "0x6c6b935b8bbd400000",
        "0x832c54176bdf43d2c9bcd7b808b89556b89cbf31": "0xad78ebc5ac6200000",
        "0x833316985d47742bfed410604a91953c05fb12b0": "0x6c6b935b8bbd400000",
        "0x8334764b7b397a4e578f50364d60ce44899bff94": "0x503b203e9fba20000",
        "0x833b6a8ec8da408186ac8a7d2a6dd61523e7ce84": "0x3635c9adc5dea000000",
        "0x833d3fae542ad5f8b50ce19bde2bec579180c88c": "0x12c1b6eed03d280000",
        "0x833db42c14163c7be4cab86ac593e06266d699d5": "0x24e40d2b6943ef900000",
        "0x83563bc364ed81a0c6da3b56ff49bbf267827a9c": "0x3ab91d17b20de500000",
        "0x837a645dc95c49549f899c4e8bcf875324b2f57c": "0x208c394af1c8880000",
        "0x838bd565f99fde48053f7917fe333cf84ad548ab": "0xad78ebc5ac6200000",
        "0x83908aa7478a6d1c9b9b0281148f8f9f242b9fdc": "0x6c6b935b8bbd400000",
        "0x8392e53776713578015bff4940cf43849d7dcba1": "0x84df0355d56170000",
        "0x8397a1bc47acd647418159b99cea57e1e6532d6e": "0x1f10fa827b550b40000",
        "0x8398e07ebcb4f75ff2116de77c1c2a99f303a4cf": "0x1b1ae4d6e2ef500000",
        "0x83a3148833d9644984f7c475a7850716efb480ff": "0xb8507a820728200000",
        "0x83a402438e0519773d5448326bfb61f8b20cf52d": "0x52663ccab1e1c00000",
        "0x83a93b5ba41bf88720e415790cdc0b67b4af34c4": "0xad78ebc5ac6200000",
        "0x83c23d8a502124ee150f08d71dc6727410a0f901": "0x7331f3bfe661b180000",
        "0x83c897a84b695eebe46679f7da19d776621c2694": "0x1b1ae4d6e2ef500000",
        "0x83d532d38d6dee3f60adc68b936133c7a2a1b0dd": "0x1b1ae4d6e2ef500000",
        "0x83dbf8a12853b40ac61996f8bf1dc8fdbaddd329": "0x34957444b840e80000",
        "0x83dbfd8eda01d0de8e158b16d0935fc2380a5dc7": "0x2086ac351052600000",
        "0x83e48055327c28b5936fd9f4447e73bdb2dd3376": "0x90f534608a72880000",
        "0x83fe5a1b328bae440711beaf6aad6026eda6d220": "0x43c33c1937564800000",
        "0x84008a72f8036f3feba542e35078c057f32a8825": "0x56bc75e2d63100000",
        "0x840ec83ea93621f034e7bb3762bb8e29ded4c479": "0x878678326eac900000",
        "0x841145b44840c946e21dbc190264b8e0d5029369": "0x3f870857a3e0e3800000",
        "0x84232107932b12e03186583525ce023a703ef8d9": "0x6c6b935b8bbd400000",
        "0x84244fc95a6957ed7c1504e49f30b8c35eca4b79": "0x6c6b935b8bbd400000",
        "0x8431277d7bdd10457dc017408c8dbbbd414a8df3": "0x222c8eb3ff6640000",
        "0x84375afbf59b3a1d61a1be32d075e0e15a4fbca5": "0xad78ebc5ac6200000",
        "0x843bd3502f45f8bc4da370b323bdac3fcf5f19a6": "0x50039d63d11c900000",
        "0x84503334630d77f74147f68b2e086613c8f1ade9": "0x56bc75e2d631000000",
        "0x845203750f7148a9aa262921e86d43bf641974fd": "0x56bc75e2d63100000",
        "0x8461ecc4a6a45eb1a5b947fb86b88069b91fcd6f": "0x6c6b935b8bbd400000",
        "0x84675e9177726d45eaa46b3992a340ba7f710c95": "0x3635c9adc5dea00000",
        "0x84686c7bad762c54b667d59f90943cd14d117a26": "0x1158e460913d00000",
        "0x8489f6ad1d9a94a297789156899db64154f1dbb5": "0x137407c03c8c268000",
        "0x848c994a79003fe7b7c26cc63212e1fc2f9c19eb": "0x6c6b935b8bbd400000",
        "0x848fbd29d67cf4a013cb02a4b176ef244e9ee68d": "0x1172a636bbdc20000",
        "0x84949dba559a63bfc845ded06e9f2d9b7f11ef24": "0x6c6b935b8bbd400000",
        "0x849ab80790b28ff1ffd6ba394efc7463105c36f7": "0x1e02be4ae6c840000",
        "0x849b116f596301c5d8bb62e0e97a8248126e39f3": "0x1043561a8829300000",
        "0x84a74ceecff65cb93b2f949d773ef1ad7fb4a245": "0x50a9b444685c70000",
        "0x84aac7fa197ff85c30e03b7a5382b957f41f3afb": "0x88b23acffd9900000",
        "0x84af1b157342d54368260d17876230a534b54b0e": "0x35659ef93f0fc40000",
        "0x84b0ee6bb837d3a4c4c5011c3a228c0edab4634a": "0x1158e460913d00000",
        "0x84b4b74e6623ba9d1583e0cfbe49643f16384149": "0x1158e460913d00000",
        "0x84b6b6adbe2f5b3e2d682c66af1bc4905340c3ed": "0x2192f8d22215008000",
        "0x84b91e2e2902d05e2b591b41083bd7beb2d52c74": "0x215e5128b4504648000",
        "0x84bcbf22c09607ac84341d2edbc03bfb1739d744": "0x1b1ae4d6e2ef500000",
        "0x84bfcef0491a0ae0694b37ceac024584f2aa0467": "0x6c6acc67d7b1d40000",
        "0x84cb7da0502df45cf561817bbd2362f451be02da": "0x487a9a304539440000",
        "0x84cc7878da605fdb019fab9b4ccfc157709cdda5": "0x48798513af04c90000",
        "0x84db1459bb00812ea67ecb3dc189b72187d9c501": "0x811b8fbda85ab8000",
        "0x84e9949680bece6841b9a7e5250d08acd87d16cd": "0xad78ebc5ac6200000",
        "0x84e9cf8166c36abfa49053b7a1ad4036202681ef": "0x6c6b935b8bbd400000",
        "0x84ec06f24700fe42414cb9897c154c88de2f6132": "0x487a9a304539440000",
        "0x84f522f0520eba52dd18ad21fa4b829f2b89cb97": "0x10c5106d5134f130000",
        "0x850b9db18ff84bf0c7da49ea3781d92090ad7e64": "0x8cf23f909c0fa00000",
        "0x8510ee934f0cbc900e1007eb38a21e2a5101b8b2": "0x5bf0ba6634f680000",
        "0x8516fcaf77c893970fcd1a958ba9a00e49044019": "0xaa3eb1691bce58000",
        "0x851aa91c82f42fad5dd8e8bb5ea69c8f3a5977d1": "0x80e561f2578798000",
        "0x851c0d62be4635d4777e8035e37e4ba8517c6132": "0x1b1ae4d6e2ef500000",
        "0x851dc38adb4593729a76f33a8616dab6f5f59a77": "0x56bc75e2d63100000",
        "0x8532490897bbb4ce8b7f6b837e4cba848fbe9976": "0x56bc75e2d63100000",
        "0x853e6abaf44469c72f151d4e223819aced4e3728": "0x6c6b935b8bbd400000",
        "0x854691ce714f325ced55ce5928ce9ba12facd1b8": "0xed70b5e9c3f2f00000",
        "0x854c0c469c246b83b5d1b3eca443b39af5ee128a": "0x56bc75e2d631000000",
        "0x855d9aef2c39c6230d09c99ef6494989abe68785": "0x8ba52e6fc45e40000",
        "0x8563c49361b625e768771c96151dbfbd1c906976": "0x6c6b935b8bbd400000",
        "0x8566610901aace38b83244f3a9c831306a67b9dc": "0xb08213bcf8ffe00000",
        "0x856aa23c82d7215bec8d57f60ad75ef14fa35f44": "0x43c33c1937564800000",
        "0x856e5ab3f64c9ab56b009393b01664fc0324050e": "0x61093d7c2c6d380000",
        "0x856eb204241a87830fb229031343dc30854f581a": "0x3635c9adc5dea00000",
        "0x85732c065cbd64119941aed430ac59670b6c51c4": "0x27a57362ab0a0e8000",
        "0x8578e10212ca14ff0732a8241e37467db85632a9": "0x14542ba12a337c00000",
        "0x8579dadf1a395a3471e20b6f763d9a0ff19a3f6f": "0xd8d726b7177a800000",
        "0x857f100b1a5930225efc7e9020d78327b41c02cb": "0x6c6b935b8bbd400000",
        "0x85946d56a4d371a93368539690b60ec825107454": "0x5dc892aa1131c80000",
        "0x8599cbd5a6a9dcd4b966be387d69775da5e33c6f": "0xc51f1b1d52622900000",
        "0x859c600cf13d1d0273d5d1da3cd789e495899f27": "0x90f534608a72880000",
        "0x85a2f6ea94d05e8c1d9ae2f4910338a358e98ded": "0x6c6b935b8bbd400000",
        "0x85b16f0b8b34dff3804f69e2168a4f7b24d1042b": "0x112f423c7646d40000",
        "0x85b2998d0c73302cb2ba13f489313301e053be15": "0x21e19e0c9bab2400000",
        "0x85bb51bc3bfe9a1b2a2f6b1cda95bca8b38c8d5e": "0x11712da04ba1ef0000",
        "0x85c8f3cc7a354feac99a5e7bfe7cdfa351cfe355": "0x15af1d78b58c400000",
        "0x85ca1e727e9d1a87991cc2c41840ebb9edf21d1b": "0xb98bc829a6f90000",
        "0x85ca8bc6da2803d0725f5e1a456c89f9bc774e2f": "0x2086ac351052600000",
        "0x85d0d88754ac84b8b21ba93dd2bfec72626faba8": "0x3635c9adc5dea00000",
        "0x85eb256b51c819d60ea61a82d12c9358d59c1cae": "0x18efc84ad0c7b00000",
        "0x85f0e7c1e3aff805a627a2aaf2cff6b4c0dbe9cb": "0x1158e460913d00000",
        "0x86026cad3fe4ea1ce7fca260d3d45eb09ea6a364": "0xad78ebc5ac6200000",
        "0x860f5ffc10de767ded807f71e861d647dfd219b1": "0x21e19e0c9bab2400000",
        "0x86153063a1ae7f02f1a88136d4d69c7c5e3e4327": "0x3635c9adc5dea00000",
        "0x86245f596691093ece3f3d3ca2263eace81941d9": "0xa31062beeed700000",
        "0x862569211e8c6327b5415e3a67e5738b15baaf6e": "0x796e3ea3f8ab00000",
        "0x86297d730fe0f7a9ee24e08fb1087b31adb306a7": "0x6c6b935b8bbd400000",
        "0x8644cc281be332ccced36da483fb2a0746d9ba2e": "0x15af1d78b58c400000",
        "0x86499a1228ff2d7ee307759364506f8e8c8307a5": "0x6acb3df27e1f880000",
        "0x864bec5069f855a4fd5892a6c4491db07c88ff7c": "0x3635c9adc5dea00000",
        "0x86570ab259c9b1c32c9729202f77f590c07dd612": "0xad78ebc5ac6200000",
        "0x8663a241a0a89e70e182c845e2105c8ad7264bcf": "0x323b13d8398f3238000",
        "0x8667fa1155fed732cfb8dca5a0d765ce0d0705ed": "0x46ec965c393b10000",
        "0x8668af868a1e98885f937f2615ded6751804eb2d": "0x1158e460913d00000",
        "0x86740a46648e845a5d96461b18091ff57be8a16f": "0x14c0973485bf39400000",
        "0x867eba56748a5904350d2ca2a5ce9ca00b670a9b": "0x43c33c1937564800000",
        "0x86806474c358047d9406e6a07f40945bc8328e67": "0x1752eb0f7013d100000",
        "0x86883d54cd3915e549095530f9ab1805e8c5432d": "0xd8d726b7177a800000",
        "0x868c23be873466d4c74c220a19b245d1787e807f": "0x4a13bbbd92c88e8000",
        "0x86924fb211aad23cf5ce600e0aae806396444087": "0x21e19e0c9bab2400000",
        "0x8693e9b8be94425eef7969bc69f9d42f7cad671e": "0x3637096c4bcc690000",
        "0x869f1aa30e4455beb1822091de5cadec79a8f946": "0x1b1ae4d6e2ef5000000",
        "0x86a1eadeeb30461345d9ef6bd05216fa247c0d0c": "0x6c6b935b8bbd400000",
        "0x86a5f8259ed5b09e188ce346ee92d34aa5dd93fa": "0xad78ebc5ac6200000",
        "0x86b7bd563ceab686f96244f9ddc02ad7b0b14bc2": "0x21e19e0c9bab2400000",
        "0x86c28b5678af37d727ec05e4447790f15f71f2ea": "0xad78ebc5ac6200000",
        "0x86c4ce06d9ac185bb148d96f7b7abe73f441006d": "0x21e19e0c9bab2400000",
        "0x86c8d0d982b539f48f9830f9891f9d607a942659": "0x2ced37761824fb00000",
        "0x86c934e38e53be3b33f274d0539cfca159a4d0d1": "0x34957444b840e80000",
        "0x86ca0145957e6b0dfe36875fbe7a0dec55e17a28": "0x21e19e0c9bab2400000",
        "0x86caafacf32aa0317c032ac36babed974791dc03": "0x878678326eac9000000",
        "0x86cdb7e51ac44772be3690f61d0e59766e8bfc18": "0xd8d726b7177a800000",
        "0x86df73bd377f2c09de63c45d67f283eaefa0f4ab": "0x3635c9adc5dea00000",
        "0x86e3fe86e93da486b14266eadf056cbfa4d91443": "0x6c6b935b8bbd400000",
        "0x86e8670e27598ea09c3899ab7711d3b9fe901c17": "0xad78ebc5ac6200000",
        "0x86ef6426211949cc37f4c75e7850369d0cf5f479": "0x2d65f32ea045af60000",
        "0x86f05d19063e9369c6004eb3f123943a7cff4eab": "0x6c6acc67d7b1d40000",
        "0x86f23e9c0aafc78b9c404dcd60339a925bffa266": "0x15af1d78b58c400000",
        "0x86f4f40ad984fbb80933ae626e0e42f9333fdd41": "0x3635c9adc5dea00000",
        "0x86f95c5b11a293940e35c0b898d8b75f08aab06d": "0x644e3e875fccf740000",
        "0x86fff220e59305c09f483860d6f94e96fbe32f57": "0x2535b6ab4c0420000",
        "0x870796abc0db84af82da52a0ed68734de7e636f5": "0x1043561a8829300000",
        "0x870f15e5df8b0eabd02569537a8ef93b56785c42": "0x150894e849b3900000",
        "0x87183160d172d2e084d327b86bcb7c1d8e6784ef": "0xd8d8583fa2d52f0000",
        "0x871b8a8b51dea1989a5921f13ec1a955a515ad47": "0x1b1ae4d6e2ef5000000",
        "0x8725e8c753b3acbfdca55f3c62dfe1a59454968a": "0x3637096c4bcc690000",
        "0x8737dae671823a8d5917e0157ace9c43468d946b": "0x6c6acc67d7b1d40000",
        "0x873b7f786d3c99ff012c4a7cae2677270240b9c5": "0x5dc892aa1131c80000",
        "0x873c6f70efb6b1d0f2bbc57eebcd70617c6ce662": "0x36f0d5275d09570000",
        "0x873e49135c3391991060290aa7f6ccb8f85a78db": "0x1158e460913d00000",
        "0x875061ee12e820041a01942cb0e65bb427b00060": "0x97c9ce4cf6d5c00000",
        "0x87584a3f613bd4fac74c1e780b86d6caeb890cb2": "0x5c283d410394100000",
        "0x8764d02722000996ecd475b433298e9f540b05bf": "0xad78ebc5ac6200000",
        "0x876c3f218b4776df3ca9dbfb270de152d94ed252": "0x56bc75e2d63100000",
        "0x8775a610c502b9f1e6ad4cdadb8ce29bff75f6e4": "0x2086ac351052600000",
        "0x87764e3677eef604cbc59aed24abdc566b09fc25": "0xa2a15d09519be00000",
        "0x8787d12677a5ec291e57e31ffbfad105c3324b87": "0x2a24eb53208f3128000",
        "0x8794bf47d54540ece5c72237a1ffb511ddb74762": "0x6c6b935b8bbd400000",
        "0x87a53ea39f59a35bada8352521645594a1a714cb": "0x678a932062e4180000",
        "0x87a7c508ef71582dd9a54372f89cb01f252fb180": "0xad78ebc5ac6200000",
        "0x87af25d3f6f8eea15313d5fe4557e810c524c083": "0x42bf06b78ed3b500000",
        "0x87b10f9c280098179a2b76e9ce90be61fc844d0d": "0x487a9a304539440000",
        "0x87bf7cd5d8a929e1c785f9e5449106ac232463c9": "0x437b11fcc45640000",
        "0x87c498170934b8233d1ad1e769317d5c475f2f40": "0x3708baed3d68900000",
        "0x87cf36ad03c9eae9053abb5242de9117bb0f2a0b": "0x1b1ae4d6e2ef500000",
        "0x87d7ac0653ccc67aa9c3469eef4352193f7dbb86": "0x2a5a058fc295ed000000",
        "0x87e3062b2321e9dfb0875ce3849c9b2e3522d50a": "0x21e19e0c9bab2400000",
        "0x87e6034ecf23f8b5639d5f0ea70a22538a920423": "0x11c7ea162e78200000",
        "0x87ef6d8b6a7cbf9b5c8c97f67ee2adc2a73b3f77": "0xadd1bd23c3c480000",
        "0x87fb26c31e48644d693134205cae43b21f18614b": "0x4a4491bd6dcd280000",
        "0x87fc4635263944ce14a46c75fa4a821f39ce7f72": "0x1158e460913d00000",
        "0x87fcbe7c4193ffcb08143779c9bec83fe7fda9fc": "0x56f985d38644b8000",
        "0x88015d7203c5e0224aeda286ed12f1a51b789333": "0x10f08eda8e555098000",
        "0x88106c27d20b74b4b98ca62b232bd5c97411171f": "0xaadec983fcff40000",
        "0x881230047c211d2d5b00d8de4c5139de5e3227c7": "0x21e19e0c9bab2400000",
        "0x882aa798bf41df179f85520130f15ccdf59b5e58": "0x6c6b935b8bbd400000",
        "0x882bd3a2e9d74110b24961c53777f22f1f46dc5d": "0x2d4ca05e2b43ca80000",
        "0x882c8f81872c79fed521cb5f950d8b032322ea69": "0x878678326eac9000000",
        "0x882f75708386653c80171d0663bfe30b017ed0ad": "0x6c6b935b8bbd400000",
        "0x88344909644c7ad4930fd873ca1c0da2d434c07f": "0x727739fcb004d0000",
        "0x8834b2453471f324fb26be5b25166b5b5726025d": "0x1f0ff8f01daad40000",
        "0x883a78aeabaa50d8ddd8570bcd34265f14b19363": "0xd25522fda379a18000",
        "0x8845e9f90e96336bac3c616be9d88402683e004c": "0x6c6b935b8bbd400000",
        "0x8846928d683289a2d11df8db7a9474988ef01348": "0x21e19e0c9bab2400000",
        "0x884980eb4565c1048317a8f47fdbb461965be481": "0xd8d6119a8146050000",
        "0x884a7a39d0916e05f1c242df55607f37df8c5fda": "0x4f4843c157c8ca00000",
        "0x885493bda36a0432976546c1ddce71c3f4570021": "0xbbf510ddfcb260000",
        "0x88609e0a465b6e99fce907166d57e9da0814f5c8": "0x43c33c1937564800000",
        "0x886d0a9e17c9c095af2ea2358b89ec705212ee94": "0x18493fba64ef00000",
        "0x88797e58675ed5cc4c19980783dbd0c956085153": "0x6c6b935b8bbd400000",
        "0x887cac41cd706f3345f2d34ac34e01752a6e5909": "0x20465cee9da1370000",
        "0x88888a57bd9687cbf950aeeacf9740dcc4d1ef59": "0x62a992e53a0af00000",
        "0x8889448316ccf14ed86df8e2f478dc63c4338340": "0xd2f13f7789f00000",
        "0x888c16144933197cac26504dd76e06fd6600c789": "0x56bc75e2d63100000",
        "0x888e94917083d152202b53163939869d271175b4": "0xd8d726b7177a800000",
        "0x889087f66ff284f8b5efbd29493b706733ab1447": "0x215f835bc769da80000",
        "0x8895eb726226edc3f78cc6a515077b3296fdb95e": "0xd5967be4fc3f100000",
        "0x88975a5f1ef2528c300b83c0c607b8e87dd69315": "0x486cb9799191e0000",
        "0x889da40fb1b60f9ea9bd7a453e584cf7b1b4d9f7": "0x22b1c8c1227a00000",
        "0x889da662eb4a0a2a069d2bc24b05b4ee2e92c41b": "0x5a2c8c5456c9f28000",
        "0x88a122a2382c523931fb51a0ccad3beb5b7259c3": "0x6c6b935b8bbd400000",
        "0x88a2154430c0e41147d3c1fee3b3b006f851edbd": "0x36356633ebd8ea0000",
        "0x88b217ccb786a254cf4dc57f5d9ac3c455a30483": "0x3224f42723d4540000",
        "0x88bc43012edb0ea9f062ac437843250a39b78fbb": "0x43c33c1937564800000",
        "0x88c2516a7cdb09a6276d7297d30f5a4db1e84b86": "0xd8d726b7177a800000",
        "0x88c361640d6b69373b081ce0c433bd590287d5ec": "0xa968163f0a57b400000",
        "0x88d541c840ce43cefbaf6d19af6b9859b573c145": "0x93739534d28680000",
        "0x88de13b09931877c910d593165c364c8a1641bd3": "0xa2a15d09519be00000",
        "0x88dec5bd3f4eba2d18b8aacefa7b721548c319ba": "0x4a4491bd6dcd280000",
        "0x88e6f9b247f988f6c0fc14c56f1de53ec69d43cc": "0x56bc75e2d63100000",
        "0x88ee7f0efc8f778c6b687ec32be9e7d6f020b674": "0x6c6b935b8bbd400000",
        "0x88f1045f19f2d3191816b1df18bb6e1435ad1b38": "0xd02ab486cedc00000",
        "0x89009e3c6488bd5e570d1da34eabe28ed024de1b": "0x43c33c1937564800000",
        "0x89054430dcdc28ac15fa635ef87c105e602bf70c": "0x5dacd13ca9e300000",
        "0x8908760cd39b9c1e8184e6a752ee888e3f0b7045": "0x14542ba12a337c00000",
        "0x890fe11f3c24db8732d6c2e772e2297c7e65f139": "0xd5627137da8b5900000",
        "0x8914a680a5aec5226d4baaec2e5552b44dd7c874": "0x56cd55fc64dfe0000",
        "0x891cb8238c88e93a1bcf61db49bd82b47a7f4f84": "0x914878a8c05ee00000",
        "0x8925da4549e15155e57a628522cea9dddf627d81": "0x3636c25e66ece70000",
        "0x893017ff1adad499aa065401b4236ce6e92b625a": "0x6c6acc67d7b1d40000",
        "0x8933491760c8f0b4df8caac78ed835caee21046d": "0x43c33c1937564800000",
        "0x893608751d68d046e85802926673cdf2f57f7cb8": "0x11164759ffb320000",
        "0x8938d1b4daee55a54d738cf17e4477f6794e46f7": "0xfc936392801c0000",
        "0x893a6c2eb8b40ab096b4f67e74a897b840746e86": "0x5dc892aa1131c80000",
        "0x893cdddf5377f3c751bf2e541120045a47cba101": "0x56bc75e2d63100000",
        "0x895613236f3584216ad75c5d3e07e3fa6863a778": "0x6c6b935b8bbd400000",
        "0x8957727e72cf629020f4e05edf799aa7458062d0": "0x77432217e683600000",
        "0x895d694e880b13ccd0848a86c5ce411f88476bbf": "0xad6eedd17cf3b8000",
        "0x895ec5545644e0b78330fffab8ddeac9e833156c": "0x2086ac351052600000",
        "0x896009526a2c7b0c09a6f63a80bdf29d9c87de9c": "0xbbb86b8223edeb0000",
        "0x8967d7b9bdb7b4aed22e65a15dc803cb7a213f10": "0x15af1d78b58c400000",
        "0x896e335ca47af57962fa0f4dbf3e45e688cba584": "0x4a2fc0ab6052120000",
        "0x8973aefd5efaee96095d9e288f6a046c97374b43": "0x7a4c4a0f332140000",
        "0x898c72dd736558ef9e4be9fdc34fef54d7fc7e08": "0x3635c9adc5dea00000",
        "0x899b3c249f0c4b81df75d212004d3d6d952fd223": "0x6c6b935b8bbd400000",
        "0x89ab13ee266d779c35e8bb04cd8a90cc2103a95b": "0xcb49b44ba602d800000",
        "0x89c433d601fad714da6369308fd26c1dc9942bbf": "0x6c6b935b8bbd400000",
        "0x89d75b8e0831e46f80bc174188184e006fde0eae": "0x3635c9adc5dea00000",
        "0x89e3b59a15864737d493c1d23cc53dbf8dcb1362": "0xd8d726b7177a800000",
        "0x89fc8e4d386b0d0bb4a707edf3bd560df1ad8f4e": "0xa030dcebbd2f4c0000",
        "0x89fee30d1728d96cecc1dab3da2e771afbcfaa41": "0x6c6acc67d7b1d40000",
        "0x8a1cc5ac111c49bfcfd848f37dd768aa65c88802": "0x21e19e0c9bab2400000",
        "0x8a20e5b5cee7cd1f5515bace3bf4f77ffde5cc07": "0x4563918244f400000",
        "0x8a217db38bc35f215fd92906be42436fe7e6ed19": "0x14542ba12a337c00000",
        "0x8a243a0a9fea49b839547745ff2d11af3f4b0522": "0x35659ef93f0fc40000",
        "0x8a247d186510809f71cffc4559471c3910858121": "0x61093d7c2c6d380000",
        "0x8a3470282d5e2a2aefd7a75094c822c4f5aeef8a": "0xd28bc606478a58000",
        "0x8a36869ad478997cbf6d8924d20a3c8018e9855b": "0x1158e460913d00000",
        "0x8a4314fb61cd938fc33e15e816b113f2ac89a7fb": "0x17764e7aed65100000",
        "0x8a4f4a7f52a355ba105fca2072d3065fc8f7944b": "0x1b1ae4d6e2ef500000",
        "0x8a5831282ce14a657a730dc18826f7f9b99db968": "0xeabe8a5b41c1360000",
        "0x8a5fb75793d043f1bcd43885e037bd30a528c927": "0x13536e6d2e9ac20000",
        "0x8a66abbc2d30ce21a833b0db8e561d5105e0a72c": "0x25f1de5c76acdf0000",
        "0x8a746c5d67064711bfca685b95a4fe291a27028e": "0x22b1c8c1227a00000",
        "0x8a780ab87a9145fe10ed60fa476a740af4cab1d2": "0x121b2e5e6464780000",
        "0x8a7a06be199a3a58019d846ac9cbd4d95dd757de": "0xa2a423944256f40000",
        "0x8a810114b2025db9fbb50099a6e0cb9e2efa6bdc": "0x678a932062e4180000",
        "0x8a86e4a51c013b1fb4c76bcf30667c78d52eedef": "0x6c6b935b8bbd400000",
        "0x8a9eca9c5aba8e139f8003edf1163afb70aa3aa9": "0x23c757072b8dd00000",
        "0x8ab839aeaf2ad37cb78bacbbb633bcc5c099dc46": "0x6c6b935b8bbd400000",
        "0x8ac89bd9b8301e6b0677fa25fcf0f58f0cc7b611": "0x1158e460913d00000",
        "0x8adc53ef8c18ed3051785d88e996f3e4b20ecd51": "0x8e4d316827686400000",
        "0x8ae6f80b70e1f23c91fbd5a966b0e499d95df832": "0xaadec983fcff40000",
        "0x8ae9ef8c8a8adfa6ab798ab2cdc405082a1bbb70": "0x6c6b935b8bbd400000",
        "0x8af626a5f327d7506589eeb7010ff9c9446020d2": "0x4be4e7267b6ae00000",
        "0x8b01da34d470c1d115acf4d8113c4dd8a8c338e4": "0x5572dcefab697900000",
        "0x8b07d050754dc9ba230db01c310afdb5395aa1b3": "0x666b06e62a6200000",
        "0x8b20ad3b94656dbdc0dd21a393d8a7d9e02138cb": "0xa2a15d09519be00000",
        "0x8b27392206b958cd375d7ef8af2cf8ef0598c0bc": "0x3635c9adc5dea00000",
        "0x8b30c04098d7a7e6420c357ea7bfa49bac9a8a18": "0x1b1b113f91fb0140000",
        "0x8b338411f26ccf37658cc75521d77629099e467d": "0x6c6b935b8bbd400000",
        "0x8b36224c7356e751f0c066c35e3b44860364bfc2": "0x3627bac7a3d9278000",
        "0x8b3696f3c60de32432a2e4c395ef0303b7e81e75": "0x65a4da25d3016c00000",
        "0x8b393fb0813ee101db1e14ecc7d322c72b8c0473": "0x18b26a313e8ae90000",
        "0x8b48e19d39dd35b66e6e1bb6b9c657cb2cf59d04": "0x3c755ac9c024a018000",
        "0x8b505e2871f7deb7a63895208e8227dcaa1bff05": "0xcf68efc308d79bc0000",
        "0x8b57b2bc83cc8d4de331204e893f2f3b1db1079a": "0x22b1c8c1227a00000",
        "0x8b5c914b128bf1695c088923fa467e7911f351fa": "0x556f64c1fe7fa0000",
        "0x8b5f29cc2faa262cdef30ef554f50eb488146eac": "0x13b68705c9720810000",
        "0x8b7056f6abf3b118d026e944d5c073433ca451d7": "0x3635c6204739d98000",
        "0x8b714522fa2839620470edcf0c4401b713663df1": "0xad78ebc5ac6200000",
        "0x8b74a7cb1bb8c58fce267466a30358adaf527f61": "0x2e257784e25b4500000",
        "0x8b7e9f6f05f7e36476a16e3e7100c9031cf404af": "0x3635c9adc5dea00000",
        "0x8b81156e698639943c01a75272ad3d35851ab282": "0x12b3165f65d3e50000",
        "0x8b9577920053b1a00189304d888010d9ef2cb4bf": "0x1b1ae4d6e2ef500000",
        "0x8b9841862e77fbbe919470935583a93cf027e450": "0x6c6c5334427f1f0000",
        "0x8b997dbc078ad02961355da0a159f2927ed43d64": "0xaadec983fcff40000",
        "0x8b9fda7d981fe9d64287f85c94d83f9074849fcc": "0x2f6f10780d22cc00000",
        "0x8bb0212f3295e029cab1d961b04133a1809e7b91": "0x6c6b935b8bbd400000",
        "0x8bbeacfc29cfe93402db3c41d99ab759662e73ec": "0x6c6b935b8bbd400000",
        "0x8bc1ff8714828bf286ff7e8a7709106548ed1b18": "0x21e19e0c9bab2400000",
        "0x8bd0b65a50ef5cef84fec420be7b89ed1470ceb9": "0x28a77936e92c81c0000",
        "0x8bd6b1c6d74d010d1008dba6ef835d4430b35c32": "0x2b5e3af16b1880000",
        "0x8bd8d4c4e943f6c8073921dc17e3e8d7a0761627": "0x9f04219d8d34950000",
        "0x8bdfda6c215720eda2136f91052321af4e936c1f": "0x3635e619bb04d40000",
        "0x8bea40379347a5c891d59a6363315640f5a7e07a": "0x6c6b76ef96970c0000",
        "0x8bf02bd748690e1fd1c76d270833048b66b25fd3": "0x27fade568eba9600000",
        "0x8bf297f8f453523ed66a1acb7676856337b93bf0": "0xd8d726b7177a800000",
        "0x8bf373d076814cbc57e1c6d16a82c5be13c73d37": "0xad78ebc5ac6200000",
        "0x8c1023fde1574db8bb54f1739670157ca47da652": "0x179cf9ac3a1b1770000",
        "0x8c1fbe5f0aea359c5aa1fa08c8895412ca8e05a6": "0x3635c9adc5dea00000",
        "0x8c22426055b76f11f0a2de1a7f819a619685fe60": "0x6b56051582a9700000",
        "0x8c2b7d8b608d28b77f5caa9cd645242a823e4cd9": "0x62a992e53a0af00000",
        "0x8c2fbeee8eacc5c5d77c16abd462ee9c8145f34b": "0x692ae8897081d00000",
        "0x8c3a9ee71f729f236cba3867b4d79d8ceee25dbc": "0x56bc75e2d63100000",
        "0x8c50aa2a9212bcde56418ae261f0b35e7a9dbb82": "0x15af1d78b58c400000",
        "0x8c54c7f8b9896e75d7d5f5c760258699957142ad": "0x22b1c8c1227a00000",
        "0x8c5d16ed65e3ed7e8b96ca972bc86173e3500b03": "0x6c6b935b8bbd400000",
        "0x8c6aa882ee322ca848578c06cb0fa911d3608305": "0x2086ac351052600000",
        "0x8c6ae7a05a1de57582ae2768204276c0ff47ed03": "0x2c0bb3dd30c4e2000000",
        "0x8c6f9f4e5b7ae276bf58497bd7bf2a7d25245f64": "0x93fe5c57d710680000",
        "0x8c75956e8fed50f5a7dd7cfd27da200f6746aea6": "0x3635c9adc5dea00000",
        "0x8c7cb4e48b25031aa1c4f92925d631a8c3edc761": "0x3635c9adc5dea00000",
        "0x8c7fa5cae82fedb69ab189d3ff27ae209293fb93": "0x15af880d8cdb830000",
        "0x8c81410ea8354cc5c65c41be8bd5de733c0b111d": "0x205b4dfa1ee74780000",
        "0x8c83d424a3cf24d51f01923dd54a18d6b6fede7b": "0xd8d726b7177a800000",
        "0x8c900a8236b08c2b65405d39d75f20062a7561fd": "0x58e7926ee858a00000",
        "0x8c93c3c6db9d37717de165c3a1b4fe51952c08de": "0x15af1d78b58c400000",
        "0x8c999591fd72ef7111efca7a9e97a2356b3b000a": "0xdd64e2aa0a67500000",
        "0x8ca6989746b06e32e2487461b1ce996a273acfd7": "0x1158e460913d00000",
        "0x8cb3aa3fcd212854d7578fcc30fdede6742a312a": "0x1043561a8829300000",
        "0x8cc0d7c016fa7aa950114aa1db094882eda274ea": "0x8a9aba557e36c0000",
        "0x8cc652dd13e7fe14dabbb36d5d320db9ffee8a54": "0x61093d7c2c6d380000",
        "0x8ccabf25077f3aa41545344d53be1b2b9c339000": "0x5be866c562c5440000",
        "0x8ccf3aa21ab742576ad8c422f71bb188591dea8a": "0x3635c9adc5dea00000",
        "0x8cd0cd22e620eda79c0461e896c93c44837e2968": "0x6c6b935b8bbd400000",
        "0x8cde8b732e6023878eb23ed16229124b5f7afbec": "0x73f75d1a085ba0000",
        "0x8ce22f9fa372449a420610b47ae0c8d565481232": "0x6c6b935b8bbd400000",
        "0x8ce4949d8a16542d423c17984e6739fa72ceb177": "0x54b405926f4a63d8000",
        "0x8ce5e3b5f591d5eca38abf228f2e3c35134bdac0": "0x7dc35b84897c380000",
        "0x8cee38d6595788a56e3fb94634b3ffe1fbdb26d6": "0x43c33c1937564800000",
        "0x8ceea15eec3bdad8023f98ecf25b2b8fef27db29": "0x6c6b935b8bbd400000",
        "0x8cf3546fd1cda33d58845fc8fcfecabca7c5642a": "0x1f1e39932cb3278000",
        "0x8cf6da0204dbc4860b46ad973fc111008d9e0c46": "0xad78ebc5ac6200000",
        "0x8cfedef198db0a9143f09129b3fd64dcbb9b4956": "0x6c6b935b8bbd400000",
        "0x8d04a5ebfb5db409db0617c9fa5631c192861f4a": "0x34957444b840e80000",
        "0x8d06e464245cad614939e0af0845e6d730e20374": "0xadc8a28f3d87d8000",
        "0x8d07d42d831c2d7c838aa1872b3ad5d277176823": "0x12ee1f9ddbee680000",
        "0x8d0b9ea53fd263415eac11391f7ce9123c447062": "0x6c6b935b8bbd400000",
        "0x8d1794da509cb297053661a14aa892333231e3c1": "0xad201a6794ff80000",
        "0x8d1abd897dacd4312e18080c88fb9647eab44052": "0xbb59a27953c600000",
        "0x8d2303341e1e1eb5e8189bde03f73a60a2a54861": "0x56bc75e2d63100000",
        "0x8d238e036596987643d73173c37b0ad06055b96c": "0x7148bf0a2af0660000",
        "0x8d2e31b08803b2c5f13d398ecad88528209f6057": "0x21db8bbcad11e840000",
        "0x8d378f0edc0bb0f0686d6a20be6a7692c4fa24b8": "0x56bc75e2d63100000",
        "0x8d4b603c5dd4570c34669515fdcc665890840c77": "0xfc936392801c0000",
        "0x8d51a4cc62011322c696fd725b9fb8f53feaaa07": "0x3635c9adc5dea00000",
        "0x8d544c32c07fd0842c761d53a897d6c950bb7599": "0xad78ebc5ac6200000",
        "0x8d5ef172bf77315ea64e85d0061986c794c6f519": "0xd5967be4fc3f100000",
        "0x8d616b1eee77eef6f176e0698db3c0c141b2fc8f": "0x1b1ae4d6e2ef500000",
        "0x8d6170ff66978e773bb621bf72b1ba7be3a7f87e": "0xad78ebc5ac6200000",
        "0x8d620bde17228f6cbba74df6be87264d985cc179": "0x56bc75e2d63100000",
        "0x8d629c20608135491b5013f1002586a0383130e5": "0x4a4491bd6dcd280000",
        "0x8d6657f59711b1f803c6ebef682f915b62f92dc9": "0x6c6b935b8bbd400000",
        "0x8d667637e29eca05b6bfbef1f96d460eefbf9984": "0xd8d726b7177a800000",
        "0x8d6df209484d7b94702b03a53e56b9fb0660f6f0": "0x6c6b935b8bbd400000",
        "0x8d795c5f4a5689ad62da961671f028065286d554": "0x6f05b59d3b20000000",
        "0x8d7f3e61299c2db9b9c0487cf627519ed00a9123": "0x5e74a8505e80a00000",
        "0x8d89170b92b2be2c08d57c48a7b190a2f146720f": "0x42bf06b78ed3b500000",
        "0x8d93dac785f88f1a84bf927d53652b45a154ccdd": "0x890b0c2e14fb80000",
        "0x8d9952d0bb4ebfa0efd01a3aa9e8e87f0525742e": "0xbb9125542263900000",
        "0x8d9a0c70d2262042df1017d6c303132024772712": "0x6c6b935b8bbd400000",
        "0x8d9ed7f4553058c26f7836a3802d3064eb1b363d": "0x4e1003b28d9280000",
        "0x8da1178f55d97772bb1d24111a404a4f8715b95d": "0x2f9ac3f6de00808000",
        "0x8da1d359ba6cb4bcc57d7a437720d55db2f01c72": "0x4563918244f400000",
        "0x8dab948ae81da301d972e3f617a912e5a753712e": "0x15af1d78b58c400000",
        "0x8daddf52efbd74da95b969a5476f4fbbb563bfd2": "0x2d43f3ebfafb2c0000",
        "0x8db185fe1b70a94a6a080e7e23a8bedc4acbf34b": "0x4be4e7267b6ae00000",
        "0x8db58e406e202df9bc703c480bd8ed248d52a032": "0x6c6b935b8bbd400000",
        "0x8dbc3e6cb433e194f40f82b40faadb1f8b856116": "0x678a932062e4180000",
        "0x8dc1d5111d09af25fdfcac455c7cec283e6d6775": "0x6c6b935b8bbd400000",
        "0x8dd484ff8a307364eb66c525a571aac701c5c318": "0xd8d726b7177a800000",
        "0x8dd6a9bae57f518549ada677466fea8ab04fd9b4": "0xd8d726b7177a800000",
        "0x8dde3cb8118568ef4503fe998ccdf536bf19a098": "0xd8d726b7177a800000",
        "0x8dde60eb08a099d7daa356daaab2470d7b025a6b": "0xaadec983fcff40000",
        "0x8df339214b6ad1b24663ce716034749d6ef838d9": "0x2544faa778090e00000",
        "0x8df53d96191471e059de51c718b983e4a51d2afd": "0x6c6b935b8bbd4000000",
        "0x8dfbafbc0e5b5c86cd1ad697feea04f43188de96": "0x15252b7f5fa0de0000",
        "0x8e073bad25e42218615f4a0e6b2ea8f8de2230c0": "0x823d629d026bfa0000",
        "0x8e0fee38685a94aabcd7ce857b6b1409824f75b8": "0x1b1ae4d6e2ef500000",
        "0x8e23facd12c765c36ab81a6dd34d8aa9e68918ae": "0x911e4868dba9b0000",
        "0x8e2f9034c9254719c38e50c9aa64305ed696df1e": "0x1004e2e45fb7ee00000",
        "0x8e3240b0810e1cf407a500804740cf8d616432a4": "0x22f6655ef0b388000",
        "0x8e486a0442d171c8605be348fee57eb5085eff0d": "0xd8d726b7177a800000",
        "0x8e6156336be2cdbe32140df08a2ba55fd0a58463": "0x4099e1d6357180000",
        "0x8e670815fb67aeaea57b86534edc00cdf564fee5": "0xb2e4b323d9c5100000",
        "0x8e6d7485cbe990acc1ad0ee9e8ccf39c0c93440e": "0x33c5499031720c0000",
        "0x8e74e0d1b77ebc823aca03f119854cb12027f6d7": "0x16b352da5e0ed3000000",
        "0x8e78f351457d016f4ad2755ec7424e5c21ba6d51": "0x7ea28327577080000",
        "0x8e7936d592008fdc7aa04edeeb755ab513dbb89d": "0x1158e460913d00000",
        "0x8e7fd23848f4db07906a7d10c04b21803bb08227": "0x3635c9adc5dea00000",
        "0x8e92aba38e72a098170b92959246537a2e5556c0": "0xe7eeba3410b740000",
        "0x8e98766524b0cf2747c50dd43b9567594d9731de": "0x6c44b7c26182280000",
        "0x8e9b35ad4a0a86f758446fffde34269d940ceacd": "0xd8d726b7177a800000",
        "0x8e9c08f738661f9676236eff82ba6261dd3f4822": "0x56bc75e2d63100000",
        "0x8e9c429266df057efa78dd1d5f77fc40742ad466": "0x10442ed1b56c7c8000",
        "0x8ea656e71ec651bfa17c5a5759d86031cc359977": "0x56bc75e2d63100000",
        "0x8eae29435598ba8f1c93428cdb3e2b4d31078e00": "0x6c6b935b8bbd400000",
        "0x8eb1fbe4e5d3019cd7d30dae9c0d5b4c76fb6331": "0x6c6b935b8bbd400000",
        "0x8eb51774af206b966b8909c45aa6722748802c0c": "0x1b1ae4d6e2ef500000",
        "0x8eb8c71982a00fb84275293253f8044544b66b49": "0x15af1d78b58c400000",
        "0x8ecbcfacbfafe9f00c3922a24e2cf0026756ca20": "0x131beb925ffd3200000",
        "0x8eceb2e124536c5b5ffc640ed14ff15ed9a8cb71": "0x6c6b935b8bbd400000",
        "0x8ed0af11ff2870da0681004afe18b013f7bd3882": "0xd8d726b7177a800000",
        "0x8ed143701f2f72280fd04a7b4164281979ea87c9": "0xc249fdd327780000",
        "0x8ed1528b447ed4297902f639c514d0944a88f8c8": "0xac6e77ab663a80000",
        "0x8ed4284c0f47449c15b8d9b3245de8beb6ce80bf": "0x2b5e3af16b18800000",
        "0x8ede7e3dc50749c6c50e2e28168478c34db81946": "0x43c30fb0884a96c0000",
        "0x8ee584337ddbc80f9e3498df55f0a21eacb57fb1": "0x1158e460913d00000",
        "0x8eebec1a62c08b05a7d1d59180af9ff0d18e3f36": "0x1b1ae4d6e2ef500000",
        "0x8ef4d8a2c23c5279187b64e96f741404085385f3": "0x103dc1e9a9697b0000",
        "0x8ef711e43a13918f1303e81d0ea78c9eefd67eb2": "0xd8d726b7177a800000",
        "0x8efec058cc546157766a632775404a334aaada87": "0x6c5db2a4d815dc0000",
        "0x8f02bda6c36922a6be6a509be51906d393f7b99b": "0x37490dc12ebe7f8000",
        "0x8f0538ed71da1155e0f3bde5667ceb84318a1a87": "0x692ae8897081d00000",
        "0x8f067c7c1bbd57780b7b9eeb9ec0032f90d0dcf9": "0x43c33c1937564800000",
        "0x8f0ab894bd3f4e697dbcfb859d497a9ba195994a": "0x85d638b65472aa20000",
        "0x8f0af37566d152802f1ae8f928b25af9b139b448": "0xad78ebc5ac6200000",
        "0x8f1952eed1c548d9ee9b97d0169a07933be69f63": "0x3635c9adc5dea00000",
        "0x8f1fcc3c51e252b693bc5b0ec3f63529fe69281e": "0x14542ba12a337c00000",
        "0x8f226096c184ebb40105e08dac4d22e1c2d54d30": "0x109e437bd1618c0000",
        "0x8f29a14a845ad458f2d108b568d813166bcdf477": "0x21e19e0c9bab2400000",
        "0x8f31c7005197ec997a87e69bec48649ab94bb2a5": "0xd8d726b7177a800000",
        "0x8f41b1fbf54298f5d0bc2d122f4eb95da4e5cd3d": "0x1333832f5e335c0000",
        "0x8f47328ee03201c9d35ed2b5412b25decc859362": "0x6c6b935b8bbd400000",
        "0x8f473d0ab876ddaa15608621d7013e6ff714b675": "0x19801c83b6c7c00000",
        "0x8f4d1d41693e462cf982fd81d0aa701d3a5374c9": "0xd8d726b7177a800000",
        "0x8f4d1e7e4561284a34fef9673c0d34e12af4aa03": "0x6c6b935b8bbd400000",
        "0x8f4fb1aea7cd0f570ea5e61b40a4f4510b6264e4": "0xd8d726b7177a800000",
        "0x8f561b41b209f248c8a99f858788376250609cf3": "0x5c283d410394100000",
        "0x8f58d8348fc1dc4e0dd8343b6543c857045ee940": "0x2e3038df47303280000",
        "0x8f60895fbebbb5017fcbff3cdda397292bf25ba6": "0x174406ff9f6fd28000",
        "0x8f64b9c1246d857831643107d355b5c75fef5d4f": "0x6c6acc67d7b1d40000",
        "0x8f660f8b2e4c7cc2b4ac9c47ed28508d5f8f8650": "0x43c33c1937564800000",
        "0x8f69eafd0233cadb4059ab779c46edf2a0506e48": "0x60f06620a849450000",
        "0x8f717ec1552f4c440084fba1154a81dc003ebdc0": "0x21e19e0c9bab2400000",
        "0x8f8acb107607388479f64baaabea8ff007ada97d": "0x5c6f3080ad423f40000",
        "0x8f8cd26e82e7c6defd02dfad07979021cbf7150c": "0xa2a15d09519be00000",
        "0x8f8f37d0ad8f335d2a7101b41156b688a81a9cbe": "0x3cb71f51fc5580000",
        "0x8f92844f282a92999ee5b4a8d773d06b694dbd9f": "0x692ae8897081d00000",
        "0x8fac748f784a0fed68dba43319b42a75b4649c6e": "0x3154c9729d05780000",
        "0x8fd9a5c33a7d9edce0997bdf77ab306424a11ea9": "0x6c6b935b8bbd400000",
        "0x8feffadb387a1547fb284da9b8147f3e7c6dc6da": "0x2d627be45305080000",
        "0x8ff46045687723dc33e4d099a06904f1ebb584dc": "0x6c6b935b8bbd400000",
        "0x8ffa062122ac307418821adb9311075a3703bfa3": "0x3635c9adc5dea00000",
        "0x8ffe322997b8e404422d19c54aadb18f5bc8e9b7": "0xd5967be4fc3f100000",
        "0x900194c4b1074305d19de405b0ac78280ecaf967": "0x3635c9adc5dea00000",
        "0x9003d270891ba2df643da8341583193545e3e000": "0xd8d726b7177a800000",
        "0x90057af9aa66307ec9f033b29724d3b2f41eb6f9": "0x19d1d6aadb2c52e80000",
        "0x900f0b8e35b668f81ef252b13855aa5007d012e7": "0x170a0f5040e5040000",
        "0x9018cc1f48d2308e252ab6089fb99a7c1d569410": "0xad78ebc5ac6200000",
        "0x901d99b699e5c6911519cb2076b4c76330c54d22": "0x6c6b935b8bbd400000",
        "0x902d74a157f7d2b9a3378b1f56703730e03a1719": "0xd8d726b7177a800000",
        "0x903413878aea3bc1086309a3fe768b65559e8cab": "0x1b1ae4d6e2ef5000000",
        "0x904966cc2213b5b8cb5bd6089ef9cddbef7edfcc": "0x6c6b935b8bbd400000",
        "0x904caa429c619d940f8e6741826a0db692b19728": "0x3635c9adc5dea00000",
        "0x9052f2e4a3e3c12dd1c71bf78a4ec3043dc88b7e": "0xe7eeba3410b740000",
        "0x905526568ac123afc0e84aa715124febe83dc87c": "0xf8699329677e0000",
        "0x9092918707c621fdbd1d90fb80eb787fd26f7350": "0x855b5ba65c84f00000",
        "0x909b5e763a39dcc795223d73a1dbb7d94ca75ac8": "0x6c6b935b8bbd400000",
        "0x90acced7e48c08c6b934646dfa0adf29dc94074f": "0x30b4b157bbd490000",
        "0x90b1f370f9c1eb0be0fb8e2b8ad96a416371dd8a": "0x30ca024f987b900000",
        "0x90b62f131a5f29b45571513ee7a74a8f0b232202": "0x890b0c2e14fb80000",
        "0x90bd62a050845261fa4a9f7cf241ea630b05efb8": "0x1b1ae4d6e2ef500000",
        "0x90c41eba008e20cbe927f346603fc88698125969": "0x246ddf97976680000",
        "0x90d2809ae1d1ffd8f63eda01de49dd552df3d1bc": "0xd8bb6549b02bb80000",
        "0x90dc09f717fc2a5b69fd60ba08ebf40bf4e8246c": "0xd8d8583fa2d52f0000",
        "0x90e300ac71451e401f887f6e7728851647a80e07": "0x15af1d78b58c400000",
        "0x90e35aabb2deef408bb9b5acef714457dfde6272": "0x56cd55fc64dfe0000",
        "0x90e7070f4d033fe6910c9efe5a278e1fc6234def": "0x571380819b3040000",
        "0x90e93e4dc17121487952333614002be42356498e": "0x678a932062e4180000",
        "0x90e9a9a82edaa814c284d232b6e9ba90701d4952": "0x56be03ca3e47d8000",
        "0x90f774c9147dde90853ddc43f08f16d455178b8c": "0xd8d726b7177a800000",
        "0x90fc537b210658660a83baa9ac4a8402f65746a8": "0x65ea3db75546600000",
        "0x91050a5cffadedb4bb6eaafbc9e5013428e96c80": "0x5c283d410394100000",
        "0x91051764af6b808e4212c77e30a5572eaa317070": "0x3635c9adc5dea00000",
        "0x910b7d577a7e39aa23acf62ad7f1ef342934b968": "0x21e19e0c9bab2400000",
        "0x910e996543344c6815fb97cda7af4b8698765a5b": "0x59af69829cf640000",
        "0x911feea61fe0ed50c5b9e5a0d66071399d28bdc6": "0x340aad21b3b700000",
        "0x911ff233e1a211c0172c92b46cf997030582c83a": "0x6acb3df27e1f880000",
        "0x9120e71173e1ba19ba8f9f4fdbdcaa34e1d6bb78": "0x6c6b935b8bbd400000",
        "0x91211712719f2b084d3b3875a85069f466363141": "0x3635c9adc5dea00000",
        "0x912304118b80473d9e9fe3ee458fbe610ffda2bb": "0xad78ebc5ac6200000",
        "0x91546b79ecf69f936b5a561508b0d7e50cc5992f": "0xe7eeba3410b740000",
        "0x9156d18029350e470408f15f1aa3be9f040a67c6": "0x3635c9adc5dea00000",
        "0x91620f3eb304e813d28b0297556d65dc4e5de5aa": "0xcf152640c5c8300000",
        "0x916bf7e3c545921d3206d900c24f14127cbd5e70": "0x3d0ddbc7df2bb100000",
        "0x916cf17d71412805f4afc3444a0b8dd1d9339d16": "0xc673ce3c40160000",
        "0x917b8f9f3a8d09e9202c52c29e724196b897d35e": "0x8ba52e6fc45e40000",
        "0x918967918cd897dd0005e36dc6c883ef438fc8c7": "0x796e3ea3f8ab00000",
        "0x91898eab8c05c0222883cd4db23b7795e1a24ad7": "0x6c6b935b8bbd400000",
        "0x9191f94698210516cf6321a142070e20597674ed": "0xee9d5be6fc110000",
        "0x91a4149a2c7b1b3a67ea28aff34725e0bf8d7524": "0x692ae8897081d00000",
        "0x91a787bc5196f34857fe0c372f4df376aaa76613": "0x6c6b935b8bbd400000",
        "0x91a8baaed012ea2e63803b593d0d0c2aab4c5b0a": "0x5150ae84a8cdf00000",
        "0x91ac5cfe67c54aa7ebfba448666c461a3b1fe2e1": "0x15c93492bf9dfc0000",
        "0x91bb3f79022bf3c453f4ff256e269b15cf2c9cbd": "0x52585c13fe3a5c0000",
        "0x91c75e3cb4aa89f34619a164e2a47898f5674d9c": "0x6c6b935b8bbd400000",
        "0x91c80caa081b38351d2a0e0e00f80a34e56474c1": "0x3635c9adc5dea00000",
        "0x91cc46aa379f856a6640dccd5a648a7902f849d9": "0xad78ebc5ac6200000",
        "0x91d2a9ee1a6db20f5317cca7fbe2313895db8ef8": "0x1ccc3a52f306e280000",
        "0x91d66ea6288faa4b3d606c2aa45c7b6b8a252739": "0x6c6b935b8bbd400000",
        "0x91dbb6aaad149585be47375c5d6de5ff09191518": "0x43c33c1937564800000",
        "0x91e8810652e8e6161525d63bb7751dc20f676076": "0x274d656ac90e340000",
        "0x91f516146cda20281719978060c6be4149067c88": "0x6c6b935b8bbd400000",
        "0x91f624b24a1fa5a056fe571229e7379db14b9a1e": "0x28a8517c669b3570000",
        "0x91fe8a4c6164df8fa606995d6ba7adcaf1c893ce": "0x39992648a23c8a00000",
        "0x921f5261f4f612760706892625c75e7bce96b708": "0x6c6b935b8bbd400000",
        "0x9221c9ce01232665741096ac07235903ad1fe2fc": "0x6db63335522628000",
        "0x9225983860a1cb4623c72480ac16272b0c95e5f5": "0x6c6b935b8bbd400000",
        "0x9225d46a5a80943924a39e5b84b96da0ac450581": "0x878678326eac9000000",
        "0x922a20c79a1d3a26dd3829677bf1d45c8f672bb6": "0xd8d726b7177a800000",
        "0x92438e5203b6346ff886d7c36288aacccc78ceca": "0x3635c9adc5dea00000",
        "0x9243d7762d77287b12638688b9854e88a769b271": "0x3635c9adc5dea00000",
        "0x924bce7a853c970bb5ec7bb759baeb9c7410857b": "0xbe202d6a0eda0000",
        "0x924efa6db595b79313277e88319625076b580a10": "0x6c6b935b8bbd400000",
        "0x92558226b384626cad48e09d966bf1395ee7ea5d": "0x121ea68c114e510000",
        "0x926082cb7eed4b1993ad245a477267e1c33cd568": "0x144a74badfa4b60000",
        "0x926209b7fda54e8ddb9d9e4d3d19ebdc8e88c29f": "0x6c6b935b8bbd400000",
        "0x9268d62646563611dc3b832a30aa2394c64613e3": "0x6c6b935b8bbd400000",
        "0x92698e345378c62d8eda184d94366a144b0c105b": "0x4be4e7267b6ae00000",
        "0x92793ac5b37268774a7130de2bbd330405661773": "0x22ca3587cf4eb0000",
        "0x9279b2228cec8f7b4dda3f320e9a0466c2f585ca": "0x10f0cf064dd59200000",
        "0x927cb7dc187036b5427bc7e200c5ec450c1d27d4": "0xbb59a27953c600000",
        "0x927cc2bfda0e088d02eff70b38b08aa53cc30941": "0x646f60a1f986360000",
        "0x9284f96ddb47b5186ee558aa31324df5361c0f73": "0x3635c9adc5dea000000",
        "0x929d368eb46a2d1fbdc8ffa0607ede4ba88f59ad": "0x6c6b935b8bbd400000",
        "0x92a7c5a64362e9f842a23deca21035857f889800": "0x6c6acc67d7b1d40000",
        "0x92a898d46f19719c38126a8a3c27867ae2cee596": "0x6c6b935b8bbd400000",
        "0x92a971a739799f8cb48ea8475d72b2d2474172e6": "0xd5967be4fc3f100000",
        "0x92aae59768eddff83cfe60bb512e730a05a161d7": "0x5c9778410c76d18000",
        "0x92ad1b3d75fba67d54663da9fc848a8ade10fa67": "0x6c6b935b8bbd400000",
        "0x92ae5b7c7eb492ff1ffa16dd42ad9cad40b7f8dc": "0x2ee449550898e40000",
        "0x92c0f573eccf62c54810ee6ba8d1f113542b301b": "0xb7726f16ccb1e00000",
        "0x92c13fe0d6ce87fd50e03def9fa6400509bd7073": "0x22b1c8c1227a00000",
        "0x92c94c2820dfcf7156e6f13088ece7958b3676fd": "0x52d542804f1ce0000",
        "0x92cfd60188efdfb2f8c2e7b1698abb9526c1511f": "0x6c6b935b8bbd400000",
        "0x92d8ad9a4d61683b80d4a6672e84c20d62421e80": "0x1158e460913d00000",
        "0x92dca5e102b3b81b60f1a504634947c374a88ccb": "0x6c6b935b8bbd400000",
        "0x92e435340e9d253c00256389f52b067d55974e76": "0xe873f44133cb00000",
        "0x92e4392816e5f2ef5fb65837cec2c2325cc64922": "0x21e19e0c9bab2400000",
        "0x92e6581e1da1f9b846e09347333dc818e2d2ac66": "0xc55325ca7415e00000",
        "0x931df34d1225bcd4224e63680d5c4c09bce735a6": "0x3afb087b876900000",
        "0x931fe712f64207a2fd5022728843548bfb8cbb05": "0x6c6b935b8bbd400000",
        "0x93235f340d2863e18d2f4c52996516138d220267": "0x4002e44fda7d40000",
        "0x93258255b37c7f58f4b10673a932dd3afd90f4f2": "0x3635c9adc5dea00000",
        "0x9328d55ccb3fce531f199382339f0e576ee840a3": "0xd8d726b7177a800000",
        "0x9329ffdc268babde8874b366406c81445b9b2d35": "0x16e62f8c730ca18000",
        "0x932b9c04d40d2ac83083d94298169dae81ab2ed0": "0x6c6b935b8bbd400000",
        "0x933436c8472655f64c3afaaf7c4c621c83a62b38": "0x3635c9adc5dea00000",
        "0x933bf33f8299702b3a902642c33e0bfaea5c1ca3": "0xd2f13f7789f00000",
        "0x9340345ca6a3eabdb77363f2586043f29438ce0b": "0x1cc805da0dfff10000",
        "0x9340b5f678e45ee05eb708bb7abb6ec8f08f1b6b": "0x14542ba12a337c00000",
        "0x934af21b7ebfa467e2ced65aa34edd3a0ec71332": "0x7801f3e80cc0ff00000",
        "0x935069444a6a984de2084e46692ab99f671fc727": "0x1e7e4171bf4d3a00000",
        "0x93507e9e8119cbceda8ab087e7ecb071383d6981": "0x2f6f10780d22cc00000",
        "0x93678a3c57151aeb68efdc43ef4d36cb59a009f3": "0x1a12a92bc3c3e0000",
        "0x936dcf000194e3bff50ac5b4243a3ba014d661d8": "0x21e19e0c9bab2400000",
        "0x936f3813f5f6a13b8e4ffec83fe7f826186a71cd": "0x1c30731cec03200000",
        "0x9374869d4a9911ee1eaf558bc4c2b63ec63acfdd": "0x3635c9adc5dea00000",
        "0x937563d8a80fd5a537b0e66d20a02525d5d88660": "0x878678326eac900000",
        "0x9376dce2af2ec8dcda741b7e7345664681d93668": "0x3635c9adc5dea00000",
        "0x93868ddb2a794d02ebda2fa4807c76e3609858dc": "0x6dee15fc7c24a78000",
        "0x939c4313d2280edf5e071bced846063f0a975d54": "0x1969368974c05b000000",
        "0x93a6b3ab423010f981a7489d4aad25e2625c5741": "0x44680fe6a1ede4e8000",
        "0x93aa8f92ebfff991fc055e906e651ac768d32bc8": "0x32f51edbaaa3300000",
        "0x93b4bf3fdff6de3f4e56ba6d7799dc4b93a6548f": "0x10910d4cdc9f60000",
        "0x93bc7d9a4abd44c8bbb8fe8ba804c61ad8d6576c": "0xd8d6119a8146050000",
        "0x93c2e64e5de5589ed25006e843196ee9b1cf0b3e": "0x5a87e7d7f5f6580000",
        "0x93c88e2d88621e30f58a9586bed4098999eb67dd": "0x69b5afac750bb800000",
        "0x93e0f37ecdfb0086e3e862a97034447b1e4dec1a": "0x1a055690d9db80000",
        "0x93e303411afaf6c107a44101c9ac5b36e9d6538b": "0xdf9ddfecd0365400000",
        "0x93f18cd2526040761488c513174d1e7963768b2c": "0x82ffac9ad593720000",
        "0x940f715140509ffabf974546fab39022a41952d2": "0x4be4e7267b6ae00000",
        "0x942c6b8c955bc0d88812678a236725b32739d947": "0x54069233bf7f780000",
        "0x943d37864a4a537d35c8d99723cd6406ce2562e6": "0x6c6b935b8bbd400000",
        "0x94439ca9cc169a79d4a09cae5e67764a6f871a21": "0xd02ab486cedc00000",
        "0x94449c01b32a7fa55af8104f42cdd844aa8cbc40": "0x38111a1f4f03c100000",
        "0x9445ba5c30e98961b8602461d0385d40fbd80311": "0x21e19e0c9bab2400000",
        "0x944f07b96f90c5f0d7c0c580533149f3f585a078": "0x402f4cfee62e80000",
        "0x9454b3a8bff9709fd0e190877e6cb6c89974dbd6": "0x90f534608a72880000",
        "0x945d96ea573e8df7262bbfa572229b4b16016b0f": "0xb589ef914c1420000",
        "0x945e18769d7ee727c7013f92de24d117967ff317": "0x6c6b935b8bbd400000",
        "0x94612781033b57b146ee74e753c672017f5385e4": "0xc328093e61ee400000",
        "0x94644ad116a41ce2ca7fbec609bdef738a2ac7c7": "0x10f0cf064dd59200000",
        "0x9470cc36594586821821c5c996b6edc83b6d5a32": "0x14d1120d7b1600000",
        "0x9475c510ec9a26979247744c3d8c3b0e0b5f44d3": "0x21e19e0c9bab2400000",
        "0x947e11e5ea290d6fc3b38048979e0cd44ec7c17f": "0x6c6b935b8bbd400000",
        "0x9483d98f14a33fdc118d403955c29935edfc5f70": "0x18ea3b34ef51880000",
        "0x949131f28943925cfc97d41e0cea0b262973a730": "0x97c9ce4cf6d5c00000",
        "0x949f84f0b1d7c4a7cf49ee7f8b2c4a134de32878": "0x252248deb6e6940000",
        "0x949f8c107bc7f0aceaa0f17052aadbd2f9732b2e": "0x6c6b935b8bbd400000",
        "0x94a7cda8f481f9d89d42c303ae1632b3b709db1d": "0x1043561a8829300000",
        "0x94a9a71691317c2064271b51c9353fbded3501a8": "0xb50fcfafebecb00000",
        "0x94ad4bad824bd0eb9ea49c58cebcc0ff5e08346b": "0x692ae8897081d00000",
        "0x94bbc67d13f89ebca594be94bc5170920c30d9f3": "0x458ffa3150a540000",
        "0x94be3ae54f62d663b0d4cc9e1ea8fe9556ea9ebf": "0x143132ca843180000",
        "0x94c055e858357aaa30cf2041fa9059ce164a1f91": "0x43c25e0dcc1bd1c0000",
        "0x94c742fd7a8b7906b3bfe4f8904fc0be5c768033": "0x43c33c1937564800000",
        "0x94ca56de777fd453177f5e0694c478e66aff8a84": "0x1b1ae4d6e2ef500000",
        "0x94d81074db5ae197d2bb1373ab80a87d121c4bd3": "0x1fd933494aa5fe00000",
        "0x94db807873860aac3d5aea1e885e52bff2869954": "0xae8e7a0bb575d00000",
        "0x94e1f5cb9b8abace03a1a6428256553b690c2355": "0x1158e460913d00000",
        "0x94ef8be45077c7d4c5652740de946a62624f713f": "0x56cf5593a18f88000",
        "0x94f13f9f0836a3ee2437a84922d2984dc0f7d53b": "0xa2a0329bc38abe0000",
        "0x94f8f057db7e60e675ad940f155885d1a477348e": "0x15be6174e1912e0000",
        "0x94fcceadfe5c109c5eaeaf462d43873142c88e22": "0x1043561a88293000000",
        "0x95034e1621865137cd4739b346dc17da3a27c34e": "0x55a6e79ccd1d300000",
        "0x950c68a40988154d2393fff8da7ccda99614f72c": "0xf94146fd8dcde58000",
        "0x950fe9c6cad50c18f11a9ed9c45740a6180612d0": "0x1b1ae4d6e2ef5000000",
        "0x952183cfd38e352e579d36decec5b18450f7fba0": "0x6c6b935b8bbd400000",
        "0x95278b08dee7c0f2c8c0f722f9fcbbb9a5241fda": "0x829309f64f0db00000",
        "0x952c57d2fb195107d4cd5ca300774119dfad2f78": "0x6c6b935b8bbd400000",
        "0x953572f0ea6df9b197cae40e4b8ecc056c4371c5": "0x3635c9adc5dea00000",
        "0x953ef652e7b769f53d6e786a58952fa93ee6abe7": "0x9b0a791f1211300000",
        "0x95447046313b2f3a5e19b948fd3b8bedc82c717c": "0x1b1ae4d6e2ef500000",
        "0x955db3b74360b9a268677e73cea821668af6face": "0x65a4da25d3016c00000",
        "0x9560e8ac6718a6a1cdcff189d603c9063e413da6": "0xd8d726b7177a800000",
        "0x9567a0de811de6ff095b7ee64e7f1b83c2615b80": "0xe7eeba3410b740000",
        "0x95681cdae69b2049ce101e325c759892cac3f811": "0x9ae92a9bc94c400000",
        "0x9568b7de755628af359a84543de23504e15e41e6": "0x878678326eac9000000",
        "0x9569c63a9284a805626db3a32e9d236393476151": "0x6acb3df27e1f880000",
        "0x95809e8da3fbe4b7f281f0b8b1715f420f7d7d63": "0x6c6b935b8bbd400000",
        "0x959f57fded6ae37913d900b81e5f48a79322c627": "0xddb26104749118000",
        "0x959ff17f1d51b473b44010052755a7fa8c75bd54": "0x6acb3df27e1f880000",
        "0x95a577dc2eb3ae6cb9dfc77af697d7efdfe89a01": "0x75f610f70ed200000",
        "0x95cb6d8a6379f94aba8b885669562c4d448e56a7": "0x6c6b935b8bbd400000",
        "0x95d550427b5a514c751d73a0f6d29fb65d22ed10": "0x1043561a8829300000",
        "0x95d98d0c1069908f067a52acac2b8b534da37afd": "0x6f59b630a929708000",
        "0x95df4e3445d7662624c48eba74cf9e0a53e9f732": "0xbdbc41e0348b3000000",
        "0x95e6a54b2d5f67a24a4875af75107ca7ea9fd2fa": "0x487a9a304539440000",
        "0x95e6f93dac228bc7585a25735ac2d076cc3a4017": "0x14542ba12a337c00000",
        "0x95e7616424cd0961a71727247437f0069272280e": "0x15af1d78b58c400000",
        "0x95e80a82c20cbe3d2060242cb92d735810d034a2": "0x1c32e463fd4b98000",
        "0x95f62d0243ede61dad9a3165f53905270d54e242": "0x57473d05dabae80000",
        "0x95fb5afb14c1ef9ab7d179c5c300503fd66a5ee2": "0x1daf7a02b0dbe8000",
        "0x9610592202c282ab9bd8a884518b3e0bd4758137": "0xe873f44133cb00000",
        "0x961c59adc74505d1864d1ecfcb8afa0412593c93": "0x878678326eac9000000",
        "0x962c0dec8a3d464bf39b1215eafd26480ae490cd": "0x6c82e3eaa513e80000",
        "0x962cd22a8edf1e4f4e55b4b15ddbfb5d9d541971": "0x6c6b935b8bbd400000",
        "0x96334bfe04fffa590213eab36514f338b864b736": "0x15af1d78b58c400000",
        "0x9637dc12723d9c78588542eab082664f3f038d9d": "0x3635c9adc5dea00000",
        "0x964eab4b276b4cd8983e15ca72b106900fe41fce": "0x1b1ae4d6e2ef500000",
        "0x9662ee021926682b31c5f200ce457abea76c6ce9": "0x24590e8589eb6a0000",
        "0x966c04781cb5e67dde3235d7f8620e1ab663a9a5": "0x100d2050da6351600000",
        "0x967076a877b18ec15a415bb116f06ef32645dba3": "0x6c6b935b8bbd400000",
        "0x967bfaf76243cdb9403c67d2ceefdee90a3feb73": "0x349d87f2a2dc2f0000",
        "0x967d4142af770515dd7062af93498dbfdff29f20": "0x11854d0f9cee40000",
        "0x968b14648f018333687cd213fa640aec04ce6323": "0x3635c9adc5dea00000",
        "0x968dea60df3e09ae3c8d3505e9c080454be0e819": "0x14542ba12a337c00000",
        "0x96924191b7df655b3319dc6d6137f481a73a0ff3": "0xd9ecb4fd208e500000",
        "0x9696052138338c722f1140815cf7749d0d3b3a74": "0x1b1ae4d6e2ef500000",
        "0x96a55f00dff405dc4de5e58c57f6f6f0cac55d2f": "0x6a6616379c87b58000",
        "0x96aa573fed2f233410dbae5180145b23c31a02f0": "0x5dc892aa1131c80000",
        "0x96ad579bbfa8db8ebec9d286a72e4661eed8e356": "0x3a0ba42bec61830000",
        "0x96b434fe0657e42acc8212b6865139dede15979c": "0xd8d726b7177a800000",
        "0x96b906ea729f4655afe3e57d35277c967dfa1577": "0x3635c9adc5dea00000",
        "0x96d62dfd46087f62409d93dd606188e70e381257": "0x6c6b935b8bbd400000",
        "0x96d9cca8f55eea0040ec6eb348a1774b95d93ef4": "0xd8d726b7177a800000",
        "0x96e7c0c9d5bf10821bf140c558a145b7cac21397": "0x393ef1a5127c800000",
        "0x96ea6ac89a2bac95347b51dba63d8bd5ebdedce1": "0x6c6b935b8bbd400000",
        "0x96eafbf2fb6f4db9a436a74c45b5654452e23819": "0x1158e460913d00000",
        "0x96eb523e832f500a017de13ec27f5d366c560eff": "0x10acceba43ee280000",
        "0x96f0462ae6f8b96088f7e9c68c74b9d8ad34b347": "0x61093d7c2c6d380000",
        "0x96f820500b70f4a3e3239d619cff8f222075b135": "0xad78ebc5ac6200000",
        "0x96fe59c3dbb3aa7cc8cb62480c65e56e6204a7e2": "0x43c33c1937564800000",
        "0x96ff6f509968f36cb42cba48db32f21f5676abf8": "0x6acb3df27e1f880000",
        "0x970938522afb5e8f994873c9fbdc26e3b37e314c": "0x3635c9adc5dea00000",
        "0x970abd53a54fca4a6429207c182d4d57bb39d4a0": "0x6c6b935b8bbd400000",
        "0x970d8b8a0016d143054f149fb3b8e550dc0797c7": "0x3635c9adc5dea00000",
        "0x972c2f96aa00cf8a2f205abcf8937c0c75f5d8d9": "0xad78ebc5ac6200000",
        "0x973f4e361fe5decd989d4c8f7d7cc97990385daf": "0x150f8543a387420000",
        "0x974d0541ab4a47ec7f75369c0069b64a1b817710": "0x15af1d78b58c400000",
        "0x974d2f17895f2902049deaaecf09c3046507402d": "0xcc19c29437ab8000",
        "0x9752d14f5e1093f071711c1adbc4e3eb1e5c57f3": "0x6c6b935b8bbd400000",
        "0x9756e176c9ef693ee1eec6b9f8b151d313beb099": "0x410d586a20a4c00000",
        "0x975f3764e97bbccf767cbd3b795ba86d8ba9840e": "0x12c1b6eed03d280000",
        "0x976a18536af41874426308871bcd1512a775c9f8": "0x21e19e0c9bab2400000",
        "0x976e3ceaf3f1af51f8c29aff5d7fa21f0386d8ee": "0xd02ab486cedc00000",
        "0x9777cc61cf756be3b3c20cd4491c69d275e7a120": "0x21e19e0c9bab2400000",
        "0x97810bafc37e84306332aacb35e92ad911d23d24": "0x3635c9adc5dea00000",
        "0x978c430ce4359b06bc2cdf5c2985fc950e50d5c8": "0x1a055690d9db800000",
        "0x9795f64319fc17dd0f8261f9d206fb66b64cd0c9": "0xad78ebc5ac6200000",
        "0x9799ca21dbcf69bfa1b3f72bac51b9e3ca587cf9": "0x5c283d410394100000",
        "0x979cbf21dfec8ace3f1c196d82df962534df394f": "0x9991d478dd4d160000",
        "0x979d681c617da16f21bcaca101ed16ed015ab696": "0x65ea3db75546600000",
        "0x979f30158b574b999aab348107b9eed85b1ff8c1": "0x34957444b840e80000",
        "0x97a86f01ce3f7cfd4441330e1c9b19e1b10606ef": "0x6c6b935b8bbd400000",
        "0x97b91efe7350c2d57e7e406bab18f3617bcde14a": "0x21e1999bbd5d2be0000",
        "0x97d0d9725e3b70e675843173938ed371b62c7fac": "0x93739534d28680000",
        "0x97d9e46a7604d7b5a4ea4ee61a42b3d2350fc3ed": "0x6c6b935b8bbd400000",
        "0x97dc26ec670a31e0221d2a75bc5dc9f90c1f6fd4": "0x2b5e3af16b1880000",
        "0x97de21e421c37fe4b8025f9a51b7b390b5df7804": "0x10f0cf064dd592000000",
        "0x97e28973b860c567402800fbb63ce39a048a3d79": "0x542253a126ce40000",
        "0x97e5cc6127c4f885be02f44b42d1c8b0ac91e493": "0xad78ebc5ac6200000",
        "0x97f1fe4c8083e596212a187728dd5cf80a31bec5": "0x1158e460913d00000",
        "0x97f7760657c1e202759086963eb4211c5f8139b9": "0xa8a097fcb3d17680000",
        "0x97f99b6ba31346cd98a9fe4c308f87c5a58c5151": "0x14542ba12a337c00000",
        "0x980a84b686fc31bdc83c221058546a71b11f838a": "0x2a415548af86818000",
        "0x9810e34a94db6ed156d0389a0e2b80f4fd6b0a8a": "0x6c6b935b8bbd400000",
        "0x981ddf0404e4d22dda556a0726f00b2d98ab9569": "0x36356633ebd8ea0000",
        "0x981f712775c0dad97518ffedcb47b9ad1d6c2762": "0x16a6502f15a1e540000",
        "0x9834682180b982d166badb9d9d1d9bbf016d87ee": "0x6c6b935b8bbd400000",
        "0x9836b4d30473641ab56aeee19242761d72725178": "0x6c6b935b8bbd400000",
        "0x98397342ec5f3d4cb877e54ef5d6f1d366731bd4": "0x14061b9d77a5e980000",
        "0x9846648836a307a057184fd51f628a5f8c12427c": "0x40b69bf43dce8f00000",
        "0x984a7985e3cc7eb5c93691f6f8cc7b8f245d01b2": "0x14542ba12a337c00000",
        "0x985d70d207892bed398590024e2421b1cc119359": "0x43c33c1937564800000",
        "0x986df47e76e4d7a789cdee913cc9831650936c9d": "0x10f0cf064dd59200000",
        "0x9874803fe1f3a0365e7922b14270eaeb032cc1b5": "0x3cf5928824c6c20000",
        "0x9875623495a46cdbf259530ff838a1799ec38991": "0x6c6b935b8bbd400000",
        "0x987618c85656207c7bac1507c0ffefa2fb64b092": "0x37dfe433189e38000",
        "0x987c9bcd6e3f3990a52be3eda4710c27518f4f72": "0x15af1d78b58c400000",
        "0x9882967cee68d2a839fad8ab4a7c3dddf6c0adc8": "0x4878be1ffaf95d0000",
        "0x98855c7dfbee335344904a12c40c731795b13a54": "0x39fbae8d042dd00000",
        "0x989c0ccff654da03aeb11af701054561d6297e1d": "0xd8d726b7177a800000",
        "0x98a0e54c6d9dc8be96276cebf4fec460f6235d85": "0x6ac882100952c78000",
        "0x98b769cc305cecfb629a00c907069d7ef9bc3a12": "0x168d28e3f00280000",
        "0x98ba4e9ca72fddc20c69b4396f76f8183f7a2a4e": "0x2b5e3af16b188000000",
        "0x98be696d51e390ff1c501b8a0f6331b628ddc5ad": "0x6c6b935b8bbd400000",
        "0x98bed3a72eccfbafb923489293e429e703c7e25b": "0x6c6b935b8bbd400000",
        "0x98bf4af3810b842387db70c14d46099626003d10": "0xd8d726b7177a800000",
        "0x98c10ebf2c4f97cba5a1ab3f2aafe1cac423f8cb": "0x1043561a8829300000",
        "0x98c19dba810ba611e68f2f83ee16f6e7744f0c1f": "0xad78ebc5ac6200000",
        "0x98c5494a03ac91a768dffc0ea1dde0acbf889019": "0x2a5a058fc295ed000000",
        "0x98d204f9085f8c8e7de23e589b64c6eff692cc63": "0x6c6b935b8bbd400000",
        "0x98d3731992d1d40e1211c7f735f2189afa0702e0": "0x1b1ae4d6e2ef5000000",
        "0x98e2b6d606fd2d6991c9d6d4077fdf3fdd4585da": "0x30df1a6f8ad6280000",
        "0x98e3e90b28fccaee828779b8d40a5568c4116e21": "0x22b1c8c1227a00000",
        "0x98e6f547db88e75f1f9c8ac2c5cf1627ba580b3e": "0x3635c9adc5dea00000",
        "0x98f4af3af0aede5fafdc42a081ecc1f89e3ccf20": "0x1fd933494aa5fe00000",
        "0x98f6b8e6213dbc9a5581f4cce6655f95252bdb07": "0x115872b0bca4300000",
        "0x9909650dd5b1397b8b8b0eb69499b291b0ad1213": "0xad78ebc5ac6200000",
        "0x991173601947c2084a62d639527e961512579af9": "0x2086ac351052600000",
        "0x99129d5b3c0cde47ea0def4dfc070d1f4a599527": "0x6c6b935b8bbd400000",
        "0x9917d68d4af341d651e7f0075c6de6d7144e7409": "0x132d4476c08e6f00000",
        "0x991ac7ca7097115f26205eee0ef7d41eb4e311ae": "0x1158e460913d00000",
        "0x992365d764c5ce354039ddfc912e023a75b8e168": "0xfc936392801c0000",
        "0x992646ac1acaabf5ddaba8f9429aa6a94e7496a7": "0x3637507a30abeb0000",
        "0x99268327c373332e06c3f6164287d455b9d5fa4b": "0x6c6b935b8bbd400000",
        "0x9928ff715afc3a2b60f8eb4cc4ba4ee8dab6e59d": "0x17da3a04c7b3e00000",
        "0x9932ef1c85b75a9b2a80057d508734c51085becc": "0x2b83fa5301d590000",
        "0x993f146178605e66d517be782ef0b3c61a4e1925": "0x17c1f0535d7a5830000",
        "0x99413704b1a32e70f3bc0d69dd881c38566b54cb": "0x5cc6b694631f7120000",
        "0x994152fc95d5c1ca8b88113abbad4d710e40def6": "0x1b1ae4d6e2ef500000",
        "0x9944fee9d34a4a880023c78932c00b59d5c82a82": "0x28a8a56b3690070000",
        "0x994cc2b5227ec3cf048512467c41b7b7b748909f": "0x6c6b935b8bbd400000",
        "0x9971df60f0ae66dce9e8c84e17149f09f9c52f64": "0xad78ebc5ac6200000",
        "0x9976947eff5f6ae5da08dd541192f378b428ff94": "0x1b1ae4d6e2ef5000000",
        "0x997d6592a31589acc31b9901fbeb3cc3d65b3215": "0x6c6b935b8bbd400000",
        "0x9982a5890ffb5406d3aca8d2bfc1dd70aaa80ae0": "0x6c6b935b8bbd400000",
        "0x99878f9d6e0a7ed9aec78297b73879a80195afe0": "0xd7c198710e66b00000",
        "0x998c1f93bcdb6ff23c10d0dc924728b73be2ff9f": "0x365bf3a433eaf30000",
        "0x9991614c5baa47dd6c96874645f97add2c3d8380": "0x6acb3df27e1f880000",
        "0x99924a9816bb7ddf3fec1844828e9ad7d06bf4e6": "0x5f68e8131ecf800000",
        "0x99997668f7c1a4ff9e31f9977ae3224bcb887a85": "0xfc936392801c00000",
        "0x999c49c174ca13bc836c1e0a92bff48b271543ca": "0xb1cf24ddd0b1400000",
        "0x99a4de19ded79008cfdcd45d014d2e584b8914a8": "0x5150ae84a8cdf00000",
        "0x99a96bf2242ea1b39ece6fcc0d18aed00c0179f3": "0x1043561a8829300000",
        "0x99b018932bcad355b6792b255db6702dec8ce5dd": "0xd8d8583fa2d52f0000",
        "0x99b743d1d9eff90d9a1934b4db21d519d89b4a38": "0x56bc75e2d63100000",
        "0x99b8c824869de9ed24f3bff6854cb6dd45cc3f9f": "0x65ea3db75546600000",
        "0x99c0174cf84e0783c220b4eb6ae18fe703854ad3": "0x7079a2573d0c780000",
        "0x99c1d9f40c6ab7f8a92fce2fdce47a54a586c53f": "0x35659ef93f0fc40000",
        "0x99c236141daec837ece04fdaee1d90cf8bbdc104": "0x766516acac0d200000",
        "0x99c31fe748583787cdd3e525b281b218961739e3": "0x3708baed3d68900000",
        "0x99c475bf02e8b9214ada5fad02fdfd15ba365c0c": "0x2009c5c8bf6fdc0000",
        "0x99c883258546cc7e4e971f522e389918da5ea63a": "0xd8d726b7177a800000",
        "0x99c9f93e45fe3c1418c353e4c5ac3894eef8121e": "0x585baf145050b0000",
        "0x99d1579cd42682b7644e1d4f7128441eeffe339d": "0x43c33c1937564800000",
        "0x99d1b585965f406a42a49a1ca70f769e765a3f98": "0x3894f0e6f9b9f700000",
        "0x99dfd0504c06c743e46534fd7b55f1f9c7ec3329": "0x6c6b935b8bbd400000",
        "0x99f4147ccc6bcb80cc842e69f6d00e30fa4133d9": "0x15af1d78b58c400000",
        "0x99f77f998b20e0bcdcd9fc838641526cf25918ef": "0x61093d7c2c6d380000",
        "0x99fad50038d0d9d4c3fbb4bce05606ecadcd5121": "0x6c6b935b8bbd400000",
        "0x99fe0d201228a753145655d428eb9fd94985d36d": "0x6920bff3515a3a0000",
        "0x9a079c92a629ca15c8cafa2eb28d5bc17af82811": "0x1b1ae4d6e2ef500000",
        "0x9a0d3cee3d9892ea3b3700a27ff84140d9025493": "0x340aad21b3b700000",
        "0x9a24ce8d485cc4c86e49deb39022f92c7430e67e": "0x46791fc84e07d00000",
        "0x9a2ce43b5d89d6936b8e8c354791b8afff962425": "0x6c6b935b8bbd400000",
        "0x9a390162535e398877e416787d6239e0754e937c": "0x3635c9adc5dea00000",
        "0x9a3da65023a13020d22145cfc18bab10bd19ce4e": "0x18bf6ea3464a3a0000",
        "0x9a3e2b1bf346dd070b027357feac44a4b2c97db8": "0x21e19e0c9bab2400000",
        "0x9a4ca8b82117894e43db72b9fa78f0b9b93ace09": "0x2b5e3af16b1880000",
        "0x9a522e52c195bfb7cf5ffaaedb91a3ba7468161d": "0x3635c9adc5dea00000",
        "0x9a5af31c7e06339ac8b4628d7c4db0ce0f45c8a4": "0x1b1ae4d6e2ef500000",
        "0x9a633fcd112cceeb765fe0418170732a9705e79c": "0xfc936392801c0000",
        "0x9a63d185a79129fdab19b58bb631ea36a420544e": "0x246ddf97976680000",
        "0x9a6708ddb8903c289f83fe889c1edcd61f854423": "0x3635c9adc5dea00000",
        "0x9a6ff5f6a7af7b7ae0ed9c20ecec5023d281b786": "0x8a12b9bd6a67ec0000",
        "0x9a82826d3c29481dcc2bd2950047e8b60486c338": "0x43c33c1937564800000",
        "0x9a8eca4189ff4aa8ff7ed4b6b7039f0902219b15": "0x1158e460913d00000",
        "0x9a953b5bcc709379fcb559d7b916afdaa50cadcc": "0x56bc75e2d63100000",
        "0x9a990b8aeb588d7ee7ec2ed8c2e64f7382a9fee2": "0x1d127db69fd8b0000",
        "0x9a9d1dc0baa77d6e20c3d849c78862dd1c054c87": "0x2fb474098f67c00000",
        "0x9aa48c66e4fb4ad099934e32022e827427f277ba": "0x21e19e0c9bab2400000",
        "0x9aa8308f42910e5ade09c1a5e282d6d91710bdbf": "0xad78ebc5ac6200000",
        "0x9aaafa0067647ed999066b7a4ca5b4b3f3feaa6f": "0x3635c9adc5dea00000",
        "0x9ab988b505cfee1dbe9cd18e9b5473b9a2d4f536": "0x1158e460913d000000",
        "0x9ab98d6dbb1eaae16d45a04568541ad3d8fe06cc": "0xec50464fe23f38000",
        "0x9aba2b5e27ff78baaab5cdc988b7be855cebbdce": "0x21e0c0013070adc0000",
        "0x9ac4da51d27822d1e208c96ea64a1e5b55299723": "0x56c5579f722140000",
        "0x9ac85397792a69d78f286b86432a07aeceb60e64": "0xc673ce3c40160000",
        "0x9ac907ee85e6f3e223459992e256a43fa08fa8b2": "0x21e19e0c9bab2400000",
        "0x9ad47fdcf9cd942d28effd5b84115b31a658a13e": "0xb259ec00d53b280000",
        "0x9adbd3bc7b0afc05d1d2eda49ff863939c48db46": "0xad6eedd17cf3b8000",
        "0x9adf458bff3599eee1a26398853c575bc38c6313": "0xf2dc7d47f15600000",
        "0x9ae13bd882f2576575921a94974cbea861ba0d35": "0xab4dcf399a3a600000",
        "0x9ae9476bfecd3591964dd325cf8c2a24faed82c1": "0xd8d726b7177a800000",
        "0x9af100cc3dae83a33402051ce4496b16615483f6": "0x6c6b935b8bbd400000",
        "0x9af11399511c213181bfda3a8b264c05fc81b3ce": "0x2f6f10780d22cc00000",
        "0x9af5c9894c33e42c2c518e3ac670ea9505d1b53e": "0xfc936392801c0000",
        "0x9af9dbe47422d177f945bdead7e6d82930356230": "0xd5967be4fc3f100000",
        "0x9afa536b4c66bc38d875c4b30099d9261fdb38eb": "0xb2a8f842a77bc8000",
        "0x9b06ad841dffbe4ccf46f1039fc386f3c321446e": "0x6c6b935b8bbd400000",
        "0x9b1168de8ab64b47552f3389800a9cc08b4666cf": "0x5dc892aa1131c80000",
        "0x9b1811c3051f46e664ae4bc9c824d18592c4574a": "0xad6eedd17cf3b8000",
        "0x9b18478655a4851cc906e660feac61f7f4c8bffc": "0xe2478d38907d840000",
        "0x9b22a80d5c7b3374a05b446081f97d0a34079e7f": "0xa2a15d09519be00000",
        "0x9b2be7f56754f505e3441a10f7f0e20fd3ddf849": "0x126e72a69a50d00000",
        "0x9b32cf4f5115f4b34a00a64c617de06387354323": "0x5b81ed888207c8000",
        "0x9b43dcb95fde318075a567f1e6b57617055ef9e8": "0xd5967be4fc3f100000",
        "0x9b444fd337e5d75293adcfff70e1ea01db023222": "0x56bc75e2d63100000",
        "0x9b4824ff9fb2abda554dee4fb8cf549165570631": "0x1158e460913d00000",
        "0x9b4c2715780ca4e99e60ebf219f1590c8cad500a": "0x56bc75e2d631000000",
        "0x9b59eb213b1e7565e45047e04ea0374f10762d16": "0x6c6b935b8bbd400000",
        "0x9b5c39f7e0ac168c8ed0ed340477117d1b682ee9": "0x55005f0c614480000",
        "0x9b5ec18e8313887df461d2902e81e67a8f113bb1": "0x56bc75e2d63100000",
        "0x9b64d3cd8d2b73f66841b5c46bb695b88a9ab75d": "0x1203a4f760c168000",
        "0x9b658fb361e046d4fcaa8aef6d02a99111223625": "0x6c6b935b8bbd400000",
        "0x9b6641b13e172fc072ca4b8327a3bc28a15b66a9": "0x68155a43676e00000",
        "0x9b68f67416a63bf4451a31164c92f672a68759e9": "0xcb49b44ba602d800000",
        "0x9b773669e87d76018c090f8255e54409b9dca8b2": "0x1158e460913d00000",
        "0x9b77ebced7e215f0920e8c2b870024f6ecb2ff31": "0x3635c9adc5dea00000",
        "0x9b7c8810cc7cc89e804e6d3e38121850472877fe": "0x6c6b935b8bbd400000",
        "0x9ba53dc8c95e9a472feba2c4e32c1dc4dd7bab46": "0x487a9a304539440000",
        "0x9bacd3d40f3b82ac91a264d9d88d908eac8664b9": "0x43c33c1937564800000",
        "0x9bb760d5c289a3e1db18db095345ca413b9a43c2": "0xaadec983fcff40000",
        "0x9bb76204186af2f63be79168601687fc9bad661f": "0x1043561a8829300000",
        "0x9bb9b02a26bfe1ccc3f0c6219e261c397fc5ca78": "0x487a9a304539440000",
        "0x9bc573bcda23b8b26f9073d90c230e8e71e0270b": "0x362f75a4305d0c0000",
        "0x9bd7c38a4210304a4d653edeff1b3ce45fce7843": "0xf498941e664280000",
        "0x9bd88068e13075f3a8cac464a5f949d6d818c0f6": "0x14542ba12a337c00000",
        "0x9bd905f1719fc7acd0159d4dc1f8db2f21472338": "0x3635c9adc5dea00000",
        "0x9bdbdc9b973431d13c89a3f9757e9b3b6275bfc7": "0x1b1a7dcf8a44d38000",
        "0x9be3c329b62a28b8b0886cbd8b99f8bc930ce3e6": "0x409e52b48369a0000",
        "0x9bf58efbea0784eb068adecfa0bb215084c73a35": "0x13a6b2b564871a00000",
        "0x9bf672d979b36652fc5282547a6a6bc212ae4368": "0x238fd42c5cf0400000",
        "0x9bf703b41c3624e15f4054962390bcba3052f0fd": "0x1483e01533c2e3c0000",
        "0x9bf71f7fb537ac54f4e514947fa7ff6728f16d2f": "0x1cf84a30a0a0c0000",
        "0x9bf9b3b2f23cf461eb591f28340bc719931c8364": "0x3635c9adc5dea00000",
        "0x9bfc659c9c601ea42a6b21b8f17084ec87d70212": "0x21e19e0c9bab2400000",
        "0x9bfff50db36a785555f07652a153b0c42b1b8b76": "0x6c6b935b8bbd400000",
        "0x9c05e9d0f0758e795303717e31da213ca157e686": "0x3635c9adc5dea00000",
        "0x9c1b771f09af882af0643083de2aa79dc097c40e": "0x8670e9ec6598c00000",
        "0x9c28a2c4086091cb5da226a657ce3248e8ea7b6f": "0xf2dc7d47f15600000",
        "0x9c2fd54089af665df5971d73b804616039647375": "0x3635c9adc5dea00000",
        "0x9c344098ba615a398f11d009905b177c44a7b602": "0x3635c9adc5dea00000",
        "0x9c3d0692ceeef80aa4965ceed262ffc7f069f2dc": "0xad78ebc5ac6200000",
        "0x9c405cf697956138065e11c5f7559e67245bd1a5": "0xad78ebc5ac6200000",
        "0x9c45202a25f6ad0011f115a5a72204f2f2198866": "0x10fcf3a62b080980000",
        "0x9c49deff47085fc09704caa2dca8c287a9a137da": "0x1b1ae4d6e2ef5000000",
        "0x9c4bbcd5f1644a6f075824ddfe85c571d6abf69c": "0x6194049f30f7200000",
        "0x9c526a140683edf1431cfaa128a935e2b614d88b": "0x6046f37e5945c0000",
        "0x9c54e4ed479a856829c6bb42da9f0b692a75f728": "0x197a8f6dd5519800000",
        "0x9c581a60b61028d934167929b22d70b313c34fd0": "0xa968163f0a57b400000",
        "0x9c5cc111092c122116f1a85f4ee31408741a7d2f": "0x1ab2cf7c9f87e20000",
        "0x9c6bc9a46b03ae5404f043dfcf21883e4110cc33": "0xad78ebc5ac6200000",
        "0x9c78963fbc263c09bd72e4f8def74a9475f7055c": "0x2eb8eb1a172dcb80000",
        "0x9c78fbb4df769ce2c156920cfedfda033a0e254a": "0x6acb3df27e1f880000",
        "0x9c7b6dc5190fe2912963fcd579683ec7395116b0": "0x2a1129d09367200000",
        "0x9c80bc18e9f8d4968b185da8c79fa6e11ffc3e23": "0xd02ab486cedc00000",
        "0x9c98fdf1fdcd8ba8f4c5b04c3ae8587efdf0f6e6": "0x14542ba12a337c00000",
        "0x9c99a1da91d5920bc14e0cb914fdf62b94cb8358": "0x43c33c1937564800000",
        "0x9c99b62606281b5cefabf36156c8fe62839ef5f3": "0xd8d726b7177a800000",
        "0x9c9a07a8e57c3172a919ef64789474490f0d9f51": "0x21e19e0c9bab2400000",
        "0x9c9de44724a4054da0eaa605abcc802668778bea": "0xad7d5ca3fa5a20000",
        "0x9c9f3b8a811b21f3ff3fe20fe970051ce66a824f": "0x3ec2debc07d4be0000",
        "0x9c9f89a3910f6a2ae8a91047a17ab788bddec170": "0x21e19e0c9bab2400000",
        "0x9ca0429f874f8dcee2e9c062a9020a842a587ab9": "0x6c6b935b8bbd400000",
        "0x9ca42ee7a0b898f6a5cc60b5a5d7b1bfa3c33231": "0x6c6b935b8bbd400000",
        "0x9cb28ac1a20a106f7f373692c5ce4c73f13732a1": "0x3635c9adc5dea00000",
        "0x9ccddcb2cfc2b25b08729a0a98d9e6f0202ea2c1": "0x56bc75e2d63100000",
        "0x9ce27f245e02d1c312c1d500788c9def7690453b": "0xad78ebc5ac6200000",
        "0x9ce5363b13e8238aa4dd15acd0b2e8afe0873247": "0xad78ebc5ac6200000",
        "0x9cf2928beef09a40f9bfc953be06a251116182fb": "0x14542ba12a337c00000",
        "0x9d069197d1de50045a186f5ec744ac40e8af91c6": "0x6c6b935b8bbd400000",
        "0x9d0e7d92fb305853d798263bf15e97c72bf9d7e0": "0x3635c9adc5dea00000",
        "0x9d0f347e826b7dceaad279060a35c0061ecf334b": "0xd8d726b7177a800000",
        "0x9d207517422cc0d60de7c237097a4d4fce20940c": "0x1b1ae4d6e2ef500000",
        "0x9d250ae4f110d71cafc7b0adb52e8d9acb6679b8": "0x2156d6e997213c00000",
        "0x9d2bfc36106f038250c01801685785b16c86c60d": "0x5077d75df1b675800000",
        "0x9d30cb237bc096f17036fc80dd21ca68992ca2d9": "0x66ee7318fdc8f300000",
        "0x9d32962ea99700d93228e9dbdad2cc37bb99f07e": "0xb4632bedd4ded40000",
        "0x9d34dac25bd15828faefaaf28f710753b39e89dc": "0x3b1c56fed02df00000",
        "0x9d369165fb70b81a3a765f188fd60cbe5e7b0968": "0x6c6b935b8bbd400000",
        "0x9d40e012f60425a340d82d03a1c757bfabc706fb": "0x9346f3addc88d8000",
        "0x9d4174aa6af28476e229dadb46180808c67505c1": "0x421afda42ed6970000",
        "0x9d4213339a01551861764c87a93ce8f85f87959a": "0xad78ebc5ac6200000",
        "0x9d460c1b379ddb19a8c85b4c6747050ddf17a875": "0xb50fcfafebecb00000",
        "0x9d47ba5b4c8505ad8da42934280b61a0e1e8b971": "0x56bc75e2d63100000",
        "0x9d4d321177256ebd9afbda304135d517c3dc5693": "0x2164b7a04ac8a00000",
        "0x9d4ff989b7bed9ab109d10c8c7e55f02d76734ad": "0x3635c9adc5dea00000",
        "0x9d511543b3d9dc60d47f09d49d01b6c498d82078": "0x26197b9516fc3940000",
        "0x9d6ecfa03af2c6e144b7c4692a86951e902e9e1f": "0xa2a5aa60ad243f0000",
        "0x9d7655e9f3e5ba5d6e87e412aebe9ee0d49247ee": "0x8e09311c1d80fa0000",
        "0x9d7831e834c20b1baa697af1d8e0c621c5afff9a": "0x4b06dbbb40f4a0000",
        "0x9d78a975b7db5e4d8e28845cfbe7e31401be0dd9": "0x48a43c54602f700000",
        "0x9d799e943e306ba2e5b99c8a6858cbb52c0cf735": "0x1043561a8829300000",
        "0x9d7fda7070bf3ee9bbd9a41f55cad4854ae6c22c": "0x255cba3c46fcf120000",
        "0x9d81aea69aed6ad07089d61445348c17f34bfc5b": "0x1043561a8829300000",
        "0x9d911f3682f32fe0792e9fb6ff3cfc47f589fca5": "0xd8d726b7177a800000",
        "0x9d913b5d339c95d87745562563fea98b23c60cc4": "0x941302c7f4d230000",
        "0x9d93fab6e22845f8f45a07496f11de71530debc7": "0x6c4fd1ee246e780000",
        "0x9d99b189bbd9a48fc2e16e8fcda33bb99a317bbb": "0x3d16e10b6d8bb20000",
        "0x9d9c4efe9f433989e23be94049215329fa55b4cb": "0xde3b28903c6b58000",
        "0x9d9e57fde30e5068c03e49848edce343b7028358": "0x5dc892aa1131c80000",
        "0x9da3302240af0511c6fd1857e6ddb7394f77ab6b": "0xa80d24677efef00000",
        "0x9da4ec407077f4b9707b2d9d2ede5ea5282bf1df": "0xd8d726b7177a800000",
        "0x9da609fa3a7e6cf2cc0e70cdabe78dc4e382e11e": "0x410d586a20a4c00000",
        "0x9da61ccd62bf860656e0325d7157e2f160d93bb5": "0x10f0ca956f8799e0000",
        "0x9da6e075989c7419094cc9f6d2e49393bb199688": "0x259bb71d5adf3f00000",
        "0x9da8e22ca10e67fea44e525e4751eeac36a31194": "0xe18398e7601900000",
        "0x9db2e15ca681f4c66048f6f9b7941ed08b1ff506": "0xd8d726b7177a800000",
        "0x9dc10fa38f9fb06810e11f60173ec3d2fd6a751e": "0x6acb3df27e1f880000",
        "0x9dd2196624a1ddf14a9d375e5f07152baf22afa2": "0x41b05e2463a5438000",
        "0x9dd46b1c6d3f05e29e9c6f037eed9a595af4a9aa": "0x1b1ae4d6e2ef500000",
        "0x9ddd355e634ee9927e4b7f6c97e7bf3a2f1e687a": "0x2b5e3af16b1880000",
        "0x9de20ae76aa08263b205d5142461961e2408d266": "0xda933d8d8c6700000",
        "0x9de20bc37e7f48a80ffd7ad84ffbf1a1abe1738c": "0xad78ebc5ac6200000",
        "0x9de7386dde401ce4c67b71b6553f8aa34ea5a17d": "0x340aad21b3b700000",
        "0x9deb39027af877992b89f2ec4a1f822ecdf12693": "0x6c6b935b8bbd400000",
        "0x9defe56a0ff1a1947dba0923f7dd258d8f12fa45": "0x5b12aefafa804000000",
        "0x9df057cd03a4e27e8e032f857985fd7f01adc8d7": "0x6c6b935b8bbd400000",
        "0x9df32a501c0b781c0281022f42a1293ffd7b892a": "0x1e7e4171bf4d3a00000",
        "0x9e01765aff08bc220550aca5ea2e1ce8e5b09923": "0x3635c9adc5dea00000",
        "0x9e20e5fd361eabcf63891f5b87b09268b8eb3793": "0x56bc75e2d63100000",
        "0x9e232c08c14dc1a6ed0b8a3b2868977ba5c17d10": "0x1158e460913d00000",
        "0x9e23c5e4b782b00a5fadf1aead87dacf5b0367a1": "0x1158e460913d00000",
        "0x9e35399071a4a101e9194daa3f09f04a0b5f9870": "0xd8d726b7177a800000",
        "0x9e3eb509278fe0dcd8e0bbe78a194e06b6803943": "0x32f51edbaaa3300000",
        "0x9e427272516b3e67d4fcbf82f59390d04c8e28e5": "0xd8d726b7177a800000",
        "0x9e4cec353ac3e381835e3c0991f8faa5b7d0a8e6": "0x21e18b9e9ab45e48000",
        "0x9e5811b40be1e2a1e1d28c3b0774acde0a09603d": "0xa2a15d09519be00000",
        "0x9e5a311d9f69898a7c6a9d6360680438e67a7b2f": "0x50c5e761a444080000",
        "0x9e7c2050a227bbfd60937e268cea3e68fea8d1fe": "0x56bc75e2d63100000",
        "0x9e7f65a90e8508867bccc914256a1ea574cf07e3": "0x433874f632cc600000",
        "0x9e8144e08e89647811fe6b72d445d6a5f80ad244": "0x21e19e0c9bab2400000",
        "0x9e8f64ddcde9b8b451bafaa235a9bf511a25ac91": "0x90f534608a72880000",
        "0x9e951f6dc5e352afb8d04299d2478a451259bf56": "0x3e7419881a73a0000",
        "0x9e960dcd03d5ba99cb115d17ff4c09248ad4d0be": "0xad78ebc5ac6200000",
        "0x9eaf6a328a4076024efa6b67b48b21eedcc0f0b8": "0x890b0c2e14fb80000",
        "0x9eb1ff71798f28d6e989fa1ea0588e27ba86cb7d": "0x7a1fe160277000000",
        "0x9eb281c32719c40fdb3e216db0f37fbc73a026b7": "0x1158e460913d00000",
        "0x9eb3a7cb5e6726427a3a361cfa8d6164dbd0ba16": "0x2b95bdcc39b6100000",
        "0x9eb7834e171d41e069a77947fca87622f0ba4e48": "0x56bc75e2d63100000",
        "0x9ec03e02e587b7769def538413e97f7e55be71d8": "0x42bf06b78ed3b500000",
        "0x9ecbabb0b22782b3754429e1757aaba04b81189f": "0x2ca7bb061f5e998000",
        "0x9ece1400800936c7c6485fcdd3626017d09afbf6": "0x10ce1d3d8cb3180000",
        "0x9ed4e63f526542d44fddd34d59cd25388ffd6bda": "0xd29b34a46348940000",
        "0x9ed80eda7f55054db9fb5282451688f26bb374c1": "0x1043561a8829300000",
        "0x9edc90f4be210865214ab5b35e5a8dd77415279d": "0xd8d726b7177a800000",
        "0x9edeac4c026b93054dc5b1d6610c6f3960f2ad73": "0x410d586a20a4c00000",
        "0x9ee93f339e6726ec65eea44f8a4bfe10da3d3282": "0x6c6b935b8bbd400000",
        "0x9ee9760cc273d4706aa08375c3e46fa230aff3d5": "0x1e52e336cde22180000",
        "0x9eeb07bd2b7890195e7d46bdf2071b6617514ddb": "0x6c6b935b8bbd400000",
        "0x9eef442d291a447d74c5d253c49ef324eac1d8f0": "0xb96608c8103bf00000",
        "0x9ef1896b007c32a15114fb89d73dbd47f9122b69": "0xd8d726b7177a800000",
        "0x9f017706b830fb9c30efb0a09f506b9157457534": "0x6c6b935b8bbd400000",
        "0x9f10f2a0463b65ae30b070b3df18cf46f51e89bd": "0x678a932062e4180000",
        "0x9f19fac8a32437d80ac6837a0bb7841729f4972e": "0x233df3299f61720000",
        "0x9f1aa8fcfc89a1a5328cbd6344b71f278a2ca4a0": "0x1b1ae4d6e2ef500000",
        "0x9f21302ca5096bea7402b91b0fd506254f999a3d": "0x4397451a003dd80000",
        "0x9f271d285500d73846b18f733e25dd8b4f5d4a8b": "0x2723c346ae18080000",
        "0x9f3497f5ef5fe63095836c004eb9ce02e9013b4b": "0x2256861bf9cf080000",
        "0x9f3a74fd5e7edcc1162993171381cbb632b7cff0": "0x21e19e0c9bab2400000",
        "0x9f46e7c1e9078cae86305ac7060b01467d6685ee": "0x243d4d18229ca20000",
        "0x9f496cb2069563144d0811677ba0e4713a0a4143": "0x3cd2e0bf63a4480000",
        "0x9f4a7195ac7c151ca258cafda0cab083e049c602": "0x53538c32185cee0000",
        "0x9f4ac9c9e7e24cb2444a0454fa5b9ad9d92d3853": "0x2d43f3ebfafb2c0000",
        "0x9f5f44026b576a4adb41e95961561d41039ca391": "0xd8d726b7177a80000",
        "0x9f607b3f12469f446121cebf3475356b71b4328c": "0xd8d726b7177a800000",
        "0x9f61beb46f5e853d0a8521c7446e68e34c7d0973": "0x1e5b8fa8fe2ac00000",
        "0x9f64a8e8dacf4ade30d10f4d59b0a3d5abfdbf74": "0x36369ed7747d260000",
        "0x9f662e95274121f177566e636d23964cf1fd686f": "0x6c6b935b8bbd400000",
        "0x9f6a322a6d469981426ae844865d7ee0bb15c7b3": "0x2b5ee57929fdb8000",
        "0x9f7986924aeb02687cd64189189fb167ded2dd5c": "0x35659ef93f0fc40000",
        "0x9f7a0392f857732e3004a375e6b1068d49d83031": "0x6c6b935b8bbd400000",
        "0x9f8245c3ab7d173164861cd3991b94f1ba40a93a": "0x9b0a791f1211300000",
        "0x9f83a293c324d4106c18faa8888f64d299054ca0": "0xad78ebc5ac6200000",
        "0x9f86a066edb61fcb5856de93b75c8c791864b97b": "0x6c6b935b8bbd400000",
        "0x9f98eb34d46979b0a6de8b05aa533a89b825dcf1": "0x4b06dbbb40f4a0000",
        "0x9f9fe0c95f10fee87af1af207236c8f3614ef02f": "0x14542ba12a337c00000",
        "0x9faea13c733412dc4b490402bfef27a0397a9bc3": "0x10ce1d3d8cb3180000",
        "0x9fbe066de57236dc830725d32a02aef9246c6c5e": "0x6c6b935b8bbd400000",
        "0x9fd1052a60506bd1a9ef003afd9d033c267d8e99": "0x3635c9adc5dea00000",
        "0x9fd64373f2fbcd9c0faca60547cad62e26d9851f": "0x3635c9adc5dea00000",
        "0x9fe501aa57ead79278937cd6308c5cfa7a5629fe": "0x2b5ee57929fdb8000",
        "0x9ffc5fe06f33f5a480b75aa94eb8556d997a16c0": "0x1158e460913d00000",
        "0x9ffcf5ef46d933a519d1d16c6ba3189b27496224": "0x3635c9adc5dea00000",
        "0x9ffedcc36b7cc312ad2a9ede431a514fccb49ba3": "0x244f579f3f5ca40000",
        "0xa006268446643ec5e81e7acb3f17f1c351ee2ed9": "0xd8d726b7177a800000",
        "0xa008019863c1a77c1499eb39bbd7bf2dd7a31cb9": "0x76d41c62494840000",
        "0xa009bf076f1ba3fa57d2a7217218bed5565a7a7a": "0x3635c9adc5dea00000",
        "0xa01e9476df84431825c836e8803a97e22fa5a0cd": "0x14542ba12a337c00000",
        "0xa01f12d70f44aa7b113b285c22dcdb45873454a7": "0xfc936392801c0000",
        "0xa01fd1906a908506dedae1e208128872b56ee792": "0xa2a15d09519be00000",
        "0xa0228240f99e1de9cb32d82c0f2fa9a3d44b0bf3": "0x56bc75e2d631000000",
        "0xa02bde6461686e19ac650c970d0672e76dcb4fc2": "0x1e09296c3378de40000",
        "0xa02c1e34064f0475f7fa831ccb25014c3aa31ca2": "0x340aad21b3b700000",
        "0xa02dc6aa328b880de99eac546823fccf774047fb": "0x6acb3df27e1f880000",
        "0xa02e3f8f5959a7aab7418612129b701ca1b80010": "0x1158e460913d00000",
        "0xa0347f0a98776390165c166d32963bf74dcd0a2f": "0x3635c9adc5dea00000",
        "0xa035a3652478f82dbd6d115faa8ca946ec9e681d": "0x5f4e42dd4afec0000",
        "0xa03a3dc7c533d1744295be955d61af3f52b51af5": "0x22b1c8c1227a00000",
        "0xa0459ef3693aacd1647cd5d8929839204cef53be": "0x3635c9adc5dea00000",
        "0xa04f2ae02add14c12faf65cb259022d0830a8e26": "0x152d02c7e14af6800000",
        "0xa06cd1f396396c0a64464651d7c205efaf387ca3": "0x6c6acc67d7b1d40000",
        "0xa072691c8dd7cd4237ff72a75c1a9506d0ce5b9e": "0x140ec80fa7ee880000",
        "0xa072cebe62a9e9f61cc3fbf88a9efbfe3e9a8d70": "0x15af1d78b58c400000",
        "0xa07682000b1bcf3002f85c80c0fa2949bd1e82fd": "0xd8d726b7177a800000",
        "0xa07aa16d74aee8a9a3288d52db1551d593883297": "0x2086ac351052600000",
        "0xa08d215b5b6aac4861a281ac7e400b78fef04cbf": "0x1158e460913d00000",
        "0xa0951970dfd0832fb83bda12c23545e79041756c": "0x2086ac351052600000",
        "0xa09f4d5eaa65a2f4cb750a49923401dae59090af": "0x796e3ea3f8ab00000",
        "0xa0a0e65204541fca9b2fb282cd95138fae16f809": "0x21e19e0c9bab2400000",
        "0xa0aa5f0201f04d3bbeb898132f7c11679466d901": "0x1fbed5215bb4c0000",
        "0xa0aadbd9509722705f6d2358a5c79f37970f00f6": "0xad78ebc5ac6200000",
        "0xa0b771951ce1deee363ae2b771b73e07c4b5e800": "0x4be4e7267b6ae00000",
        "0xa0de5c601e696635c698b7ae9ca4539fc7b941ec": "0x12c3cbd704c9770000",
        "0xa0e8ba661b48154cf843d4c2a5c0f792d528ee29": "0x15af1d78b58c400000",
        "0xa0fc7e53c5ebd27a2abdac45261f84ab3b51aefb": "0xa313daec9bc0d90000",
        "0xa0ff5b4cf016027e8323497d4428d3e5a83b8795": "0x16598d3c83ec0420000",
        "0xa106465bbd19e1b6bce50d1b1157dc59095a3630": "0x6c6b935b8bbd400000",
        "0xa106e6923edd53ca8ed650968a9108d6ccfd9670": "0x202fe1505afec898000",
        "0xa109e18bb0a39c9ef82fa19597fc5ed8e9eb6d58": "0x58e7926ee858a00000",
        "0xa11a03c4bb26d21eff677d5d555c80b25453ee7a": "0x3cb2759bc410f8000",
        "0xa11effab6cf0f5972cffe4d56596e98968144a8f": "0x5a87e7d7f5f6580000",
        "0xa1204dad5f560728a35c0d8fc79481057bf77386": "0x3635c9adc5dea00000",
        "0xa12623e629df93096704b16084be2cd89d562da4": "0x1ccc9324511e4500000",
        "0xa12a6c2d985daf0e4f5f207ae851aaf729b332cd": "0x152d02c7e14af6800000",
        "0xa1336dfb96b6bcbe4b3edf3205be5723c90fad52": "0x10f0cf064dd59200000",
        "0xa13b9d82a99b3c9bba5ae72ef2199edc7d3bb36c": "0x6c6acc67d7b1d40000",
        "0xa13cfe826d6d1841dcae443be8c387518136b5e8": "0x1da56a4b0835bf800000",
        "0xa1432ed2c6b7777a88e8d46d388e70477f208ca5": "0x1b1a7e413a196c50000",
        "0xa144f6b60f72d64a21e330dadb62d8990ade2b09": "0x3635c9adc5dea00000",
        "0xa15025f595acdbf3110f77c5bf24477e6548f9e8": "0x6c6b935b8bbd400000",
        "0xa158148a2e0f3e92dc2ce38febc20107e3253c96": "0x6c6b935b8bbd400000",
        "0xa16160851d2b9c349b92e46f829abfb210943595": "0x61093d7c2c6d380000",
        "0xa166f911c644ac3213d29e0e1ae010f794d5ad26": "0x6c6b935b8bbd400000",
        "0xa16d9e3d63986159a800b46837f45e8bb980ee0b": "0x6e1175da7ad1200000",
        "0xa17070c2e9c5a940a4ec0e4954c4d7d643be8f49": "0x6c6b17033b361c8000",
        "0xa17c9e4323069518189d5207a0728dcb92306a3f": "0x3635c9adc5dea00000",
        "0xa18360e985f2062e8f8efe02ad2cbc91ad9a5aad": "0xa2a15d09519be00000",
        "0xa1911405cf6e999ed011f0ddcd2a4ff7c28f2526": "0x22b1c8c1227a00000",
        "0xa192698007cc11aa603d221d5feea076bcf7c30d": "0x6c6b935b8bbd400000",
        "0xa192f06ab052d5fd7f94eea8318e827815fe677a": "0x71f8a93d01e540000",
        "0xa1998144968a5c70a6415554cefec2824690c4a5": "0x1158e460913d00000",
        "0xa1a1f0fa6d20b50a794f02ef52085c9d036aa6ca": "0x3635c9adc5dea00000",
        "0xa1ae8d4540d4db6fdde7146f415b431eb55c7983": "0xaadec983fcff40000",
        "0xa1b47c4d0ed6018842e6cfc8630ac3a3142e5e6b": "0x1158e460913d00000",
        "0xa1c4f45a82e1c478d845082eb18875c4ea6539ab": "0x2a5a058fc295ed000000",
        "0xa1dcd0e5b05a977c9623e5ae2f59b9ada2f33e31": "0x56bc75e2d63100000",
        "0xa1e4380a3b1f749673e270229993ee55f35663b4": "0x6c6b935b8bbd400000",
        "0xa1f193a0592f1feb9fdfc90aa813784eb80471c9": "0x4be4e7267b6ae00000",
        "0xa1f2854050f872658ed82e52b0ad7bbc1cb921f6": "0x6d0317e2b326f70000",
        "0xa1f5b840140d5a9acef402ac3cc3886a68cad248": "0x6c6b935b8bbd400000",
        "0xa1f765c44fe45f790677944844be4f2d42165fbd": "0xc7e9cfde768ec70000",
        "0xa1f7dde1d738d8cd679ea1ee965bee224be7d04d": "0x3d184450e5e93c0000",
        "0xa1f8d8bcf90e777f19b3a649759ad95027abdfc3": "0xad78ebc5ac6200000",
        "0xa202547242806f6e70e74058d6e5292defc8c8d4": "0x6c8754c8f30c080000",
        "0xa20d071b1b003063497d7990e1249dabf36c35f7": "0x3635c9adc5dea00000",
        "0xa20d8ff60caae31d02e0b665fa435d76f77c9442": "0x1a8a909dfcef400000",
        "0xa211da03cc0e31ecce5309998718515528a090df": "0xad78ebc5ac6200000",
        "0xa21442ab05340ade68c915f3c3399b9955f3f7eb": "0x2a034919dfbfbc0000",
        "0xa2222259dd9c3e3ded127084f808e92a1887302c": "0x8c8339dafed480000",
        "0xa22ade0ddb5c6ef8d0cd8de94d82b11082cb2e91": "0x374b57f3cef2700000",
        "0xa24c3ab62181e9a15b78c4621e4c7c588127be26": "0x8cde43a83d3310000",
        "0xa257ad594bd88328a7d90fc0a907df95eecae316": "0x1c3786ff3846930000",
        "0xa25b086437fd2192d0a0f64f6ed044f38ef3da32": "0x12290f15180bdc0000",
        "0xa276b058cb98d88beedb67e543506c9a0d9470d8": "0x90aafc76e02fbe0000",
        "0xa282e969cac9f7a0e1c0cd90f5d0c438ac570da3": "0x2207eb89fc27380000",
        "0xa291e9c7990d552dd1ae16cebc3fca342cbaf1d1": "0x43c33c1937564800000",
        "0xa29319e81069e5d60df00f3de5adee3505ecd5fb": "0x6c6b935b8bbd400000",
        "0xa2968fc1c64bac0b7ae0d68ba949874d6db253f4": "0x43c33c1937564800000",
        "0xa29d5bda74e003474872bd5894b88533ff64c2b5": "0x21e19e0c9bab2400000",
        "0xa29d661a6376f66d0b74e2fe9d8f26c0247ec84c": "0xdf3304079c13d20000",
        "0xa2a435de44a01bd0ecb29e44e47644e46a0cdffb": "0x1b1d445a7affe78000",
        "0xa2ace4c993bb1e5383f8ac74e179066e814f0591": "0x56bc75e2d63100000",
        "0xa2b701f9f5cdd09e4ba62baebae3a88257105885": "0x3635c9adc5dea00000",
        "0xa2c5854ff1599f98892c5725d262be1da98aadac": "0x1109ff333010e78000",
        "0xa2c7eaffdc2c9d937345206c909a52dfb14c478f": "0x7c0860e5a80dc0000",
        "0xa2d2aa626b09d6d4e4b13f7ffc5a88bd7ad36742": "0xfb8078507553830000",
        "0xa2d38de1c73906f6a7ca6efeb97cf6f69cc421be": "0x3635c9adc5dea00000",
        "0xa2dc65ee256b59a5bd7929774f904b358df3ada1": "0x483bce28beb09f80000",
        "0xa2e0683a805de6a05edb2ffbb5e96f0570b637c3": "0x1158e460913d00000",
        "0xa2e1b8aa900e9c139b3fa122354f6156d92a18b1": "0x1b1ae4d6e2ef500000",
        "0xa2e2b5941e0c01944bfe1d5fb4e8a34b922ccfb1": "0xad78ebc5ac6200000",
        "0xa2e460a989cb15565f9ecca7d121a18e4eb405b6": "0x6c6b935b8bbd400000",
        "0xa2ecce2c49f72a0995a0bda57aacf1e9f001e22a": "0xd8d726b7177a800000",
        "0xa2f472fe4f22b77db489219ea4023d11582a9329": "0x878678326eac9000000",
        "0xa2f798e077b07d86124e1407df32890dbb4b6379": "0xad78ebc5ac6200000",
        "0xa2f86bc061884e9eef05640edd51a2f7c0596c69": "0x6c6c44fe47ec050000",
        "0xa2fa17c0fb506ce494008b9557841c3f641b8cae": "0x1158e460913d00000",
        "0xa304588f0d850cd8d38f76e9e83c1bf63e333ede": "0x2285601216c8c0000",
        "0xa3058c51737a4e96c55f2ef6bd7bb358167ec2a7": "0x20db3ae4481ad48000",
        "0xa309df54cabce70c95ec3033149cd6678a6fd4cf": "0xc1f12c75101580000",
        "0xa30a45520e5206d9004070e6af3e7bb2e8dd5313": "0x15af1d78b58c400000",
        "0xa30e0acb534c9b3084e8501da090b4eb16a2c0cd": "0x6c6b935b8bbd400000",
        "0xa3203095edb7028e6871ce0a84f548459f83300a": "0xd8d726b7177a800000",
        "0xa321091d3018064279db399d2b2a88a6f440ae24": "0xad78ebc5ac62000000",
        "0xa3232d068d50064903c9ebc563b515acc8b7b097": "0x6c8754c8f30c080000",
        "0xa3241d890a92baf52908dc4aa049726be426ebd3": "0x43c2da661ca2f540000",
        "0xa3294626ec2984c43b43da4d5d8e4669b11d4b59": "0x36a4cf636319c00000",
        "0xa32cf7dde20c3dd5679ff5e325845c70c5962662": "0x1158e460913d00000",
        "0xa339a3d8ca280e27d2415b26d1fc793228b66043": "0x36f28695b78ff00000",
        "0xa33cb450f95bb46e25afb50fe05feee6fb8cc8ea": "0x2a1129d09367200000",
        "0xa33f70da7275ef057104dfa7db64f472e9f5d553": "0x45946b0f9e9d60000",
        "0xa34076f84bd917f20f8342c98ba79e6fb08ecd31": "0xe3aeb5737240a00000",
        "0xa3430e1f647f321ed34739562323c7d623410b56": "0x3634fb9f1489a70000",
        "0xa34f9d568bf7afd94c2a5b8a5ff55c66c4087999": "0x847d503b220eb00000",
        "0xa35606d51220ee7f2146d411582ee4ee4a45596e": "0xd8aabe080bc9400000",
        "0xa356551bb77d4f45a6d7e09f0a089e79cca249cb": "0x126e72a69a50d00000",
        "0xa35c19132cac1935576abfed6c0495fb07881ba0": "0x6c6b935b8bbd400000",
        "0xa365918bfe3f2627b9f3a86775d8756e0fd8a94b": "0x15af1d78b58c400000",
        "0xa36e0d94b95364a82671b608cb2d373245612909": "0x821d221b5291f8000",
        "0xa375b4bc24a24e1f797593cc302b2f331063fa5c": "0xad78ebc5ac6200000",
        "0xa37622ac9bbdc4d82b75015d745b9f8de65a28ec": "0x9dc05cce28c2b80000",
        "0xa379a5070c503d2fac89b8b3afa080fd45ed4bec": "0x42bf06b78ed3b500000",
        "0xa3802d8a659e89a2c47e905430b2a827978950a7": "0x3635c9adc5dea00000",
        "0xa38306cb70baa8e49186bd68aa70a83d242f2907": "0x6c6b935b8bbd400000",
        "0xa38476691d34942eea6b2f76889223047db4617a": "0x6c6b935b8bbd400000",
        "0xa387ce4e961a7847f560075c64e1596b5641d21c": "0x243d4d18229ca20000",
        "0xa387ecde0ee4c8079499fd8e03473bd88ad7522a": "0x6acb3df27e1f880000",
        "0xa3883a24f7f166205f1a6a9949076c26a76e7178": "0x62a992e53a0af00000",
        "0xa38b5bd81a9db9d2b21d5ec7c60552cd02ed561b": "0x14542ba12a337c00000",
        "0xa390ca122b8501ee3e5e07a8ca4b419f7e4dae15": "0x56bc75e2d63100000",
        "0xa3932a31d6ff75fb3b1271ace7caa7d5e1ff1051": "0x43c33c1937564800000",
        "0xa394ad4fd9e6530e6f5c53faecbede81cb172da1": "0x12f939c99edab800000",
        "0xa3979a92760a135adf69d72f75e167755f1cb8c3": "0x56bc75e2d63100000",
        "0xa39bfee4aec9bd75bd22c6b672898ca9a1e95d32": "0x21e19e0c9bab2400000",
        "0xa3a262afd2936819230892fde84f2d5a594ab283": "0x65ea3db75546600000",
        "0xa3a2e319e7d3a1448b5aa2468953160c2dbcba71": "0x6c6b935b8bbd400000",
        "0xa3a57b0716132804d60aac281197ff2b3d237b01": "0x4be4e7267b6ae00000",
        "0xa3a93ef9dbea2636263d06d8492f6a41de907c22": "0x340aad21b3b700000",
        "0xa3ae1879007d801cb5f352716a4dd8ba2721de3d": "0x2a5a058fc295ed000000",
        "0xa3ba0d3a3617b1e31b4e422ce269e873828d5d69": "0x2e141ea081ca080000",
        "0xa3bc979b7080092fa1f92f6e0fb347e28d995045": "0x97c9ce4cf6d5c00000",
        "0xa3bff1dfa9971668360c0d82828432e27bf54e67": "0xad78ebc5ac6200000",
        "0xa3c14ace28b192cbb062145fcbbd5869c67271f6": "0x1b1ae4d6e2ef5000000",
        "0xa3c33afc8cb4704e23153de2049d35ae71332472": "0x2b58addb89a2580000",
        "0xa3d0b03cffbb269f796ac29d80bfb07dc7c6ad06": "0x6c6b935b8bbd400000",
        "0xa3d583a7b65b23f60b7905f3e4aa62aac87f4227": "0x38befa126d5a9f8000",
        "0xa3db364a332d884ba93b2617ae4d85a1489bea47": "0x5c283d410394100000",
        "0xa3e051fb744aa3410c3b88f899f5d57f168df12d": "0xa030dcebbd2f4c0000",
        "0xa3e3a6ea509573e21bd0239ece0523a7b7d89b2f": "0x6acb3df27e1f880000",
        "0xa3f4ad14e0bb44e2ce2c14359c75b8e732d37054": "0xad78ebc5ac6200000",
        "0xa3facc50195c0b4933c85897fecc5bbd995c34b8": "0x1158e460913d00000",
        "0xa4035ab1e5180821f0f380f1131b7387c8d981cd": "0x1158e460913d00000",
        "0xa40aa2bbce0c72b4d0dfffcc42715b2b54b01bfa": "0x3635c9adc5dea00000",
        "0xa419a984142363267575566089340eea0ea20819": "0x6c6acc67d7b1d40000",
        "0xa421dbb89b3a07419084ad10c3c15dfe9b32d0c2": "0x43c33c1937564800000",
        "0xa422e4bf0bf74147cc895bed8f16d3cef3426154": "0x12ef3f62ee11368000",
        "0xa4259f8345f7e3a8b72b0fec2cf75e321fda4dc2": "0x678a932062e4180000",
        "0xa42908e7fe53980a9abf4044e957a54b70e99cbe": "0x6c6b935b8bbd400000",
        "0xa429fa88731fdd350e8ecd6ea54296b6484fe695": "0x6ac5c62d9486070000",
        "0xa430995ddb185b9865dbe62539ad90d22e4b73c2": "0x21e19e0c9bab2400000",
        "0xa436c75453ccca4a1f1b62e5c4a30d86dde4be68": "0x6c6b935b8bbd400000",
        "0xa437fe6ec103ca8d158f63b334224eccac5b3ea3": "0x1b1ae4d6e2ef5000000",
        "0xa43b6da6cb7aac571dff27f09d39f846f53769b1": "0x14998f32ac78700000",
        "0xa43b81f99356c0af141a03010d77bd042c71c1ee": "0x6c6b935b8bbd400000",
        "0xa43e1947a9242b355561c30a829dfeeca2815af8": "0xd23d99969fd6918000",
        "0xa4489a50ead5d5445a7bee4d2d5536c2a76c41f8": "0xad78ebc5ac6200000",
        "0xa44fe800d96fcad73b7170d0f610cb8c0682d6ce": "0xd8d726b7177a800000",
        "0xa45432a6f2ac9d56577b938a37fabac8cc7c461c": "0x3635c9adc5dea00000",
        "0xa466d770d898d8c9d405e4a0e551efafcde53cf9": "0x1ab2cf7c9f87e20000",
        "0xa4670731175893bbcff4fa85ce97d94fc51c4ba8": "0x1b1ae4d6e2ef5000000",
        "0xa46b4387fb4dcce011e76e4d73547d4481e09be5": "0x487a9a304539440000",
        "0xa46cd237b63eea438c8e3b6585f679e4860832ac": "0x3635c9adc5dea00000",
        "0xa47779d8bc1c7bce0f011ccb39ef68b854f8de8f": "0x6c6b935b8bbd400000",
        "0xa4826b6c3882fad0ed5c8fbb25cc40cc4f33759f": "0x701b43e34433d00000",
        "0xa4875928458ec2005dbb578c5cd33580f0cf1452": "0x3635c9adc5dea00000",
        "0xa49f523aa51364cbc7d995163d34eb590ded2f08": "0x9027421b2a9fbc0000",
        "0xa4a49f0bc8688cc9e6dc04e1e08d521026e65574": "0xad78ebc5ac6200000",
        "0xa4a7d306f510cd58359428c0d2f7c3609d5674d7": "0xb58cb61c3ccf340000",
        "0xa4a83a0738799b971bf2de708c2ebf911ca79eb2": "0x2086ac351052600000",
        "0xa4b09de6e713dc69546e76ef0acf40b94f0241e6": "0x117dc0627ec8700000",
        "0xa4d2b429f1ad5349e31704969edc5f25ee8aca10": "0x21e19e0c9bab2400000",
        "0xa4d6c82eddae5947fbe9cdfbd548ae33d91a7191": "0x1b1ae4d6e2ef5000000",
        "0xa4da34450d22ec0ffcede0004b02f7872ee0b73a": "0x50f616673f0830000",
        "0xa4dd59ab5e517d398e49fa537f899fed4c15e95d": "0x43c33c1937564800000",
        "0xa4e623451e7e94e7e89ba5ed95c8a83a62ffc4ea": "0x1158e460913d00000",
        "0xa4ed11b072d89fb136759fc69b428c48aa5d4ced": "0xe3f1527a03ca80000",
        "0xa4fb14409a67b45688a8593e5cc2cf596ced6f11": "0x61093d7c2c6d380000",
        "0xa514d00edd7108a6be839a638db2415418174196": "0x65a4da25d3016c00000",
        "0xa522de7eb6ae1250522a513133a93bd42849475c": "0x43c33c1937564800000",
        "0xa524a8cccc49518d170a328270a2f88133fbaf5d": "0xff7022dac108a0000",
        "0xa539b4a401b584dfe0f344b1b422c65543167e2e": "0xad78ebc5ac6200000",
        "0xa53ead54f7850af21438cbe07af686279a315b86": "0x21e19e0c9bab2400000",
        "0xa543a066fb32a8668aa0736a0c9cd40d78098727": "0x3635c9adc5dea00000",
        "0xa567770b6ae320bdde50f904d663e746a61dace6": "0x6c6b935b8bbd400000",
        "0xa568db4d57e4d67462d733c69a9e0fe26e218327": "0x3b6bff9266c0ae0000",
        "0xa5698035391e67a49013c0002079593114feb353": "0xd02ab486cedc00000",
        "0xa570223ae3caa851418a9843a1ac55db4824f4fd": "0xad78ebc5ac6200000",
        "0xa57360f002e0d64d2d74457d8ca4857ee00bcddf": "0x1233e232f618aa0000",
        "0xa575f2891dcfcda83c5cf01474af11ee01b72dc2": "0x56cd55fc64dfe0000",
        "0xa5783bf33432ff82ac498985d7d460ae67ec3673": "0x62a992e53a0af00000",
        "0xa5874d754635a762b381a5c4c792483af8f23d1d": "0x2b5e3af16b1880000",
        "0xa5a4227f6cf98825c0d5baff5315752ccc1a1391": "0x21e19e0c9bab2400000",
        "0xa5ab4bd3588f46cb272e56e93deed386ba8b753d": "0x4842f04105872c8000",
        "0xa5bad86509fbe0e0e3c0e93f6d381f1af6e9d481": "0x14542ba12a337c00000",
        "0xa5c336083b04f9471b8c6ed73679b74d66c363ec": "0xa3650a4c9d20e20000",
        "0xa5cd123992194b34c4781314303b03c54948f4b9": "0x6cfcc3d91da5630000",
        "0xa5d5b8b62d002def92413710d13b6ff8d4fc7dd3": "0x15af1d78b58c400000",
        "0xa5d96e697d46358d119af7819dc7087f6ae47fef": "0x317bee8af3315a78000",
        "0xa5de5e434fdcdd688f1c31b6fb512cb196724701": "0x2b5e3af16b18800000",
        "0xa5e0fc3c3affed3db6710947d1d6fb017f3e276d": "0x6c6b935b8bbd400000",
        "0xa5e93b49ea7c509de7c44d6cfeddef5910deaaf2": "0x6c6b935b8bbd400000",
        "0xa5e9cd4b74255d22b7d9b27ae8dd43ed6ed0252b": "0x298db2f54411d98000",
        "0xa5f0077b351f6c505cd515dfa6d2fa7f5c4cd287": "0x878678326eac9000000",
        "0xa5f075fd401335577b6683c281e6d101432dc6e0": "0x914878a8c05ee00000",
        "0xa5fe2ce97f0e8c3856be0de5f4dcb2ce5d389a16": "0x13db0b8b6863e0000",
        "0xa5ff62222d80c013cec1a0e8850ed4d354dac16d": "0xb41075c168b180000",
        "0xa609c26dd350c235e44b2b9c1dddccd0a9d9f837": "0x3635c9adc5dea00000",
        "0xa60c1209754f5d87b181da4f0817a81859ef9fd8": "0x2b5e3af16b1880000",
        "0xa6101c961e8e1c15798ffcd0e3201d7786ec373a": "0x14542ba12a337c00000",
        "0xa613456996408af1c2e93e177788ab55895e2b32": "0x15919ff477c88b80000",
        "0xa61887818f914a20e31077290b83715a6b2d6ef9": "0x65ea3db75546600000",
        "0xa61a54df784a44d71b771b87317509211381f200": "0x3635c9adc5dea00000",
        "0xa61cdbadf04b1e54c883de6005fcdf16beb8eb2f": "0x6c6b935b8bbd400000",
        "0xa639acd96b31ba53b0d08763229e1f06fd105e9d": "0x1b1ae4d6e2ef5000000",
        "0xa642501004c90ea9c9ed1998ba140a4cd62c6f5f": "0xd94fb8b10f8b18000",
        "0xa644ed922cc237a3e5c4979a995477f36e50bc62": "0x1fa73d845d7e960000",
        "0xa646a95c6d6f59f104c6541d7760757ab392b08c": "0xe3aeb5737240a00000",
        "0xa6484cc684c4c91db53eb68a4da45a6a6bda3067": "0x14542ba12a337c00000",
        "0xa64e5ffb704c2c9139d77ef61d8cdfa31d7a88e9": "0x7c0860e5a80dc0000",
        "0xa65426cff378ed23253513b19f496de45fa7e18f": "0x18650127cc3dc800000",
        "0xa66a4963b27f1ee1932b172be5964e0d3ae54b51": "0x960db77681e940000",
        "0xa67f38819565423aa85f3e3ab61bc763cbab89dd": "0x7377b022c6be080000",
        "0xa68c313445c22d919ee46cc2d0cdff043a755825": "0x41374fd21b0d88000",
        "0xa68e0c30cba3bc5a883e540320f999c7cd558e5c": "0x6192333762a58c8000",
        "0xa690f1a4b20ab7ba34628620de9ca040c43c1963": "0xd8d726b7177a800000",
        "0xa69d7cd17d4842fe03f62a90b2fbf8f6af7bb380": "0x56bc75e2d63100000",
        "0xa6a08252c8595177cc2e60fc27593e2379c81fb1": "0x11651ac3e7a758000",
        "0xa6a0de421ae54f6d17281308f5646d2f39f7775d": "0x6c6b935b8bbd400000",
        "0xa6b2d573297360102c07a18fc21df2e7499ff4eb": "0xd96fce90cfabcc0000",
        "0xa6c910ce4d494a919ccdaaa1fc3b82aa74ba06cf": "0x1b1ae4d6e2ef5000000",
        "0xa6e3baa38e104a1e27a4d82869afb1c0ae6eff8d": "0x11140eead8b710000",
        "0xa6eebbe464d39187bf80ca9c13d72027ec5ba8be": "0xa2a15d09519be00000",
        "0xa6f62b8a3d7f11220701ab9ffffcb327959a2785": "0x1b6e291f18dba80000",
        "0xa6f93307f8bce03195fece872043e8a03f7bd11a": "0x9c734bad5111580000",
        "0xa701df79f594901afe1444485e6b20c3bda2b9b3": "0x3635c9adc5dea00000",
        "0xa7024cfd742c1ec13c01fea18d3042e65f1d5dee": "0x263119a28abd0b08000",
        "0xa718aaad59bf395cba2b23e09b02fe0c89816247": "0x36303c97e468780000",
        "0xa7247c53d059eb7c9310f628d7fc6c6a0a773f08": "0x1b1ae4d6e2ef500000",
        "0xa7253763cf4a75df92ca1e766dc4ee8a2745147b": "0x2463770e90a8f500000",
        "0xa72ee666c4b35e82a506808b443cebd5c632c7dd": "0x2b5e3af16b18800000",
        "0xa74444f90fbb54e56f3ac9b6cfccaa4819e4614a": "0x1158e460913d00000",
        "0xa747439ad0d393b5a03861d77296326de8bb9db9": "0x3635c9adc5dea00000",
        "0xa7607b42573bb6f6b4d4f23c7e2a26b3a0f6b6f0": "0x57473d05dabae80000",
        "0xa76929890a7b47fb859196016c6fdd8289ceb755": "0x10f0cf064dd59200000",
        "0xa76b743f981b693072a131b22ba510965c2fefd7": "0xfc936392801c0000",
        "0xa76d3f156251b72c0ccf4b47a3393cbd6f49a9c5": "0x487a9a304539440000",
        "0xa77428bcb2a0db76fc8ef1e20e461a0a32c5ac15": "0x15be6174e1912e0000",
        "0xa7758cecb60e8f614cce96137ef72b4fbd07774a": "0x1b1ae4d6e2ef500000",
        "0xa7775e4af6a23afa201fb78b915e51a515b7a728": "0x68155a43676e00000",
        "0xa77f3ee19e9388bbbb2215c62397b96560132360": "0xad78ebc5ac6200000",
        "0xa7859fc07f756ea7dcebbccd42f05817582d973f": "0x21e19e0c9bab2400000",
        "0xa7966c489f4c748a7ae980aa27a574251767caf9": "0xa2a15d09519be00000",
        "0xa7a3bb6139b0ada00c1f7f1f9f56d994ba4d1fa8": "0x6c6b935b8bbd400000",
        "0xa7a3f153cdc38821c20c5d8c8241b294a3f82b24": "0x1b1ae4d6e2ef500000",
        "0xa7a517d7ad35820b09d497fa7e5540cde9495853": "0x6c6b935b8bbd400000",
        "0xa7c9d388ebd873e66b1713448397d0f37f8bd3a8": "0x10f0cf064dd59200000",
        "0xa7dcbba9b9bf6762c145416c506a71e3b497209c": "0x6c6acc67d7b1d40000",
        "0xa7e74f0bdb278ff0a805a648618ec52b166ff1be": "0x56bc75e2d63100000",
        "0xa7e83772bc200f9006aa2a260dbaa8483dc52b30": "0xb42d5366637e50000",
        "0xa7ef35ce87eda6c28df248785815053ec97a5045": "0x10f0ce949e00f930000",
        "0xa7f9220c8047826bd5d5183f4e676a6d77bfed36": "0x85068976be81c0000",
        "0xa807104f2703d679f8deafc442befe849e42950b": "0x6c6b935b8bbd400000",
        "0xa80cb1738bac08d4f9c08b4deff515545fa8584f": "0x1b1ae4d6e2ef500000",
        "0xa819d2ece122e028c8e8a04a064d02b9029b08b9": "0x3635c9adc5dea00000",
        "0xa825fd5abb7926a67cf36ba246a24bd27be6f6ed": "0xf43fc2c04ee00000",
        "0xa8285539869d88f8a961533755717d7eb65576ae": "0xad78ebc5ac6200000",
        "0xa83382b6e15267974a8550b98f7176c1a353f9be": "0xbffdaf2fc1b1a40000",
        "0xa8446c4781a737ac4328b1e15b8a0b3fbb0fd668": "0x48794d1f246192a0000",
        "0xa8455b411765d6901e311e726403091e42c56683": "0xb73aec3bfe14500000",
        "0xa86613e6c4a4c9c55f5c10bcda32175dcbb4af60": "0x243d6c2e36be6ae0000",
        "0xa86db07d9f812f4796622d40e03d135874a88a74": "0x1158e460913d00000",
        "0xa87f7abd6fa31194289678efb63cf584ee5e2a61": "0xd8d726b7177a800000",
        "0xa880e2a8bf88a1a82648b4013c49c4594c433cc8": "0x1004e2e45fb7ee00000",
        "0xa88577a073fbaf33c4cd202e00ea70ef711b4006": "0x6c6b935b8bbd400000",
        "0xa8914c95b560ec13f140577338c32bcbb77d3a7a": "0x9c2007651b2500000",
        "0xa89ac93b23370472daac337e9afdf642543f3e57": "0x21e19e0c9bab2400000",
        "0xa89df34859edd7c820db887740d8ff9e15157c7b": "0x6c6b935b8bbd400000",
        "0xa8a43c009100616cb4ae4e033f1fc5d7e0b6f152": "0xd588d078b43f4d8000",
        "0xa8a708e84f82db86a35502193b4c6ee9a76ebe8f": "0x3708baed3d68900000",
        "0xa8a7b68adab4e3eadff19ffa58e34a3fcec0d96a": "0x14542ba12a337c00000",
        "0xa8a8dbdd1a85d1beee2569e91ccc4d09ae7f6ea1": "0x13a6b2b564871a00000",
        "0xa8aca748f9d312ec747f8b6578142694c7e9f399": "0x6c6b935b8bbd400000",
        "0xa8b65ba3171a3f77a6350b9daf1f8d55b4d201eb": "0x2862f3b0d222040000",
        "0xa8beb91c2b99c8964aa95b6b4a184b1269fc3483": "0x15af1d78b58c400000",
        "0xa8c0b02faf02cb5519dda884de7bbc8c88a2da81": "0xe7c2518505060000",
        "0xa8c1d6aa41fe3d65f67bd01de2a866ed1ed9ae52": "0x1a055690d9db80000",
        "0xa8cafac32280d021020bf6f2a9782883d7aabe12": "0x56bc75e2d63100000",
        "0xa8db0b9b201453333c757f6ad9bcb555c02da93b": "0x7742b7830f341d0000",
        "0xa8e42a4e33d7526cca19d9a36dcd6e8040d0ea73": "0x3a8c02c5ea2de00000",
        "0xa8e7201ff619faffc332e6ad37ed41e301bf014a": "0x2086ac351052600000",
        "0xa8ee1df5d44b128469e913569ef6ac81eeda4fc8": "0x1b1ae4d6e2ef500000",
        "0xa8ef9ad274436042903e413c3b0c62f5f52ed584": "0x21e19e0c9bab2400000",
        "0xa8f37f0ab3a1d448a9e3ce40965f97a646083a34": "0x11e0e4f8a50bd40000",
        "0xa8f89dd5cc6e64d7b1eeace00702022cd7d2f03d": "0x25f273933db5700000",
        "0xa90476e2efdfee4f387b0f32a50678b0efb573b5": "0x21e19e0c9bab2400000",
        "0xa9145046fa3628cf5fd4c613927be531e6db1fdd": "0x6124fee993bc00000",
        "0xa914cdb571bfd93d64da66a4e108ea134e50d000": "0x4d8738994713798000",
        "0xa91a5a7b341f99c535144e20be9c6b3bb4c28e4d": "0x126753aa224a70b0000",
        "0xa9252551a624ae513719dabe5207fbefb2fd7749": "0x22b1c8c1227a00000",
        "0xa927d48bb6cb814bc609cbcaa9151f5d459a27e1": "0xeb935090064180000",
        "0xa929c8bd71db0c308dac06080a1747f21b1465aa": "0x1b1ae4d6e2ef500000",
        "0xa94bbb8214cf8da0c2f668a2ac73e86248528d4b": "0x340aad21b3b7000000",
        "0xa951b244ff50cfae591d5e1a148df6a938ef2a1a": "0x5e001584dfcf580000",
        "0xa960b1cadd3b5c1a8e6cb3abcaf52ee7c3d9fa88": "0x528bc3545e52680000",
        "0xa961171f5342b173dd70e7bfe5b5ca238b13bcdd": "0xb82794a9244f0c8000",
        "0xa975b077fcb4cc8efcbf838459b6fa243a4159d6": "0x22b1c8c1227a00000",
        "0xa97beb3a48c45f1528284cb6a95f7de453358ec6": "0x690836c0af5f5600000",
        "0xa97e072144499fe5ebbd354acc7e7efb58985d08": "0x90f534608a72880000",
        "0xa986762f7a4f294f2e0b173279ad2c81a2223458": "0x1158e460913d00000",
        "0xa98f109835f5eacd0543647c34a6b269e3802fac": "0x15af1d78b58c400000",
        "0xa997dfc7986a27050848fa1c64d7a7d6e07acca2": "0x7c0860e5a80dc0000",
        "0xa99991cebd98d9c838c25f7a7416d9e244ca250d": "0x3635c9adc5dea00000",
        "0xa9a1cdc33bfd376f1c0d76fb6c84b6b4ac274d68": "0x10f0cf064dd59200000",
        "0xa9a8eca11a23d64689a2aa3e417dbb3d336bb59a": "0xe3453cd3b67ba8000",
        "0xa9acf600081bb55bb6bfbab1815ffc4e17e85a95": "0xad78ebc5ac6200000",
        "0xa9ad1926bc66bdb331588ea8193788534d982c98": "0x65a4da25d3016c00000",
        "0xa9af21acbe482f8131896a228036ba51b19453c3": "0x2b5e021980cc18000",
        "0xa9b2d2e0494eab18e07d37bbb856d80e80f84cd3": "0x21e19e0c9bab2400000",
        "0xa9ba6f413b82fcddf3affbbdd09287dcf50415ca": "0xd8d726b7177a800000",
        "0xa9be88ad1e518b0bbb024ab1d8f0e73f790e0c76": "0x97c9ce4cf6d5c00000",
        "0xa9bfc410dddb20711e45c07387eab30a054e19ac": "0x3e99601edf4e530000",
        "0xa9d4a2bcbe5b9e0869d70f0fe2e1d6aacd45edc5": "0xac6e77ab663a80000",
        "0xa9d64b4f3bb7850722b58b478ba691375e224e42": "0x14542ba12a337c00000",
        "0xa9d6f871ca781a759a20ac3adb972cf12829a208": "0x3224f42723d4540000",
        "0xa9dc0424c6969d798358b393b1933a1f51bee00a": "0x43c33c1937564800000",
        "0xa9e194661aac704ee9dea043974e9692ded84a5d": "0x1a26a51422a0700000",
        "0xa9e28337e6357193d9e2cb236b01be44b81427df": "0x77432217e683600000",
        "0xa9e6e25e656b762558619f147a21985b8874edfe": "0x6c6b935b8bbd400000",
        "0xa9e9dbce7a2cb03694799897bed7c54d155fdaa8": "0xab5ae8fc99d658000",
        "0xa9ed377b7d6ec25971c1a597a3b0f3bead57c98f": "0x15af1d78b58c400000",
        "0xaa0200f1d17e9c54da0647bb96395d57a78538d8": "0x393ef1a5127c800000",
        "0xaa0ca3737337178a0caac3099c584b056c56301c": "0x2fb474098f67c00000",
        "0xaa136b47962bb8b4fb540db4ccf5fdd042ffb8cf": "0x1b1b6bd7af64c70000",
        "0xaa14422d6f0ae5a758194ed15780c838d67f1ee1": "0x60932056c449de80000",
        "0xaa16269aac9c0d803068d82fc79151dadd334b66": "0xd8d726b7177a800000",
        "0xaa167026d39ab7a85635944ed9edb2bfeba11850": "0x1c1d5e21b4fcf680000",
        "0xaa1b3768c16d821f580e76c8e4c8e86d7dc78853": "0x15af1d78b58c400000",
        "0xaa1df92e51dff70b1973e0e924c66287b494a178": "0x1cf84a30a0a0c00000",
        "0xaa2c670096d3f939305325427eb955a8a60db3c5": "0x6c95590699232d0000",
        "0xaa3135cb54f102cbefe09e96103a1a796718ff54": "0x32222d9c331940000",
        "0xaa321fdbd449180db8ddd34f0fe906ec18ee0914": "0x252248deb6e6940000",
        "0xaa3925dc220bb4ae2177b2883078b6dc346ca1b2": "0x1b1ae4d6e2ef5000000",
        "0xaa3f29601a1331745e05c42830a15e71938a6237": "0x5c283d410394100000",
        "0xaa47a4ffc979363232c99b99fada0f2734b0aeee": "0x1b8489df4dbff940000",
        "0xaa493d3f4fb866491cf8f800efb7e2324ed7cfe5": "0x5c283d410394100000",
        "0xaa56a65dc4abb72f11bae32b6fbb07444791d5c9": "0x2894e975bf496c0000",
        "0xaa5afcfd8309c2df9d15be5e6a504e7d706624c5": "0x13cf422e305a1378000",
        "0xaa8eb0823b07b0e6d20aadda0e95cf3835be192e": "0x1bc16d674ec800000",
        "0xaa91237e740d25a92f7fa146faa18ce56dc6e1f3": "0x3224f42723d4540000",
        "0xaa960e10c52391c54e15387cc67af827b5316dcc": "0x6c6b935b8bbd400000",
        "0xaa9bd4589535db27fa2bc903ca17d679dd654806": "0x6c6b935b8bbd400000",
        "0xaaa8defe11e3613f11067fb983625a08995a8dfc": "0xad78ebc5ac6200000",
        "0xaaaae68b321402c8ebc13468f341c63c0cf03fce": "0x52663ccab1e1c00000",
        "0xaaad1baade5af04e2b17439e935987bf8c2bb4b9": "0x6c6b935b8bbd400000",
        "0xaab00abf5828d7ebf26b47ceaccdb8ba03325166": "0x21e19e0c9bab2400000",
        "0xaabdb35c1514984a039213793f3345a168e81ff1": "0x10cac896d239000000",
        "0xaaca60d9d700e78596bbbbb1f1e2f70f4627f9d8": "0x3635bb77cb4b860000",
        "0xaaced8a9563b1bc311dbdffc1ae7f57519c4440c": "0x6c6b935b8bbd400000",
        "0xaad2b7f8106695078e6c138ec81a7486aaca1eb2": "0xad78ebc5ac6200000",
        "0xaae61e43cb0d0c96b30699f77e00d711d0a3979b": "0x3635c9adc5dea00000",
        "0xaae732eda65988c3a00c7f472f351c463b1c968e": "0x6c6b935b8bbd400000",
        "0xaaf023fef290a49bb78bb7abc95d669c50d528b0": "0xad78ebc5ac6200000",
        "0xaaf5b207b88b0de4ac40d747cee06e172df6e745": "0x6a7b71d7f51d0900000",
        "0xaaf9ee4b886c6d1e95496fd274235bf4ecfcb07d": "0x4be4e7267b6ae00000",
        "0xaafb7b013aa1f8541c7e327bf650adbd194c208f": "0x499e092d01f4780000",
        "0xab098633eeee0ccefdf632f9575456f6dd80fc86": "0x2a5a058fc295ed000000",
        "0xab0ced762e1661fae1a92afb1408889413794825": "0x678a932062e4180000",
        "0xab14d221e33d544629198cd096ed63dfa28d9f47": "0x14542ba12a337c00000",
        "0xab209fdca979d0a647010af9a8b52fc7d20d8cd1": "0x1eee2532c7c2d040000",
        "0xab27ba78c8e5e3daef31ad05aef0ff0325721e08": "0x195ece006e02d00000",
        "0xab2871e507c7be3965498e8fb462025a1a1c4264": "0x2a034919dfbfbc0000",
        "0xab3861226ffec1289187fb84a08ec3ed043264e8": "0x3635c9adc5dea00000",
        "0xab3d86bc82927e0cd421d146e07f919327cdf6f9": "0x678a932062e4180000",
        "0xab3e62e77a8b225e411592b1af300752fe412463": "0x215f835bc769da80000",
        "0xab3e78294ba886a0cfd5d3487fb3a3078d338d6e": "0x6acb3df27e1f880000",
        "0xab4004c0403f7eabb0ea586f212156c4203d67f1": "0x6c6acc67d7b1d40000",
        "0xab416fe30d58afe5d9454c7fce7f830bcc750356": "0x6353701c605db8000",
        "0xab4572fbb1d72b575d69ec6ad17333873e8552fc": "0x6c6ac54cda68470000",
        "0xab5a79016176320973e8cd38f6375530022531c0": "0x3635c9adc5dea00000",
        "0xab5dfc1ea21adc42cf8c3f6e361e243fd0da61e5": "0x1043561a8829300000",
        "0xab6b65eab8dfc917ec0251b9db0ecfa0fa032849": "0x1b1ae4d6e2ef500000",
        "0xab7091932e4bc39dbb552380ca934fd7166d1e6e": "0xb50fcfafebecb00000",
        "0xab7416ff32254951cbbc624ec7fb45fc7ecaa872": "0x126e72a69a50d00000",
        "0xab7c42c5e52d641a07ad75099c62928b7f86622f": "0x12361aa21d14ba0000",
        "0xab7d54c7c6570efca5b4b8ce70f52a5773e5d53b": "0xf283abe9d9f380000",
        "0xab7e0b83ed9a424c6d1e6a6f87a4dbf06409c7d6": "0x821ab0d44149800000",
        "0xab84a0f147ad265400002b85029a41fc9ce57f85": "0x3635c9adc5dea00000",
        "0xab93b26ece0a0aa21365afed1fa9aea31cd54468": "0x572b7b98736c200000",
        "0xab948a4ae3795cbca13126e19253bdc21d3a8514": "0xad78ebc5ac6200000",
        "0xab9ad36e5c74ce2e96399f57839431d0e79f96ab": "0x8e3f50b173c100000",
        "0xabb2e6a72a40ba6ed908cdbcec3c5612583132fe": "0x4f2591f896a6500000",
        "0xabc068b4979b0ea64a62d3b7aa897d73810dc533": "0x6acb3df27e1f880000",
        "0xabc45f84db7382dde54c5f7d8938c42f4f3a3bc4": "0xad78ebc5ac6200000",
        "0xabc4caeb474d4627cb6eb456ecba0ecd08ed8ae1": "0xd5967be4fc3f100000",
        "0xabc74706964960dfe0dca3dca79e9216056f1cf4": "0x878678326eac9000000",
        "0xabc9a99e8a2148a55a6d82bd51b98eb5391fdbaf": "0x14542ba12a337c00000",
        "0xabcdbc8f1dd13af578d4a4774a62182bedf9f9be": "0x1fcc27bc459d20000",
        "0xabd154903513b8da4f019f68284b0656a1d0169b": "0x3635c9adc5dea00000",
        "0xabd21eff954fc6a7de26912a7cbb303a6607804e": "0x523c9aa696eb940000",
        "0xabd4d6c1666358c0406fdf3af248f78ece830104": "0x727de34a24f9000000",
        "0xabd9605b3e91acfd777830d16463478ae0fc7720": "0x73f75d1a085ba0000",
        "0xabdc9f1bcf4d19ee96591030e772c334302f7d83": "0x87e5e11a81cb5f80000",
        "0xabde147b2af789eaa586547e66c4fa2664d328a4": "0xd6b6081f34c128000",
        "0xabe07ced6ac5ddf991eff6c3da226a741bd243fe": "0x21e19e0c9bab2400000",
        "0xabf12fa19e82f76c718f01bdca0003674523ef30": "0x6c6b935b8bbd400000",
        "0xabf728cf9312f22128024e7046c251f5dc5901ed": "0x641e8a13563d8f80000",
        "0xabf8ffe0708a99b528cc1ed4e9ce4b0d0630be8c": "0x7ab5c2aeeee6380000",
        "0xabfcf5f25091ce57875fc674dcf104e2a73dd2f2": "0x11164759ffb320000",
        "0xabfe936425dcc7b74b955082bbaaf2a11d78bc05": "0x4be4e7267b6ae00000",
        "0xac024f594f9558f04943618eb0e6b2ee501dc272": "0x6c6b935b8bbd400000",
        "0xac122a03cd058c122e5fe17b872f4877f9df9572": "0x6ac5c62d9486070000",
        "0xac142eda1157b9a9a64390df7e6ae694fac98905": "0xad78ebc5ac6200000",
        "0xac1dfc984b71a19929a81d81f04a7cbb14073703": "0x2086ac351052600000",
        "0xac21c1e5a3d7e0b50681679dd6c792dbca87decb": "0x152d02c7e14af6800000",
        "0xac2889b5966f0c7f9edb42895cb69d1c04f923a2": "0x10f0cf064dd59200000",
        "0xac28b5edea05b76f8c5f97084541277c96696a4c": "0x3635c9adc5dea00000",
        "0xac2c8e09d06493a63858437bd20be01962450365": "0x678a932062e4180000",
        "0xac2e766dac3f648f637ac6713fddb068e4a4f04d": "0xaadec983fcff40000",
        "0xac3900298dd14d7cc96d4abb428da1bae213ffed": "0x53ca12974851c010000",
        "0xac3da526cfce88297302f34c49ca520dc271f9b2": "0x2b5e3af16b18800000",
        "0xac4460a76e6db2b9fcd152d9c7718d9ac6ed8c6f": "0xad78ebc5ac6200000",
        "0xac4acfc36ed6094a27e118ecc911cd473e8fb91f": "0x61913e14403c0c0000",
        "0xac4cc256ae74d624ace80db078b2207f57198f6b": "0x6c7974123f64a40000",
        "0xac4ee9d502e7d2d2e99e59d8ca7d5f00c94b4dd6": "0x3635c9adc5dea00000",
        "0xac52b77e15664814f39e4f271be641308d91d6cc": "0xbed1d0263d9f00000",
        "0xac5999a89d2dd286d5a80c6dee7e86aad40f9e12": "0xd255d112e103a00000",
        "0xac5f627231480d0d95302e6d89fc32cb1d4fe7e3": "0xad78ebc5ac6200000",
        "0xac608e2bac9dd20728d2947effbbbf900a9ce94b": "0x1454b0db37568fc0000",
        "0xac6d02e9a46b379fac4ac9b1d7b5d47bc850ce16": "0x5f68e8131ecf800000",
        "0xac6f68e837cf1961cb14ab47446da168a16dde89": "0x487a9a304539440000",
        "0xac77bdf00fd5985b5db12bbef800380abc2a0677": "0x3635c9adc5dea00000",
        "0xac7e03702723cb16ee27e22dd0b815dc2d5cae9f": "0x3635c9adc5dea000000",
        "0xac8b509aefea1dbfaf2bb33500d6570b6fd96d51": "0x62a992e53a0af00000",
        "0xac8e87ddda5e78fcbcb9fa7fc3ce038f9f7d2e34": "0x6c6b935b8bbd400000",
        "0xac9fff68c61b011efbecf038ed72db97bb9e7281": "0x205b4dfa1ee74780000",
        "0xaca1e6bc64cc3180f620e94dc5b1bcfd8158e45d": "0x6c6b935b8bbd400000",
        "0xaca2a838330b17302da731d30db48a04f0f207c1": "0x487a9a304539440000",
        "0xacaaddcbf286cb0e215dda55598f7ff0f4ada5c6": "0x3635c9adc5dea00000",
        "0xacb94338554bc488cc88ae2d9d94080d6bdf8410": "0x3635c9adc5dea00000",
        "0xacbc2d19e06c3babbb5b6f052b6bf7fc37e07229": "0xad78ebc5ac6200000",
        "0xacbd185589f7a68a67aa4b1bd65077f8c64e4e21": "0xad78ebc5ac6200000",
        "0xacc062702c59615d3444ef6214b8862b009a02ed": "0x514fcb24ff9c500000",
        "0xacc0909fda2ea6b7b7a88db7a0aac868091ddbf6": "0x133765f1e26c78000",
        "0xacc1c78786ab4d2b3b277135b5ba123e0400486b": "0x44591d67fecc80000",
        "0xacc46a2a555c74ded4a2bd094e821b97843b40c0": "0x692ae8897081d00000",
        "0xacc59f3b30ceffc56461cc5b8df48902240e0e7b": "0x6c6b935b8bbd400000",
        "0xacce01e0a70610dc70bb91e9926fa9957f372fba": "0x1d1c5f3eda20c40000",
        "0xacd8dd91f714764c45677c63d852e56eb9eece2e": "0x6c6b935b8bbd400000",
        "0xace2abb63b0604409fbde3e716d2876d44e8e5dd": "0x83d6c7aab63600000",
        "0xacec91ef6941cf630ba9a3e787a012f4a2d91dd4": "0x10f0cf064dd592000000",
        "0xad0a4ae478e9636e88c604f242cf5439c6d45639": "0xbed1d0263d9f000000",
        "0xad1799aad7602b4540cd832f9db5f11150f1687a": "0x6c6b935b8bbd400000",
        "0xad1d68a038fd2586067ef6d135d9628e79c2c924": "0xfe09a5279e2abc0000",
        "0xad2a5c00f923aaf21ab9f3fb066efa0a03de2fb2": "0x3635bb77cb4b860000",
        "0xad3565d52b688added08168b2d3872d17d0a26ae": "0x56bc75e2d63100000",
        "0xad377cd25eb53e83ae091a0a1d2b4516f484afde": "0x692ae8897081d00000",
        "0xad414d29cb7ee973fec54e22a388491786cf5402": "0x2f6f10780d22cc00000",
        "0xad44357e017e244f476931c7b8189efee80a5d0a": "0x1043561a8829300000",
        "0xad57aa9d00d10c439b35efcc0becac2e3955c313": "0xad78ebc5ac6200000",
        "0xad59a78eb9a74a7fbdaefafa82eada8475f07f95": "0x1b1ae4d6e2ef500000",
        "0xad5a8d3c6478b69f657db3837a2575ef8e1df931": "0x20156e104c1b30000",
        "0xad660dec825522a9f62fcec3c5b731980dc286ea": "0xa2a15d09519be00000",
        "0xad6628352ed3390bafa86d923e56014cfcb360f4": "0x6c6b935b8bbd400000",
        "0xad728121873f0456d0518b80ab6580a203706595": "0x1b1ae4d6e2ef500000",
        "0xad732c976593eec4783b4e2ecd793979780bfedb": "0x6c6b935b8bbd400000",
        "0xad7dd053859edff1cb6f9d2acbed6dd5e332426f": "0x6acb3df27e1f880000",
        "0xad80d865b85c34d2e6494b2e7aefea6b9af184db": "0xd8d726b7177a800000",
        "0xad8bfef8c68a4816b3916f35cb7bfcd7d3040976": "0x878678326eac9000000",
        "0xad8e48a377695de014363a523a28b1a40c78f208": "0x3635c9adc5dea00000",
        "0xad910a23d6850613654af786337ad2a70868ac6d": "0x6c68ccd09b022c0000",
        "0xad927e03d1599a78ca2bf0cad2a183dceb71eac0": "0x6acb3df27e1f880000",
        "0xad92ca066edb7c711dfc5b166192d1edf8e77185": "0x79f905c6fd34e800000",
        "0xad94235fc3b3f47a2413af31e884914908ef0c45": "0x1b1b0142d815840000",
        "0xad9e97a0482f353a05c0f792b977b6c7e811fa5f": "0xad78ebc5ac6200000",
        "0xad9f4c890a3b511cee51dfe6cfd7f1093b76412c": "0x1b767cbfeb0ce40000",
        "0xadaa0e548c035affed64ca678a963fabe9a26bfd": "0x3cb71f51fc5580000",
        "0xadb948b1b6fefe207de65e9bbc2de98e605d0b57": "0x6c6b935b8bbd400000",
        "0xadc19ec835afe3e58d87dc93a8a9213c90451326": "0x6adbe5342282000000",
        "0xadc8228ef928e18b2a807d00fb3c6c79cd1d9e96": "0x13c69df334ee80000",
        "0xaddb26317227f45c87a2cb90dc4cfd02fb23caf8": "0x3635c9adc5dea00000",
        "0xade6f8163bf7c7bb4abe8e9893bd0cc112fe8872": "0x11c25d004d01f80000",
        "0xadeb204aa0c38e179e81a94ed8b3e7d53047c26b": "0x20f5b1eaad8d800000",
        "0xadeb52b604e5f77faaac88275b8d6b49e9f9f97f": "0x71426b00956ed20000",
        "0xadf1acfe99bc8c14b304c8d905ba27657b8a7bc4": "0x43c33c1937564800000",
        "0xadf85203c8376a5fde9815384a350c3879c4cb93": "0x3e31fc675815aa0000",
        "0xadff0d1d0b97471e76d789d2e49c8a74f9bd54ff": "0x65ea3db75546600000",
        "0xae062c448618643075de7a0030342dced63dbad7": "0x2cc6cd8cc282b30000",
        "0xae10e27a014f0d306baf266d4897c89aeee2e974": "0x43c33c1937564800000",
        "0xae126b382cf257fad7f0bc7d16297e54cc7267da": "0x1043561a8829300000",
        "0xae13a08511110f32e53be4127845c843a1a57c7b": "0x1b1ae4d6e2ef500000",
        "0xae179a460db66326743d24e67523a57b246daf7f": "0x10007ae7ce5bbe40000",
        "0xae222865799079aaf4f0674a0cdaab02a6d570ff": "0x6c6b935b8bbd400000",
        "0xae239acffd4ebe2e1ba5b4170572dc79cc6533ec": "0x28a857425466f800000",
        "0xae2f9c19ac76136594432393b0471d08902164d3": "0x25df05c6a897e40000",
        "0xae34861d342253194ffc6652dfde51ab44cad3fe": "0x194608686316bd8000",
        "0xae36f7452121913e800e0fcd1a65a5471c23846f": "0x8e3f50b173c100000",
        "0xae3f98a443efe00f3e711d525d9894dc9a61157b": "0x1004e2e45fb7ee0000",
        "0xae47e2609cfafe369d66d415d939de05081a9872": "0x5baecf025f9b6500000",
        "0xae4f122e35c0b1d1e4069291457c83c07f965fa3": "0x3635c9adc5dea00000",
        "0xae5055814cb8be0c117bb8b1c8d2b63b4698b728": "0x1bc932ec573a38000",
        "0xae538c73c5b38d8d584d7ebdadefb15cabe48357": "0x3627e8f712373c0000",
        "0xae57cc129a96a89981dac60d2ffb877d5dc5e432": "0x3c3a2394b396550000",
        "0xae5aa1e6c2b60f6fd3efe721bb4a719cbe3d6f5d": "0x2b24c6b55a5e620000",
        "0xae5c9bdad3c5c8a1220444aea5c229c1839f1d64": "0x19e2a4c818b9060000",
        "0xae5ce3355a7ba9b332760c0950c2bc45a85fa9a0": "0x15af1d78b58c400000",
        "0xae5d221afcd3d29355f508eadfca408ce33ca903": "0x152d02c7e14af6800000",
        "0xae635bf73831119d2d29c0d04ff8f8d8d0a57a46": "0x487a9a304539440000",
        "0xae648155a658370f929be384f7e001047e49dd46": "0x2df24ae32be20440000",
        "0xae6f0c73fdd77c489727512174d9b50296611c4c": "0x14542ba12a337c00000",
        "0xae70e69d2c4a0af818807b1a2705f79fd0b5dbc4": "0x35659ef93f0fc40000",
        "0xae7739124ed153052503fc101410d1ffd8cd13b7": "0x3634fb9f1489a70000",
        "0xae78bb849139a6ba38ae92a09a69601cc4cb62d1": "0x1b1ae4d6e2ef500000",
        "0xae842210f44d14c4a4db91fc9d3b3b50014f7bf7": "0xd8d726b7177a800000",
        "0xae842e81858ecfedf6506c686dc204ac15bf8b24": "0x22b1c8c1227a00000",
        "0xae8954f8d6166de507cf61297d0fc7ca6b9e7128": "0x1043561a8829300000",
        "0xae9ecd6bdd952ef497c0050ae0ab8a82a91898ce": "0x1a055690d9db80000",
        "0xae9f5c3fbbe0c9bcbf1af8ff74ea280b3a5d8b08": "0x5dc892aa1131c80000",
        "0xaead88d689416b1c91f2364421375b7d3c70fb2e": "0x6c6b935b8bbd400000",
        "0xaeadfcd0978edad74a32bd01a0a51d37f246e661": "0xe18398e7601900000",
        "0xaeb916ebf49d0f86c13f7331cef19e129937512d": "0x2085655b8d1b0a0000",
        "0xaebd4f205de799b64b3564b256d42a711d37ef99": "0x3fcf8b4574f84e0000",
        "0xaec27ce2133e82d052520afb5c576d9f7eb93ed2": "0xdd04120ba09cfe60000",
        "0xaec27ff5d7f9ddda91183f46f9d52543b6cd2b2f": "0x18650127cc3dc80000",
        "0xaee49d68adedb081fd43705a5f78c778fb90de48": "0x1158e460913d00000",
        "0xaef5b12258a18dec07d5ec2e316574919d79d6d6": "0x6c6b935b8bbd400000",
        "0xaefcfe88c826ccf131d54eb4ea9eb80e61e1ee25": "0x126e72a69a50d00000",
        "0xaf06f5fa6d1214ec43967d1bd4dde74ab814a938": "0x4c53ecdc18a600000",
        "0xaf1148ef6c8e103d7530efc91679c9ac27000993": "0xad78ebc5ac6200000",
        "0xaf203e229d7e6d419df4378ea98715515f631485": "0x6acb3df27e1f880000",
        "0xaf2058c7282cf67c8c3cf930133c89617ce75d29": "0x177224aa844c7200000",
        "0xaf26f7c6bf453e2078f08953e4b28004a2c1e209": "0x56bc75e2d63100000",
        "0xaf3087e62e04bf900d5a54dc3e946274da92423b": "0x1158e460913d00000",
        "0xaf3614dcb68a36e45a4e911e62796247222d595b": "0x7a81065f1103bc0000",
        "0xaf3615c789d0b1152ad4db25fe5dcf222804cf62": "0x3635c9adc5dea00000",
        "0xaf3cb5965933e7dad883693b9c3e15beb68a4873": "0x6c6b935b8bbd400000",
        "0xaf4493e8521ca89d95f5267c1ab63f9f45411e1b": "0xad78ebc5ac6200000",
        "0xaf4cf41785161f571d0ca69c94f8021f41294eca": "0x215f835bc769da80000",
        "0xaf529bdb459cc185bee5a1c58bf7e8cce25c150d": "0xaadec983fcff40000",
        "0xaf67fd3e127fd9dc36eb3fcd6a80c7be4f7532b2": "0x5a87e7d7f5f6580000",
        "0xaf771039345a343001bc0f8a5923b126b60d509c": "0x35659ef93f0fc40000",
        "0xaf7f79cb415a1fb8dbbd094607ee8d41fb7c5a3b": "0x21e19e0c9bab2400000",
        "0xaf87d2371ef378957fbd05ba2f1d66931b01e2b8": "0x25f273933db5700000",
        "0xaf880fc7567d5595cacce15c3fc14c8742c26c9e": "0x73f75d1a085ba0000",
        "0xaf8e1dcb314c950d3687434d309858e1a8739cd4": "0xe7eeba3410b740000",
        "0xaf992dd669c0883e5515d3f3112a13f617a4c367": "0x6c6b935b8bbd400000",
        "0xafa1d5ad38fed44759c05b8993c1aa0dace19f40": "0x4563918244f400000",
        "0xafa539586e4719174a3b46b9b3e663a7d1b5b987": "0x10f0cf064dd59200000",
        "0xafa6946effd5ff53154f82010253df47ae280ccc": "0x6acb3df27e1f880000",
        "0xafc8ebe8988bd4105acc4c018e546a1e8f9c7888": "0x1b1ae4d6e2ef500000",
        "0xafcc7dbb8356d842d43ae7e23c8422b022a30803": "0x66ffcbfd5e5a3000000",
        "0xafd019ff36a09155346b69974815a1c912c90aa4": "0x6c6b935b8bbd400000",
        "0xafdac5c1cb56e245bf70330066a817eaafac4cd1": "0x1158e460913d00000",
        "0xafdd1b786162b8317e20f0e979f4b2ce486d765d": "0x1158e460913d00000",
        "0xaff1045adf27a1aa329461b24de1bae9948a698b": "0x1cf84a30a0a0c0000",
        "0xaff107960b7ec34ed690b665024d60838c190f70": "0x1b1ae4d6e2ef500000",
        "0xaff11ccf699304d5f5862af86083451c26e79ae5": "0x6c5db2a4d815dc0000",
        "0xaff161740a6d909fe99c59a9b77945c91cc91448": "0x340aad21b3b700000",
        "0xaffc99d5ebb4a84fe7788d97dce274b038240438": "0x10f0cf064dd59200000",
        "0xaffea0473722cb7f0e0e86b9e11883bf428d8d54": "0x692ae8897081d00000",
        "0xb00996b0566ecb3e7243b8227988dcb352c21899": "0x28a857425466f800000",
        "0xb01e389b28a31d8e4995bdd7d7c81beeab1e4119": "0x3635c9adc5dea00000",
        "0xb02d062873334545cea29218e4057760590f7423": "0xacb6a1c7d93a880000",
        "0xb02fa29387ec12e37f6922ac4ce98c5b09e0b00f": "0x6c6b935b8bbd400000",
        "0xb036916bdacf94b69e5a8a65602975eb026104dd": "0x1158e460913d00000",
        "0xb041310fe9eed6864cedd4bee58df88eb4ed3cac": "0x21e19e0c9bab2400000",
        "0xb055af4cadfcfdb425cf65ba6431078f07ecd5ab": "0x56bc75e2d63100000",
        "0xb0571153db1c4ed7acaefe13ecdfdb72e7e4f06a": "0x110cff796ac195200000",
        "0xb06eab09a610c6a53d56a946b2c43487ac1d5b2d": "0x3635c9adc5dea00000",
        "0xb07249e055044a9155359a402937bbd954fe48b6": "0x56bc75e2d63100000",
        "0xb07618328a901307a1b7a0d058fcd5786e9e72fe": "0x667495d4a4330ce0000",
        "0xb079bb4d9866143a6da72ae7ac0022062981315c": "0x29331e6558f0e00000",
        "0xb07bcc085ab3f729f24400416837b69936ba8873": "0x6c6d84bccdd9ce0000",
        "0xb07bcf1cc5d4462e5124c965ecf0d70dc27aca75": "0x56bc75e2d631000000",
        "0xb07cb9c12405b711807543c4934465f87f98bd2d": "0x6c6b935b8bbd400000",
        "0xb07fdeaff91d4460fe6cd0e8a1b0bd8d22a62e87": "0x11d2529f3535ab00000",
        "0xb09fe6d4349b99bc37938054022d54fca366f7af": "0x2a5a058fc295ed000000",
        "0xb0aa00950c0e81fa3210173e729aaf163a27cd71": "0x878678326eac9000000",
        "0xb0ac4eff6680ee14169cdadbffdb30804f6d25f5": "0x6c6b935b8bbd400000",
        "0xb0b36af9aeeedf97b6b02280f114f13984ea3260": "0x35659ef93f0fc40000",
        "0xb0b779b94bfa3c2e1f587bcc9c7e21789222378f": "0x54069233bf7f780000",
        "0xb0baeb30e313776c4c6d247402ba4167afcda1cc": "0x6acb3df27e1f880000",
        "0xb0bb29a861ea1d424d45acd4bfc492fb8ed809b7": "0x4563918244f400000",
        "0xb0c1b177a220e41f7c74d07cde8569c21c75c2f9": "0x12f939c99edab800000",
        "0xb0c7ce4c0dc3c2bbb99cc1857b8a455f611711ce": "0xd8d726b7177a800000",
        "0xb0cef8e8fb8984a6019f01c679f272bbe68f5c77": "0x83d6c7aab63600000",
        "0xb0d32bd7e4e695b7b01aa3d0416f80557dba9903": "0x3739ff0f6e613300000",
        "0xb0d3c9872b85056ea0c0e6d1ecf7a77e3ce6ab85": "0x10f08eda8e555098000",
        "0xb0e469c886593815b3495638595daef0665fae62": "0x692ae8897081d00000",
        "0xb0e760bb07c081777345e0578e8bc898226d4e3b": "0x6c6b935b8bbd400000",
        "0xb1043004ec1941a8cf4f2b00b15700ddac6ff17e": "0x3635c9adc5dea00000",
        "0xb105dd3d987cffd813e9c8500a80a1ad257d56c6": "0x6c6acc67d7b1d40000",
        "0xb10fd2a647102f881f74c9fbc37da632949f2375": "0x22b1c8c1227a00000",
        "0xb115ee3ab7641e1aa6d000e41bfc1ec7210c2f32": "0x2c0bb3dd30c4e200000",
        "0xb1178ad47383c31c8134a1941cbcd474d06244e2": "0x3635c9adc5dea00000",
        "0xb1179589e19db9d41557bbec1cb24ccc2dec1c7f": "0x152d02c7e14af6800000",
        "0xb119e79aa9b916526581cbf521ef474ae84dcff4": "0x4fba1001e5befe0000",
        "0xb11fa7fb270abcdf5a2eab95aa30c4b53636efbf": "0x2b5e3af16b18800000",
        "0xb124bcb6ffa430fcae2e86b45f27e3f21e81ee08": "0x6c6b935b8bbd400000",
        "0xb129a5cb7105fe810bd895dc7206a991a4545488": "0x1a055690d9db80000",
        "0xb12ed07b8a38ad5506363fc07a0b6d799936bdaf": "0x21e19e0c9bab2400000",
        "0xb134c004391ab4992878337a51ec242f42285742": "0x6c6b935b8bbd400000",
        "0xb13f93af30e8d7667381b2b95bc1a699d5e3e129": "0x16c4abbebea0100000",
        "0xb1459285863ea2db3759e546ceb3fb3761f5909c": "0x3cd72a894087e08000",
        "0xb146a0b925553cf06fcaf54a1b4dfea621290757": "0x6c6e59e67c78540000",
        "0xb14a7aaa8f49f2fb9a8102d6bbe4c48ae7c06fb2": "0x1b1ae4d6e2ef5000000",
        "0xb14bbeff70720975dc6191b2a44ff49f2672873c": "0x7c0860e5a80dc0000",
        "0xb14cc8de33d6338236539a489020ce4655a32bc6": "0x1b1ae4d6e2ef5000000",
        "0xb14ddb0386fb606398b8cc47565afae00ff1d66a": "0xa12aff083e66f00000",
        "0xb153f828dd076d4a7c1c2574bb2dee1a44a318a8": "0x15af1d78b58c400000",
        "0xb1540e94cff3465cc3d187e7c8e3bdaf984659e2": "0xa215e44390e3330000",
        "0xb158db43fa62d30e65f3d09bf781c7b67372ebaa": "0x6c5db2a4d815dc0000",
        "0xb161725fdcedd17952d57b23ef285b7e4b1169e8": "0x2b6dfed3664958000",
        "0xb16479ba8e7df8f63e1b95d149cd8529d735c2da": "0x2de33a6aac32548000",
        "0xb166e37d2e501ae73c84142b5ffb5aa655dd5a99": "0x6c5db2a4d815dc0000",
        "0xb183ebee4fcb42c220e47774f59d6c54d5e32ab1": "0x56f7a9c33c04d10000",
        "0xb188078444027e386798a8ae68698919d5cc230d": "0xe7eeba3410b740000",
        "0xb1896a37e5d8825a2d01765ae5de629977de8352": "0xad78ebc5ac6200000",
        "0xb18e67a5050a1dc9fb190919a33da838ef445014": "0x1158e460913d00000",
        "0xb1a2b43a7433dd150bb82227ed519cd6b142d382": "0x946d620d744b880000",
        "0xb1c0d08b36e184f9952a4037e3e53a667d070a4e": "0x3635c9adc5dea00000",
        "0xb1c328fb98f2f19ab6646f0a7c8c566fda5a8540": "0x878678326eac900000",
        "0xb1c751786939bba0d671a677a158c6abe7265e46": "0x21e19e0c9bab2400000",
        "0xb1cd4bdfd104489a026ec99d597307a04279f173": "0x43c33c1937564800000",
        "0xb1cf94f8091505055f010ab4bac696e0ca0f67a1": "0x55a6e79ccd1d300000",
        "0xb1d6b01b94d854fe8b374aa65e895cf22aa2560e": "0x32f51edbaaa3300000",
        "0xb1dba5250ba9625755246e067967f2ad2f0791de": "0x10f0cf064dd592000000",
        "0xb1e2dd95e39ae9775c55aeb13f12c2fa233053ba": "0x6c6b935b8bbd400000",
        "0xb1e6e810c24ab0488de9e01e574837829f7c77d0": "0x15af1d78b58c400000",
        "0xb1e9c5f1d21e61757a6b2ee75913fc5a1a4101c3": "0x6c6b935b8bbd400000",
        "0xb203d29e6c56b92699c4b92d1f6f84648dc4cfbc": "0x15af1d78b58c400000",
        "0xb216dc59e27c3d7279f5cd5bb2becfb2606e14d9": "0x15af1d78b58c400000",
        "0xb21b7979bf7c5ca01fa82dd640b41c39e6c6bc75": "0x6c6acc67d7b1d40000",
        "0xb223bf1fbf80485ca2b5567d98db7bc3534dd669": "0xd8d726b7177a800000",
        "0xb22d5055d9623135961e6abd273c90deea16a3e7": "0x4be4e7267b6ae00000",
        "0xb22dadd7e1e05232a93237baed98e0df92b1869e": "0x6c6b935b8bbd400000",
        "0xb234035f7544463ce1e22bc553064684c513cd51": "0xd89fa3dc48dcf0000",
        "0xb247cf9c72ec482af3eaa759658f793d670a570c": "0x31708ae00454400000",
        "0xb2676841ee9f2d31c172e82303b0fe9bbf9f1e09": "0xad78ebc5ac6200000",
        "0xb279c7d355c2880392aad1aa21ee867c3b3507df": "0x445be3f2ef87940000",
        "0xb27c1a24204c1e118d75149dd109311e07c073ab": "0xa80d24677efef00000",
        "0xb28181a458a440f1c6bb1de8400281a3148f4c35": "0x14620c57dddae00000",
        "0xb28245037cb192f75785cb86cbfe7c930da258b0": "0x3635c9adc5dea000000",
        "0xb287f7f8d8c3872c1b586bcd7d0aedbf7e732732": "0x1158e460913d00000",
        "0xb28bb39f3466517cd46f979cf59653ee7d8f152e": "0x18650127cc3dc80000",
        "0xb28dbfc6499894f73a71faa00abe0f4bc9d19f2a": "0x56bc75e2d63100000",
        "0xb2968f7d35f208871631c6687b3f3daeabc6616c": "0x875c47f289f760000",
        "0xb29f5b7c1930d9f97a115e067066f0b54db44b3b": "0x3635c9adc5dea00000",
        "0xb2a144b1ea67b9510f2267f9da39d3f93de26642": "0x6c6b935b8bbd400000",
        "0xb2a2c2111612fb8bbb8e7dd9378d67f1a384f050": "0x1158e460913d00000",
        "0xb2a498f03bd7178bd8a789a00f5237af79a3e3f8": "0x41bad155e6512200000",
        "0xb2aa2f1f8e93e79713d92cea9ffce9a40af9c82d": "0x6c6b935b8bbd400000",
        "0xb2b516fdd19e7f3864b6d2cf1b252a4156f1b03b": "0x2e983c76115fc0000",
        "0xb2b7cdb4ff4b61d5b7ce0b2270bbb5269743ec04": "0x6c6b935b8bbd400000",
        "0xb2bdbedf95908476d7148a370cc693743628057f": "0xd8d726b7177a800000",
        "0xb2bfaa58b5196c5cb7f89de15f479d1838de713d": "0x1236efcbcbb340000",
        "0xb2c53efa33fe4a3a1a80205c73ec3b1dbcad0602": "0x6801dab35918938000",
        "0xb2d0360515f17daba90fcbac8205d569b915d6ac": "0x14542ba12a337c00000",
        "0xb2d1e99af91231858e7065dd1918330dc4c747d5": "0x3894f0e6f9b9f700000",
        "0xb2d9ab9664bcf6df203c346fc692fd9cbab9205e": "0x17be78976065180000",
        "0xb2ddb786d3794e270187d0451ad6c8b79e0e8745": "0x15af1d78b58c400000",
        "0xb2e085fddd1468ba07415b274e734e11237fb2a9": "0x56bc75e2d63100000",
        "0xb2e9d76bf50fc36bf7d3944b63e9ca889b699968": "0x9032ea62b74b100000",
        "0xb2f9c972c1e9737755b3ff1b3088738396395b26": "0x43c33c1937564800000",
        "0xb2fc84a3e50a50af02f94da0383ed59f71ff01d7": "0x65a4da25d3016c00000",
        "0xb3050beff9de33c80e1fa15225e28f2c413ae313": "0x25f273933db5700000",
        "0xb31196714a48dff726ea9433cd2912f1a414b3b3": "0x914878a8c05ee00000",
        "0xb3145b74506d1a8d047cdcdc55392a7b5350799a": "0x1b6229741c0d3d5d8000",
        "0xb320834836d1dbfda9e7a3184d1ad1fd4320ccc0": "0x3635c9adc5dea00000",
        "0xb323dcbf2eddc5382ee4bbbb201ca3931be8b438": "0x6c6b935b8bbd400000",
        "0xb32400fd13c5500917cb037b29fe22e7d5228f2d": "0x878678326eac9000000",
        "0xb325674c01e3f7290d5226339fbeac67d221279f": "0x97c9ce4cf6d5c00000",
        "0xb32825d5f3db249ef4e85cc4f33153958976e8bc": "0x1b2df9d219f5798000",
        "0xb32af3d3e8d075344926546f2e32887bf93b16bd": "0xad78ebc5ac6200000",
        "0xb32f1c2689a5ce79f1bc970b31584f1bcf2283e7": "0x1158e460913d00000",
        "0xb33c0323fbf9c26c1d8ac44ef74391d0804696da": "0x1158e460913d00000",
        "0xb34f04b8db65bba9c26efc4ce6efc50481f3d65d": "0x43c33c1937564800000",
        "0xb3557d39b5411b84445f5f54f38f62d2714d0087": "0x2086ac351052600000",
        "0xb358e97c70b605b1d7d729dfb640b43c5eafd1e7": "0x43c33c1937564800000",
        "0xb35e8a1c0dac7e0e66dbac736a592abd44012561": "0xcfce55aa12b30000",
        "0xb3667894b7863c068ad344873fcff4b5671e0689": "0x43c33c1937564800000",
        "0xb3717731dad65132da792d876030e46ac227bb8a": "0x3635c9adc5dea00000",
        "0xb3731b046c8ac695a127fd79d0a5d5fa6ae6d12e": "0x6c4fd1ee246e780000",
        "0xb37c2b9f50637bece0ca959208aefee6463ba720": "0x15af1d78b58c400000",
        "0xb388b5dfecd2c5e4b596577c642556dbfe277855": "0x1158e460913d00000",
        "0xb38c4e537b5df930d65a74d043831d6b485bbde4": "0x15af1d78b58c400000",
        "0xb39139576194a0866195151f33f2140ad1cc86cf": "0x152d02c7e14af6800000",
        "0xb39f4c00b2630cab7db7295ef43d47d501e17fd7": "0xd8d726b7177a800000",
        "0xb3a64b1176724f5409e1414a3523661baee74b4a": "0x16368ff4ff9c10000",
        "0xb3a6bd41f9d9c3201e050b87198fbda399342210": "0xc461e1dd1029b58000",
        "0xb3a8c2cb7d358e5739941d945ba9045a023a8bbb": "0x3635c9adc5dea00000",
        "0xb3ae54fba09d3ee1d6bdd1e957923919024c35fa": "0x38d2cee65b22a8000",
        "0xb3b7f493b44a2c8d80ec78b1cdc75a652b73b06c": "0x6c6b935b8bbd400000",
        "0xb3c228731d186d2ded5b5fbe004c666c8e469b86": "0x19274b259f6540000",
        "0xb3c260609b9df4095e6c5dff398eeb5e2df49985": "0xdc55fdb17647b0000",
        "0xb3c65b845aba6cd816fbaae983e0e46c82aa8622": "0x3635c9adc5dea00000",
        "0xb3c94811e7175b148b281c1a845bfc9bb6fbc115": "0xad78ebc5ac6200000",
        "0xb3e20eb4de18bd060221689894bee5aeb25351ee": "0x3fc80cce516598000",
        "0xb3e3c439069880156600c2892e448d4136c92d9b": "0x2e141ea081ca080000",
        "0xb3f82a87e59a39d0d2808f0751eb72c2329cdcc5": "0x10f0cf064dd59200000",
        "0xb3fc1d6881abfcb8becc0bb021b8b73b7233dd91": "0x2b5e3af16b1880000",
        "0xb40594c4f3664ef849cca6227b8a25aa690925ee": "0xd8d726b7177a800000",
        "0xb41eaf5d51a5ba1ba39bb418dbb54fab750efb1f": "0x3635c9adc5dea00000",
        "0xb424d68d9d0d00cec1938c854e15ffb880ba0170": "0xad78ebc5ac6200000",
        "0xb4256273962bf631d014555cc1da0dcc31616b49": "0x6c6b935b8bbd400000",
        "0xb43067fe70d9b55973ba58dc64dd7f311e554259": "0xad78ebc5ac6200000",
        "0xb43657a50eecbc3077e005d8f8d94f377876bad4": "0x1ec1b3a1ff75a0000",
        "0xb43c27f7a0a122084b98f483922541c8836cee2c": "0x26c29e47c4844c0000",
        "0xb4413576869c08f9512ad311fe925988a52d3414": "0x21e19e0c9bab2400000",
        "0xb44605552471a6eee4daab71ff3bb41326d473e0": "0x2d7e3d51ba53d00000",
        "0xb447571dacbb3ecbb6d1cf0b0c8f3838e52324e2": "0x1a318667fb4058000",
        "0xb44783c8e57b480793cbd69a45d90c7b4f0c48ac": "0x1158e460913d00000",
        "0xb44815a0f28e569d0e921a4ade8fb2642526497a": "0x302379bf2ca2e0000",
        "0xb4496ddb27799a222457d73979116728e8a1845b": "0x8d819ea65fa62f8000",
        "0xb4524c95a7860e21840296a616244019421c4aba": "0x1b1ae4d6e2ef5000000",
        "0xb45cca0d36826662683cf7d0b2fdac687f02d0c4": "0x3635c9adc5dea00000",
        "0xb46440c797a556e04c7d9104660491f96bb076bf": "0xcec76f0e71520000",
        "0xb46ace865e2c50ea4698d216ab455dff5a11cd72": "0x3635c9adc5dea00000",
        "0xb46d1182e5aacaff0d26b2fcf72f3c9ffbcdd97d": "0xaa2a603cdd7f2c0000",
        "0xb48921c9687d5510744584936e8886bdbf2df69b": "0x3635c9adc5dea00000",
        "0xb498bb0f520005b6216a4425b75aa9adc52d622b": "0xd8d726b7177a800000",
        "0xb4b11d109f608fa8edd3fea9f8c315649aeb3d11": "0x10f0cf064dd59200000",
        "0xb4b14bf45455d0ab0803358b7524a72be1a2045b": "0x1b1ae4d6e2ef500000",
        "0xb4b185d943ee2b58631e33dff5af6854c17993ac": "0x3635c9adc5dea00000",
        "0xb4bf24cb83686bc469869fefb044b909716993e2": "0x6c6b935b8bbd400000",
        "0xb4c20040ccd9a1a3283da4d4a2f365820843d7e2": "0x3635c9adc5dea00000",
        "0xb4c8170f7b2ab536d1d9a25bdd203ae1288dc3d5": "0xad78ebc5ac6200000",
        "0xb4d82f2e69943f7de0f5f7743879406fac2e9cec": "0x22b1c8c1227a00000",
        "0xb4dd460cd016725a64b22ea4f8e06e06674e033e": "0x1231bb8748547a80000",
        "0xb4dd5499daeb2507fb2de12297731d4c72b16bb0": "0x1158e460913d00000",
        "0xb5046cb3dc1dedbd364514a2848e44c1de4ed147": "0x37b7d9bb820405e0000",
        "0xb508f987b2de34ae4cf193de85bff61389621f88": "0x14542ba12a337c00000",
        "0xb50955aa6e341571986608bdc891c2139f540cdf": "0x6acb3df27e1f880000",
        "0xb50c149a1906fad2786ffb135aab501737e9e56f": "0x150894e849b3900000",
        "0xb50c9f5789ae44e2dce017c714caf00c830084c2": "0x155bd9307f9fe80000",
        "0xb514882c979bb642a80dd38754d5b8c8296d9a07": "0x33c5499031720c0000",
        "0xb51ddcb4dd4e8ae6be336dd9654971d9fec86b41": "0x16d464f83de2948000",
        "0xb51e558eb5512fbcfa81f8d0bd938c79ebb5242b": "0x26c29e47c4844c0000",
        "0xb523fff9749871b35388438837f7e6e0dea9cb6b": "0x6c6b935b8bbd400000",
        "0xb52dfb45de5d74e3df208332bc571c809b8dcf32": "0x14542ba12a337c00000",
        "0xb535f8db879fc67fec58824a5cbe6e5498aba692": "0x678a932062e4180000",
        "0xb537d36a70eeb8d3e5c80de815225c1158cb92c4": "0x5150ae84a8cdf00000",
        "0xb53bcb174c2518348b818aece020364596466ba3": "0x6c6b935b8bbd400000",
        "0xb5493ef173724445cf345c035d279ba759f28d51": "0x1158e460913d00000",
        "0xb553d25d6b5421e81c2ad05e0b8ba751f8f010e3": "0x6c6b935b8bbd400000",
        "0xb55474ba58f0f2f40e6cbabed4ea176e011fcad6": "0x6acb3df27e1f880000",
        "0xb555d00f9190cc3677aef314acd73fdc39399259": "0x6c6b935b8bbd400000",
        "0xb557ab9439ef50d237b553f02508364a466a5c03": "0xad78ebc5ac6200000",
        "0xb56a780028039c81caf37b6775c620e786954764": "0x6c6b935b8bbd400000",
        "0xb56ad2aec6c8c3f19e1515bbb7dd91285256b639": "0x3635c9adc5dea00000",
        "0xb57413060af3f14eb479065f1e9d19b3757ae8cc": "0x22b1c8c1227a00000",
        "0xb57549bfbc9bdd18f736b22650e48a73601fa65c": "0x182d7e4cfda0380000",
        "0xb577b6befa054e9c040461855094b002d7f57bd7": "0x1823f3cf621d23400000",
        "0xb57b04fa23d1203fae061eac4542cb60f3a57637": "0xa5aa85009e39c0000",
        "0xb5870ce342d43343333673038b4764a46e925f3e": "0x3635c9adc5dea00000",
        "0xb587b44a2ca79e4bc1dd8bfdd43a207150f2e7e0": "0x222c8eb3ff66400000",
        "0xb589676d15a04448344230d4ff27c95edf122c49": "0x3635c9adc5dea00000",
        "0xb58b52865ea55d8036f2fab26098b352ca837e18": "0xfc936392801c0000",
        "0xb5906b0ae9a28158e8ac550e39da086ee3157623": "0xad78ebc5ac6200000",
        "0xb5a4679685fa14196c2e9230c8c4e33bffbc10e2": "0x4be4e7267b6ae00000",
        "0xb5a589dd9f4071dbb6fba89b3f5d5dae7d96c163": "0x6c6b935b8bbd400000",
        "0xb5a606f4ddcbb9471ec67f658caf2b00ee73025e": "0xea756ea92afc740000",
        "0xb5ad5157dda921e6bafacd9086ae73ae1f611d3f": "0x6c6b935b8bbd400000",
        "0xb5add1e7809f7d03069bfe883b0a932210be8712": "0x3635c9adc5dea00000",
        "0xb5ba29917c78a1d9e5c5c713666c1e411d7f693a": "0xa80d24677efef00000",
        "0xb5c816a8283ca4df68a1a73d63bd80260488df08": "0xad78ebc5ac6200000",
        "0xb5cac5ed03477d390bb267d4ebd46101fbc2c3da": "0xaadec983fcff40000",
        "0xb5cdbc4115406f52e5aa85d0fea170d2979cc7ba": "0x487a9a304539440000",
        "0xb5d9934d7b292bcf603b2880741eb760288383a0": "0xe7c2518505060000",
        "0xb5dd50a15da34968890a53b4f13fe1af081baaaa": "0xd8d726b7177a800000",
        "0xb5fa8184e43ed3e0b8ab91216461b3528d84fd09": "0x914878a8c05ee00000",
        "0xb5fb7ea2ddc1598b667a9d57dd39e85a38f35d56": "0x1b1ae4d6e2ef500000",
        "0xb600429752f399c80d0734744bae0a022eca67c6": "0x1158e460913d00000",
        "0xb600feab4aa96c537504d96057223141692c193a": "0x15af1d78b58c400000",
        "0xb6047cdf932db3e4045f4976122341537ed5961e": "0x1158e460913d00000",
        "0xb615e940143eb57f875893bc98a61b3d618c1e8c": "0x1158e460913d00000",
        "0xb61c34fcacda701a5aa8702459deb0e4ae838df8": "0x7695a92c20d6fe00000",
        "0xb63064bd3355e6e07e2d377024125a33776c4afa": "0x8375a2abcca24400000",
        "0xb635a4bc71fb28fdd5d2c322983a56c284426e69": "0x93739534d28680000",
        "0xb646df98b49442746b61525c81a3b04ba3106250": "0x6acb3df27e1f880000",
        "0xb65941d44c50d24666670d364766e991c02e11c2": "0x2086ac351052600000",
        "0xb65bd780c7434115162027565223f44e5498ff8c": "0x43c30fb0884a96c0000",
        "0xb66411e3a02dedb726fa79107dc90bc1cae64d48": "0x6c6b935b8bbd400000",
        "0xb66675142e3111a1c2ea1eb2419cfa42aaf7a234": "0x3635c9adc5dea00000",
        "0xb66f92124b5e63035859e390628869dbdea9485e": "0x215f835bc769da80000",
        "0xb672734afcc224e2e609fc51d4f059732744c948": "0x1004e2e45fb7ee0000",
        "0xb6771b0bf3427f9ae7a93e7c2e61ee63941fdb08": "0x3fb26692954bfc00000",
        "0xb67a80f170197d96cdcc4ab6cba627b4afa6e12c": "0x821ab0d44149800000",
        "0xb68899e7610d4c93a23535bcc448945ba1666f1c": "0xad78ebc5ac6200000",
        "0xb6a82933c9eadabd981e5d6d60a6818ff806e36b": "0x15af1d78b58c400000",
        "0xb6aacb8cb30bab2ae4a2424626e6e12b02d04605": "0x1b1ae4d6e2ef5000000",
        "0xb6b34a263f10c3d2eceb0acc559a7b2ab85ce565": "0xd8d726b7177a800000",
        "0xb6bfe1c3ef94e1846fb9e3acfe9b50c3e9069233": "0x6c6acc67d7b1d40000",
        "0xb6cd7432d5161be79768ad45de3e447a07982063": "0xd8d726b7177a800000",
        "0xb6ce4dc560fc73dc69fb7a62e388db7e72ea764f": "0x345df169e9a3580000",
        "0xb6decf82969819ba02de29b9b593f21b64eeda0f": "0x281d901f4fdd100000",
        "0xb6e6c3222b6b6f9be2875d2a89f127fb64100fe2": "0x1b21d5323cc30200000",
        "0xb6e8afd93dfa9af27f39b4df06076710bee3dfab": "0x15af1d78b58c40000",
        "0xb6f78da4f4d041b3bc14bc5ba519a5ba0c32f128": "0x247dd32c3fe195048000",
        "0xb6fb39786250081426a342c70d47ee521e5bc563": "0x32d26d12e980b600000",
        "0xb70dba9391682b4a364e77fe99256301a6c0bf1f": "0xad78ebc5ac6200000",
        "0xb71623f35107cf7431a83fb3d204b29ee0b1a7f4": "0x11164759ffb320000",
        "0xb71a13ba8e95167b80331b52d69e37054fe7a826": "0xad78ebc5ac6200000",
        "0xb71b62f4b448c02b1201cb5e394ae627b0a560ee": "0x1b1ae4d6e2ef500000",
        "0xb72220ade364d0369f2d2da783ca474d7b9b34ce": "0x1b1ab319f5ec750000",
        "0xb7230d1d1ff2aca366963914a79df9f7c5ea2c98": "0x1b1ae4d6e2ef5000000",
        "0xb7240af2af90b33c08ae9764103e35dce3638428": "0x1cadd2fe9686e638000",
        "0xb727a9fc82e1cffc5c175fa1485a9befa2cdbdd1": "0x3627e8f712373c0000",
        "0xb72c2a011c0df50fbb6e28b20ae1aad217886790": "0xd8d726b7177a800000",
        "0xb7382d37db0398ac72410cf9813de9f8e1ec8dad": "0x3636c25e66ece70000",
        "0xb73b4ff99eb88fd89b0b6d57a9bc338e886fa06a": "0x1bc16d674ec800000",
        "0xb73d6a77559c86cf6574242903394bacf96e3570": "0x4f1a77ccd3ba00000",
        "0xb74372dbfa181dc9242f39bf1d3731dffe2bdacf": "0x6c6b935b8bbd400000",
        "0xb7479dab5022c4d5dbaaf8de171b4e951dd1a457": "0x4563918244f400000",
        "0xb749b54e04d5b19bdcedfb84da7701ab478c27ae": "0x914878a8c05ee00000",
        "0xb74ed2666001c16333cf7af59e4a3d4860363b9c": "0xa7ebd5e4363a00000",
        "0xb75149e185f6e3927057739073a1822ae1cf0df2": "0xd8d8583fa2d52f0000",
        "0xb753a75f9ed10b21643a0a3dc0517ac96b1a4068": "0x15c8185b2c1ff40000",
        "0xb756ad52f3bf74a7d24c67471e0887436936504c": "0x43c33c1937564800000",
        "0xb7576e9d314df41ec5506494293afb1bd5d3f65d": "0x1158e460913d00000",
        "0xb758896f1baa864f17ebed16d953886fee68aae6": "0x3635c9adc5dea00000",
        "0xb768b5234eba3a9968b34d6ddb481c8419b3655d": "0xcfce55aa12b30000",
        "0xb782bfd1e2de70f467646f9bc09ea5b1fcf450af": "0xe7eeba3410b740000",
        "0xb7a2c103728b7305b5ae6e961c94ee99c9fe8e2b": "0xa968163f0a57b400000",
        "0xb7a31a7c38f3db09322eae11d2272141ea229902": "0x6c6b935b8bbd400000",
        "0xb7a6791c16eb4e2162f14b6537a02b3d63bfc602": "0x2a526391ac93760000",
        "0xb7a7f77c348f92a9f1100c6bd829a8ac6d7fcf91": "0x62a992e53a0af00000",
        "0xb7c077946674ba9341fb4c747a5d50f5d2da6415": "0x3635c9adc5dea00000",
        "0xb7c0d0cc0b4d342d4062bac624ccc3c70cc6da3f": "0xd8d726b7177a800000",
        "0xb7c9f12b038e73436d17e1c12ffe1aeccdb3f58c": "0x1d460162f516f00000",
        "0xb7cc6b1acc32d8b295df68ed9d5e60b8f64cb67b": "0x1043561a8829300000",
        "0xb7ce684b09abda53389a875369f71958aeac3bdd": "0x6c6b935b8bbd400000",
        "0xb7d12e84a2e4c4a6345af1dd1da9f2504a2a996e": "0xad78ebc5ac6200000",
        "0xb7d252ee9402b0eef144295f0e69f0db586c0871": "0x23c757072b8dd00000",
        "0xb7d581fe0af1ec383f3b3c416783f385146a7612": "0x43c33c1937564800000",
        "0xb7f67314cb832e32e63b15a40ce0d7ffbdb26985": "0x398279264a818d0000",
        "0xb8040536958d5998ce4bec0cfc9c2204989848e9": "0x52ea70d498fd50a0000",
        "0xb8310a16cc6abc465007694b930f978ece1930bd": "0x281d901f4fdd100000",
        "0xb834acf3015322c58382eeb2b79638906e88b6de": "0x5150ae84a8cdf000000",
        "0xb84b53d0bb125656cddc52eb852ab71d7259f3d5": "0x3635c9adc5dea000000",
        "0xb84c8b9fd33ece00af9199f3cf5fe0cce28cd14a": "0xcf152640c5c8300000",
        "0xb85218f342f8012eda9f274e63ce2152b2dcfdab": "0xa80d24677efef00000",
        "0xb8555010776e3c5cb311a5adeefe9e92bb9a64b9": "0xd8d726b7177a800000",
        "0xb85f26dd0e72d9c29ebaf697a8af77472c2b58b5": "0x28519acc7190c700000",
        "0xb85ff03e7b5fc422981fae5e9941dacbdaba7584": "0x487a9a304539440000",
        "0xb86607021b62d340cf2652f3f95fd2dc67698bdf": "0x10f0cf064dd59200000",
        "0xb87de1bcd29269d521b8761cc39cfb4319d2ead5": "0x3635c9adc5dea00000",
        "0xb87f5376c2de0b6cc3c179c06087aa473d6b4674": "0x487a9a304539440000",
        "0xb884add88d83dc564ab8e0e02cbdb63919aea844": "0x6c6b935b8bbd400000",
        "0xb88a37c27f78a617d5c091b7d5b73a3761e65f2a": "0x6c6b935b8bbd400000",
        "0xb8947822d5ace7a6ad8326e95496221e0be6b73d": "0x1158e460913d00000",
        "0xb89c036ed7c492879921be41e10ca1698198a74c": "0x62a992e53a0af00000",
        "0xb89f4632df5909e58b2a9964f74feb9a3b01e0c5": "0x48875bcc6e7cbeb8000",
        "0xb8a79c84945e47a9c3438683d6b5842cff7684b1": "0x6c6b935b8bbd400000",
        "0xb8a979352759ba09e35aa5935df175bff678a108": "0x1158e460913d00000",
        "0xb8ab39805bd821184f6cbd3d2473347b12bf175c": "0x6685ac1bfe32c0000",
        "0xb8ac117d9f0dba80901445823c4c9d4fa3fedc6e": "0x3564c4427a8fc7d8000",
        "0xb8bc9bca7f71b4ed12e620438d620f53c114342f": "0x1b1ae4d6e2ef500000",
        "0xb8bedd576a4b4c2027da735a5bc3f533252a1808": "0x6c6b935b8bbd400000",
        "0xb8c2703d8c3f2f44c584bc10e7c0a6b64c1c097e": "0x12cddb8ead6f9f80000",
        "0xb8cc0f060aad92d4eb8b36b3b95ce9e90eb383d7": "0x1fc3842bd1f071c00000",
        "0xb8d2ddc66f308c0158ae3ccb7b869f7d199d7b32": "0x2dcbf4840eca000000",
        "0xb8d389e624a3a7aebce4d3e5dbdf6cdc29932aed": "0xad78ebc5ac6200000",
        "0xb8d531a964bcea13829620c0ced72422dadb4cca": "0x93715cc5ab8a70000",
        "0xb8d5c324a8209d7c8049d0d4aede02ba80ab578b": "0x393928629fff75e8000",
        "0xb8f20005b61352ffa7699a1b52f01f5ab39167f1": "0x21e19e0c9bab2400000",
        "0xb8f30758faa808dbc919aa7b425ec922b93b8129": "0x3636d7af5ec98e0000",
        "0xb9013c51bd078a098fae05bf2ace0849c6be17a5": "0x4563918244f400000",
        "0xb9144b677c2dc614ceefdf50985f1183208ea64c": "0x6c6b935b8bbd400000",
        "0xb916b1a01cdc4e56e7657715ea37e2a0f087d106": "0x826e3181e027068000",
        "0xb91d9e916cd40d193db60e79202778a0087716fc": "0x15f1ba7f4716200000",
        "0xb9231eb26e5f9e4b4d288f03906704fab96c87d6": "0x42bf06b78ed3b500000",
        "0xb92427ad7578b4bfe20a9f63a7c5506d5ca12dc8": "0x6c6b935b8bbd400000",
        "0xb927abd2d28aaaa24db31778d27419df8e1b04bb": "0x17e11c2a26f478000",
        "0xb94d47b3c052a5e50e4261ae06a20f45d8eee297": "0x6c6b935b8bbd400000",
        "0xb95396daaa490df2569324fcc6623be052f132ca": "0x6c6b935b8bbd400000",
        "0xb959dce02e91d9db02b1bd8b7d17a9c41a97af09": "0x1b1ae4d6e2ef5000000",
        "0xb95c9b10aa981cf4a67a71cc52c504dee8cf58bd": "0xd8d726b7177a800000",
        "0xb95cfda8465ba9c2661b249fc3ab661bdfa35ff0": "0x114a4e79a2c2108000",
        "0xb96841cabbc7dbd69ef0cf8f81dff3c8a5e21570": "0x28a857425466f800000",
        "0xb97a6733cd5fe99864b3b33460d1672434d5cafd": "0x6c65bbaa46c2cf8000",
        "0xb981ad5e6b7793a23fc6c1e8692eb2965d18d0da": "0x21e18d2c821c7520000",
        "0xb98ca31785ef06be49a1e47e864f60d076ca472e": "0xd8d726b7177a800000",
        "0xb9920fd0e2c735c256463caa240fb7ac86a93dfa": "0x5f68e8131ecf800000",
        "0xb992a967308c02b98af91ee760fd3b6b4824ab0e": "0x6c6b935b8bbd400000",
        "0xb9a985501ee950829b17fae1c9cf348c3156542c": "0xff17517ca9a620000",
        "0xb9b0a3219a3288d9b35b091b14650b8fe23dce2b": "0x2f6f10780d22cc00000",
        "0xb9cf71b226583e3a921103a5316f855a65779d1b": "0x5150ae84a8cdf000000",
        "0xb9e90c1192b3d5d3e3ab0700f1bf655f5dd4347a": "0x1b19e50b44977c0000",
        "0xb9fd3833e88e7cf1fa9879bdf55af4b99cd5ce3f": "0x3635c9adc5dea00000",
        "0xba0249e01d945bef93ee5ec61925e03c5ca509fd": "0xd8d726b7177a800000",
        "0xba0f39023bdb29eb1862a9f9059cab5d306e662f": "0x6c6b935b8bbd400000",
        "0xba10f2764290f875434372f79dbf713801caac01": "0x33c5499031720c0000",
        "0xba1531fb9e791896bcf3a80558a359f6e7c144bd": "0xd5967be4fc3f100000",
        "0xba176dbe3249e345cd4fa967c0ed13b24c47e586": "0x15aef9f1c31c7f0000",
        "0xba1f0e03cb9aa021f4dcebfa94e5c889c9c7bc9e": "0x6d190c475169a200000",
        "0xba1fcaf223937ef89e85675503bdb7ca6a928b78": "0x22b1c8c1227a000000",
        "0xba24fc436753a739db2c8d40e6d4d04c528e86fa": "0x2c0bb3dd30c4e200000",
        "0xba42f9aace4c184504abf5425762aca26f71fbdc": "0x207077dd8a79c0000",
        "0xba469aa5c386b19295d4a1b5473b540353390c85": "0x6c6b935b8bbd400000",
        "0xba6440aeb3737b8ef0f1af9b0c15f4c214ffc7cf": "0x3635c9adc5dea00000",
        "0xba6d31b9a261d640b5dea51ef2162c3109f1eba8": "0x10f0cf064dd59200000",
        "0xba70e8b4759c0c3c82cc00ac4e9a94dd5bafb2b8": "0x3043fa33c412d70000",
        "0xba8a63f3f40de4a88388bc50212fea8e064fbb86": "0x6c6b935b8bbd400000",
        "0xba8e46d69d2e2343d86c60d82cf42c2041a0c1c2": "0x56bc75e2d63100000",
        "0xbaa4b64c2b15b79f5f204246fd70bcbd86e4a92a": "0x1b1ae4d6e2ef500000",
        "0xbac8922c4acc7d2cb6fd59a14eb45cf3e702214b": "0x2b5e3af16b18800000",
        "0xbad235d5085dc7b068a67c412677b03e1836884c": "0x6c6b935b8bbd400000",
        "0xbad4425e171c3e72975eb46ac0a015db315a5d8f": "0x6c6b935b8bbd400000",
        "0xbadc2aef9f5951a8d78a6b35c3d0b3a4e6e2e739": "0x14542ba12a337c00000",
        "0xbade43599e02f84f4c3014571c976b13a36c65ab": "0xd8d726b7177a800000",
        "0xbae9b82f7299631408659dd74e891cb8f3860fe5": "0x6acb3df27e1f880000",
        "0xbb0366a7cfbd3445a70db7fe5ae34885754fd468": "0x14def2c42ebd6400000",
        "0xbb076aac92208069ea318a31ff8eeb14b7e996e3": "0x813ca56906d340000",
        "0xbb0857f1c911b24b86c8a70681473fe6aaa1cce2": "0x56bc75e2d63100000",
        "0xbb19bf91cbad74cceb5f811db27e411bc2ea0656": "0xf43fc2c04ee00000",
        "0xbb27c6a7f91075475ab229619040f804c8ec7a6a": "0x21e19e0c9bab2400000",
        "0xbb371c72c9f0316cea2bd9c6fbb4079e775429ef": "0x5f68e8131ecf800000",
        "0xbb3b010b18e6e2be1135871026b7ba15ea0fde24": "0x2207c80309b77700000",
        "0xbb3b9005f46fd2ca3b30162599928c77d9f6b601": "0x1b1ae7f2b1bf7db0000",
        "0xbb3fc0a29c034d710812dcc775c8cab9d28d6975": "0x39d4e844d1cf5f0000",
        "0xbb48eaf516ce2dec3e41feb4c679e4957641164f": "0xcf152640c5c8300000",
        "0xbb4b4a4b548070ff41432c9e08a0ca6fa7bc9f76": "0x2e141ea081ca080000",
        "0xbb56a404723cff20d0685488b05a02cdc35aacaa": "0x1158e460913d00000",
        "0xbb618e25221ad9a740b299ed1406bc3934b0b16d": "0x3635c9adc5dea00000",
        "0xbb61a04bffd57c10470d45c39103f64650347616": "0x3635c9adc5dea00000",
        "0xbb6823a1bd819f13515538264a2de052b4442208": "0x16368ff4ff9c10000",
        "0xbb6c284aac8a69b75cddb00f28e145583b56bece": "0x6c6b935b8bbd400000",
        "0xbb75cb5051a0b0944b4673ca752a97037f7c8c15": "0xad78ebc5ac6200000",
        "0xbb993b96ee925ada7d99d786573d3f89180ce3aa": "0x6c6b935b8bbd400000",
        "0xbba3c68004248e489573abb2743677066b24c8a7": "0x6c6b935b8bbd400000",
        "0xbba4fac3c42039d828e742cde0efffe774941b39": "0x6c6ad382d4fb610000",
        "0xbba8ab22d2fedbcfc63f684c08afdf1c175090b5": "0x55f29f37e4e3b8000",
        "0xbba976f1a1215f7512871892d45f7048acd356c8": "0x6c6b935b8bbd400000",
        "0xbbab000b0408ed015a37c04747bc461ab14e151b": "0x14542ba12a337c00000",
        "0xbbabf6643beb4bd01c120bd0598a0987d82967d1": "0xb5328178ad0f2a0000",
        "0xbbb4ee1d82f2e156442cc93338a2fc286fa28864": "0x4a4491bd6dcd280000",
        "0xbbb5a0f4802c8648009e8a6998af352cde87544f": "0x52d542804f1ce0000",
        "0xbbb643d2187b364afc10a6fd368d7d55f50d1a3c": "0x3635c9adc5dea00000",
        "0xbbb8ffe43f98de8eae184623ae5264e424d0b8d7": "0x5d53ffde928080000",
        "0xbbbd6ecbb5752891b4ceb3cce73a8f477059376f": "0x1f399b1438a100000",
        "0xbbbf39b1b67995a42241504f9703d2a14a515696": "0x55a6e79ccd1d300000",
        "0xbbc8eaff637e94fcc58d913c7770c88f9b479277": "0xad78ebc5ac6200000",
        "0xbbc9d8112e5beb02dd29a2257b1fe69b3536a945": "0x6c6b935b8bbd400000",
        "0xbbca65b3266ea2fb73a03f921635f912c7bede00": "0x6acb3df27e1f880000",
        "0xbbf84292d954acd9e4072fb860b1504106e077ae": "0x5150ae84a8cdf00000",
        "0xbbf85aaaa683738f073baef44ac9dc34c4c779ea": "0x6c6b935b8bbd400000",
        "0xbbf8616d97724af3def165d0e28cda89b800009a": "0x62ef12e2b17618000",
        "0xbbfe0a830cace87b7293993a7e9496ce64f8e394": "0x14542ba12a337c00000",
        "0xbc0ca4f217e052753614d6b019948824d0d8688b": "0x15af1d78b58c400000",
        "0xbc0e8745c3a549445c2be900f52300804ab56289": "0x7029bf5dd4c53b28000",
        "0xbc0f98598f88056a26339620923b8f1eb074a9fd": "0xad78ebc5ac6200000",
        "0xbc1609d685b76b48ec909aa099219022f89b2ccd": "0x40138b917edfb80000",
        "0xbc171e53d17ac9b61241ae436deec7af452e7496": "0x121ea68c114e5100000",
        "0xbc1b021a78fde42d9b5226d6ec26e06aa3670090": "0x4563918244f400000",
        "0xbc1e80c181616342ebb3fb3992072f1b28b802c6": "0xd8d726b7177a800000",
        "0xbc237148d30c13836ffa2cad520ee4d2e5c4eeff": "0x6acb3df27e1f880000",
        "0xbc46d537cf2edd403565bde733b2e34b215001bd": "0x43c33c1937564800000",
        "0xbc4e471560c99c8a2a4b1b1ad0c36aa6502b7c4b": "0x28a857425466f800000",
        "0xbc62b3096a91e7dc11a1592a293dd2542150d751": "0x3635c9adc5dea00000",
        "0xbc69a0d2a31c3dbf7a9122116901b2bdfe9802a0": "0xa2a15d09519be00000",
        "0xbc6b58364bf7f1951c309e0cba0595201cd73f9a": "0x62401a457e45f80000",
        "0xbc73f7b1ca3b773b34249ada2e2c8a9274cc17c2": "0x6c6b935b8bbd400000",
        "0xbc7afc8477412274fc265df13c054473427d43c6": "0x70c95920ce3250000",
        "0xbc967fe4418c18b99858966d870678dca2b88879": "0x1d9cbdd8d7ed2100000",
        "0xbc999e385c5aebcac8d6f3f0d60d5aa725336d0d": "0x6c6b935b8bbd400000",
        "0xbc9c95dfab97a574cea2aa803b5caa197cef0cff": "0x16c4abbebea0100000",
        "0xbc9e0ec6788f7df4c7fc210aacd220c27e45c910": "0x1b1ae4d6e2ef500000",
        "0xbca3ffd4683fba0ad3bbc90734b611da9cfb457e": "0xad78ebc5ac6200000",
        "0xbcaed0acb6a76f113f7c613555a2c3b0f5bf34a5": "0xa7ebd5e4363a00000",
        "0xbcaf347918efb2d63dde03e39275bbe97d26df50": "0x56bc75e2d63100000",
        "0xbcb422dc4dd2aae94abae95ea45dd1731bb6b0ba": "0x18424f5f0b1b4e0000",
        "0xbcbd31252ec288f91e298cd812c92160e738331a": "0x6b1bc2cac09a590000",
        "0xbcbf6ba166e2340db052ea23d28029b0de6aa380": "0xd255d112e103a00000",
        "0xbcc84597b91e73d5c5b4d69c80ecf146860f779a": "0xed70b5e9c3f2f00000",
        "0xbcc9593b2da6df6a34d71b1aa38dacf876f95b88": "0x1158e460913d00000",
        "0xbcd95ef962462b6edfa10fda87d72242fe3edb5c": "0x121d06e12fff988000",
        "0xbcd99edc2160f210a05e3a1fa0b0434ced00439b": "0x6c6b935b8bbd400000",
        "0xbcdfacb9d9023c3417182e9100e8ea1d373393a3": "0x3342d60dff1960000",
        "0xbce13e22322acfb355cd21fd0df60cf93add26c6": "0xad78ebc5ac6200000",
        "0xbce40475d345b0712dee703d87cd7657fc7f3b62": "0x1a420db02bd7d580000",
        "0xbcedc4267ccb89b31bb764d7211171008d94d44d": "0xad78ebc5ac6200000",
        "0xbcfc98e5c82b6adb180a3fcb120b9a7690c86a3f": "0x6acb3df27e1f880000",
        "0xbd043b67c63e60f841ccca15b129cdfe6590c8e3": "0xad78ebc5ac6200000",
        "0xbd047ff1e69cc6b29ad26497a9a6f27a903fc4dd": "0x2ee449550898e40000",
        "0xbd08e0cddec097db7901ea819a3d1fd9de8951a2": "0x1158e460913d00000",
        "0xbd09126c891c4a83068059fe0e15796c4661a9f4": "0x2b5e3af16b18800000",
        "0xbd0c5cd799ebc48642ef97d74e8e429064fee492": "0x11ac28a8c729580000",
        "0xbd17eed82b9a2592019a1b1b3c0fbad45c408d22": "0xd8d726b7177a80000",
        "0xbd1803370bddb129d239fd16ea8526a6188ae58e": "0x1b1ae4d6e2ef500000",
        "0xbd2b70fecc37640f69514fc7f3404946aad86b11": "0x410d586a20a4c00000",
        "0xbd3097a79b3c0d2ebff0e6e86ab0edadbed47096": "0x5a87e7d7f5f6580000",
        "0xbd325d4029e0d8729f6d399c478224ae9e7ae41e": "0xd255d112e103a00000",
        "0xbd432a3916249b4724293af9146e49b8280a7f2a": "0xd8d726b7177a800000",
        "0xbd47f5f76e3b930fd9485209efa0d4763da07568": "0x3635c9adc5dea00000",
        "0xbd4b60faec740a21e3071391f96aa534f7c1f44e": "0x9ddc1e3b901180000",
        "0xbd4bd5b122d8ef7b7c8f0667450320db2116142e": "0x2086ac351052600000",
        "0xbd51ee2ea143d7b1d6b77e7e44bdd7da12f485ac": "0x477e06ccb2b9280000",
        "0xbd59094e074f8d79142ab1489f148e32151f2089": "0x1158e460913d00000",
        "0xbd5a8c94bd8be6470644f70c8f8a33a8a55c6341": "0xad78ebc5ac6200000",
        "0xbd5e473abce8f97a6932f77c2facaf9cc0a00514": "0x3c9258a106a6b70000",
        "0xbd5f46caab2c3d4b289396bbb07f203c4da82530": "0x4563918244f400000",
        "0xbd66ffedb530ea0b2e856dd12ac2296c31fe29e0": "0xad78ebc5ac6200000",
        "0xbd67d2e2f82da8861341bc96a2c0791fddf39e40": "0xad7c07947c8fb0000",
        "0xbd6a474d66345bcdd707594adb63b30c7822af54": "0xd8d726b7177a800000",
        "0xbd723b289a7367b6ece2455ed61edb49670ab9c4": "0x10f0cdea164213f8000",
        "0xbd73c3cbc26a175062ea0320dd84b253bce64358": "0x155bd9307f9fe80000",
        "0xbd7419dc2a090a46e2873d7de6eaaad59e19c479": "0x170bcb671759f080000",
        "0xbd8765f41299c7f479923c4fd18f126d7229047d": "0xd8d726b7177a800000",
        "0xbd93e550403e2a06113ed4c3fba1a8913b19407e": "0x6c6b935b8bbd400000",
        "0xbd9e56e902f4be1fc8768d8038bac63e2acbbf8e": "0x36356633ebd8ea0000",
        "0xbda4be317e7e4bed84c0495eee32d607ec38ca52": "0x7d32277978ef4e8000",
        "0xbdb60b823a1173d45a0792245fb496f1fd3301cf": "0x6c6b935b8bbd400000",
        "0xbdbaf6434d40d6355b1e80e40cc4ab9c68d96116": "0x56bc75e2d63100000",
        "0xbdc02cd4330c93d6fbda4f6db2a85df22f43c233": "0x6c6b935b8bbd400000",
        "0xbdc461462b6322b462bdb33f22799e8108e2417d": "0x243d4d18229ca20000",
        "0xbdc739a699700b2e8e2c4a4c7b058a0e513ddebe": "0x6c6b935b8bbd400000",
        "0xbdc74873af922b9df474853b0fa7ff0bf8c82695": "0xd8c9460063d31c0000",
        "0xbdca2a0ff34588af625fa8e28fc3015ab5a3aa00": "0x7ed73f773552fc0000",
        "0xbdd3254e1b3a6dc6cc2c697d45711aca21d516b2": "0x6c6b935b8bbd400000",
        "0xbddfa34d0ebf1b04af53b99b82494a9e3d8aa100": "0x28a857425466f800000",
        "0xbde4c73f969b89e9ceae66a2b51844480e038e9a": "0x3635c9adc5dea00000",
        "0xbde9786a84e75b48f18e726dd78d70e4af3ed802": "0x1369fb96128ac480000",
        "0xbded11612fb5c6da99d1e30e320bc0995466141e": "0x15af1d78b58c400000",
        "0xbded7e07d0711e684de65ac8b2ab57c55c1a8645": "0x2009c5c8bf6fdc0000",
        "0xbdf693f833c3fe471753184788eb4bfe4adc3f96": "0x6acb3df27e1f880000",
        "0xbdf6e68c0cd7584080e847d72cbb23aad46aeb1d": "0x6acb3df27e1f880000",
        "0xbe0a2f385f09dbfce96732e12bb40ac349871ba8": "0x574c115e02b8be0000",
        "0xbe0c2a80b9de084b172894a76cf4737a4f529e1a": "0x6c6acc67d7b1d40000",
        "0xbe1cd7f4c472070968f3bde268366b21eeea8321": "0xe91a7cd19fa3b00000",
        "0xbe2346a27ff9b702044f500deff2e7ffe6824541": "0x1158e460913d00000",
        "0xbe2471a67f6047918772d0e36839255ed9d691ae": "0xd8d726b7177a800000",
        "0xbe2b2280523768ea8ac35cd9e888d60a719300d4": "0x6c6b935b8bbd400000",
        "0xbe2b326e78ed10e550fee8efa8f8070396522f5a": "0x857e0d6f1da76a00000",
        "0xbe305a796e33bbf7f9aeae6512959066efda1010": "0x24dce54d34a1a000000",
        "0xbe478e8e3dde6bd403bb2d1c657c4310ee192723": "0x1ab2cf7c9f87e20000",
        "0xbe4e7d983f2e2a636b1102ec7039efebc842e98d": "0x393ef1a5127c80000",
        "0xbe4fd073617022b67f5c13499b827f763639e4e3": "0x6c6b935b8bbd400000",
        "0xbe525a33ea916177f17283fca29e8b350b7f530b": "0x8f019aaf46e8780000",
        "0xbe53322f43fbb58494d7cce19dda272b2450e827": "0xad7ceaf425c150000",
        "0xbe538246dd4e6f0c20bf5ad1373c3b463a131e86": "0xad78ebc5ac6200000",
        "0xbe5a60689998639ad75bc105a371743eef0f7940": "0x1b327c73e1257a0000",
        "0xbe5cba8d37427986e8ca2600e858bb03c359520f": "0xa030dcebbd2f4c0000",
        "0xbe60037e90714a4b917e61f193d834906703b13a": "0x5c283d410394100000",
        "0xbe633a3737f68439bac7c90a52142058ee8e8a6f": "0x340aad21b3b7000000",
        "0xbe659d85e7c34f8833ea7f488de1fbb5d4149bef": "0x1ebd23ad9d5bb720000",
        "0xbe73274d8c5aa44a3cbefc8263c37ba121b20ad3": "0x1b1ae4d6e2ef500000",
        "0xbe86d0b0438419ceb1a038319237ba5206d72e46": "0x3634fb9f1489a70000",
        "0xbe8d7f18adfe5d6cc775394989e1930c979d007d": "0x3635c9adc5dea00000",
        "0xbe9186c34a52514abb9107860f674f97b821bd5b": "0x1ba01ee40603100000",
        "0xbe935793f45b70d8045d2654d8dd3ad24b5b6137": "0x2fb474098f67c00000",
        "0xbe98a77fd41097b34f59d7589baad021659ff712": "0x30ca024f987b900000",
        "0xbe9b8c34b78ee947ff81472eda7af9d204bc8466": "0x821ab0d4414980000",
        "0xbea00df17067a43a82bc1daecafb6c14300e89e6": "0x62a992e53a0af00000",
        "0xbea0afc93aae2108a3fac059623bf86fa582a75e": "0x5c283d410394100000",
        "0xbeb3358c50cf9f75ffc76d443c2c7f55075a0589": "0x90f534608a72880000",
        "0xbeb4fd315559436045dcb99d49dcec03f40c42dc": "0x6c6b935b8bbd400000",
        "0xbec2e6de39c07c2bae556acfbee2c4728b9982e3": "0x1f0ff8f01daad40000",
        "0xbec6640f4909b58cbf1e806342961d607595096c": "0x6c6acc67d7b1d40000",
        "0xbec8caf7ee49468fee552eff3ac5234eb9b17d42": "0x6c6b935b8bbd400000",
        "0xbecef61c1c442bef7ce04b73adb249a8ba047e00": "0x363b56c3a754c80000",
        "0xbed4649df646e2819229032d8868556fe1e053d3": "0xfc936392801c0000",
        "0xbed4c8f006a27c1e5f7ce205de75f516bfb9f764": "0x3635c9adc5dea000000",
        "0xbee8d0b008421954f92d000d390fb8f8e658eaee": "0x3635c9adc5dea00000",
        "0xbeecd6af900c8b064afcc6073f2d85d59af11956": "0x6c6b935b8bbd400000",
        "0xbeef94213879e02622142bea61290978939a60d7": "0x136857b32ad86048000",
        "0xbef07d97c3481f9d6aee1c98f9d91a180a32442b": "0x152d02c7e14af6800000",
        "0xbefb448c0c5f683fb67ee570baf0db5686599751": "0x6acb3df27e1f880000",
        "0xbf05070c2c34219311c4548b2614a438810ded6d": "0x6c6b935b8bbd400000",
        "0xbf05ff5ecf0df2df887759fb8274d93238ac267d": "0x2b5e3af16b18800000",
        "0xbf09d77048e270b662330e9486b38b43cd781495": "0x5c539b7bf4ff28800000",
        "0xbf17f397f8f46f1bae45d187148c06eeb959fa4d": "0x3649c59624bb300000",
        "0xbf183641edb886ce60b8190261e14f42d93cce01": "0x15b3557f1937f8000",
        "0xbf2aea5a1dcf6ed3b5e8323944e983fedfd1acfb": "0x55a6e79ccd1d300000",
        "0xbf4096bc547dbfc4e74809a31c039e7b389d5e17": "0xd5967be4fc3f100000",
        "0xbf49c14898316567d8b709c2e50594b366c6d38c": "0x27bf38c6544df50000",
        "0xbf4c73a7ede7b164fe072114843654e4d8781dde": "0x6c6b935b8bbd400000",
        "0xbf50ce2e264b9fe2b06830617aedf502b2351b45": "0x3635c9adc5dea00000",
        "0xbf59aee281fa43fe97194351a9857e01a3b897b2": "0x2086ac351052600000",
        "0xbf68d28aaf1eeefef646b65e8cc8d190f6c6da9c": "0x6c6b935b8bbd400000",
        "0xbf6925c00751008440a6739a02bf2b6cdaab5e3a": "0x3635c9adc5dea00000",
        "0xbf7701fc6225d5a17815438a8941d21ebc5d059d": "0x65ea3db75546600000",
        "0xbf8b8005d636a49664f74275ef42438acd65ac91": "0xad78ebc5ac6200000",
        "0xbf92418a0c6c31244d220260cb3e867dd7b4ef49": "0x56900d33ca7fc0000",
        "0xbf9acd4445d9c9554689cabbbab18800ff1741c2": "0x3635c9adc5dea00000",
        "0xbf9f271f7a7e12e36dd2fe9facebf385fe6142bd": "0x366f84f7bb7840000",
        "0xbfa8c858df102cb12421008b0a31c4c7190ad560": "0xad78ebc5ac6200000",
        "0xbfaeb91067617dcf8b44172b02af615674835dba": "0x8b59e884813088000",
        "0xbfb0ea02feb61dec9e22a5070959330299c43072": "0x43c33c1937564800000",
        "0xbfbca418d3529cb393081062032a6e1183c6b2dc": "0x1b1ae4d6e2ef5000000",
        "0xbfbe05e88c9cbbcc0e92a405fac1d85de248ee24": "0x56bc75e2d63100000",
        "0xbfbfbcb656c2992be8fcde8219fbc54aadd59f29": "0x21e18d2c821c7520000",
        "0xbfc57aa666fae28e9f107a49cb5089a4e22151dd": "0x3635c9adc5dea00000",
        "0xbfcb9730246304700da90b4153e71141622e1c41": "0x3635c9adc5dea00000",
        "0xbfd93c90c29c07bc5fb5fc49aeea55a40e134f35": "0x5ede20f01a459800000",
        "0xbfe3a1fc6e24c8f7b3250560991f93cba2cf8047": "0x10f0cf064dd592000000",
        "0xbfe6bcb0f0c07852643324aa5df5fd6225abc3ca": "0x409e52b48369a0000",
        "0xbff5df769934b8943ca9137d0efef2fe6ebbb34e": "0x56bc75e2d63100000",
        "0xbffb6929241f788693273e7022e60e3eab1fe84f": "0x6c6b935b8bbd400000",
        "0xc0064f1d9474ab915d56906c9fb320a2c7098c9b": "0x13683f7f3c15d80000",
        "0xc007f0bdb6e7009202b7af3ea90902697c721413": "0xa2a0e43e7fb9830000",
        "0xc00ab080b643e1c2bae363e0d195de2efffc1c44": "0x1b1ae4d6e2ef500000",
        "0xc02077449a134a7ad1ef7e4d927affeceeadb5ae": "0xfc936392801c0000",
        "0xc02471e3fc2ea0532615a7571d493289c13c36ef": "0x1158e460913d00000",
        "0xc02d6eadeacf1b78b3ca85035c637bb1ce01f490": "0xd8d726b7177a800000",
        "0xc033b1325a0af45472c25527853b1f1c21fa35de": "0x6c6b935b8bbd400000",
        "0xc033be10cb48613bd5ebcb33ed4902f38b583003": "0xa2a15d09519be00000",
        "0xc0345b33f49ce27fe82cf7c84d141c68f590ce76": "0x3635c9adc5dea00000",
        "0xc03de42a109b657a64e92224c08dc1275e80d9b2": "0x1158e460913d00000",
        "0xc04069dfb18b096c7867f8bee77a6dc7477ad062": "0x90f534608a72880000",
        "0xc0413f5a7c2d9a4b8108289ef6ecd271781524f4": "0xa968163f0a57b400000",
        "0xc043f2452dcb9602ef62bd360e033dd23971fe84": "0x6c6b935b8bbd400000",
        "0xc04f4bd4049f044685b883b62959ae631d667e35": "0x13b80b99c5185700000",
        "0xc056d4bd6bf3cbacac65f8f5a0e3980b852740ae": "0x56bc75e2d63100000",
        "0xc05b740620f173f16e52471dc38b9c514a0b1526": "0x796e3ea3f8ab00000",
        "0xc069ef0eb34299abd2e32dabc47944b272334824": "0x68155a43676e00000",
        "0xc06cebbbf7f5149a66f7eb976b3e47d56516da2f": "0x6c6b935b8bbd400000",
        "0xc0725ec2bdc33a1d826071dea29d62d4385a8c25": "0x8a08513463aa6100000",
        "0xc07e3867ada096807a051a6c9c34cc3b3f4ad34a": "0x60f06620a849450000",
        "0xc0895efd056d9a3a81c3da578ada311bfb9356cf": "0xad78ebc5ac6200000",
        "0xc090fe23dcd86b358c32e48d2af91024259f6566": "0xad78ebc5ac6200000",
        "0xc09a66172aea370d9a63da04ff71ffbbfcff7f94": "0x6c6b935b8bbd400000",
        "0xc09e3cfc19f605ff3ec9c9c70e2540d7ee974366": "0x1b1ae4d6e2ef500000",
        "0xc0a02ab94ebe56d045b41b629b98462e3a024a93": "0x56bc75e2d63100000",
        "0xc0a39308a80e9e84aaaf16ac01e3b01d74bd6b2d": "0x7664ddd4c1c0b8000",
        "0xc0a6cbad77692a3d88d141ef769a99bb9e3c9951": "0x56bc75e2d63100000",
        "0xc0a7e8435dff14c25577739db55c24d5bf57a3d9": "0xa6dd90cae5114480000",
        "0xc0ae14d724832e2fce2778de7f7b8daf7b12a93e": "0x1158e460913d00000",
        "0xc0afb7d8b79370cfd663c68cc6b9702a37cd9eff": "0x3635c9adc5dea00000",
        "0xc0b0b7a8a6e1acdd05e47f94c09688aa16c7ad8d": "0x37b6d02ac76710000",
        "0xc0b3f244bca7b7de5b48a53edb9cbeab0b6d88c0": "0x13b80b99c5185700000",
        "0xc0c04d0106810e3ec0e54a19f2ab8597e69a573d": "0x2b5e3af16b1880000",
        "0xc0ca3277942e7445874be31ceb902972714f1823": "0xd8d726b7177a80000",
        "0xc0cbad3ccdf654da22cbcf5c786597ca1955c115": "0x6c6b935b8bbd400000",
        "0xc0cbf6032fa39e7c46ff778a94f7d445fe22cf30": "0x10ce1d3d8cb3180000",
        "0xc0e0b903088e0c63f53dd069575452aff52410c3": "0xa2a15d09519be00000",
        "0xc0e457bd56ec36a1246bfa3230fff38e5926ef22": "0x692ae8897081d00000",
        "0xc0ed0d4ad10de03435b153a0fc25de3b93f45204": "0xab4dcf399a3a600000",
        "0xc0f29ed0076611b5e55e130547e68a48e26df5e4": "0xa2a15d09519be00000",
        "0xc1132878235c5ddba5d9f3228b5236e47020dc6f": "0x3635c9adc5dea00000",
        "0xc1170dbaadb3dee6198ea544baec93251860fda5": "0x410d586a20a4c00000",
        "0xc126573d87b0175a5295f1dd07c575cf8cfa15f2": "0x21e19e0c9bab2400000",
        "0xc127aab59065a28644a56ba3f15e2eac13da2995": "0x2086ac351052600000",
        "0xc12b7f40df9a2f7bf983661422ab84c9c1f50858": "0x1b1ae4d6e2ef5000000",
        "0xc12cfb7b3df70fceca0ede263500e27873f8ed16": "0x3635c9adc5dea00000",
        "0xc12f881fa112b8199ecbc73ec4185790e614a20f": "0x6c6b935b8bbd400000",
        "0xc1384c6e717ebe4b23014e51f31c9df7e4e25b31": "0x1b1ae4d6e2ef500000",
        "0xc1438c99dd51ef1ca8386af0a317e9b041457888": "0xc1daf81d8a3ce0000",
        "0xc1631228efbf2a2e3a4092ee8900c639ed34fbc8": "0x33c5499031720c0000",
        "0xc175be3194e669422d15fee81eb9f2c56c67d9c9": "0xad78ebc5ac6200000",
        "0xc1827686c0169485ec15b3a7c8c01517a2874de1": "0x22b1c8c1227a00000",
        "0xc18ab467feb5a0aadfff91230ff056464d78d800": "0x6c6b935b8bbd400000",
        "0xc1950543554d8a713003f662bb612c10ad4cdf21": "0xfc936392801c0000",
        "0xc1a41a5a27199226e4c7eb198b031b59196f9842": "0xa5aa85009e39c0000",
        "0xc1b2a0fb9cad45cd699192cd27540b88d3384279": "0x1b1ae4d6e2ef500000",
        "0xc1b2aa8cb2bf62cdc13a47ecc4657facaa995f98": "0x363793fa96e6a68000",
        "0xc1b500011cfba95d7cd636e95e6cbf6167464b25": "0xad78ebc5ac6200000",
        "0xc1b9a5704d351cfe983f79abeec3dbbbae3bb629": "0x1158e460913d00000",
        "0xc1cbd2e2332a524cf219b10d871ccc20af1fb0fa": "0x3635c9adc5dea00000",
        "0xc1cdc601f89c0428b31302d187e0dc08ad7d1c57": "0x14542ba12a337c00000",
        "0xc1d4af38e9ba799040894849b8a8219375f1ac78": "0x43c33c1937564800000",
        "0xc1e1409ca52c25435134d006c2a6a8542dfb7273": "0x1dd1e4bd8d1ee0000",
        "0xc1eba5684aa1b24cba63150263b7a9131aeec28d": "0x1158e460913d00000",
        "0xc1ec81dd123d4b7c2dd9b4d438a7072c11dc874c": "0x6c6b935b8bbd400000",
        "0xc1f39bd35dd9cec337b96f47c677818160df37b7": "0x1158e460913d00000",
        "0xc1ffad07db96138c4b2a530ec1c7de29b8a0592c": "0xf43fc2c04ee00000",
        "0xc21fa6643a1f14c02996ad7144b75926e87ecb4b": "0x43c33c1937564800000",
        "0xc2340a4ca94c9678b7494c3c852528ede5ee529f": "0x2a36b05a3fd7c8000",
        "0xc239abdfae3e9af5457f52ed2b91fd0ab4d9c700": "0x6c6b935b8bbd400000",
        "0xc23b2f921ce4a37a259ee4ad8b2158d15d664f59": "0x1608995e8bd3f8000",
        "0xc24399b4bf86f7338fbf645e3b22b0e0b7973912": "0x6c6b935b8bbd400000",
        "0xc24ccebc2344cce56417fb684cf81613f0f4b9bd": "0x54069233bf7f780000",
        "0xc25266c7676632f13ef29be455ed948add567792": "0x487a9a304539440000",
        "0xc25cf826550c8eaf10af2234fef904ddb95213be": "0x3635c9adc5dea00000",
        "0xc2663f8145dbfec6c646fc5c49961345de1c9f11": "0x2567ac70392b880000",
        "0xc270456885342b640b4cfc1b520e1a544ee0d571": "0x62a992e53a0af00000",
        "0xc27376f45d21e15ede3b26f2655fcee02ccc0f2a": "0x1158e460913d00000",
        "0xc2779771f0536d79a8708f6931abc44b3035e999": "0x43c4f8300dcb3480000",
        "0xc27f4e08099d8cf39ee11601838ef9fc06d7fc41": "0x61093d7c2c6d380000",
        "0xc282e6993fbe7a912ea047153ffd9274270e285b": "0x7960b331247638000",
        "0xc2836188d9a29253e0cbda6571b058c289a0bb32": "0x6c6b935b8bbd400000",
        "0xc2aa74847e86edfdd3f3db22f8a2152feee5b7f7": "0x6f118886b784a20000",
        "0xc2b2cbe65bc6c2ee7a3c75b2e47c189c062e8d8b": "0x43c33c1937564800000",
        "0xc2bae4a233c2d85724f0dabebda0249d833e37d3": "0x10f0cf064dd59200000",
        "0xc2c13e72d268e7150dc799e7c6cf03c88954ced7": "0x25f273933db5700000",
        "0xc2cb1ada5da9a0423873814793f16144ef36b2f3": "0x48557e3b7017df0000",
        "0xc2d1778ef6ee5fe488c145f3586b6ebbe3fbb445": "0x3e1ff1e03b55a80000",
        "0xc2d9eedbc9019263d9d16cc5ae072d1d3dd9db03": "0x43c33c1937564800000",
        "0xc2e0584a71348cc314b73b2029b6230b92dbb116": "0x6c6b935b8bbd400000",
        "0xc2e2d498f70dcd0859e50b023a710a6d4b2133bd": "0x383911f00cbce10000",
        "0xc2ed5ffdd1add855a2692fe062b5d618742360d4": "0x410d586a20a4c00000",
        "0xc2ee91d3ef58c9d1a589844ea1ae3125d6c5ba69": "0x34957444b840e80000",
        "0xc2fafdd30acb6d6706e9293cb02641f9edbe07b5": "0x5100860b430f480000",
        "0xc2fd0bf7c725ef3e047e5ae1c29fe18f12a7299c": "0x487a9a304539440000",
        "0xc2fe7d75731f636dcd09dbda0671393ba0c82a7d": "0x77432217e683600000",
        "0xc3107a9af3322d5238df0132419131629539577d": "0x1ab4e464d414310000",
        "0xc3110be01dc9734cfc6e1ce07f87d77d1345b7e1": "0x10f0ce949e00f930000",
        "0xc32038ca52aee19745be5c31fcdc54148bb2c4d0": "0x2b5aad72c65200000",
        "0xc325c352801ba883b3226c5feb0df9eae2d6e653": "0xd5967be4fc3f100000",
        "0xc32ec7e42ad16ce3e2555ad4c54306eda0b26758": "0x6c6b935b8bbd400000",
        "0xc332df50b13c013490a5d7c75dbfa366da87b6d6": "0xd8d726b7177a800000",
        "0xc33acdb3ba1aab27507b86b15d67faf91ecf6293": "0x6c6b935b8bbd400000",
        "0xc33ece935a8f4ef938ea7e1bac87cb925d8490ca": "0x7038c16781f78480000",
        "0xc340f9b91c26728c31d121d5d6fc3bb56d3d8624": "0x6c6b935b8bbd400000",
        "0xc346cb1fbce2ab285d8e5401f42dd7234d37e86d": "0x486cb9799191e0000",
        "0xc3483d6e88ac1f4ae73cc4408d6c03abe0e49dca": "0x39992648a23c8a00000",
        "0xc348fc5a461323b57be303cb89361b991913df28": "0x152d02c7e14af6800000",
        "0xc34e3ba1322ed0571183a24f94204ee49c186641": "0x327afefa4a7bc0000",
        "0xc35b95a2a3737cb8f0f596b34524872bd30da234": "0x198be85235e2d500000",
        "0xc3631c7698b6c5111989bf452727b3f9395a6dea": "0x243275896641dbe0000",
        "0xc36c0b63bfd75c2f8efb060883d868cccd6cbdb4": "0xa2a15d09519be00000",
        "0xc3756bcdcc7eec74ed896adfc335275930266e08": "0x14542ba12a337c00000",
        "0xc384ac6ee27c39e2f278c220bdfa5baed626d9d3": "0x2086ac351052600000",
        "0xc3a046e3d2b2bf681488826e32d9c061518cfe8c": "0x8cf23f909c0fa00000",
        "0xc3a9226ae275df2cab312b911040634a9c9c9ef6": "0xd8d726b7177a800000",
        "0xc3b928a76fad6578f04f0555e63952cd21d1520a": "0x6c6b935b8bbd400000",
        "0xc3c2297329a6fd99117e54fc6af379b4d556547e": "0x14542ba12a337c00000",
        "0xc3c3c2510d678020485a63735d1307ec4ca6302b": "0x3635c9adc5dea00000",
        "0xc3cb6b36af443f2c6e258b4a39553a818747811f": "0x57473d05dabae80000",
        "0xc3db5657bb72f10d58f231fddf11980aff678693": "0x14061b9d77a5e980000",
        "0xc3db9fb6f46c480af34465d79753b4e2b74a67ce": "0x43c33c1937564800000",
        "0xc3dd58903886303b928625257ae1a013d71ae216": "0x6c6b935b8bbd400000",
        "0xc3e0471c64ff35fa5232cc3121d1d38d1a0fb7de": "0x6c6b935b8bbd400000",
        "0xc3e20c96df8d4e38f50b265a98a906d61bc51a71": "0x6c6b935b8bbd400000",
        "0xc3e387b03ce95ccfd7fa51dd840183bc43532809": "0x6c6b935b8bbd400000",
        "0xc3f8f67295a5cd049364d05d23502623a3e52e84": "0x14542ba12a337c00000",
        "0xc401c427cccff10decb864202f36f5808322a0a8": "0xb47b51a69cd4020000",
        "0xc4088c025f3e85013f5439fb3440a17301e544fe": "0x7e09db4d9f3f340000",
        "0xc41461a3cfbd32c9865555a4813137c076312360": "0x3635c6204739d98000",
        "0xc420388fbee84ad656dd68cdc1fbaa9392780b34": "0xa2dca63aaf4c58000",
        "0xc42250b0fe42e6b7dcd5c890a6f0c88f5f5fb574": "0x81ee4825359840000",
        "0xc42d6aeb710e3a50bfb44d6c31092969a11aa7f3": "0x82263cafd8cea0000",
        "0xc440c7ca2f964b6972ef664a2261dde892619d9c": "0x43c33c1937564800000",
        "0xc44bdec8c36c5c68baa2ddf1d431693229726c43": "0x152d02c7e14af6800000",
        "0xc44f4ab5bc60397c737eb0683391b633f83c48fa": "0x3635c9adc5dea00000",
        "0xc452e0e4b3d6ae06b836f032ca09db409ddfe0fb": "0x2b5e3af16b18800000",
        "0xc45a1ca1036b95004187cdac44a36e33a94ab5c3": "0xdd00f720301880000",
        "0xc45d47ab0c9aa98a5bd62d16223ea2471b121ca4": "0x202e68f2c2aee40000",
        "0xc4681e73bb0e32f6b726204831ff69baa4877e32": "0x62a992e53a0af00000",
        "0xc46bbdef76d4ca60d316c07f5d1a780e3b165f7e": "0x6c6b935b8bbd400000",
        "0xc47d610b399250f70ecf1389bab6292c91264f23": "0xfa7e7b5df3cd00000",
        "0xc4803bb407c762f90b7596e6fde194931e769590": "0xd8d726b7177a800000",
        "0xc48651c1d9c16bff4c9554886c3f3f26431f6f68": "0x23ab9599c43f080000",
        "0xc489c83ffbb0252ac0dbe3521217630e0f491f14": "0xd8d726b7177a800000",
        "0xc48b693cacefdbd6cb5d7895a42e3196327e261c": "0x3635c9adc5dea00000",
        "0xc493489e56c3bdd829007dc2f956412906f76bfa": "0x2a791488e71540000",
        "0xc496cbb0459a6a01600fc589a55a32b454217f9d": "0xeda838c4929080000",
        "0xc49cfaa967f3afbf55031061fc4cef88f85da584": "0x6c6b935b8bbd400000",
        "0xc4b6e5f09cc1b90df07803ce3d4d13766a9c46f4": "0x14542ba12a337c00000",
        "0xc4bec96308a20f90cab18399c493fd3d065abf45": "0x2f6f10780d22cc00000",
        "0xc4c01afc3e0f045221da1284d7878574442fb9ac": "0x1923c688b73ab040000",
        "0xc4c15318d370c73318cc18bdd466dbaa4c6603bf": "0x11164759ffb320000",
        "0xc4c6cb723dd7afa7eb535615e53f3cef14f18118": "0x6c6b8fce0d18798000",
        "0xc4cc45a2b63c27c0b4429e58cd42da59be739bd6": "0x3635c9adc5dea00000",
        "0xc4cf930e5d116ab8d13b9f9a7ec4ab5003a6abde": "0x1158e460913d000000",
        "0xc4d916574e68c49f7ef9d3d82d1638b2b7ee0985": "0x55a6e79ccd1d300000",
        "0xc4dac5a8a0264fbc1055391c509cc3ee21a6e04c": "0x1606b7fa039ce740000",
        "0xc4dd048bfb840e2bc85cb53fcb75abc443c7e90f": "0xc971dc07c9c7900000",
        "0xc4f2913b265c430fa1ab8adf26c333fc1d9b66f2": "0x1158e460913d00000",
        "0xc4f7b13ac6d4eb4db3d4e6a252af8a07bd5957da": "0xad78ebc5ac6200000",
        "0xc4f7d2e2e22084c44f70feaab6c32105f3da376f": "0x6acb3df27e1f880000",
        "0xc4ff6fbb1f09bd9e102ba033d636ac1c4c0f5304": "0x3635c9adc5dea00000",
        "0xc4ffadaaf2823fbea7bff702021bffc4853eb5c9": "0x24a19c1bd6f128000",
        "0xc500b720734ed22938d78c5e48b2ba9367a575ba": "0x7129e1cdf373ee00000",
        "0xc50fe415a641b0856c4e75bf960515441afa358d": "0x6c6b935b8bbd400000",
        "0xc5134cfbb1df7a20b0ed7057622eeed280947dad": "0xcdff97fabcb4600000",
        "0xc517d0315c878813c717e18cafa1eab2654e01da": "0x21e19e0c9bab2400000",
        "0xc518799a5925576213e21896e0539abb85b05ae3": "0x3635c9adc5dea00000",
        "0xc522e20fbf04ed7f6b05a37b4718d6fce0142e1a": "0xd8d726b7177a800000",
        "0xc524086d46c8112b128b2faf6f7c7d8160a8386c": "0x15af1d78b58c400000",
        "0xc52d1a0c73c2a1be84915185f8b34faa0adf1de3": "0x4be4eab3fa0fa68000",
        "0xc53594c7cfb2a08f284cc9d7a63bbdfc0b319732": "0xa6b2328ff3a62c00000",
        "0xc5374928cdf193705443b14cc20da423473cd9cf": "0x77d10509bb3af8000",
        "0xc538a0ff282aaa5f4b75cfb62c70037ee67d4fb5": "0x6c6b935b8bbd400000",
        "0xc53b50fd3b2b72bc6c430baf194a515585d3986d": "0x1158e460913d00000",
        "0xc53d79f7cb9b70952fd30fce58d54b9f0b59f647": "0x113e2d6744345f80000",
        "0xc549df83c6f65eec0f1dc9a0934a5c5f3a50fd88": "0x9dc05cce28c2b80000",
        "0xc55005a6c37e8ca7e543ce259973a3cace961a4a": "0x6c6b935b8bbd400000",
        "0xc555b93156f09101233c6f7cf6eb3c4f196d3346": "0xa2a15d09519be00000",
        "0xc55a6b4761fd11e8c85f15174d74767cd8bd9a68": "0x73f75d1a085ba0000",
        "0xc56e6b62ba6e40e52aab167d21df025d0055754b": "0x6c6b935b8bbd400000",
        "0xc573e841fa08174a208b060ccb7b4c0d7697127f": "0x243d4d18229ca20000",
        "0xc57612de91110c482e6f505bcd23f3c5047d1d61": "0xc2127af858da700000",
        "0xc5843399d150066bf7979c34ba294620368ad7c0": "0xad78ebc5ac6200000",
        "0xc58b9cc61dedbb98c33f224d271f0e228b583433": "0xd255d112e103a00000",
        "0xc58f62fee9711e6a05dc0910b618420aa127f288": "0xd7c198710e66b00000",
        "0xc593b546b7698710a205ad468b2c13152219a342": "0x54069233bf7f780000",
        "0xc593d6e37d14b566643ac4135f243caa0787c182": "0x28a857425466f800000",
        "0xc5a3b98e4593fea0b38c4f455a5065f051a2f815": "0x44cf468af25bf770000",
        "0xc5a48a8500f9b4e22f0eb16c6f4649687674267d": "0x2c0ec50385043e8000",
        "0xc5a629a3962552cb8eded889636aafbd0c18ce65": "0x21e19e0c9bab2400000",
        "0xc5ae86b0c6c7e3900f1368105c56537faf8d743e": "0xa31062beeed700000",
        "0xc5b009baeaf788a276bd35813ad65b400b849f3b": "0x3635c9adc5dea00000",
        "0xc5b56cd234267c28e89c6f6b2266b086a12f970c": "0xd8d726b7177a800000",
        "0xc5c6a4998a33feb764437a8be929a73ba34a0764": "0xa968163f0a57b400000",
        "0xc5c73d61cce7c8fe4c8fce29f39092cd193e0fff": "0x1b1ae4d6e2ef5000000",
        "0xc5c7590b5621ecf8358588de9b6890f2626143f1": "0xa2a15d09519be00000",
        "0xc5cdcee0e85d117dabbf536a3f4069bf443f54e7": "0x6ac5c62d9486070000",
        "0xc5d48ca2db2f85d8c555cb0e9cfe826936783f9e": "0xad78ebc5ac6200000",
        "0xc5de1203d3cc2cea31c82ee2de5916880799eafd": "0x10f0cf064dd59200000",
        "0xc5e488cf2b5677933971f64cb8202dd05752a2c0": "0x3635c9adc5dea00000",
        "0xc5e812f76f15f2e1f2f9bc4823483c8804636f67": "0x3f514193abb840000",
        "0xc5e9939334f1252ed2ba26814487dfd2982b3128": "0x3cb71f51fc5580000",
        "0xc5eb42295e9cadeaf2af12dede8a8d53c579c469": "0xcf152640c5c8300000",
        "0xc5edbbd2ca0357654ad0ea4793f8c5cecd30e254": "0x14542ba12a337c00000",
        "0xc5f64babb7033142f20e46d7aa6201ed86f67103": "0x6c6b935b8bbd400000",
        "0xc5f687717246da8a200d20e5e9bcac60b67f3861": "0x18d993f34aef10000",
        "0xc6045b3c350b4ce9ca0c6b754fb41a69b97e9900": "0x3224f42723d4540000",
        "0xc60b04654e003b4683041f1cbd6bc38fda7cdbd6": "0x6c6b935b8bbd400000",
        "0xc61446b754c24e3b1642d9e51765b4d3e46b34b6": "0x6c6b935b8bbd400000",
        "0xc618521321abaf5b26513a4a9528086f220adc6f": "0x176b344f2a78c0000",
        "0xc6234657a807384126f8968ca1708bb07baa493c": "0x1158e460913d00000",
        "0xc625f8c98d27a09a1bcabd5128b1c2a94856af30": "0xad78ebc5ac6200000",
        "0xc6355ec4768c70a49af69513cd83a5bca7e3b9cd": "0x14542ba12a337c00000",
        "0xc63ac417992e9f9b60386ed953e6d7dff2b090e8": "0xd8d8583fa2d52f0000",
        "0xc63cd7882118b8a91e074d4c8f4ba91851303b9a": "0xe18398e7601900000",
        "0xc652871d192422c6bc235fa063b44a7e1d43e385": "0x8670e9ec6598c0000",
        "0xc667441e7f29799aba616451d53b3f489f9e0f48": "0x2f29ace68addd800000",
        "0xc66ae4cee87fb3353219f77f1d6486c580280332": "0x19a16b06ff8cb0000",
        "0xc674f28c8afd073f8b799691b2f0584df942e844": "0x6c6b935b8bbd400000",
        "0xc697b70477cab42e2b8b266681f4ae7375bb2541": "0x12e5732baba5c980000",
        "0xc69b855539ce1b04714728eec25a37f367951de7": "0x6c6b935b8bbd400000",
        "0xc69be440134d6280980144a9f64d84748a37f349": "0x26c29e47c4844c0000",
        "0xc69d663c8d60908391c8d236191533fdf7775613": "0x1a4aba225c20740000",
        "0xc6a286e065c85f3af74812ed8bd3a8ce5d25e21d": "0xfc936392801c0000",
        "0xc6a30ef5bb3320f40dc5e981230d52ae3ac19322": "0x9ddc1e3b901180000",
        "0xc6ae287ddbe1149ba16ddcca4fe06aa2eaa988a9": "0x15af1d78b58c400000",
        "0xc6c7c191379897dd9c9d9a33839c4a5f62c0890d": "0xd8d854b22430688000",
        "0xc6cd68ec35362c5ad84c82ad4edc232125912d99": "0x5e0549c9632e1d80000",
        "0xc6d8954e8f3fc533d2d230ff025cb4dce14f3426": "0x15af1d78b58c400000",
        "0xc6dbdb9efd5ec1b3786e0671eb2279b253f215ed": "0x3635c9adc5dea00000",
        "0xc6df2075ebd240d44869c2be6bdf82e63d4ef1f5": "0x1158e460913d00000",
        "0xc6e2f5af979a03fd723a1b6efa728318cf9c1800": "0x243d4d18229ca20000",
        "0xc6e324beeb5b36765ecd464260f7f26006c5c62e": "0x6c6b935b8bbd400000",
        "0xc6e4cc0c7283fc1c85bc4813effaaf72b49823c0": "0xf031ec9c87dd30000",
        "0xc6ee35934229693529dc41d9bb71a2496658b88e": "0x42bf06b78ed3b500000",
        "0xc6fb1ee37417d080a0d048923bdabab095d077c6": "0xad78ebc5ac6200000",
        "0xc70527d444c490e9fc3f5cc44e66eb4f306b380f": "0xd8d726b7177a800000",
        "0xc70d856d621ec145303c0a6400cd17bbd6f5eaf7": "0x1158e460913d00000",
        "0xc70fa45576bf9c865f983893002c414926f61029": "0x15b4aa8e9702680000",
        "0xc71145e529c7a714e67903ee6206e4c3042b6727": "0x4d853c8f8908980000",
        "0xc71b2a3d7135d2a85fb5a571dcbe695e13fc43cd": "0x3635c9adc5dea00000",
        "0xc71f1d75873f33dcb2dd4b3987a12d0791a5ce27": "0x3708baed3d68900000",
        "0xc71f92a3a54a7b8c2f5ea44305fccb84eee23148": "0x2b59ca131d2060000",
        "0xc721b2a7aa44c21298e85039d00e2e460e670b9c": "0x7a1fe160277000000",
        "0xc72cb301258e91bc08998a805dd192f25c2f9a35": "0x2009c5c8bf6fdc0000",
        "0xc7368b9709a5c1b51c0adf187a65df14e12b7dba": "0x2026fc77f03e5ae8000",
        "0xc739259e7f85f2659bef5f609ed86b3d596c201e": "0xad78ebc5ac6200000",
        "0xc73e2112282215dc0762f32b7e807dcd1a7aae3e": "0x1760cbc623bb3500000",
        "0xc749668042e71123a648975e08ed6382f83e05e2": "0x2f6f10780d22cc00000",
        "0xc74a3995f807de1db01a2eb9c62e97d0548f696f": "0x3635c9adc5dea00000",
        "0xc7506c1019121ff08a2c8c1591a65eb4bdfb4a3f": "0x2086ac351052600000",
        "0xc75c37ce2da06bbc40081159c6ba0f976e3993b1": "0x3a7923151ecf580000",
        "0xc75d2259306aec7df022768c69899a652185dbc4": "0xd8d726b7177a800000",
        "0xc760971bbc181c6a7cf77441f24247d19ce9b4cf": "0x6c6b935b8bbd400000",
        "0xc76130c73cb9210238025c9df95d0be54ac67fbe": "0x5150ae84a8cdf00000",
        "0xc765e00476810947816af142d46d2ee7bca8cc4f": "0x1b1ae4d6e2ef500000",
        "0xc7675e5647b9d8daf4d3dff1e552f6b07154ac38": "0x9c2007651b2500000",
        "0xc77b01a6e911fa988d01a3ab33646beef9c138f3": "0x271b6fa5dbe6cc0000",
        "0xc7837ad0a0bf14186937ace06c5546a36aa54f46": "0xd8d726b7177a800000",
        "0xc79806032bc7d828f19ac6a640c68e3d820fa442": "0x1158e460913d00000",
        "0xc799e34e88ff88be7de28e15e4f2a63d0b33c4cb": "0xad78ebc5ac6200000",
        "0xc79d5062c796dd7761f1f13e558d73a59f82f38b": "0x1b1ae4d6e2ef5000000",
        "0xc7a018f0968a51d1f6603c5c49dc545bcb0ff293": "0xd8d726b7177a800000",
        "0xc7aff91929797489555a2ff1d14d5c695a108355": "0x3635c9adc5dea00000",
        "0xc7b1c83e63203f9547263ef6282e7da33b6ed659": "0xfc936392801c0000",
        "0xc7b39b060451000ca1049ba154bcfa00ff8af262": "0x152d02c7e14af6800000",
        "0xc7bf17c4c11f98941f507e77084fffbd2dbd3db5": "0x3635c9adc5dea00000",
        "0xc7bf2ed1ed312940ee6aded1516e268e4a604856": "0x14542ba12a337c00000",
        "0xc7d44fe32c7f8cd5f1a97427b6cd3afc9e45023e": "0x55a6e79ccd1d300000",
        "0xc7d5c7054081e918ec687b5ab36e973d18132935": "0x9ddc1e3b901180000",
        "0xc7de5e8eafb5f62b1a0af2195cf793c7894c9268": "0x3635c9adc5dea00000",
        "0xc7e330cd0c890ac99fe771fcc7e7b009b7413d8a": "0xd8d726b7177a800000",
        "0xc7eac31abce6d5f1dea42202b6a674153db47a29": "0x2009c5c8bf6fdc0000",
        "0xc7ec62b804b1f69b1e3070b5d362c62fb309b070": "0x2c46bf5416066110000",
        "0xc7f72bb758016b374714d4899bce22b4aec70a31": "0x3a26c9478f5e2d0000",
        "0xc80b36d1beafba5fcc644d60ac6e46ed2927e7dc": "0xb98bc829a6f90000",
        "0xc811c2e9aa1ac3462eba5e88fcb5120e9f6e2ca2": "0x4be6d887bd876e0000",
        "0xc817df1b91faf30fe3251571727c9711b45d8f06": "0x6c6acc67d7b1d40000",
        "0xc81fb7d20fd2800192f0aac198d6d6a37d3fcb7d": "0xe1149331c2dde0000",
        "0xc820c711f07705273807aaaa6de44d0e4b48be2e": "0x8670e9ec6598c0000",
        "0xc8231ba5a411a13e222b29bfc1083f763158f226": "0x3637096c4bcc690000",
        "0xc836e24a6fcf29943b3608e662290a215f6529ea": "0xfd45064eaee100000",
        "0xc83ba6dd9549be1d3287a5a654d106c34c6b5da2": "0x17b7883c06916600000",
        "0xc83e9d6a58253beebeb793e6f28b054a58491b74": "0xf46c2b6f5a9140000",
        "0xc841884fa4785fb773b28e9715fae99a5134305d": "0x6c6b935b8bbd400000",
        "0xc84d9bea0a7b9f140220fd8b9097cfbfd5edf564": "0x6ab9ec291ad7d8000",
        "0xc852428d2b586497acd30c56aa13fb5582f84402": "0x3342d60dff19600000",
        "0xc853215b9b9f2d2cd0741e585e987b5fb80c212e": "0x54069233bf7f780000",
        "0xc85325eab2a59b3ed863c86a5f2906a04229ffa9": "0x193d7f7d253de00000",
        "0xc85ef27d820403805fc9ed259fff64acb8d6346a": "0x6c6b935b8bbd400000",
        "0xc8616b4ec09128cdff39d6e4b9ac86eec471d5f2": "0x10d3aa536e2940000",
        "0xc86190904b8d079ec010e462cbffc90834ffaa5c": "0x22385a827e815500000",
        "0xc8710d7e8b5a3bd69a42fe0fa8b87c357fddcdc8": "0xd8d726b7177a800000",
        "0xc87352dba582ee2066b9c002a962e003134f78b1": "0x1b1ae4d6e2ef500000",
        "0xc87c77e3c24adecdcd1038a38b56e18dead3b702": "0x1dd0c885f9a0d800000",
        "0xc87d3ae3d88704d9ab0009dcc1a0067131f8ba3c": "0x6ac5c62d9486070000",
        "0xc8814e34523e38e1f927a7dce8466a447a093603": "0x21e19e0c9bab2400000",
        "0xc88255eddcf521c6f81d97f5a42181c9073d4ef1": "0xfc39044d00a2a8000",
        "0xc885a18aabf4541b7b7b7ecd30f6fae6869d9569": "0x6c6b935b8bbd400000",
        "0xc88ca1e6e5f4d558d13780f488f10d4ad3130d34": "0x54069233bf7f780000",
        "0xc88eec54d305c928cc2848c2fee23531acb96d49": "0x6c6ad382d4fb610000",
        "0xc89cf504b9f3f835181fd8424f5ccbc8e1bddf7d": "0x21e19e0c9bab2400000",
        "0xc8a2c4e59e1c7fc54805580438aed3e44afdf00e": "0x2629f66e0c5300000",
        "0xc8aa49e3809f0899f28ab57e6743709d58419033": "0x2fb474098f67c00000",
        "0xc8ab1a3cf46cb8b064df2e222d39607394203277": "0x6c6b935b8bbd400000",
        "0xc8b1850525d946f2ae84f317b15188c536a5dc86": "0x918ddc3a42a3d40000",
        "0xc8d4e1599d03b79809e0130a8dc38408f05e8cd3": "0x9fad06241279160000",
        "0xc8dd27f16bf22450f5771b9fe4ed4ffcb30936f4": "0xaadec983fcff40000",
        "0xc8de7a564c7f4012a6f6d10fd08f47890fbf07d4": "0x1043561a8829300000",
        "0xc8e2adeb545e499d982c0c117363ceb489c5b11f": "0x35659ef93f0fc40000",
        "0xc8e558a3c5697e6fb23a2594c880b7a1b68f9860": "0x21e19e0c9bab2400000",
        "0xc8f2b320e6dfd70906c597bad2f9501312c78259": "0x51934b8b3a57d00000",
        "0xc90300cb1d4077e6a6d7e169a460468cf4a492d7": "0x6c6b935b8bbd400000",
        "0xc90c3765156bca8e4897ab802419153cbe5225a9": "0xad78ebc5ac6200000",
        "0xc910a970556c9716ea53af66ddef93143124913d": "0x55a6e79ccd1d300000",
        "0xc9127b7f6629ee13fc3f60bc2f4467a20745a762": "0x37c9aa4e7ce421d8000",
        "0xc91bb562e42bd46130e2d3ae4652b6a4eb86bc0f": "0x1d460162f516f00000",
        "0xc9308879056dfe138ef8208f79a915c6bc7e70a8": "0x21e19e0c9bab2400000",
        "0xc934becaf71f225f8b4a4bf7b197f4ac9630345c": "0x43c33c1937564800000",
        "0xc93fbde8d46d2bcc0fa9b33bd8ba7f8042125565": "0x4be4e7267b6ae00000",
        "0xc94089553ae4c22ca09fbc98f57075cf2ec59504": "0xd8d726b7177a800000",
        "0xc94110e71afe578aa218e4fc286403b0330ace8d": "0x6c6b935b8bbd400000",
        "0xc946d5acc1346eba0a7279a0ac1d465c996d827e": "0x3783d545fdf0aa40000",
        "0xc94a28fb3230a9ddfa964e770f2ce3c253a7be4f": "0xad78ebc5ac6200000",
        "0xc94a585203da7bbafd93e15884e660d4b1ead854": "0x17b7883c06916600000",
        "0xc94f7c35c027d47df8ef4f9df85a9248a17dd23b": "0x19f8e7559924c0000",
        "0xc951900c341abbb3bafbf7ee2029377071dbc36a": "0x11c25d004d01f80000",
        "0xc953f934c0eb2d0f144bdab00483fd8194865ce7": "0x6c6b935b8bbd400000",
        "0xc96626728aaa4c4fb3d31c26df3af310081710d1": "0xb50fcfafebecb00000",
        "0xc96751656c0a8ef4357b7344322134b983504aca": "0x6c6b935b8bbd400000",
        "0xc98048687f2bfcc9bd90ed18736c57edd352b65d": "0x3635c9adc5dea00000",
        "0xc981d312d287d558871edd973abb76b979e5c35e": "0x6acb3df27e1f880000",
        "0xc982586d63b0d74c201b1af8418372e30c7616be": "0x56bc75e2d63100000",
        "0xc989434f825aaf9c552f685eba7c11db4a5fc73a": "0x1b28c58d9696b40000",
        "0xc989eec307e8839b9d7237cfda08822962abe487": "0x15af1d78b58c400000",
        "0xc992be59c6721caf4e028f9e8f05c25c55515bd4": "0x1158e460913d00000",
        "0xc9957ba94c1b29e5277ec36622704904c63dc023": "0x683efc6782642c0000",
        "0xc99a9cd6c9c1be3534eecd92ecc22f5c38e9515b": "0x105593b3a169d770000",
        "0xc9ac01c3fb0929033f0ccc7e1acfeaaba7945d47": "0x2a36a9e9ca4d2038000",
        "0xc9b698e898d20d4d4f408e4e4d061922aa856307": "0x22b1c8c1227a00000",
        "0xc9b6b686111691ee6aa197c7231a88dc60bd295d": "0x1b1ae4d6e2ef500000",
        "0xc9c7ac0bdd9342b5ead4360923f68c72a6ba633a": "0x1b1ae4d6e2ef500000",
        "0xc9c80dc12e7bab86e949d01e4c3ed35f2b9bba5f": "0x6c6b935b8bbd400000",
        "0xc9d76446d5aadff80b68b91b08cd9bc8f5551ac1": "0x26b4bd9110dce80000",
        "0xc9dcbb056f4db7d9da39936202c5bd8230b3b477": "0x43c33c1937564800000",
        "0xc9e02608066828848aeb28c73672a12925181f4d": "0x1b1b6bd7af64c70000",
        "0xca0432cb157b5179f02ebba5c9d1b54fec4d88ca": "0x3635c9adc5dea00000",
        "0xca122cf0f2948896b74843f49afed0ba1618eed7": "0x1e5b8fa8fe2ac00000",
        "0xca22cda3606da5cad013b8074706d7e9e721a50c": "0x17181c6fa3981940000",
        "0xca23f62dff0d6460036c62e840aec5577e0befd2": "0x7a1fe160277000000",
        "0xca25ff34934c1942e22a4e7bd56f14021a1af088": "0xaadec983fcff40000",
        "0xca373fe3c906b8c6559ee49ccd07f37cd4fb5266": "0x61093d7c2c6d380000",
        "0xca41ccac30172052d522cd2f2f957d248153409f": "0x6acb3df27e1f880000",
        "0xca4288014eddc5632f5facb5e38517a8f8bc5d98": "0x126e72a69a50d00000",
        "0xca428863a5ca30369892d612183ef9fb1a04bcea": "0x52663ccab1e1c00000",
        "0xca49a5f58adbefae23ee59eea241cf0482622eaa": "0x4d853c8f8908980000",
        "0xca4ca9e4779d530ecbacd47e6a8058cfde65d98f": "0x2b5e3af16b18800000",
        "0xca657ec06fe5bc09cf23e52af7f80cc3689e6ede": "0x30ca024f987b900000",
        "0xca66b2280fa282c5b67631ce552b62ee55ad8474": "0x6ac422f53492880000",
        "0xca6c818befd251361e02744068be99d8aa60b84a": "0x14542ba12a337c00000",
        "0xca70f4ddbf069d2143bd6bbc7f696b52789b32e7": "0xa2a15d09519be00000",
        "0xca747576446a4c8f30b08340fee198de63ec92cf": "0x17c8e1206722a300000",
        "0xca7ba3ff536c7e5f0e153800bd383db8312998e0": "0x931ac3d6bb2400000",
        "0xca8276c477b4a07b80107b843594189607b53bec": "0x14542ba12a337c00000",
        "0xca8409083e01b397cf12928a05b68455ce6201df": "0x56bc75e2d631000000",
        "0xca98c7988efa08e925ef9c9945520326e9f43b99": "0xd8d726b7177a800000",
        "0xca9a042a6a806ffc92179500d24429e8ab528117": "0x3ba1910bf341b00000",
        "0xca9dec02841adf5cc920576a5187edd2bd434a18": "0x1b1ae4d6e2ef500000",
        "0xca9faa17542fafbb388eab21bc4c94e8a7b34788": "0x6c6b8fce0d18798000",
        "0xcaaa68ee6cdf0d34454a769b0da148a1faaa1865": "0x1872e1de7fe52c00000",
        "0xcaad9dc20d589ce428d8fda3a9d53a607b7988b5": "0xd8d726b7177a800000",
        "0xcab0d32cf3767fa6b3537c84328baa9f50458136": "0x1e5b8fa8fe2ac000000",
        "0xcab9a301e6bd46e940355028eccd40ce4d5a1ac3": "0x15af1d78b58c400000",
        "0xcab9a97ada065c87816e6860a8f1426fe6b3d775": "0x3635c9adc5dea00000",
        "0xcabab6274ed15089737e287be878b757934864e2": "0x43c33c1937564800000",
        "0xcabdaf354f4720a466a764a528d60e3a482a393c": "0x3635c9adc5dea00000",
        "0xcacb675e0996235404efafbb2ecb8152271b55e0": "0x25f273933db5700000",
        "0xcad14f9ebba76680eb836b079c7f7baaf481ed6d": "0xcef3d7bd7d0340000",
        "0xcae3a253bcb2cf4e13ba80c298ab0402da7c2aa0": "0x124bc0ddd92e5600000",
        "0xcaef027b1ab504c73f41f2a10979b474f97e309f": "0xad78ebc5ac6200000",
        "0xcaf4481d9db78dc4f25f7b4ac8bd3b1ca0106b31": "0x10f0cf064dd59200000",
        "0xcafde855864c2598da3cafc05ad98df2898e8048": "0x300a8ed96ff4a940000",
        "0xcb0dd7cf4e5d8661f6028943a4b9b75c914436a7": "0x1969368974c05b000000",
        "0xcb1bb6f1da5eb10d4899f7e61d06c1b00fdfb52d": "0x384524cc70b7780000",
        "0xcb3d766c983f192bcecac70f4ee03dd9ff714d51": "0x56bc75e2d63100000",
        "0xcb42b44eb5fd60b5837e4f9eb47267523d1a229c": "0x2ee449550898e40000",
        "0xcb47bd30cfa8ec5468aaa6a94642ced9c819c8d4": "0xd8d726b7177a800000",
        "0xcb48fe8265d9af55eb7006bc335645b0a3a183be": "0xa2a15d09519be00000",
        "0xcb4a914d2bb029f32e5fef5c234c4fec2d2dd577": "0x6194049f30f7200000",
        "0xcb4abfc282aed76e5d57affda542c1f382fcacf4": "0x1b90f11c3183faa0000",
        "0xcb4ad0c723da46ab56d526da0c1d25c73daff10a": "0x1ba5abf9e779380000",
        "0xcb4bb1c623ba28dc42bdaaa6e74e1d2aa1256c2a": "0x6c6acc67d7b1d40000",
        "0xcb50587412822304ebcba07dab3a0f09fffee486": "0x4a4491bd6dcd280000",
        "0xcb58990bcd90cfbf6d8f0986f6fa600276b94e2d": "0x3634bf39ab98788000",
        "0xcb68ae5abe02dcf8cbc5aa719c25814651af8b85": "0x1b1ae4d6e2ef500000",
        "0xcb7479109b43b26657f4465f4d18c6f974be5f42": "0x62a992e53a0af00000",
        "0xcb7d2b8089e9312cc9aeaa2773f35308ec6c2a7b": "0x21e19e0c9bab2400000",
        "0xcb86edbc8bbb1f9131022be649565ebdb09e32a1": "0x6c6b935b8bbd400000",
        "0xcb93199b9c90bc4915bd859e3d42866dc8c18749": "0xc90df07def78c0000",
        "0xcb94e76febe208116733e76e805d48d112ec9fca": "0x3635c9adc5dea00000",
        "0xcb9b5103e4ce89af4f64916150bff9eecb9faa5c": "0x1b1ae4d6e2ef500000",
        "0xcba25c7a503cc8e0d04971ca05c762f9b762b48b": "0x1b1ae4d6e2ef500000",
        "0xcba288cd3c1eb4d59ddb06a6421c14c345a47b24": "0xd8d726b7177a800000",
        "0xcbb3189e4bd7f45f178b1c30c76e26314d4a4b0a": "0xffe0b677c65a98000",
        "0xcbb7be17953f2ccc93e1bc99805bf45511434e4c": "0xaae5b9df56d2f200000",
        "0xcbc04b4d8b82caf670996f160c362940d66fcf1a": "0x14542ba12a337c00000",
        "0xcbde9734b8e6aa538c291d6d7facedb0f338f857": "0x6c6b935b8bbd400000",
        "0xcbe1b948864d8474e765145858fca4550f784b92": "0x21e19e0c9bab2400000",
        "0xcbe52fc533d7dd608c92a260b37c3f45deb4eb33": "0x3635c9adc5dea00000",
        "0xcbe810fe0fecc964474a1db97728bc87e973fcbd": "0x21e19e0c9bab2400000",
        "0xcbf16a0fe2745258cd52db2bf21954c975fc6a15": "0x1043561a8829300000",
        "0xcbf37ff854a2f1ce53934494777892d3ec655782": "0x21e19e0c9bab2400000",
        "0xcbfa6af6c283b046e2772c6063b0b21553c40106": "0x6c6b935b8bbd400000",
        "0xcbfa76db04ce38fb205d37b8d377cf1380da0317": "0x4d853c8f8908980000",
        "0xcc034985d3f28c2d39b1a34bced4d3b2b6ca234e": "0x9ddc1e3b901180000",
        "0xcc043c4388d345f884c6855e71142a9f41fd6935": "0x1158e460913d00000",
        "0xcc1d6ead01aada3e8dc7b95dca25df26eefa639d": "0x6c6b935b8bbd400000",
        "0xcc2b5f448f3528d3fe41cc7d1fa9c0dc76f1b776": "0x340aad21b3b700000",
        "0xcc2d04f0a4017189b340ca77198641dcf6456b91": "0xd5967be4fc3f100000",
        "0xcc419fd9912b85135659e77a93bc3df182d45115": "0x21e19e0c9bab2400000",
        "0xcc45fb3a555bad807b388a0357c855205f7c75e8": "0x2ee449550898e40000",
        "0xcc48414d2ac4d42a5962f29eee4497092f431352": "0x8ba52e6fc45e40000",
        "0xcc4a2f2cf86cf3e43375f360a4734691195f1490": "0x4915053bd129098000",
        "0xcc4f0ff2aeb67d54ce3bc8c6510b9ae83e9d328b": "0x15af1d78b58c400000",
        "0xcc4faac00be6628f92ef6b8cb1b1e76aac81fa18": "0xb22a2eab0f0fd0000",
        "0xcc4feb72df98ff35a138e01761d1203f9b7edf0a": "0x17b7883c06916600000",
        "0xcc606f511397a38fc7872bd3b0bd03c71bbd768b": "0x3635c9adc5dea00000",
        "0xcc60f836acdef3548a1fefcca13ec6a937db44a0": "0x4b06dbbb40f4a0000",
        "0xcc6c03bd603e09de54e9c4d5ac6d41cbce715724": "0x556f64c1fe7fa0000",
        "0xcc6c2df00e86eca40f21ffda1a67a1690f477c65": "0xab4dcf399a3a600000",
        "0xcc6d7b12061bc96d104d606d65ffa32b0036eb07": "0x21e19e0c9bab2400000",
        "0xcc73dd356b4979b579b401d4cc7a31a268ddce5a": "0x1b1ae4d6e2ef500000",
        "0xcc758d071d25a6320af68c5dc9c4f6955ba94520": "0x14542ba12a337c00000",
        "0xcc7b0481cc32e6faef2386a07022bcb6d2c3b4fc": "0xab4dcf399a3a600000",
        "0xcc943be1222cd1400a2399dd1b459445cf6d54a9": "0x2a740ae6536fc880000",
        "0xcc9519d1f3985f6b255eaded12d5624a972721e1": "0x3635c9adc5dea00000",
        "0xcc9ac715cd6f2610c52b58676456884297018b29": "0xb98bc829a6f90000",
        "0xcca07bb794571d4acf041dad87f0d1ef3185b319": "0x6c6b935b8bbd400000",
        "0xccabc6048a53464424fcf76eeb9e6e1801fa23d4": "0x2ab7b260ff3fd0000",
        "0xccae0d3d852a7da3860f0636154c0a6ca31628d4": "0x5c6d12b6bc1a00000",
        "0xccca24d8c56d6e2c07db086ec07e585be267ac8d": "0xad78ebc5ac6200000",
        "0xccd521132d986cb96869842622a7dda26c3ed057": "0x6c6b935b8bbd400000",
        "0xccf43975b76bfe735fec3cb7d4dd24f805ba0962": "0x340aad21b3b700000",
        "0xccf62a663f1353ba2ef8e6521dc1ecb673ec8ef7": "0x83d6c7aab63600000",
        "0xccf7110d1bd9a74bfd1d7d7d2d9d55607e7b837d": "0x30ca024f987b900000",
        "0xccfd725760a68823ff1e062f4cc97e1360e8d997": "0x15ac56edc4d12c0000",
        "0xcd020f8edfcf524798a9b73a640334bbf72f80a5": "0x73f75d1a085ba0000",
        "0xcd06f8c1b5cdbd28e2d96b6346c3e85a0483ba24": "0x3635c9adc5dea00000",
        "0xcd072e6e1833137995196d7bb1725fef8761f655": "0x14542ba12a337c00000",
        "0xcd0a161bc367ae0927a92aac9cf6e5086714efca": "0x6c6b935b8bbd400000",
        "0xcd0af3474e22f069ec3407870dd770443d5b12b0": "0x8e5eb4ee77b2ef0000",
        "0xcd0b0257e783a3d2c2e3ba9d6e79b75ef98024d4": "0x9fad06241279160000",
        "0xcd102cd6db3df14ad6af0f87c72479861bfc3d24": "0x6c6b935b8bbd400000",
        "0xcd1e66ed539dd92fc40bbaa1fa16de8c02c14d45": "0xc77e4256863d80000",
        "0xcd1ed263fbf6f6f7b48aef8f733d329d4382c7c7": "0x100bd33fb98ba0000",
        "0xcd2a36d753e9e0ed012a584d716807587b41d56a": "0xe2ba75b0b1f1c0000",
        "0xcd32a4a8a27f1cc63954aa634f7857057334c7a3": "0x3ad166576c72d40000",
        "0xcd35ff010ec501a721a1b2f07a9ca5877dfcf95a": "0xd96fce90cfabcc0000",
        "0xcd4306d7f6947ac1744d4e13b8ef32cb657e1c00": "0x1b1ab319f5ec750000",
        "0xcd43258b7392a930839a51b2ef8ad23412f75a9f": "0x6c6b935b8bbd400000",
        "0xcd49bf185e70d04507999f92a4de4455312827d0": "0x3635c9adc5dea00000",
        "0xcd5510a242dfb0183de925fba866e312fabc1657": "0x821ab0d44149800000",
        "0xcd566ad7b883f01fd3998a9a58a9dee4724ddca5": "0x330ae1835be300000",
        "0xcd59f3dde77e09940befb6ee58031965cae7a336": "0x21e19e0c9bab2400000",
        "0xcd725d70be97e677e3c8e85c0b26ef31e9955045": "0x487a9a304539440000",
        "0xcd7e47909464d871b9a6dc76a8e9195db3485e7a": "0x215f835bc769da80000",
        "0xcd7ece086b4b619b3b369352ee38b71ddb06439a": "0xad78ebc5ac6200000",
        "0xcd7f09d7ed66d0c38bc5ad4e32b7f2b08dc1b30d": "0x3e3bb34da2a4700000",
        "0xcd9529492b5c29e475acb941402b3d3ba50686b0": "0x6acb3df27e1f880000",
        "0xcd95fa423d6fc120274aacde19f4eeb766f10420": "0xad78ebc5ac6200000",
        "0xcd9b4cef73390c83a8fd71d7b540a7f9cf8b8c92": "0x4e1003b28d9280000",
        "0xcda1741109c0265b3fb2bf8d5ec9c2b8a3346b63": "0x1158e460913d00000",
        "0xcda1b886e3a795c9ba77914e0a2fe5676f0f5ccf": "0x5bf60ea42c2040000",
        "0xcda4530f4b9bc50905b79d17c28fc46f95349bdf": "0x3310e04911f1f80000",
        "0xcdab46a5902080646fbf954204204ae88404822b": "0x1d8a96e5c606eb0000",
        "0xcdb597299030183f6e2d238533f4642aa58754b6": "0x15af1d78b58c400000",
        "0xcdd5d881a7362c9070073bdfbc75e72453ac510e": "0x2da518eae48ee80000",
        "0xcdd60d73efaad873c9bbfb178ca1b7105a81a681": "0x1bc16d674ec800000",
        "0xcdd9efac4d6d60bd71d95585dce5d59705c13564": "0x56bc75e2d63100000",
        "0xcde36d81d128c59da145652193eec2bfd96586ef": "0xd8d726b7177a800000",
        "0xcdea386f9d0fd804d02818f237b7d9fa7646d35e": "0xa349d36d80ec578000",
        "0xcdecf5675433cdb0c2e55a68db5d8bbe78419dd2": "0x1158e460913d00000",
        "0xcdfd8217339725d7ebac11a63655f265eff1cc3d": "0x10f0c696410e3a90000",
        "0xce079f51887774d8021cb3b575f58f18e9acf984": "0x9c2007651b2500000",
        "0xce1884ddbbb8e10e4dba6e44feeec2a7e5f92f05": "0xd8d726b7177a800000",
        "0xce1b0cb46aaecfd79b880cad0f2dda8a8dedd0b1": "0x1158e460913d00000",
        "0xce26f9a5305f8381094354dbfc92664e84f902b5": "0xc7aaab0591eec0000",
        "0xce2deab51c0a9ae09cd212c4fa4cc52b53cc0dec": "0x6c6b935b8bbd400000",
        "0xce2e0da8934699bb1a553e55a0b85c169435bea3": "0x10f0c696410e3a90000",
        "0xce3a61f0461b00935e85fa1ead82c45e5a64d488": "0x1b1ae4d6e2ef500000",
        "0xce4b065dbcb23047203262fb48c1188364977470": "0x1b1ae4d6e2ef500000",
        "0xce53c8cdd74296aca987b2bc19c2b875a48749d0": "0xa2a15d09519be00000",
        "0xce5e04f0184369bcfa06aca66ffa91bf59fa0fb9": "0x22b1c8c1227a00000",
        "0xce5eb63a7bf4fbc2f6e4baa0c68ab1cb4cf98fb4": "0x6c6b935b8bbd400000",
        "0xce62125adec3370ac52110953a4e760be9451e3b": "0x83d6c7aab63600000",
        "0xce71086d4c602554b82dcbfce88d20634d53cc4d": "0x92896529baddc880000",
        "0xce8a6b6d5033b1498b1ffeb41a41550405fa03a2": "0xd8d726b7177a800000",
        "0xce9786d3712fa200e9f68537eeaa1a06a6f45a4b": "0x61093d7c2c6d380000",
        "0xce9d21c692cd3c01f2011f505f870036fa8f6cd2": "0x15af1d78b58c400000",
        "0xcea2896623f4910287a2bdc5be83aea3f2e6de08": "0x1fb5a3751e490dc0000",
        "0xcea34a4dd93dd9aefd399002a97d997a1b4b89cd": "0x5150ae84a8cdf00000",
        "0xcea43f7075816b60bbfce68b993af0881270f6c4": "0x6c6b935b8bbd400000",
        "0xcea8743341533cb2f0b9c6efb8fda80d77162825": "0x56bc75e2d63100000",
        "0xceb089ec8a78337e8ef88de11b49e3dd910f748f": "0x3635c9adc5dea00000",
        "0xceb33d78e7547a9da2e87d51aec5f3441c87923a": "0x1158e460913d00000",
        "0xceb389381d48a8ae4ffc483ad0bb5e204cfdb1ec": "0x2827e6e4dd62ba8000",
        "0xcec6fc65853f9cce5f8e844676362e1579015f02": "0x6c6b935b8bbd400000",
        "0xced3c7be8de7585140952aeb501dc1f876ecafb0": "0xd8d726b7177a800000",
        "0xced81ec3533ff1bfebf3e3843ee740ad11758d3e": "0x6acb3df27e1f880000",
        "0xcedcb3a1d6843fb6bef643617deaf38f8e98dd5f": "0x19e2a4c818b9060000",
        "0xcee699c0707a7836252b292f047ce8ad289b2f55": "0x119a1e21aa69560000",
        "0xceed47ca5b899fd1623f21e9bd4db65a10e5b09d": "0x73877404c1eee0000",
        "0xcef77451dfa2c643e00b156d6c6ff84e2373eb66": "0xa31062beeed700000",
        "0xcf1169041c1745e45b172435a2fc99b49ace2b00": "0x1bb88baab2d7c0000",
        "0xcf157612764e0fd696c8cb5fba85df4c0ddc3cb0": "0x65a4da25d3016c00000",
        "0xcf1bdb799b2ea63ce134668bdc198b54840f180b": "0xfc936392801c0000",
        "0xcf2288ef4ebf88e86db13d8a0e0bf52a056582c3": "0x89506fbf9740740000",
        "0xcf264e6925130906c4d7c18591aa41b2a67f6f58": "0x6c6b935b8bbd400000",
        "0xcf26b47bd034bc508e6c4bcfd6c7d30034925761": "0x6194049f30f7200000",
        "0xcf2e2ad635e9861ae95cb9bafcca036b5281f5ce": "0x77432217e6836000000",
        "0xcf2e734042a355d05ffb2e3915b16811f45a695e": "0x6c6b935b8bbd400000",
        "0xcf348f2fe47b7e413c077a7baf3a75fbf8428692": "0x6c6b935b8bbd400000",
        "0xcf3f9128b07203a3e10d7d5755c0c4abc6e2cac2": "0x10f0cf064dd59200000",
        "0xcf3fbfa1fd32d7a6e0e6f8ef4eab57be34025c4c": "0x39a1c0f7594d480000",
        "0xcf4166746e1d3bc1f8d0714b01f17e8a62df1464": "0x3677036edf0af60000",
        "0xcf4f1138f1bd6bf5b6d485cce4c1017fcb85f07d": "0x2fd0bc77c32bff0000",
        "0xcf5a6f9df75579c644f794711215b30d77a0ce40": "0x6c6b935b8bbd400000",
        "0xcf5e0eacd1b39d0655f2f77535ef6608eb950ba0": "0x6c6b935b8bbd400000",
        "0xcf684dfb8304729355b58315e8019b1aa2ad1bac": "0x177224aa844c720000",
        "0xcf694081c76d18c64ca71382be5cd63b3cb476f8": "0x3635c9adc5dea00000",
        "0xcf6e52e6b77480b1867efec6446d9fc3cc3577e8": "0xc0901f6bd98790000",
        "0xcf883a20329667ea226a1e3c765dbb6bab32219f": "0xa4be3564d616660000",
        "0xcf8882359c0fb23387f5674074d8b17ade512f98": "0x14542ba12a337c00000",
        "0xcf89f7460ba3dfe83c5a1d3a019ee1250f242f0f": "0x356813cdcefd028000",
        "0xcf923a5d8fbc3d01aa079d1cfe4b43ce071b1611": "0x6c6b935b8bbd400000",
        "0xcf9be9b9ab86c66b59968e67b8d4dcff46b1814a": "0x23c757072b8dd00000",
        "0xcfa8b37127149bdbfee25c34d878510951ea10eb": "0x6c6b935b8bbd400000",
        "0xcfac2e1bf33205b05533691a02267ee19cd81836": "0x3635c9adc5dea00000",
        "0xcfbb32b7d024350e3321fa20c9a914035372ffc6": "0x15be6174e1912e0000",
        "0xcfc4e6f7f8b011414bfba42f23adfaa78d4ecc5e": "0x6449e84e47a8a80000",
        "0xcfd2728dfb8bdbf3bf73598a6e13eaf43052ea2b": "0x93739534d28680000",
        "0xcfd47493c9f89fe680bda5754dd7c9cfe7cb5bbe": "0x2f473513448fe0000",
        "0xcfde0fc75d6f16c443c3038217372d99f5d907f7": "0x83225e6396b5ec0000",
        "0xcfe2caaf3cec97061d0939748739bffe684ae91f": "0x21e19e0c9bab2400000",
        "0xcfeacaaed57285e0ac7268ce6a4e35ecfdb242d7": "0x3ae4d4240190600000",
        "0xcfecbea07c27002f65fe534bb8842d0925c78402": "0xd8d726b7177a800000",
        "0xcfee05c69d1f29e7714684c88de5a16098e91399": "0x6acb3df27e1f880000",
        "0xcff6a6fe3e9a922a12f21faa038156918c4fcb9c": "0x44591d67fecc80000",
        "0xcff7f89a4d4219a38295251331568210ffc1c134": "0x5f68e8131ecf800000",
        "0xcff8d06b00e3f50c191099ad56ba6ae26571cd88": "0x3635c9adc5dea00000",
        "0xcffc49c1787eebb2b56cabe92404b636147d4558": "0x133e0308f40a3da8000",
        "0xd008513b27604a89ba1763b6f84ce688b346945b": "0x3635c9adc5dea00000",
        "0xd00f067286c0fbd082f9f4a61083ec76deb3cee6": "0x3635c9adc5dea00000",
        "0xd015f6fcb84df7bb410e8c8f04894a881dcac237": "0x384524cc70b7780000",
        "0xd01af9134faf5257174e8b79186f42ee354e642d": "0x3635c9adc5dea00000",
        "0xd02108d2ae3cab10cbcf1657af223e027c8210f6": "0x6c6d84bccdd9ce0000",
        "0xd02afecf8e2ec2b62ac8ad204161fd1fae771d0e": "0x6c6b935b8bbd400000",
        "0xd0319139fbab2e8e2accc1d924d4b11df6696c5a": "0xad78ebc5ac6200000",
        "0xd037d215d11d1df3d54fbd321cd295c5465e273b": "0x4be4e7267b6ae00000",
        "0xd03a2da41e868ed3fef5745b96f5eca462ff6fda": "0xa2a15d09519be00000",
        "0xd03fc165576aaed525e5502c8e140f8b2e869639": "0x17356d8b32501c80000",
        "0xd043a011ec4270ee7ec8b968737515e503f83028": "0x1b1ae4d6e2ef500000",
        "0xd04b861b3d9acc563a901689941ab1e1861161a2": "0x1158e460913d00000",
        "0xd05a447c911dbb275bfb2e5a37e5a703a56f9997": "0xad78ebc5ac6200000",
        "0xd05ffb2b74f867204fe531653b0248e21c13544e": "0x3635c9adc5dea00000",
        "0xd062588171cf99bbeb58f126b870f9a3728d61ec": "0xf3f20b8dfa69d00000",
        "0xd0638ea57189a6a699024ad78c71d939c1c2ff8c": "0x8eae566710fc200000",
        "0xd0648a581b3508e135a2935d12c9657045d871ca": "0x1b2df9d219f57980000",
        "0xd071192966eb69c3520fca3aa4dd04297ea04b4e": "0x5f68e8131ecf80000",
        "0xd0718520eae0a4d62d70de1be0ca431c5eea2482": "0x6c6b935b8bbd400000",
        "0xd0775dba2af4c30a3a78365939cd71c2f9de95d2": "0x692ae8897081d00000",
        "0xd07be0f90997caf903c8ac1d53cde904fb190741": "0x36389038b699b40000",
        "0xd07e511864b1cf9969e3560602829e32fc4e71f5": "0x2b5e3af16b1880000",
        "0xd0809498c548047a1e2a2aa6a29cd61a0ee268bd": "0x6c6b935b8bbd400000",
        "0xd082275f745a2cac0276fbdb02d4b2a3ab1711fe": "0x1a055690d9db80000",
        "0xd08fc09a0030fd0928cd321198580182a76aae9f": "0x3635c9adc5dea00000",
        "0xd093e829819fd2e25b973800bb3d5841dd152d05": "0xd8d726b7177a800000",
        "0xd0944aa185a1337061ae20dc9dd96c83b2ba4602": "0xad78ebc5ac6200000",
        "0xd096565b7c7407d06536580355fdd6d239144aa1": "0xd8d726b7177a80000",
        "0xd09cb2e6082d693a13e8d2f68dd1dd8461f55840": "0x3635c9adc5dea00000",
        "0xd0a6c6f9e9c4b383d716b31de78d56414de8fa91": "0x1043561a8829300000",
        "0xd0a7209b80cf60db62f57d0a5d7d521a69606655": "0x8ac7230489e800000",
        "0xd0a8abd80a199b54b08b65f01d209c27fef0115b": "0x161c626dc61a2ef8000",
        "0xd0abcc70c0420e0e172f97d43b87d5e80c336ea9": "0x21e19e0c9bab2400000",
        "0xd0ae735d915e946866e1fea77e5ea466b5cadd16": "0x6c6b935b8bbd400000",
        "0xd0b11d6f2bce945e0c6a5020c3b52753f803f9d1": "0xad78ebc5ac6200000",
        "0xd0c101fd1f01c63f6b1d19bc920d9f932314b136": "0x43c33c1937564800000",
        "0xd0c55abf976fdc3db2afe9be99d499484d576c02": "0x3635c9adc5dea00000",
        "0xd0d0a2ad45f59a9dccc695d85f25ca46ed31a5a3": "0x2d89577d7d40200000",
        "0xd0d62c47ea60fb90a3639209bbfdd4d933991cc6": "0xa844a7424d9c80000",
        "0xd0db456178206f5c4430fe005063903c3d7a49a7": "0x26491e45a753c08000",
        "0xd0e194f34b1db609288509ccd2e73b6131a2538b": "0x36356633ebd8ea0000",
        "0xd0e35e047646e759f4517093d6408642517f084d": "0xd58fa46818eccb8000",
        "0xd0ee4d02cf24382c3090d3e99560de3678735cdf": "0x821ab0d44149800000",
        "0xd0f04f52109aebec9a7b1e9332761e9fe2b97bb5": "0xd8d726b7177a800000",
        "0xd0f9597811b0b992bb7d3757aa25b4c2561d32e2": "0x1b1ae4d6e2ef500000",
        "0xd10302faa1929a326904d376bf0b8dc93ad04c4c": "0x61093d7c2c6d380000",
        "0xd1100dd00fe2ddf18163ad964d0b69f1f2e9658a": "0x143120955b2506b0000",
        "0xd116f3dcd5db744bd008887687aa0ec9fd7292aa": "0x3635c9adc5dea00000",
        "0xd119417c46732cf34d1a1afb79c3e7e2cd8eece4": "0x6c6b935b8bbd400000",
        "0xd12d77ae01a92d35117bac705aacd982d02e74c1": "0x3635c9adc5dea00000",
        "0xd135794b149a18e147d16e621a6931f0a40a969a": "0x43c33c1937564800000",
        "0xd1432538e35b7664956ae495a32abdf041a7a21c": "0x42bf06b78ed3b500000",
        "0xd1438267231704fc7280d563adf4763844a80722": "0xad78ebc5ac6200000",
        "0xd1538e9a87e59ca9ec8e5826a5b793f99f96c4c3": "0x3635c9adc5dea00000",
        "0xd1648503b1ccc5b8be03fa1ec4f3ee267e6adf7b": "0x13befbf51eec0900000",
        "0xd1682c2159018dc3d07f08240a8c606daf65f8e1": "0x2a5a058fc295ed000000",
        "0xd171c3f2258aef35e599c7da1aa07300234da9a6": "0x6c6b935b8bbd400000",
        "0xd1778c13fbd968bc083cb7d1024ffe1f49d02caa": "0xd9ecb4fd208e500000",
        "0xd17fbe22d90462ed37280670a2ea0b3086a0d6d6": "0xad6eedd17cf3b8000",
        "0xd1811c55976980f083901d8a0db269222dfb5cfe": "0x54069233bf7f780000",
        "0xd18eb9e1d285dabe93e5d4bae76beefe43b521e8": "0x243d4d18229ca20000",
        "0xd193e583d6070563e7b862b9614a47e99489f3e5": "0x36356633ebd8ea0000",
        "0xd1978f2e34407fab1dc2183d95cfda6260b35982": "0x2ab7b260ff3fd00000",
        "0xd19caf39bb377fdf2cf19bd4fb52591c2631a63c": "0x3635c9adc5dea00000",
        "0xd1a396dcdab2c7494130b3fd307820340dfd8c1f": "0xf92250e2dfd00000",
        "0xd1a71b2d0858e83270085d95a3b1549650035e23": "0x327bb09d06aa8500000",
        "0xd1acb5adc1183973258d6b8524ffa28ffeb23de3": "0xd8d726b7177a800000",
        "0xd1b37f03cb107424e9c4dd575ccd4f4cee57e6cd": "0x6c6b935b8bbd400000",
        "0xd1b5a454ac3405bb4179208c6c84de006bcb9be9": "0x1b1ae4d6e2ef500000",
        "0xd1c45954a62b911ad701ff2e90131e8ceb89c95c": "0x4b91a2de457e880000",
        "0xd1c96e70f05ae0e6cd6021b2083750a7717cde56": "0x1b1ae4d6e2ef500000",
        "0xd1d5b17ffe2d7bbb79cc7d7930bcb2e518fb1bbf": "0xa2a15d09519be00000",
        "0xd1da0c8fb7c210e0f2ec618f85bdae7d3e734b1c": "0x6acb3df27e1f880000",
        "0xd1dd79fb158160e5b4e8e23f312e6a907fbc4d4e": "0x1b1ae4d6e2ef500000",
        "0xd1de5aad3a5fd803f1b1aeb6103cb8e14fe723b7": "0x1158e460913d00000",
        "0xd1e1f2b9c16c309874dee7fac32675aff129c398": "0x3f24d8e4a00700000",
        "0xd1e5e234a9f44266a4a6241a84d7a1a55ad5a7fe": "0x43c33c1937564800000",
        "0xd1ea4d72a67b5b3e0f315559f52bd0614d713069": "0x6c6b935b8bbd400000",
        "0xd1ee905957fe7cc70ec8f2868b43fe47b13febff": "0x2629f66e0c5300000",
        "0xd1f1694d22671b5aad6a94995c369fbe6133676f": "0x3635c9adc5dea00000",
        "0xd1f4dc1ddb8abb8848a8b14e25f3b55a8591c266": "0xd8d726b7177a80000",
        "0xd1fed0aee6f5dfd7e25769254c3cfad15adeccaa": "0x2792c8fc4b53280000",
        "0xd2051cb3cb6704f0548cc890ab0a19db3415b42a": "0x121b2e5e6464780000",
        "0xd206aaddb336d45e7972e93cb075471d15897b5d": "0x2086ac351052600000",
        "0xd209482bb549abc4777bea6d7f650062c9c57a1c": "0x11651ac3e7a7580000",
        "0xd20dcb0b78682b94bc3000281448d557a20bfc83": "0x30849ebe16369c0000",
        "0xd2107b353726c3a2b46566eaa7d9f80b5d21dbe3": "0x1158e460913d00000",
        "0xd211b21f1b12b5096181590de07ef81a89537ead": "0x6c6b935b8bbd400000",
        "0xd218efb4db981cdd6a797f4bd48c7c26293ceb40": "0xa1466b31c6431c0000",
        "0xd21a7341eb84fd151054e5e387bb25d36e499c09": "0x2f6f10780d22cc00000",
        "0xd224f880f9479a89d32f09e52be990b288135cef": "0x3a9d5baa4abf1d00000",
        "0xd22f0ca4cd479e661775053bcc49e390f670dd8a": "0x3635c9adc5dea00000",
        "0xd231929735132102471ba59007b6644cc0c1de3e": "0x3637096c4bcc690000",
        "0xd235d15cb5eceebb61299e0e827fa82748911d89": "0xd8d726b7177a800000",
        "0xd23a24d7f9468343c143a41d73b88f7cbe63be5e": "0xad78ebc5ac6200000",
        "0xd23d7affacdc3e9f3dae7afcb4006f58f8a44600": "0xc328093e61ee400000",
        "0xd243184c801e5d79d2063f3578dbae81e7b3a9cb": "0x6bdca2681e1aba0000",
        "0xd24b6644f439c8051dfc64d381b8c86c75c17538": "0x6c6b935b8bbd400000",
        "0xd24bf12d2ddf457decb17874efde2052b65cbb49": "0x2f6f10780d22cc00000",
        "0xd251f903ae18727259eee841a189a1f569a5fd76": "0x21e19e0c9bab2400000",
        "0xd252960b0bf6b2848fdead80136db5f507f8be02": "0x6c6b935b8bbd400000",
        "0xd2581a55ce23ab10d8ad8c44378f59079bd6f658": "0x1dd0c885f9a0d800000",
        "0xd25aecd7eb8bd6345b063b5dbd271c77d3514494": "0x62a992e53a0af00000",
        "0xd27c234ff7accace3d996708f8f9b04970f97d36": "0x487a9a304539440000",
        "0xd28298524df5ec4b24b0ffb9df85170a145a9eb5": "0xf98a3b9b337e20000",
        "0xd283b8edb10a25528a4404de1c65e7410dbcaa67": "0x28a857425466f800000",
        "0xd284a50382f83a616d39b8a9c0f396e0ebbfa95d": "0x3636c25e66ece70000",
        "0xd288e7cb7ba9f620ab0f7452e508633d1c5aa276": "0xd8d726b7177a800000",
        "0xd29dc08efbb3d72e263f78ab7610d0226de76b00": "0x28a857425466f800000",
        "0xd2a030ac8952325f9e1db378a71485a24e1b07b2": "0x6c6b935b8bbd400000",
        "0xd2a479404347c5543aab292ae1bb4a6f158357fa": "0xd8d726b7177a800000",
        "0xd2a5a024230a57ccc666760b89b0e26cafd189c7": "0xa96595a5c6e8a3f8000",
        "0xd2a80327cbe55c4c7bd51ff9dde4ca648f9eb3f8": "0x2b5e3af16b1880000",
        "0xd2a84f75675c62d80c88756c428eee2bcb185421": "0x410d586a20a4c00000",
        "0xd2abd84a181093e5e229136f42d835e8235de109": "0x56be03ca3e47d8000",
        "0xd2ac0d3a58605e1d0f0eb3de25b2cad129ed6058": "0xd8d726b7177a800000",
        "0xd2bf67a7f3c6ce56b7be41675dbbadfe7ea93a33": "0x15af1d78b58c400000",
        "0xd2dbebe89b0357aea98bbe8e496338debb28e805": "0xd8d726b7177a800000",
        "0xd2e21ed56868fab28e0947927adaf29f23ebad6c": "0x6c184f1355d0e80000",
        "0xd2e817738abf1fb486583f80c350318bed860c80": "0xd02cecf5f5d810000",
        "0xd2edd1ddd6d86dc005baeb541d22b640d5c7cae5": "0x1158e460913d00000",
        "0xd2f1998e1cb1580cec4f6c047dcd3dcec54cf73c": "0xad78ebc5ac6200000",
        "0xd2f241255dd7c3f73c07043071ec08ddd9c5cde5": "0x1b1ae4d6e2ef500000",
        "0xd2ff672016f63b2f85398f4a6fedbb60a50d3cce": "0x1291246f5b734a0000",
        "0xd30d4c43adcf55b2cb53d68323264134498d89ce": "0x3635c9adc5dea00000",
        "0xd30ee9a12b4d68abace6baca9ad7bf5cd1faf91c": "0x514fcb24ff9c500000",
        "0xd3118ea3c83505a9d893bb67e2de142d537a3ee7": "0x1158e460913d00000",
        "0xd311bcd7aa4e9b4f383ff3d0d6b6e07e21e3705d": "0xad78ebc5ac6200000",
        "0xd315deea1d8c1271f9d1311263ab47c007afb6f5": "0x3c81d4e654b400000",
        "0xd32b2c79c36478c5431901f6d700b04dbe9b8810": "0x15779a9de6eeb00000",
        "0xd32b45564614516c91b07fa9f72dcf787cce4e1c": "0xfc66fae3746ac0000",
        "0xd330728131fe8e3a15487a34573c93457e2afe95": "0xd8d726b7177a800000",
        "0xd331c823825a9e5263d052d8915d4dcde07a5c37": "0x1e931283ccc8500000",
        "0xd333627445f2d787901ef33bb2a8a3675e27ffec": "0x15af1d78b58c400000",
        "0xd33cf82bf14c592640a08608914c237079d5be34": "0x6c6b935b8bbd400000",
        "0xd34d708d7398024533a5a2b2309b19d3c55171bb": "0x15af1d78b58c400000",
        "0xd34e03d36a2bd4d19a5fa16218d1d61e3ffa0b15": "0x1158e460913d000000",
        "0xd35075ca61fe59d123969c36a82d1ab2d918aa38": "0x90f534608a72880000",
        "0xd367009ab658263b62c2333a1c9e4140498e1389": "0x6c6b935b8bbd400000",
        "0xd3679a47df2d99a49b01c98d1c3e0c987ce1e158": "0xf2dc7d47f15600000",
        "0xd38fa2c4cc147ad06ad5a2f75579281f22a7cc1f": "0x43c33c1937564800000",
        "0xd39a5da460392b940b3c69bc03757bf3f2e82489": "0x17c83a97d6b6ca50000",
        "0xd39b7cbc94003fc948f0cde27b100db8ccd6e063": "0x15af1d78b58c400000",
        "0xd3a10ec7a5c9324999dd9e9b6bde7c911e584bda": "0x2086ac351052600000",
        "0xd3a941c961e8ca8b1070f23c6d6d0d2a758a4444": "0xad78ebc5ac6200000",
        "0xd3bb59fa31258be62f8ed232f1a7d47b4a0b41ee": "0x56bc75e2d63100000",
        "0xd3bc730937fa75d8452616ad1ef1fe7fffe0d0e7": "0x484e4ded2eae38000",
        "0xd3c24d4b3a5e0ff8a4622d518edd73f16ab28610": "0x1158e460913d00000",
        "0xd3c6f1e0f50ec3d2a67e6bcd193ec7ae38f1657f": "0x166c5480889db770000",
        "0xd3d6e9fb82542fd29ed9ea3609891e151396b6f7": "0xb6f588aa7bcf5c00000",
        "0xd3dad1b6d08d4581ccae65a8732db6ac69f0c69e": "0x14542ba12a337c00000",
        "0xd3df3b53cb3b4755de54e180451cc44c9e8ae0aa": "0x23c49409b977828000",
        "0xd3f873bd9956135789ab00ebc195b922e94b259d": "0x6c6b935b8bbd400000",
        "0xd402b4f6a099ebe716cb14df4f79c0cd01c6071b": "0x6c6b935b8bbd400000",
        "0xd40d0055fd9a38488aff923fd03d35ec46d711b3": "0x10f08eda8e555098000",
        "0xd40ed66ab3ceff24ca05ecd471efb492c15f5ffa": "0x1b1ae4d6e2ef500000",
        "0xd418870bc2e4fa7b8a6121ae0872d55247b62501": "0x55a6e79ccd1d300000",
        "0xd41d7fb49fe701baac257170426cc9b38ca3a9b2": "0x98a7d9b8314c00000",
        "0xd4205592844055b3c7a1f80cefe3b8eb509bcde7": "0x9b3bfd342a9fc8000",
        "0xd42b20bd0311608b66f8a6d15b2a95e6de27c5bf": "0x6c6b935b8bbd400000",
        "0xd4344f7d5cad65d17e5c2d0e7323943d6f62fe92": "0xe7eeba3410b740000",
        "0xd43ee438d83de9a37562bb4e286cb1bd19f4964d": "0x3635c9adc5dea00000",
        "0xd44334b4e23a169a0c16bd21e866bba52d970587": "0x8cf23f909c0fa00000",
        "0xd44d81e18f46e2cfb5c1fcf5041bc8569767d100": "0x7b442e684f65aa40000",
        "0xd44f4ac5fad76bdc1537a3b3af6472319b410d9d": "0x56bc75e2d631000000",
        "0xd44f5edf2bcf2433f211dadd0cc450db1b008e14": "0xe7eeba3410b740000",
        "0xd44f6ac3923b5fd731a4c45944ec4f7ec52a6ae4": "0x21e19e0c9bab2400000",
        "0xd45b3341e8f15c80329320c3977e3b90e7826a7e": "0x1b1ae4d6e2ef500000",
        "0xd45d5daa138dd1d374c71b9019916811f4b20a4e": "0x1f399b1438a1000000",
        "0xd460a4b908dd2b056759b488850b66a838fc77a8": "0x6acb3df27e1f880000",
        "0xd467cf064c0871989b90d8b2eb14ccc63b360823": "0xad78ebc5ac6200000",
        "0xd46bae61b027e5bb422e83a3f9c93f3c8fc77d27": "0x6c6b935b8bbd400000",
        "0xd46f8223452982a1eea019a8816efc2d6fc00768": "0x76d41c62494840000",
        "0xd475477fa56390d33017518d6711027f05f28dbf": "0x6b111333d4fd4c0000",
        "0xd47c242edffea091bc54d57df5d1fdb93101476c": "0x9df7dfa8f760480000",
        "0xd47d8685faee147c520fd986709175bf2f886bef": "0x6c6b935b8bbd400000",
        "0xd47f50df89a1cff96513bef1b2ae3a2971accf2c": "0x2d89577d7d40200000",
        "0xd482e7f68e41f238fe517829de15477fe0f6dd1d": "0x1b1ae4d6e2ef500000",
        "0xd4879fd12b1f3a27f7e109761b23ca343c48e3d8": "0x241a9b4f617a280000",
        "0xd48e3f9357e303513841b3f84bda83fc89727587": "0x3635c9adc5dea00000",
        "0xd49a75bb933fca1fca9aa1303a64b6cb44ea30e1": "0x21e19e0c9bab2400000",
        "0xd4b085fb086f3d0d68bf12926b1cc3142cae8770": "0xc893d09c8f51500000",
        "0xd4b2ff3bae1993ffea4d3b180231da439f7502a2": "0x6c6b935b8bbd400000",
        "0xd4b38a5fdb63e01714e9801db47bc990bd509183": "0x14534d95bef905c0000",
        "0xd4b8bdf3df9a51b0b91d16abbea05bb4783c8661": "0x3635c9adc5dea00000",
        "0xd4c4d1a7c3c74984f6857b2f5f07e8face68056d": "0x6c6b935b8bbd400000",
        "0xd4c6ac742e7c857d4a05a04c33d4d05c1467571d": "0xad78ebc5ac6200000",
        "0xd4cb21e590c5a0e06801366aff342c7d7db16424": "0x1ac7a08ead02f80000",
        "0xd4d92c62b280e00f626d8657f1b86166cb1f740f": "0xad7f23634cbd60000",
        "0xd4ebb1929a23871cf77fe049ab9602be08be0a73": "0x678a932062e4180000",
        "0xd4ee4919fb37f2bb970c3fff54aaf1f3dda6c03f": "0x878678326eac9000000",
        "0xd4feed99e8917c5c5458635f3603ecb7e817a7d0": "0x1043c43cde1d398000",
        "0xd4ff46203efa23064b1caf00516e28704a82a4f8": "0x487a9a304539440000",
        "0xd500e4d1c9824ba9f5b635cfa3a8c2c38bbd4ced": "0x15af1d78b58c400000",
        "0xd508d39c70916f6abc4cc7f999f011f077105802": "0x5724d24afe77f0000",
        "0xd50f7fa03e389876d3908b60a537a6706304fb56": "0x56bc75e2d63100000",
        "0xd513a45080ff2febe62cd5854abe29ee4467f996": "0x84e13bc4fc5d80000",
        "0xd5276f0cd5ffd5ffb63f98b5703d5594ede0838b": "0x15af1d78b58c400000",
        "0xd5294b666242303b6df0b1c88d37429bc8c965aa": "0x104d0d00d2b7f60000",
        "0xd52aecc6493938a28ca1c367b701c21598b6a02e": "0x3ba1910bf341b00000",
        "0xd53c567f0c3ff2e08b7d59e2b5c73485437fc58d": "0x2086ac351052600000",
        "0xd541ac187ad7e090522de6da3213e9a7f4439673": "0x6c6b935b8bbd400000",
        "0xd54ba2d85681dc130e5b9b02c4e8c851391fd9b9": "0xd5967be4fc3f100000",
        "0xd55508adbbbe9be81b80f97a6ea89add68da674f": "0x6c6b935b8bbd400000",
        "0xd5550caaf743b037c56fd2558a1c8ed235130750": "0x121e4d49036255b0000",
        "0xd5586da4e59583c8d86cccf71a86197f17996749": "0x6c6b935b8bbd400000",
        "0xd55c1c8dfbe1e02cacbca60fdbdd405b09f0b75f": "0x6c6b935b8bbd400000",
        "0xd561cbbc05515de73ab8cf9eae1357341e7dfdf4": "0x14542ba12a337c00000",
        "0xd56a144d7af0ae8df649abae535a15983aa04d02": "0x10f0cf064dd59200000",
        "0xd572309169b1402ec8131a17a6aac3222f89e6eb": "0x2ec1978c47766a00000",
        "0xd5787668c2c5175b01a8ee1ac3ecc9c8b2aba95a": "0x6c6acc67d7b1d40000",
        "0xd588c3a5df228185d98ee7e60748255cdea68b01": "0xd8d726b7177a800000",
        "0xd58a52e078a805596b0d56ea4ae1335af01c66eb": "0xe7eeba3410b740000",
        "0xd5903e9978ee20a38c3f498d63d57f31a39f6a06": "0x232b36ffc672ab00000",
        "0xd59638d3c5faa7711bf085745f9d5bdc23d498d8": "0x6c6b935b8bbd400000",
        "0xd59d92d2c8701980cc073c375d720af064743c0c": "0x405fdf7e5af85e00000",
        "0xd5a7bec332adde18b3104b5792546aa59b879b52": "0x6c6b935b8bbd400000",
        "0xd5b117ec116eb846418961eb7edb629cd0dd697f": "0xa2a15d09519be00000",
        "0xd5b284040130abf7c1d163712371cc7e28ad66da": "0x6acb3df27e1f880000",
        "0xd5b9d277d8aad20697a51f76e20978996bffe055": "0x7c3fe3c076ab50000",
        "0xd5bd5e8455c130169357c471e3e681b7996a7276": "0x2d9e288f8abb360000",
        "0xd5cba5b26bea5d73fabb1abafacdef85def368cc": "0xad78ebc5ac6200000",
        "0xd5ce55d1b62f59433c2126bcec09bafc9dfaa514": "0xaadec983fcff40000",
        "0xd5e55100fbd1956bbed2ca518d4b1fa376032b0b": "0x56bc75e2d63100000",
        "0xd5e5c135d0c4c3303934711993d0d16ff9e7baa0": "0x6c6b935b8bbd400000",
        "0xd5e656a1b916f9bf45afb07dd8afaf73b4c56f41": "0x542253a126ce40000",
        "0xd5ea472cb9466018110af00c37495b5c2c713112": "0x10eee686c854f440000",
        "0xd5f07552b5c693c20067b378b809cee853b8f136": "0x1b67c6df88c6fa0000",
        "0xd5f7c41e07729dfa6dfc64c4423160a22c609fd3": "0x61093d7c2c6d380000",
        "0xd604abce4330842e3d396ca73ddb5519ed3ec03f": "0x8e31fe1689d8a0000",
        "0xd60651e393783423e5cc1bc5f889e44ef7ea243e": "0x159e76371129c80000",
        "0xd609bf4f146eea6b0dc8e06ddcf4448a1fccc9fa": "0x6c6b935b8bbd400000",
        "0xd609ec0be70d0ad26f6e67c9d4762b52ee51122c": "0x3635c9adc5dea00000",
        "0xd60a52580728520df7546bc1e283291788dbae0c": "0x363489ef3ff0d70000",
        "0xd60b247321a32a5affb96b1e279927cc584de943": "0x7ad020d6ddd7760000",
        "0xd6110276cfe31e42825a577f6b435dbcc10cf764": "0x3635c9adc5dea00000",
        "0xd612597bc31743c78633f633f239b1e9426bd925": "0x1017f7df96be17800000",
        "0xd6234aaf45c6f22e66a225ffb93add629b4ef80f": "0x3635c9adc5dea00000",
        "0xd62edb96fce2969aaf6c545e967cf1c0bc805205": "0x4a565536a5ada8000",
        "0xd6300b3215b11de762ecde4b70b7927d01291582": "0x6c6b935b8bbd400000",
        "0xd6395db5a4bb66e60f4cfbcdf0057bb4d97862e2": "0x3154c9729d05780000",
        "0xd64a2d50f8858537188a24e0f50df1681ab07ed7": "0x8375a2abcca24400000",
        "0xd6580ab5ed4c7dfa506fa6fe64ad5ce129707732": "0xd8d726b7177a800000",
        "0xd6598b1386e93c5ccb9602ff4bbbecdbd3701dc4": "0xc25f4ecb041f00000",
        "0xd6644d40e90bc97fe7dfe7cabd3269fd579ba4b3": "0x89e917994f71c0000",
        "0xd6670c036df754be43dadd8f50feea289d061fd6": "0x144a2903448cef78000",
        "0xd668523a90f0293d65c538d2dd6c57673710196e": "0x2242c30b853ee0000",
        "0xd66ab79294074c8b627d842dab41e17dd70c5de5": "0x3635c9adc5dea00000",
        "0xd66acc0d11b689cea6d9ea5ff4014c224a5dc7c4": "0xfc936392801c0000",
        "0xd66ddf1159cf22fd8c7a4bc8d5807756d433c43e": "0x77432217e683600000",
        "0xd687cec0059087fdc713d4d2d65e77daefedc15f": "0x340aad21b3b700000",
        "0xd688e785c98f00f84b3aa1533355c7a258e87948": "0x1b1ae4d6e2ef500000",
        "0xd6a22e598dabd38ea6e958bd79d48ddd9604f4df": "0x3635c9adc5dea00000",
        "0xd6a7ac4de7b510f0e8de519d973fa4c01ba83400": "0x65ea3db75546600000",
        "0xd6acc220ba2e51dfcf21d443361eea765cbd35d8": "0x1158e460913d00000",
        "0xd6acffd0bfd99c382e7bd56ff0e6144a9e52b08e": "0x8ac7230489e800000",
        "0xd6c0d0bc93a62e257174700e10f024c8b23f1f87": "0x6c6b935b8bbd400000",
        "0xd6cf5c1bcf9da662bcea2255905099f9d6e84dcc": "0x1c49e420157d9c20000",
        "0xd6d03572a45245dbd4368c4f82c95714bd2167e2": "0x3f00c3d66686fc0000",
        "0xd6d6776958ee23143a81adadeb08382009e996c2": "0xa2a15d09519be00000",
        "0xd6d9e30f0842012a7176a917d9d2048ca0738759": "0xd8d726b7177a800000",
        "0xd6e09e98fe1300332104c1ca34fbfac554364ed9": "0x6c6b935b8bbd400000",
        "0xd6e8e97ae9839b9ee507eedb28edfb7477031439": "0x6c6b935b8bbd400000",
        "0xd6eea898d4ae2b718027a19ce9a5eb7300abe3ca": "0x17d4aceee63db8000",
        "0xd6f1e55b1694089ebcb4fe7d7882aa66c8976176": "0x43c23bdbe929db30000",
        "0xd6f4a7d04e8faf20e8c6eb859cf7f78dd23d7a15": "0x724ded1c748140000",
        "0xd6fc0446c6a8d40ae3551db7e701d1fa876e4a49": "0x6c6b935b8bbd400000",
        "0xd703c6a4f11d60194579d58c2766a7ef16c30a29": "0x6c6b935b8bbd400000",
        "0xd7052519756af42590f15391b723a03fa564a951": "0xfa3631480d01fd8000",
        "0xd70a612bd6dda9eab0dddcff4aaf4122d38feae4": "0x1d460162f516f00000",
        "0xd70ad2c4e9eebfa637ef56bd486ad2a1e5bce093": "0xad78ebc5ac6200000",
        "0xd7140c8e5a4307fab0cc27badd9295018bf87970": "0x5f1016b5076d00000",
        "0xd7164aa261c09ad9b2b5068d453ed8eb6aa13083": "0xa2a15d09519be00000",
        "0xd71e43a45177ad51cbe0f72184a5cb503917285a": "0xad78ebc5ac6200000",
        "0xd71fb130f0150c565269e00efb43902b52a455a6": "0xad78ebc5ac6200000",
        "0xd7225738dcf3578438f8e7c8b3837e42e04a262f": "0x182b8cebbb83aa0000",
        "0xd7274d50804d9c77da93fa480156efe57ba501de": "0x692ae8897081d00000",
        "0xd731bb6b5f3c37395e09ceaccd14a918a6060789": "0xd5967be4fc3f100000",
        "0xd73ed2d985b5f21b55b274643bc6da031d8edd8d": "0xa6dd90cae5114480000",
        "0xd744ac7e5310be696a63b003c40bd039370561c6": "0x5a87e7d7f5f6580000",
        "0xd74a6e8d6aab34ce85976814c1327bd6ea0784d2": "0x152d02c7e14af6800000",
        "0xd75a502a5b677287470f65c5aa51b87c10150572": "0x3130b4646385740000",
        "0xd76dbaebc30d4ef67b03e6e6ecc6d84e004d502d": "0x6d76b9188e13850000",
        "0xd771d9e0ca8a08a113775731434eb3270599c40d": "0x1158e460913d00000",
        "0xd7788ef28658aa06cc53e1f3f0de58e5c371be78": "0x16a6502f15a1e540000",
        "0xd77892e2273b235d7689e430e7aeed9cbce8a1f3": "0x6c6b935b8bbd400000",
        "0xd781f7fc09184611568570b4986e2c72872b7ed0": "0x1159561065d5d0000",
        "0xd785a8f18c38b9bc4ffb9b8fa8c7727bd642ee1c": "0x3635c9adc5dea00000",
        "0xd78ecd25adc86bc2051d96f65364866b42a426b7": "0xd23058bf2f26120000",
        "0xd78f84e38944a0e0255faece48ba4950d4bd39d2": "0x10f0cf064dd59200000",
        "0xd79483f6a8444f2549d611afe02c432d15e11051": "0x1158e460913d00000",
        "0xd79835e404fb86bf845fba090d6ba25e0c8866a6": "0x821ab0d44149800000",
        "0xd79aff13ba2da75d46240cac0a2467c656949823": "0x5dc892aa1131c80000",
        "0xd79db5ab43621a7a3da795e58929f3dd25af67d9": "0x6c6acc67d7b1d40000",
        "0xd7a1431ee453d1e49a0550d1256879b4f5d10201": "0x5a87e7d7f5f6580000",
        "0xd7ad09c6d32657685355b5c6ec8e9f57b4ebb982": "0x6acb3df27e1f880000",
        "0xd7b740dff8c457668fdf74f6a266bfc1dcb723f9": "0x1158e460913d00000",
        "0xd7c2803ed7b0e0837351411a8e6637d168bc5b05": "0x641daf5c91bd9358000",
        "0xd7c6265dea11876c903b718e4cd8ab24fe265bde": "0x6c6b935b8bbd400000",
        "0xd7ca7fdcfebe4588eff5421d1522b61328df7bf3": "0xd8e6001e6c302b0000",
        "0xd7cdbd41fff20df727c70b6255c1ba7606055468": "0xad78ebc5ac6200000",
        "0xd7d157e4c0a96437a6d285741dd23ec4361fa36b": "0x6c6b935b8bbd400000",
        "0xd7d2c6fca8ad1f75395210b57de5dfd673933909": "0x126e72a69a50d00000",
        "0xd7d3c75920590438b82c3e9515be2eb6ed7a8b1a": "0xcb49b44ba602d800000",
        "0xd7d7f2caa462a41b3b30a34aeb3ba61010e2626f": "0x6c6b935b8bbd400000",
        "0xd7e74afdbad55e96cebc5a374f2c8b768680f2b0": "0x55de6a779bbac0000",
        "0xd7eb903162271c1afa35fe69e37322c8a4d29b11": "0x21e19e0c9bab2400000",
        "0xd7ebddb9f93987779b680155375438db65afcb6a": "0x5741afeff944c0000",
        "0xd7ef340e66b0d7afcce20a19cb7bfc81da33d94e": "0xa2a15d09519be00000",
        "0xd7f370d4bed9d57c6f49c999de729ee569d3f4e4": "0xad78ebc5ac6200000",
        "0xd7fa5ffb6048f96fb1aba09ef87b1c11dd7005e4": "0x3635c9adc5dea00000",
        "0xd8069f84b521493f4715037f3226b25f33b60586": "0x678a932062e4180000",
        "0xd815e1d9f4e2b5e57e34826b7cfd8881b8546890": "0xf015f25736420000",
        "0xd81bd54ba2c44a6f6beb1561d68b80b5444e6dc6": "0x3f170d7ee43c430000",
        "0xd82251456dc1380f8f5692f962828640ab9f2a03": "0x1088b53b2c202be0000",
        "0xd82c6fedbdac98af2eed10b00f32b00056ca5a6d": "0xad78ebc5ac6200000",
        "0xd82fd9fdf6996bedad2843159c06f37e0924337d": "0x5b8ccedc5aa7b00000",
        "0xd83ad260e9a6f432fb6ea28743299b4a09ad658c": "0x6c6b935b8bbd400000",
        "0xd843ee0863ce933e22f89c802d31287b9671e81c": "0xb98bc829a6f90000",
        "0xd84b922f7841fc5774f00e14604ae0df42c8551e": "0xd96fce90cfabcc0000",
        "0xd855b03ccb029a7747b1f07303e0a664793539c8": "0x6c6b935b8bbd400000",
        "0xd85fdeaf2a61f95db902f9b5a53c9b8f9266c3ac": "0x6cf65a7e9047280000",
        "0xd8715ef9176f850b2e30eb8e382707f777a6fbe9": "0x6c6b935b8bbd400000",
        "0xd874b9dfae456a929ba3b1a27e572c9b2cecdfb3": "0x93739534d28680000",
        "0xd8930a39c77357c30ad3a060f00b06046331fd62": "0x2c73c937742c500000",
        "0xd89bc271b27ba3ab6962c94a559006ae38d5f56a": "0x6c6b935b8bbd400000",
        "0xd8b77db9b81bbe90427b62f702b201ffc29ff618": "0x326d1e4396d45c0000",
        "0xd8cd64e0284eec53aa4639afc4750810b97fab56": "0x1158e460913d00000",
        "0xd8d64384249b776794063b569878d5e3b530a4b2": "0x9a043d0b2f9568000",
        "0xd8d65420c18c2327cc5af97425f857e4a9fd51b3": "0x5f68e8131ecf800000",
        "0xd8e5c9675ef4deed266b86956fc4590ea7d4a27d": "0x3635c9adc5dea00000",
        "0xd8e8474292e7a051604ca164c0707783bb2885e8": "0x2d4ca05e2b43ca80000",
        "0xd8eb78503ec31a54a90136781ae109004c743257": "0x3635c9adc5dea00000",
        "0xd8eef4cf4beb01ee20d111748b61cb4d3f641a01": "0x9489237adb9a500000",
        "0xd8f4bae6f84d910d6d7d5ac914b1e68372f94135": "0x56bc75e2d63100000",
        "0xd8f62036f03b7635b858f1103f8a1d9019a892b6": "0x2b5e3af16b1880000",
        "0xd8f665fd8cd5c2bcc6ddc0a8ae521e4dc6aa6060": "0x5c283d410394100000",
        "0xd8f9240c55cff035523c6d5bd300d370dc8f0c95": "0xf732b66015a540000",
        "0xd8f94579496725b5cb53d7985c989749aff849c0": "0x39992648a23c8a00000",
        "0xd8fdf546674738c984d8fab857880b3e4280c09e": "0x1158e460913d00000",
        "0xd8fe088fffce948f5137ee23b01d959e84ac4223": "0xc5b54a94fc0170000",
        "0xd90f3009db437e4e11c780bec8896f738d65ef0d": "0xd8d726b7177a800000",
        "0xd9103bb6b67a55a7fece2d1af62d457c2178946d": "0x3635c9adc5dea00000",
        "0xd913f0771949753c4726acaa2bd3619c5c20ff77": "0xa2a15d09519be00000",
        "0xd91d889164479ce436ece51763e22cda19b22d6b": "0xb66d88126800880000",
        "0xd929c65d69d5bbaea59762662ef418bc21ad924a": "0x3635c9adc5dea00000",
        "0xd930b27a78876485d0f48b70dd5336549679ca8f": "0x22b1c8c1227a00000",
        "0xd931ac2668ba6a84481ab139735aec14b7bfbabf": "0x6c6b935b8bbd400000",
        "0xd9383d4b6d17b3f9cd426e10fb944015c0d44bfb": "0x2b5e3af16b18800000",
        "0xd942de4784f7a48716c0fd4b9d54a6e54c5f2f3e": "0x43c33c1937564800000",
        "0xd944c8a69ff2ca1249690c1229c7192f36251062": "0x6acb3df27e1f880000",
        "0xd94a57882a52739bbe2a0647c80c24f58a2b4f1c": "0x48b54e2adbe12b0000",
        "0xd95342953c8a21e8b635eefac7819bea30f17047": "0x13f06c7ffef05d400000",
        "0xd95c90ffbe5484864780b867494a83c89256d6e4": "0x58e7926ee858a00000",
        "0xd96711540e2e998343d4f590b6fc8fac3bb8b31d": "0x5f5a4068b71cb00000",
        "0xd96ac2507409c7a383ab2eee1822a5d738b36b56": "0xad78ebc5ac6200000",
        "0xd96db33b7b5a950c3efa2dc31b10ba10a532ef87": "0x6c6b935b8bbd400000",
        "0xd9775965b716476675a8d513eb14bbf7b07cd14a": "0x1132e6d2d23c5e40000",
        "0xd97bc84abd47c05bbf457b2ef659d61ca5e5e48f": "0x69d17119dc5a80000",
        "0xd97f4526dea9b163f8e8e33a6bcf92fb907de6ec": "0xf654aaf4db2f00000",
        "0xd97fe6f53f2a58f6d76d752adf74a8a2c18e9074": "0x10cdf9b69a43570000",
        "0xd99999a2490d9494a530cae4daf38554f4dd633e": "0x68155a43676e00000",
        "0xd99df7421b9382e42c89b006c7f087702a0757c0": "0x1a055690d9db800000",
        "0xd9b783d31d32adc50fa3eacaa15d92b568eaeb47": "0x733af90374c1b280000",
        "0xd9d370fec63576ab15b318bf9e58364dc2a3552a": "0x56bc75e2d63100000",
        "0xd9d42fd13ebd4bf69cac5e9c7e82483ab46dd7e9": "0x121ea68c114e5100000",
        "0xd9e27eb07dfc71a706060c7f079238ca93e88539": "0x3635c9adc5dea00000",
        "0xd9e3857efd1e202a441770a777a49dcc45e2e0d3": "0xc1daf81d8a3ce0000",
        "0xd9ec2efe99ff5cf00d03a8317b92a24aef441f7e": "0x6c6b935b8bbd400000",
        "0xd9ec8fe69b7716c0865af888a11b2b12f720ed33": "0xd8d726b7177a800000",
        "0xd9f1b26408f0ec67ad1d0d6fe22e8515e1740624": "0x14d1120d7b1600000",
        "0xd9f547f2c1de0ed98a53d161df57635dd21a00bd": "0x556f64c1fe7fa0000",
        "0xd9ff115d01266c9f73b063c1c238ef3565e63b36": "0x24dce54d34a1a00000",
        "0xda06044e293c652c467fe74146bf185b21338a1c": "0x3635c9adc5dea00000",
        "0xda0b48e489d302b4b7bf204f957c1c9be383b0df": "0x6c6b935b8bbd400000",
        "0xda0d4b7ef91fb55ad265f251142067f10376ced6": "0x43c33c1937564800000",
        "0xda10978a39a46ff0bb848cf65dd9c77509a6d70e": "0x6c6b935b8bbd400000",
        "0xda16dd5c3d1a2714358fe3752cae53dbab2be98c": "0x41bad155e6512200000",
        "0xda214c023e2326ff696c00393168ce46ffac39ec": "0x3635c9adc5dea00000",
        "0xda2a14f9724015d79014ed8e5909681d596148f1": "0x2a10f0f8a91ab8000",
        "0xda2ad58e77deddede2187646c465945a8dc3f641": "0x23c757072b8dd00000",
        "0xda3017c150dd0dce7fcf881b0a48d0d1c756c4c7": "0x56bf91b1a65eb0000",
        "0xda34b2eae30bafe8daeccde819a794cd89e09549": "0x6c6b935b8bbd400000",
        "0xda4a5f557f3bab390a92f49b9b900af30c46ae80": "0x21e19e0c9bab2400000",
        "0xda505537537ffb33c415fec64e69bae090c5f60f": "0x8ac7230489e800000",
        "0xda698d64c65c7f2b2c7253059cd3d181d899b6b7": "0x1004e2e45fb7ee0000",
        "0xda7732f02f2e272eaf28df972ecc0ddeed9cf498": "0xb20bfbf6967890000",
        "0xda7ad025ebde25d22243cb830ea1d3f64a566323": "0x1b1ae4d6e2ef500000",
        "0xda855d53477f505ec4c8d5e8bb9180d38681119c": "0x12f939c99edab800000",
        "0xda875e4e2f3cabe4f37e0eaed7d1f6dcc6ffef43": "0x6c6b935b8bbd400000",
        "0xda8bbee182e455d2098acb338a6d45b4b17ed8b6": "0x6c6b935b8bbd400000",
        "0xda982e9643ffece723075a40fe776e5ace04b29b": "0x8b8b6c9999bf20000",
        "0xda9f55460946d7bfb570ddec757ca5773b58429a": "0x1b845d769eb4480000",
        "0xdaa1bd7a9148fb865cd612dd35f162861d0f3bdc": "0xa638ab72d92c138000",
        "0xdaa63cbda45dd487a3f1cd4a746a01bb5e060b90": "0x10416d9b02a89240000",
        "0xdaa776a6754469d7b9267a89b86725e740da0fa0": "0x6acb3df27e1f880000",
        "0xdaac91c1e859d5e57ed3084b50200f9766e2c52b": "0x15af1d78b58c400000",
        "0xdaacdaf42226d15cb1cf98fa15048c7f4ceefe69": "0x1043561a8829300000",
        "0xdab6bcdb83cf24a0ae1cb21b3b5b83c2f3824927": "0xa968163f0a57b400000",
        "0xdabb0889fc042926b05ef57b2520910abc4b4149": "0x6c6b935b8bbd400000",
        "0xdabc225042a6592cfa13ebe54efa41040878a5a2": "0xe11fad5d85ca30000",
        "0xdac0c177f11c5c3e3e78f2efd663d13221488574": "0x3635c9adc5dea00000",
        "0xdad136b88178b4837a6c780feba226b98569a94c": "0xad78ebc5ac6200000",
        "0xdadbfafd8b62b92a24efd75256dd83abdbd7bbdb": "0x11164759ffb320000",
        "0xdadc00ab7927603c2fcf31cee352f80e6c4d6351": "0x6c66e9a55378b80000",
        "0xdae0d33eaa341569fa9ff5982684854a4a328a6e": "0x3635c9adc5dea00000",
        "0xdae7201eab8c063302930d693929d07f95e71962": "0x91aec028b419810000",
        "0xdaedd4ad107b271e89486cbf80ebd621dd974578": "0x6c6b935b8bbd400000",
        "0xdb04fad9c49f9e880beb8fcf1d3a3890e4b3846f": "0x435ae6cc0c58e50000",
        "0xdb0cc78f74d9827bdc8a6473276eb84fdc976212": "0x6c6b935b8bbd400000",
        "0xdb1293a506e90cad2a59e1b8561f5e66961a6788": "0x6c6b935b8bbd400000",
        "0xdb19a3982230368f0177219cb10cb259cdb2257c": "0x6c6b935b8bbd400000",
        "0xdb23a6fef1af7b581e772cf91882deb2516fc0a7": "0xad78ebc5ac6200000",
        "0xdb244f97d9c44b158a40ed9606d9f7bd38913331": "0x58788cb94b1d80000",
        "0xdb288f80ffe232c2ba47cc94c763cf6fc9b82b0d": "0x49b9ca9a694340000",
        "0xdb2a0c9ab64df58ddfb1dbacf8ba0d89c85b31b4": "0xd8d726b7177a800000",
        "0xdb34745ede8576b499db01beb7c1ecda85cf4abe": "0x4563918244f400000",
        "0xdb3f258ab2a3c2cf339c4499f75a4bd1d3472e9e": "0x5150ae84a8cdf00000",
        "0xdb4bc83b0e6baadb1156c5cf06e0f721808c52c7": "0x2fb474098f67c00000",
        "0xdb63122de7037da4971531fae9af85867886c692": "0xf0425b0641f340000",
        "0xdb6c2a73dac7424ab0d031b66761122566c01043": "0xa2a15d09519be00000",
        "0xdb6e560c9bc620d4bea3a94d47f7880bf47f2d5f": "0x4da0fdfcf05760000",
        "0xdb6ff71b3db0928f839e05a7323bfb57d29c87aa": "0x3154c9729d05780000",
        "0xdb73460b59d8e85045d5e752e62559875e42502e": "0x36330322d5238c0000",
        "0xdb77b88dcb712fd17ee91a5b94748d720c90a994": "0x6c6b935b8bbd400000",
        "0xdb7d4037081f6c65f9476b0687d97f1e044d0a1d": "0x23c757072b8dd00000",
        "0xdb882eacedd0eff263511b312adbbc59c6b8b25b": "0x1ed4fde7a2236b00000",
        "0xdb9371b30c4c844e59e03e924be606a938d1d310": "0x6c6b935b8bbd400000",
        "0xdba4796d0ceb4d3a836b84c96f910afc103f5ba0": "0x908f493f737410000",
        "0xdbadc61ed5f0460a7f18e51b2fb2614d9264a0e0": "0x22b1c8c1227a00000",
        "0xdbb6ac484027041642bbfd8d80f9d0c1cf33c1eb": "0x6c6b935b8bbd400000",
        "0xdbbcbb79bf479a42ad71dbcab77b5adfaa872c58": "0x5dc892aa1131c80000",
        "0xdbc1ce0e49b1a705d22e2037aec878ee0d75c703": "0xd8d726b7177a80000",
        "0xdbc1d0ee2bab531140de137722cd36bdb4e47194": "0xad78ebc5ac6200000",
        "0xdbc59ed88973dead310884223af49763c05030f1": "0x1158e460913d00000",
        "0xdbc66965e426ff1ac87ad6eb78c1d95271158f9f": "0xfc936392801c0000",
        "0xdbcbcd7a57ea9db2349b878af34b1ad642a7f1d1": "0xad78ebc5ac6200000",
        "0xdbd51cdf2c3bfacdff106221de2e19ad6d420414": "0x5f68e8131ecf800000",
        "0xdbd71efa4b93c889e76593de609c3b04cbafbe08": "0x1158e460913d00000",
        "0xdbf5f061a0f48e5e69618739a77d2ec19768d201": "0x83d6c7aab63600000",
        "0xdbf8b13967f55125272de0562536c450ba5655a0": "0x6ef578f06e0ccb0000",
        "0xdbfb1bb464b8a58e500d2ed8de972c45f5f1c0fb": "0x56bc75e2d631000000",
        "0xdc067ed3e12d711ed475f5156ef7e71a80d934b9": "0x205b4dfa1ee74780000",
        "0xdc087f9390fb9e976ac23ab689544a0942ec2021": "0x62a992e53a0af00000",
        "0xdc1eb9b6e64351f56424509645f83e79eee76cf4": "0xd8d726b7177a800000",
        "0xdc1f1979615f082140b8bb78c67b27a1942713b1": "0x340aad21b3b700000",
        "0xdc23b260fcc26e7d10f4bd044af794579460d9da": "0x1b1b6bd7af64c70000",
        "0xdc29119745d2337320da51e19100c948d980b915": "0x8ac7230489e800000",
        "0xdc2d15a69f6bb33b246aef40450751c2f6756ad2": "0x6c341080bd1fb00000",
        "0xdc3dae59ed0fe18b58511e6fe2fb69b219689423": "0x56bc75e2d63100000",
        "0xdc3f0e7672f71fe7525ba30b9755183a20b9166a": "0x2089cf57b5b3e968000",
        "0xdc4345d6812e870ae90c568c67d2c567cfb4f03c": "0x16b352da5e0ed300000",
        "0xdc44275b1715baea1b0345735a29ac42c9f51b4f": "0x3f19beb8dd1ab00000",
        "0xdc46c13325cd8edf0230d068896486f007bf4ef1": "0x487a9a304539440000",
        "0xdc51b2dc9d247a1d0e5bc36ca3156f7af21ff9f6": "0x3635c9adc5dea00000",
        "0xdc5305b4020a06b49d657c7ca34c35c91c5f2c56": "0x17df6c10dbeba970000",
        "0xdc57345b38e0f067c9a31d9deac5275a10949321": "0xad78ebc5ac6200000",
        "0xdc57477dafa42f705c7fe40eae9c81756e0225f1": "0x1b1b8128a7416e0000",
        "0xdc5f5ad663a6f263327d64cac9cb133d2c960597": "0x6c6b935b8bbd400000",
        "0xdc703a5f3794c84d6cb3544918cae14a35c3bd4f": "0x6449e84e47a8a80000",
        "0xdc738fb217cead2f69594c08170de1af10c419e3": "0x152d02c7e14af6800000",
        "0xdc76e85ba50b9b31ec1e2620bce6e7c8058c0eaf": "0x1158e460913d00000",
        "0xdc83b6fd0d512131204707eaf72ea0c8c9bef976": "0x6c6b935b8bbd400000",
        "0xdc8c2912f084a6d184aa73638513ccbc326e0102": "0x4633bc36cbc2dc0000",
        "0xdc911cf7dc5dd0813656670528e9338e67034786": "0x6c6b935b8bbd400000",
        "0xdcb03bfa6c1131234e56b7ea7c4f721487546b7a": "0x487a9a304539440000",
        "0xdcb64df43758c7cf974fa660484fbb718f8c67c1": "0x43c33c1937564800000",
        "0xdcc52d8f8d9fc742a8b82767f0555387c563efff": "0x1b1ae4d6e2ef500000",
        "0xdccb370ed68aa922283043ef7cad1b9d403fc34a": "0xd8d726b7177a800000",
        "0xdccca42045ec3e16508b603fd936e7fd7de5f36a": "0x11164759ffb320000",
        "0xdcd10c55bb854f754434f1219c2c9a98ace79f03": "0xd8d8583fa2d52f0000",
        "0xdcd5bca2005395b675fde5035659b26bfefc49ee": "0xaadec983fcff40000",
        "0xdcdbbd4e2604e40e1710cc6730289dccfad3892d": "0xf95dd2ec27cce00000",
        "0xdce30c31f3ca66721ecb213c809aab561d9b52e4": "0x6c6b935b8bbd400000",
        "0xdcf33965531380163168fc11f67e89c6f1bc178a": "0x122776853406b08000",
        "0xdcf6b657266e91a4dae6033ddac15332dd8d2b34": "0x5f68e8131ecf800000",
        "0xdcf9719be87c6f46756db4891db9b611d2469c50": "0x3635c9adc5dea00000",
        "0xdcfff3e8d23c2a34b56bd1b3bd45c79374432239": "0x10f0cf064dd59200000",
        "0xdd04eee74e0bf30c3f8d6c2c7f52e0519210df93": "0x4563918244f400000",
        "0xdd26b429fd43d84ec179825324bad5bfb916b360": "0x116bf95bc8432980000",
        "0xdd2a233adede66fe1126d6c16823b62a021feddb": "0x6c6b935b8bbd400000",
        "0xdd2bdfa917c1f310e6fa35aa8af16939c233cd7d": "0x15af1d78b58c400000",
        "0xdd35cfdbcb993395537aecc9f59085a8d5ddb6f5": "0x3635c9adc5dea00000",
        "0xdd47189a3e64397167f0620e484565b762bfbbf4": "0x6449e84e47a8a80000",
        "0xdd4dd6d36033b0636fcc8d0938609f4dd64f4a86": "0x340aad21b3b700000",
        "0xdd4f5fa2111db68f6bde3589b63029395b69a92d": "0x8963dd8c2c5e00000",
        "0xdd63042f25ed32884ad26e3ad959eb94ea36bf67": "0x484d7fde7d593f00000",
        "0xdd65f6e17163b5d203641f51cc7b24b00f02c8fb": "0xad78ebc5ac6200000",
        "0xdd6c062193eac23d2fdbf997d5063a346bb3b470": "0x1158e460913d00000",
        "0xdd7bcda65924aaa49b80984ae173750258b92847": "0x21e19e0c9bab2400000",
        "0xdd7ff441ba6ffe3671f3c0dabbff1823a5043370": "0x6c6b935b8bbd400000",
        "0xdd8254121a6e942fc90828f2431f511dad7f32e6": "0xa39b29e1f360e80000",
        "0xdd8af9e7765223f4446f44d3d509819a3d3db411": "0x21e19e0c9bab2400000",
        "0xdd95dbe30f1f1877c5dd7684aeef302ab6885192": "0x1c5d8d6eb3e32500000",
        "0xdd967c4c5f8ae47e266fb416aad1964ee3e7e8c3": "0x1a420db02bd7d580000",
        "0xdd9b485a3b1cd33a6a9c62f1e5bee92701856d25": "0xc3383ed031b7e8000",
        "0xdda371e600d30688d4710e088e02fdf2b9524d5f": "0x177224aa844c7200000",
        "0xdda4ed2a58a8dd20a73275347b580d71b95bf99a": "0x15a13cc201e4dc0000",
        "0xdda4ff7de491c687df4574dd1b17ff8f246ba3d1": "0x42684a41abfd8400000",
        "0xddab6b51a9030b40fb95cf0b748a059c2417bec7": "0x6c6b935b8bbd400000",
        "0xddab75fb2ff9fecb88f89476688e2b00e367ebf9": "0x41bad155e6512200000",
        "0xddabf13c3c8ea4e3d73d78ec717afafa430e5479": "0x8cf23f909c0fa000000",
        "0xddac312a9655426a9c0c9efa3fd82559ef4505bf": "0x15be6174e1912e0000",
        "0xddac6bf4bbdd7d597d9c686d0695593bedccc7fa": "0x2ee449550898e40000",
        "0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a": "0x21e19e0c9bab2400000",
        "0xddbddd1bbd38ffade0305d30f02028d92e9f3aa8": "0x6c6b935b8bbd400000",
        "0xddbee6f094eae63420b003fb4757142aea6cd0fd": "0x6c6b935b8bbd400000",
        "0xddd69c5b9bf5eb5a39cee7c3341a120d973fdb34": "0x6bc14b8f8e1b350000",
        "0xdddd7b9e6eab409b92263ac272da801b664f8a57": "0x69e10de76676d0800000",
        "0xdde670d01639667576a22dd05d3246d61f06e083": "0x1731790534df20000",
        "0xdde77a4740ba08e7f73fbe3a1674912931742eeb": "0x434fe4d4382f1d48000",
        "0xdde8f0c31b7415511dced1cd7d46323e4bd12232": "0x57473d05dabae80000",
        "0xdde969aef34ea87ac299b7597e292b4a0155cc8a": "0x1032f2594a01738000",
        "0xddf0cce1fe996d917635f00712f4052091dff9ea": "0x6c6b935b8bbd400000",
        "0xddf3ad76353810be6a89d731b787f6f17188612b": "0x43c33c1937564800000",
        "0xddf5810a0eb2fb2e32323bb2c99509ab320f24ac": "0x3ca5c66d9bc44300000",
        "0xddf95c1e99ce2f9f5698057c19d5c94027ee4a6e": "0x14542ba12a337c00000",
        "0xddfafdbc7c90f1320e54b98f374617fbd01d109f": "0xb98bc829a6f90000",
        "0xddfcca13f934f0cfbe231da13039d70475e6a1d0": "0x3638221660a5aa8000",
        "0xde027efbb38503226ed871099cb30bdb02af1335": "0x3635c9adc5dea00000",
        "0xde06d5ea777a4eb1475e605dbcbf43444e8037ea": "0xa968163f0a57b400000",
        "0xde07fb5b7a464e3ba7fbe09e9acb271af5338c58": "0x2b5e3af16b1880000",
        "0xde1121829c9a08284087a43fbd2fc1142a3233b4": "0x3635c9adc5dea00000",
        "0xde176b5284bcee3a838ba24f67fc7cbf67d78ef6": "0x209ce08c962b00000",
        "0xde212293f8f1d231fa10e609470d512cb8ffc512": "0x6c6b935b8bbd400000",
        "0xde30e49e5ab313214d2f01dcabce8940b81b1c76": "0xaadec983fcff40000",
        "0xde33d708a3b89e909eaf653b30fdc3a5d5ccb4b3": "0x99c88229fd4c20000",
        "0xde374299c1d07d79537385190f442ef9ca24061f": "0x73f75d1a085ba0000",
        "0xde42fcd24ce4239383304367595f068f0c610740": "0x2722a70f1a9a00000",
        "0xde50868eb7e3c71937ec73fa89dd8b9ee10d45aa": "0x3635c9adc5dea00000",
        "0xde55de0458f850b37e4d78a641dd2eb2dd8f38ce": "0xd8d726b7177a800000",
        "0xde5b005fe8daae8d1f05de3eda042066c6c4691c": "0x3ba1910bf341b00000",
        "0xde612d0724e84ea4a7feaa3d2142bd5ee82d3201": "0x1158e460913d00000",
        "0xde6d363106cc6238d2f092f0f0372136d1cd50c6": "0x121ea68c114e5100000",
        "0xde7dee220f0457a7187d56c1c41f2eb00ac56021": "0x2225f39c85052a0000",
        "0xde82cc8d4a1bb1d9434392965b3e80bad3c03d4f": "0x50186e75de97a60000",
        "0xde97f4330700b48c496d437c91ca1de9c4b01ba4": "0x9dcc0515b56e0c0000",
        "0xde9eff4c798811d968dccb460d9b069cf30278e0": "0x15af1d78b58c400000",
        "0xdeb1bc34d86d4a4dde2580d8beaf074eb0e1a244": "0x55a6e79ccd1d300000",
        "0xdeb2495d6aca7b2a6a2d138b6e1a42e2dc311fdd": "0x6c6b935b8bbd400000",
        "0xdeb97254474c0d2f5a7970dcdb2f52fb1098b896": "0x3635c9adc5dea00000",
        "0xdeb9a49a43873020f0759185e20bbb4cf381bb8f": "0xb78edb0bf2e5e0000",
        "0xdebbdd831e0f20ae6e378252decdf92f7cf0c658": "0x6c6b935b8bbd400000",
        "0xdec3eec2640a752c466e2b7e7ee685afe9ac41f4": "0x47c99753596b288000",
        "0xdec82373ade8ebcf2acb6f8bc2414dd7abb70d77": "0xad78ebc5ac6200000",
        "0xdec8a1a898f1b895d8301fe64ab3ad5de941f689": "0x2ab4f67e8a730f8000",
        "0xdec99e972fca7177508c8e1a47ac22d768acab7c": "0x6c6b935b8bbd400000",
        "0xded877378407b94e781c4ef4af7cfc5bc220b516": "0x143179d86911020000",
        "0xdee942d5caf5fac11421d86b010b458e5c392990": "0xd8d726b7177a800000",
        "0xdeee2689fa9006b59cf285237de53b3a7fd01438": "0x186579f29e20250000",
        "0xdefddfd59b8d2c154eecf5c7c167bf0ba2905d3e": "0x512cb5e2647420000",
        "0xdefe9141f4704599159d7b223de42bffd80496b3": "0x56bc75e2d63100000",
        "0xdf098f5e4e3dffa51af237bda8652c4f73ed9ca6": "0x1b36a6444a3e180000",
        "0xdf0d08617bd252a911df8bd41a39b83ddf809673": "0x21e19e0c9bab2400000",
        "0xdf0ff1f3d27a8ec9fb8f6b0cb254a63bba8224a5": "0xecc5202945d0020000",
        "0xdf1fa2e20e31985ebe2c0f0c93b54c0fb67a264b": "0xad78ebc5ac6200000",
        "0xdf211cd21288d6c56fae66c3ff54625dd4b15427": "0x8786cd764e1f2c0000",
        "0xdf236bf6abf4f3293795bf0c28718f93e3b1b36b": "0x487a9a304539440000",
        "0xdf31025f5649d2c6eea41ed3bdd3471a790f759a": "0x1158e460913d00000",
        "0xdf37c22e603aedb60a627253c47d8ba866f6d972": "0x5150ae84a8cdf000000",
        "0xdf3b72c5bd71d4814e88a62321a93d4011e3578b": "0xd8d726b7177a800000",
        "0xdf3f57b8ee6434d047223def74b20f63f9e4f955": "0xd9462c6cb4b5a0000",
        "0xdf44c47fc303ac76e74f97194cca67b5bb3c023f": "0x2009c5c8bf6fdc0000",
        "0xdf47a61b72535193c561cccc75c3f3ce0804a20e": "0x15935c0b4e3d780000",
        "0xdf47a8ef95f2f49f8e6f58184154145d11f72797": "0x678a932062e4180000",
        "0xdf53003346d65c5e7a646bc034f2b7d32fcbe56a": "0x6c6b935b8bbd400000",
        "0xdf57353aaff2aadb0a04f9014e8da7884e86589c": "0x84886a66e4fb00000",
        "0xdf60f18c812a11ed4e2776e7a80ecf5e5305b3d6": "0x30ca024f987b900000",
        "0xdf6485c4297ac152b289b19dde32c77ec417f47d": "0x3635c9adc5dea00000",
        "0xdf660a91dab9f730f6190d50c8390561500756ca": "0x6c6b935b8bbd400000",
        "0xdf6ed6006a6abe886ed33d95a4de28fc12183927": "0x3154c9729d05780000",
        "0xdf8510793eee811c2dab1c93c6f4473f30fbef5b": "0x3635c9adc5dea00000",
        "0xdf8d48b1eb07b3c217790e6c2df04dc319e7e848": "0x1b1ae4d6e2ef500000",
        "0xdfa6b8b8ad3184e357da282951d79161cfb089bc": "0x15af1d78b58c400000",
        "0xdfaf31e622c03d9e18a0ddb8be60fbe3e661be0a": "0x21e171a3ec9f72c0000",
        "0xdfb1626ef48a1d7d7552a5e0298f1fc23a3b482d": "0x5ce895dd949efa0000",
        "0xdfb4d4ade52fcc818acc7a2c6bb2b00224658f78": "0x1a420db02bd7d580000",
        "0xdfbd4232c17c407a980db87ffbcda03630e5c459": "0x1dfc7f924923530000",
        "0xdfcbdf09454e1a5e4a40d3eef7c5cf1cd3de9486": "0xd8d726b7177a800000",
        "0xdfdbcec1014b96da2158ca513e9c8d3b9af1c3d0": "0x6c6b935b8bbd400000",
        "0xdfded2574b27d1613a7d98b715159b0d00baab28": "0x43c33c1937564800000",
        "0xdfdf43393c649caebe1bb18059decb39f09fb4e8": "0x15af1d78b58c400000",
        "0xdfe3c52a92c30396a4e33a50170dc900fcf8c9cf": "0x2b5e3af16b1880000",
        "0xdfe549fe8430e552c6d07cc3b92ccd43b12fb50f": "0x48875eaf6562a0000",
        "0xdfe929a61c1b38eddbe82c25c2d6753cb1e12d68": "0x15d1cf4176aeba0000",
        "0xdff1b220de3d8e9ca4c1b5be34a799bcded4f61c": "0x14e4e353ea39420000",
        "0xdff4007931786593b229efe5959f3a4e219e51af": "0x10afc1ade3b4ed40000",
        "0xdffcea5421ec15900c6ecfc777184e140e209e24": "0x115473824344e0000",
        "0xe001aba77c02e172086c1950fffbcaa30b83488f": "0x6acb3df27e1f880000",
        "0xe00484788db50fc6a48e379d123e508b0f6e5ab1": "0x3635c9adc5dea00000",
        "0xe0060462c47ff9679baef07159cae08c29f274a9": "0x6c6b935b8bbd400000",
        "0xe00d153b10369143f97f54b8d4ca229eb3e8f324": "0x83d6c7aab63600000",
        "0xe012db453827a58e16c1365608d36ed658720507": "0x6c6b935b8bbd400000",
        "0xe01547ba42fcafaf93938becf7699f74290af74f": "0x6c6b935b8bbd400000",
        "0xe016dc138e25815b90be3fe9eee8ffb2e105624f": "0x1b1ae4d6e2ef500000",
        "0xe01859f242f1a0ec602fa8a3b0b57640ec89075e": "0x1e162c177be5cc0000",
        "0xe020e86362b487752836a6de0bc02cd8d89a8b6a": "0x14542ba12a337c00000",
        "0xe023f09b2887612c7c9cf1988e3a3a602b3394c9": "0x6c6b935b8bbd400000",
        "0xe0272213e8d2fd3e96bd6217b24b4ba01b617079": "0x1158e460913d00000",
        "0xe02b74a47628be315b1f76b315054ad44ae9716f": "0xd8d726b7177a800000",
        "0xe03220c697bcd28f26ef0b74404a8beb06b2ba7b": "0x1b1ae4d6e2ef5000000",
        "0xe0352fdf819ba265f14c06a6315c4ac1fe131b2e": "0x3635c9adc5dea00000",
        "0xe0388aeddd3fe2ad56f85748e80e710a34b7c92e": "0x1b1ae4d6e2ef500000",
        "0xe03c00d00388ecbf4f263d0ac778bb41a57a40d9": "0x3636c9796436740000",
        "0xe04920dc6ecc1d6ecc084f88aa0af5db97bf893a": "0x9ddc1e3b901180000",
        "0xe04972a83ca4112bc871c72d4ae1616c2f0728db": "0xe81c77f29a32f0000",
        "0xe04ff5e5a7e2af995d8857ce0290b53a2b0eda5d": "0x3635c9adc5dea00000",
        "0xe05029aceb0778675bef1741ab2cd2931ef7c84b": "0x10f0dbae61009528000",
        "0xe056bf3ff41c26256fef51716612b9d39ade999c": "0x56be757a12e0a8000",
        "0xe061a4f2fc77b296d19ada238e49a5cb8ecbfa70": "0xd8d726b7177a800000",
        "0xe0663e8cd66792a641f56e5003660147880f018e": "0x6c6b935b8bbd400000",
        "0xe0668fa82c14d6e8d93a53113ef2862fa81581bc": "0x2f2f39fc6c54000000",
        "0xe069c0173352b10bf6834719db5bed01adf97bbc": "0x10634f8e5323b0000",
        "0xe06c29a81517e0d487b67fb0b6aabc4f57368388": "0x15be6174e1912e0000",
        "0xe06cb6294704eea7437c2fc3d30773b7bf38889a": "0x116dc3a8994b30000",
        "0xe07137ae0d116d033533c4eab496f8a9fb09569c": "0x4be4e7267b6ae00000",
        "0xe076db30ab486f79194ebbc45d8fab9a9242f654": "0x106607e3494baa00000",
        "0xe07ebbc7f4da416e42c8d4f842aba16233c12580": "0x6c6b935b8bbd400000",
        "0xe081ca1f4882db6043d5a9190703fde0ab3bf56d": "0x15af1d78b58c400000",
        "0xe083d34863e0e17f926b7928edff317e998e9c4b": "0x15af1d78b58c400000",
        "0xe08b9aba6bd9d28bc2056779d2fbf0f2855a3d9d": "0x6c6b935b8bbd400000",
        "0xe08bc29c2b48b169ff2bdc16714c586e6cb85ccf": "0x1158e460913d00000",
        "0xe08c60313106e3f9334fe6f7e7624d211130c077": "0x22b1c8c1227a00000",
        "0xe09c68e61998d9c81b14e4ee802ba7adf6d74cdb": "0xd8d726b7177a800000",
        "0xe09fea755aee1a44c0a89f03b5deb762ba33006f": "0x3ba289bc944ff70000",
        "0xe0a254ac09b9725bebc8e460431dd0732ebcabbf": "0x14542ba12a337c00000",
        "0xe0aa69365555b73f282333d1e30c1bbd072854e8": "0x17b7883c06916600000",
        "0xe0bad98eee9698dbf6d76085b7923de5754e906d": "0x90d972f32323c0000",
        "0xe0c4ab9072b4e6e3654a49f8a8db026a4b3386a9": "0x6c6b935b8bbd400000",
        "0xe0ce80a461b648a501fd0b824690c8868b0e4de8": "0x1b1ae4d6e2ef500000",
        "0xe0cf698a053327ebd16b7d7700092fe2e8542446": "0x52a34cbb61f578000",
        "0xe0d231e144ec9107386c7c9b02f1702ceaa4f700": "0x10f0dbae61009528000",
        "0xe0d76b7166b1f3a12b4091ee2b29de8caa7d07db": "0x6c6b935b8bbd400000",
        "0xe0e0b2e29dde73af75987ee4446c829a189c95bc": "0x813ca56906d340000",
        "0xe0e978753d982f7f9d1d238a18bd4889aefe451b": "0x20dd68aaf3289100000",
        "0xe0f372347c96b55f7d4306034beb83266fd90966": "0x15af1d78b58c400000",
        "0xe0f903c1e48ac421ab48528f3d4a2648080fe043": "0x3708baed3d68900000",
        "0xe0ff0bd9154439c4a5b7233e291d7d868af53f33": "0x1579216a51bbfb0000",
        "0xe10ac19c546fc2547c61c139f5d1f45a6666d5b0": "0x102da6fd0f73a3c0000",
        "0xe10c540088113fa6ec00b4b2c8824f8796e96ec4": "0x320f4509ab1ec7c00000",
        "0xe1173a247d29d8238df0922f4df25a05f2af77c3": "0x878c95d560f30478000",
        "0xe1203eb3a723e99c2220117ca6afeb66fa424f61": "0x200ef929e3256fe0000",
        "0xe131f87efc5ef07e43f0f2f4a747b551d750d9e6": "0x43c25e0dcc1bd1c0000",
        "0xe1334e998379dfe983177062791b90f80ee22d8d": "0x1b1ae4d6e2ef500000",
        "0xe13540ecee11b212e8b775dc8e71f374aae9b3f8": "0x6c6b935b8bbd400000",
        "0xe13b3d2bbfdcbc8772a23315724c1425167c5688": "0x37f379141ed04b8000",
        "0xe1443dbd95cc41237f613a48456988a04f683282": "0xd8d8583fa2d52f0000",
        "0xe14617f6022501e97e7b3e2d8836aa61f0ff2dba": "0xad78ebc5ac6200000",
        "0xe149b5726caf6d5eb5bf2acc41d4e2dc328de182": "0x692ae8897081d00000",
        "0xe154daeadb545838cbc6aa0c55751902f528682a": "0x10afc1ade3b4ed40000",
        "0xe16ce35961cd74bd590d04c4ad4a1989e05691c6": "0x7ea28327577080000",
        "0xe172dfc8f80cd1f8cd8539dc26082014f5a8e3e8": "0xa2a15d09519be00000",
        "0xe177e0c201d335ba3956929c571588b51c5223ae": "0x6c6b935b8bbd400000",
        "0xe17812f66c5e65941e186c46922b6e7b2f0eeb46": "0x62a992e53a0af00000",
        "0xe180de9e86f57bafacd7904f9826b6b4b26337a3": "0x2d041d705a2c600000",
        "0xe192489b85a982c1883246d915b229cb13207f38": "0x10f0cf064dd59200000",
        "0xe1953c6e975814c571311c34c0f6a99cdf48ab82": "0x2b5e3af16b1880000",
        "0xe1ae029b17e373cde3de5a9152201a14cac4e119": "0x56b55ae58ca400000",
        "0xe1b2aca154b8e0766c4eba30bc10c7f35036f368": "0x115473824344e0000",
        "0xe1b39b88d9900dbc4a6cdc481e1060080a8aec3c": "0x6c6b935b8bbd400000",
        "0xe1b63201fae1f129f95c7a116bd9dde5159c6cda": "0x4d60573a2f0c9ef0000",
        "0xe1bfaa5a45c504428923c4a61192a55b1400b45d": "0x90f534608a72880000",
        "0xe1c607c0a8a060da8f02a8eb38a013ea8cda5b8c": "0x2ba39e82ed5d740000",
        "0xe1cb83ec5eb6f1eeb85e99b2fc63812fde957184": "0x43c33c1937564800000",
        "0xe1d91b0954cede221d6f24c7985fc59965fb98b8": "0x6c6b935b8bbd400000",
        "0xe1dfb5cc890ee8b2877e885d267c256187d019e6": "0x56bc75e2d63100000",
        "0xe1e8c50b80a352b240ce7342bbfdf5690cc8cb14": "0x155bd9307f9fe80000",
        "0xe1f63ebbc62c7b7444040eb99623964f7667b376": "0x1158e460913d00000",
        "0xe206fb7324e9deb79e19903496d6961b9be56603": "0x56bc75e2d63100000",
        "0xe207578e1f4ddb8ff6d5867b39582d71b9812ac5": "0xd255d112e103a00000",
        "0xe208812a684098f3da4efe6aba256256adfe3fe6": "0x6c6b935b8bbd400000",
        "0xe20954d0f4108c82d4dcb2148d26bbd924f6dd24": "0x21e19e0c9bab2400000",
        "0xe20bb9f3966419e14bbbaaaa6789e92496cfa479": "0xbbd825030752760000",
        "0xe20d1bcb71286dc7128a9fc7c6ed7f733892eef5": "0x3664f8e7c24af40000",
        "0xe2191215983f33fd33e22cd4a2490054da53fddc": "0xdb44e049bb2c0000",
        "0xe2198c8ca1b399f7521561fd5384a7132fba486b": "0x3708baed3d68900000",
        "0xe21c778ef2a0d7f751ea8c074d1f812243863e4e": "0x11fc70e2c8c8ae18000",
        "0xe229e746a83f2ce253b0b03eb1472411b57e5700": "0x1369fb96128ac480000",
        "0xe22b20c77894463baf774cc256d5bddbbf7ddd09": "0x3635c9adc5dea00000",
        "0xe230fe1bff03186d0219f15d4c481b7d59be286a": "0x1fd741e8088970000",
        "0xe237baa4dbc9926e32a3d85d1264402d54db012f": "0x6c6b935b8bbd400000",
        "0xe24109be2f513d87498e926a286499754f9ed49e": "0x300ea8ad1f27ca0000",
        "0xe246683cc99db7c4a52bcbacaab0b32f6bfc93d7": "0x6c6b935b8bbd400000",
        "0xe25a167b031e84616d0f013f31bda95dcc6350b9": "0x23c757072b8dd000000",
        "0xe25b9f76b8ad023f057eb11ad94257a0862e4e8c": "0x6c6b935b8bbd400000",
        "0xe26657f0ed201ea2392c9222b80a7003608ddf30": "0x22b1c8c1227a00000",
        "0xe26bf322774e18288769d67e3107deb7447707b8": "0x6c6b935b8bbd400000",
        "0xe2728a3e8c2aaac983d05dc6877374a8f446eee9": "0xab640391201300000",
        "0xe28b062259e96eeb3c8d4104943f9eb325893cf5": "0x487a9a304539440000",
        "0xe28dbc8efd5e416a762ec0e018864bb9aa83287b": "0x531f200ab3e030a8000",
        "0xe2904b1aefa056398b6234cb35811288d736db67": "0x22b1c8c1227a00000",
        "0xe29d8ae452dcf3b6ac645e630409385551faae0a": "0x45a0da4adf5420000",
        "0xe2bbf84641e3541f6c33e6ed683a635a70bde2ec": "0x1b413cfcbf59b78000",
        "0xe2cf360aa2329eb79d2bf7ca04a27a17c532e4d8": "0x58788cb94b1d80000",
        "0xe2df23f6ea04becf4ab701748dc0963184555cdb": "0x6c6b935b8bbd400000",
        "0xe2e15c60dd381e3a4be25071ab249a4c5c5264da": "0x7f6bc49b81b5370000",
        "0xe2e26e4e1dcf30d048cc6ecf9d51ec1205a4e926": "0xd8d726b7177a800000",
        "0xe2ee691f237ee6529b6557f2fcdd3dcf0c59ec63": "0x127729c14687c200000",
        "0xe2efa5fca79538ce6068bf31d2c516d4d53c08e5": "0x71cc408df63400000",
        "0xe2efd0a9bc407ece03d67e8ec8e9d283f48d2a49": "0x299b33bf9c584e00000",
        "0xe2f40d358f5e3fe7463ec70480bd2ed398a7063b": "0x1158e460913d00000",
        "0xe2f9383d5810ea7b43182b8704b62b27f5925d39": "0x15af1d78b58c400000",
        "0xe2ff9ee4b6ecc14141cc74ca52a9e7a2ee14d908": "0x4be4e7267b6ae00000",
        "0xe30212b2011bb56bdbf1bc35690f3a4e0fd905ea": "0x1b2df9d219f57980000",
        "0xe303167f3d4960fe881b32800a2b4aeff1b088d4": "0x6c6b935b8bbd400000",
        "0xe304a32f05a83762744a9542976ff9b723fa31ea": "0x5572f240a346200000",
        "0xe308435204793764f5fcbe65eb510f5a744a655a": "0xad78ebc5ac6200000",
        "0xe309974ce39d60aadf2e69673251bf0e04760a10": "0xdc55fdb17647b0000",
        "0xe31b4eef184c24ab098e36c802714bd4743dd0d4": "0xad78ebc5ac6200000",
        "0xe321bb4a946adafdade4571fb15c0043d39ee35f": "0x556475382b4c9e0000",
        "0xe3263ce8af6db3e467584502ed7109125eae22a5": "0x6c6b935b8bbd400000",
        "0xe32b1c4725a1875449e98f970eb3e54062d15800": "0xad78ebc5ac6200000",
        "0xe32f95766d57b5cd4b173289d6876f9e64558194": "0x56bc75e2d63100000",
        "0xe33840d8bca7da98a6f3d096d83de78b70b71ef8": "0x6c6b935b8bbd400000",
        "0xe338e859fe2e8c15554848b75caecda877a0e832": "0x61acff81a78ad40000",
        "0xe33d980220fab259af6a1f4b38cf0ef3c6e2ea1a": "0x6c6b935b8bbd400000",
        "0xe33df4ce80ccb62a76b12bcdfcecc46289973aa9": "0x14542ba12a337c00000",
        "0xe33ff987541dde5cdee0a8a96dcc3f33c3f24cc2": "0x2a5a058fc295ed000000",
        "0xe3410bb7557cf91d79fa69d0dfea0aa075402651": "0x6c6b935b8bbd400000",
        "0xe341642d40d2afce2e9107c67079ac7a2660086c": "0x15af1d78b58c400000",
        "0xe35453eef2cc3c7a044d0ac134ba615908fa82ee": "0x7ff1ccb7561df0000",
        "0xe36a8ea87f1e99e8a2dc1b2608d166667c9dfa01": "0x56bc75e2d63100000",
        "0xe3712701619ca7623c55db3a0ad30e867db0168b": "0x1158e460913d00000",
        "0xe37f5fdc6ec97d2f866a1cfd0d3a4da4387b22b5": "0x21e19e0c9bab2400000",
        "0xe3878f91ca86053fced5444686a330e09cc388fb": "0xa844a7424d9c80000",
        "0xe38b91b35190b6d9deed021c30af094b953fdcaa": "0x1ceaf795b6b860000",
        "0xe38ef28a5ed984a7db24a1ae782dfb87f397dfc6": "0x7c0860e5a80dc0000",
        "0xe3925509c8d0b2a6738c5f6a72f35314491248ce": "0x36e9a8669a44768000",
        "0xe3933d61b77dcdc716407f8250bc91e4ffaeb09d": "0x1256986c95891c200000",
        "0xe3951de5aefaf0458768d774c254f7157735e505": "0x56c95de8e8ca1d0000",
        "0xe399c81a1d701b44f0b66f3399e66b275aaaf8c1": "0x3635c9adc5dea00000",
        "0xe39b11a8ab1ff5e22e5ae6517214f73c5b9b55dc": "0x6c6b935b8bbd400000",
        "0xe39e46e15d22ce56e0c32f1877b7d1a264cf94f3": "0x43c33c1937564800000",
        "0xe3a4621b66004588e31206f718cb00a319889cf0": "0x6c6b935b8bbd400000",
        "0xe3a4f83c39f85af9c8b1b312bfe5fc3423afa634": "0x18d993f34aef10000",
        "0xe3a89a1927cc4e2d43fbcda1e414d324a7d9e057": "0xb23e2a936dec60000",
        "0xe3ab3ca9b870e3f548517306bba4de2591afafc2": "0x410e34aecc8cd30000",
        "0xe3b3d2c9bf570be6a2f72adca1862c310936a43c": "0x56d2aa3a5c09a0000",
        "0xe3c0c128327a9ad80148139e269773428e638cb0": "0x6c6b935b8bbd400000",
        "0xe3c812737ac606baf7522ad817428a36050e7a34": "0x692ae8897081d00000",
        "0xe3cffe239c64e7e20388e622117391301b298696": "0x1b1ae4d6e2ef500000",
        "0xe3d3eaa299887865569e88be219be507189be1c9": "0x18ba6fa92e93160000",
        "0xe3d8bf4efe84b1616d1b89e427ddc6c8830685ae": "0x6c6b935b8bbd400000",
        "0xe3d915eda3b825d6ee4af9328d32ac18ada35497": "0x1b1ae4d6e2ef500000",
        "0xe3da4f3240844c9b6323b4996921207122454399": "0x27190a952df4be58000",
        "0xe3eb2c0a132a524f72ccc0d60fee8b41685d39e2": "0x6acb3df27e1f880000",
        "0xe3ec18a74ed43855409a26ade7830de8e42685ef": "0x11164759ffb320000",
        "0xe3ece1f632711d13bfffa1f8f6840871ee58fb27": "0xd8d726b7177a800000",
        "0xe3f80b40fb83fb97bb0d5230af4f6ed59b1c7cc8": "0x487a9a304539440000",
        "0xe3ffb02cb7d9ea5243701689afd5d417d7ed2ece": "0x43a77aabd00780000",
        "0xe400d651bb3f2d23d5f849e6f92d9c5795c43a8a": "0x90f534608a72880000",
        "0xe406f5dd72cab66d8a6ecbd6bfb494a7b6b09afe": "0x56bc75e2d63100000",
        "0xe408aa99835307eea4a6c5eb801fe694117f707d": "0x1b1ae4d6e2ef500000",
        "0xe408fceaa1b98f3c640f48fcba39f056066d6308": "0x21e19e0c9bab2400000",
        "0xe40a7c82e157540a0b00901dbb86c716e1a062da": "0x2b31d2425f6740000",
        "0xe41aea250b877d423a63ba2bce2f3a61c0248d56": "0xe18398e7601900000",
        "0xe430c0024fdbf73a82e21fccf8cbd09138421c21": "0xd8d726b7177a800000",
        "0xe4324912d64ea3aef76b3c2ff9df82c7e13ae991": "0x6c6b935b8bbd400000",
        "0xe4368bc1420b35efda95fafbc73090521916aa34": "0xd8d726b7177a800000",
        "0xe437acbe0f6227b0e36f36e4bcf7cf613335fb68": "0xad78ebc5ac6200000",
        "0xe44b7264dd836bee8e87970340ed2b9aed8ed0a5": "0x138e7faa01a803a0000",
        "0xe44ea51063405154aae736be2bf1ee3b9be639ae": "0xd8d726b7177a800000",
        "0xe4625501f52b7af52b19ed612e9d54fdd006b492": "0xb5a905a56ddd00000",
        "0xe4715956f52f15306ee9506bf82bccc406b3895e": "0xee79d4f48c5000000",
        "0xe47fbaed99fc209962604ebd20e240f74f4591f1": "0x6c6b935b8bbd400000",
        "0xe482d255ede56b04c3e8df151f56e9ca62aaa8c2": "0x1b1ae4d6e2ef500000",
        "0xe48e65125421880d42bdf1018ab9778d96928f3f": "0xe3aeb5737240a00000",
        "0xe492818aa684e5a676561b725d42f3cc56ae5198": "0x2b5e3af16b18800000",
        "0xe49936a92a8ccf710eaac342bc454b9b14ebecb1": "0x6c6b935b8bbd400000",
        "0xe49af4f34adaa2330b0e49dc74ec18ab2f92f827": "0x6c6b935b8bbd400000",
        "0xe49ba0cd96816c4607773cf8a5970bb5bc16a1e6": "0x5a87e7d7f5f6580000",
        "0xe4a47e3933246c3fd62979a1ea19ffdf8c72ef37": "0x809b383ea7d7e8000",
        "0xe4b6ae22c7735f5b89f34dd77ad0975f0acc9181": "0x3635c9adc5dea00000",
        "0xe4ca0a5238564dfc91e8bf22bade2901619a1cd4": "0x3635c9adc5dea00000",
        "0xe4cafb727fb5c6b70bb27533b8a9ccc9ef6888e1": "0x10497bf4af4caf8000",
        "0xe4dc22ed595bf0a337c01e03cc6be744255fc9e8": "0xa5aa85009e39c0000",
        "0xe4fb26d1ca1eecba3d8298d9d148119ac2bbf580": "0x15af1d78b58c400000",
        "0xe4fc13cfcbac1b17ce7783acd423a845943f6b3a": "0x1158e460913d00000",
        "0xe50b464ac9de35a5618b7cbf254674182b81b97e": "0xde42ee1544dd900000",
        "0xe5102c3b711b810344197419b1cd8a7059f13e32": "0x1043528d0984698000",
        "0xe510d6797fba3d6693835a844ea2ad540691971b": "0x3ae39d47383e8740000",
        "0xe51421f8ee2210c71ed870fe618276c8954afbe9": "0x487a9a304539440000",
        "0xe51eb87e7fb7311f5228c479b48ec9878831ac4c": "0x6c6b935b8bbd400000",
        "0xe5215631b14248d45a255296bed1fbfa0330ff35": "0x4703e6eb5291b80000",
        "0xe528a0e5a267d667e9393a6584e19b34dc9be973": "0x12f939c99edab800000",
        "0xe53425d8df1f11c341ff58ae5f1438abf1ca53cf": "0x1174a5cdf88bc80000",
        "0xe53c68796212033e4e6f9cff56e19c461eb454f9": "0x3635c9adc5dea00000",
        "0xe54102534de8f23effb093b31242ad3b233facfd": "0xd8d726b7177a800000",
        "0xe545ee84ea48e564161e9482d59bcf406a602ca2": "0x6449e84e47a8a80000",
        "0xe5481a7fed42b901bbed20789bd4ade50d5f83b9": "0x6c6b935b8bbd400000",
        "0xe559b5fd337b9c5572a9bf9e0f2521f7d446dbe4": "0xad78ebc5ac6200000",
        "0xe55c80520a1b0f755b9a2cd3ce214f7625653e8a": "0x6c6b935b8bbd400000",
        "0xe56d431324c92911a1749df292709c14b77a65cd": "0x1bc85dc2a89bb200000",
        "0xe57d2995b0ebdf3f3ca6c015eb04260dbb98b7c6": "0x6c6b935b8bbd400000",
        "0xe587b16abc8a74081e3613e14342c03375bf0847": "0x6c6b935b8bbd400000",
        "0xe589fa76984db5ec4004b46ee8a59492c30744ce": "0x97c9ce4cf6d5c00000",
        "0xe58dd23238ee6ea7c2138d385df500c325f376be": "0x62a992e53a0af00000",
        "0xe5953fea497104ef9ad2d4e5841c271f073519c2": "0x2629f66e0c53000000",
        "0xe5968797468ef767101b761d431fce14abffdbb4": "0x1b3d969fa411ca00000",
        "0xe597f083a469c4591c3d2b1d2c772787befe27b2": "0xf2dc7d47f15600000",
        "0xe59b3bd300893f97233ef947c46f7217e392f7e9": "0x3635c9adc5dea00000",
        "0xe5a365343cc4eb1e770368e1f1144a77b832d7e0": "0x1158e460913d00000",
        "0xe5a3d7eb13b15c100177236d1beb30d17ee15420": "0x6c6b935b8bbd400000",
        "0xe5aa0b833bb916dc19a8dd683f0ede241d988eba": "0xa2a15d09519be00000",
        "0xe5b7af146986c0ff8f85d22e6cc334077d84e824": "0x6c6b935b8bbd400000",
        "0xe5b826196c0e1bc1119b021cf6d259a610c99670": "0xad78ebc5ac6200000",
        "0xe5b96fc9ac03d448c1613ac91d15978145dbdfd1": "0xad78ebc5ac6200000",
        "0xe5b980d28eece2c06fca6c9473068b37d4a6d6e9": "0x25afd68cac2b900000",
        "0xe5bab4f0afd8a9d1a381b45761aa18f3d3cce105": "0x51bfd7c13878d10000",
        "0xe5bcc88c3b256f6ed5fe550e4a18198b943356ad": "0x6c6b935b8bbd400000",
        "0xe5bdf34f4ccc483e4ca530cc7cf2bb18febe92b3": "0x6d835a10bbcd20000",
        "0xe5dc9349cb52e161196122cf87a38936e2c57f34": "0x6c6b935b8bbd400000",
        "0xe5e33800a1b2e96bde1031630a959aa007f26e51": "0x487a9a304539440000",
        "0xe5e37e19408f2cfbec83349dd48153a4a795a08f": "0xe3aeb5737240a00000",
        "0xe5edc73e626f5d3441a45539b5f7a398c593edf6": "0x2ee449550898e40000",
        "0xe5edf8123f2403ce1a0299becf7aac744d075f23": "0xada55474b81340000",
        "0xe5f8ef6d970636b0dcaa4f200ffdc9e75af1741c": "0x6c6b935b8bbd400000",
        "0xe5fb31a5caee6a96de393bdbf89fbe65fe125bb3": "0x3635c9adc5dea00000",
        "0xe5fbe34984b637196f331c679d0c0c47d83410e1": "0x6c6c44fe47ec050000",
        "0xe60955dc0bc156f6c41849f6bd776ba44b0ef0a1": "0x10431627a0933b0000",
        "0xe60a55f2df996dc3aedb696c08dde039b2641de8": "0x6c6b935b8bbd400000",
        "0xe6115b13f9795f7e956502d5074567dab945ce6b": "0x152d02c7e14af6800000",
        "0xe61f280915c774a31d223cf80c069266e5adf19b": "0x2fb474098f67c00000",
        "0xe62f98650712eb158753d82972b8e99ca3f61877": "0x6c6b935b8bbd400000",
        "0xe62f9d7c64e8e2635aeb883dd73ba684ee7c1079": "0x1b1ae4d6e2ef5000000",
        "0xe63e787414b9048478a50733359ecdd7e3647aa6": "0x55a6e79ccd1d300000",
        "0xe646665872e40b0d7aa2ff82729caaba5bc3e89e": "0x15af1d78b58c400000",
        "0xe64ef012658d54f8e8609c4e9023c09fe865c83b": "0x18493fba64ef00000",
        "0xe64f6e1d6401b56c076b64a1b0867d0b2f310d4e": "0x2cbad71c53ae50000",
        "0xe667f652f957c28c0e66d0b63417c80c8c9db878": "0x209d922f5259c50000",
        "0xe677c31fd9cb720075dca49f1abccd59ec33f734": "0x1a6d6beb1d42ee00000",
        "0xe67c2c1665c88338688187629f49e99b60b2d3ba": "0xad78ebc5ac6200000",
        "0xe69a6cdb3a8a7db8e1f30c8b84cd73bae02bc0f8": "0x394fdc2e452f6718000",
        "0xe69d1c378b771e0feff051db69d966ac6779f4ed": "0x1dfa6aaa1497040000",
        "0xe69fcc26ed225f7b2e379834c524d70c1735e5bc": "0x6c6b935b8bbd400000",
        "0xe6a3010f0201bc94ff67a2f699dfc206f9e76742": "0x2fa7cbf66464980000",
        "0xe6a6f6dd6f70a456f4ec15ef7ad5e5dbb68bd7dc": "0xad78ebc5ac6200000",
        "0xe6b20f980ad853ad04cbfc887ce6601c6be0b24c": "0xd8d726b7177a800000",
        "0xe6b3ac3f5d4da5a8857d0b3f30fc4b2b692b77d7": "0x4f2591f896a6500000",
        "0xe6b9545f7ed086e552924639f9a9edbbd5540b3e": "0xcbd47b6eaa8cc00000",
        "0xe6bcd30a8fa138c5d9e5f6c7d2da806992812dcd": "0x370ea0d47cf61a800000",
        "0xe6c81ffcecb47ecdc55c0b71e4855f3e5e97fc1e": "0x121ea68c114e510000",
        "0xe6cb260b716d4c0ab726eeeb07c8707204e276ae": "0x3635c9adc5dea00000",
        "0xe6cb3f3124c9c9cc3834b1274bc3336456a38bac": "0x172b1de0a213ff0000",
        "0xe6d22209ffd0b87509ade3a8e2ef429879cb89b5": "0x3a7aa9e1899ca300000",
        "0xe6d49f86c228f47367a35e886caacb271e539429": "0x165ec09da7a1980000",
        "0xe6e621eaab01f20ef0836b7cad47464cb5fd3c96": "0x11219342afa24b0000",
        "0xe6e886317b6a66a5b4f81bf164c538c264351765": "0x6c6b935b8bbd400000",
        "0xe6e9a39d750fe994394eb68286e5ea62a6997882": "0x2086ac351052600000",
        "0xe6ec5cf0c49b9c317e1e706315ef9eb7c0bf11a7": "0x3a469f3467e8ec00000",
        "0xe6f5eb649afb99599c414b27a9c9c855357fa878": "0x90f534608a72880000",
        "0xe6fe0afb9dcedd37b2e22c451ba6feab67348033": "0x21e19e0c9bab2400000",
        "0xe710dcd09b8101f9437bd97db90a73ef993d0bf4": "0x14ee36c05ac2520000",
        "0xe727e67ef911b81f6cf9c73fcbfebc2b02b5bfc6": "0x6c6b935b8bbd400000",
        "0xe72e1d335cc29a96b9b1c02f003a16d971e90b9d": "0x55a6e79ccd1d300000",
        "0xe7311c9533f0092c7248c9739b5b2c864a34b1ce": "0x97f97d6cc26dfe0000",
        "0xe73bfeada6f0fd016fbc843ebcf6e370a65be70c": "0x6acb3df27e1f880000",
        "0xe73ccf436725c151e255ccf5210cfce5a43f13e3": "0x1154e53217ddb0000",
        "0xe742b1e6069a8ffc3c4767235defb0d49cbed222": "0x2b5e3af16b18800000",
        "0xe74608f506866ada6bfbfdf20fea440be76989ef": "0x6c6acc67d7b1d40000",
        "0xe7533e270cc61fa164ac1553455c105d04887e14": "0x696d8590020bb0000",
        "0xe75c1fb177089f3e58b1067935a6596ef1737fb5": "0x56a879fa775470000",
        "0xe75c3b38a58a3f33d55690a5a59766be185e0284": "0x1b1ae4d6e2ef500000",
        "0xe761d27fa3502cc76bb1a608740e1403cf9dfc69": "0xf2dc7d47f15600000",
        "0xe766f34ff16f3cfcc97321721f43ddf5a38b0cf4": "0x54069233bf7f780000",
        "0xe76d945aa89df1e457aa342b31028a5e9130b2ce": "0x3708baed3d68900000",
        "0xe7735ec76518fc6aa92da8715a9ee3f625788f13": "0x6c4d160bafa1b78000",
        "0xe77a89bd45dc04eeb4e41d7b596b707e6e51e74c": "0x28a857425466f800000",
        "0xe77d7deab296c8b4fa07ca3be184163d5a6d606c": "0x5043904b671190000",
        "0xe77febabdf080f0f5dca1d3f5766f2a79c0ffa7c": "0x4b229d28a843680000",
        "0xe780a56306ba1e6bb331952c22539b858af9f77d": "0xa968163f0a57b400000",
        "0xe781ec732d401202bb9bd13860910dd6c29ac0b6": "0x433874f632cc600000",
        "0xe784dcc873aa8c1513ec26ff36bc92eac6d4c968": "0xad78ebc5ac6200000",
        "0xe7912d4cf4562c573ddc5b71e37310e378ef86c9": "0x155bd9307f9fe80000",
        "0xe791d585b89936b25d298f9d35f9f9edc25a2932": "0x6c6b935b8bbd400000",
        "0xe792349ce9f6f14f81d0674096befa1f9221cdea": "0x5b5d234a0db4388000",
        "0xe796fd4e839b4c95d7510fb7c5c72b83c6c3e3c7": "0x1bc433f23f83140000",
        "0xe7a42f59fee074e4fb13ea9e57ecf1cc48282249": "0x43c33c1937564800000",
        "0xe7a4560c84b20e0fb54c49670c2903b0a96c42a4": "0x206aeac7a903980000",
        "0xe7a8e471eafb798f4554cc6e526730fd56e62c7d": "0x3635c9adc5dea00000",
        "0xe7be82c6593c1eeddd2ae0b15001ff201ab57b2f": "0x10910d4cdc9f60000",
        "0xe7c6b5fc05fc748e5b4381726449a1c0ad0fb0f1": "0x6c6b935b8bbd400000",
        "0xe7d17524d00bad82497c0f27156a647ff51d2792": "0x1158e460913d00000",
        "0xe7d213947fcb904ad738480b1eed2f5c329f27e8": "0x103c3b1d3e9c30000",
        "0xe7d6240620f42c5edbb2ede6aec43da4ed9b5757": "0x3635c9adc5dea00000",
        "0xe7da609d40cde80f00ce5b4ffb6aa9d0b03494fc": "0x3635c9adc5dea00000",
        "0xe7f06f699be31c440b43b4db0501ec0e25261644": "0x1b1ae4d6e2ef500000",
        "0xe7f4d7fe6f561f7fa1da3005fd365451ad89df89": "0xad78ebc5ac6200000",
        "0xe7fd8fd959aed2767ea7fa960ce1db53af802573": "0x3635c9adc5dea00000",
        "0xe80e7fef18a5db15b01473f3ad6b78b2a2f8acd9": "0x1b1ae4d6e2ef500000",
        "0xe8137fc1b2ec7cc7103af921899b4a39e1d959a1": "0x50c5e761a444080000",
        "0xe81c2d346c0adf4cc56708f6394ba6c8c8a64a1e": "0x6c6b935b8bbd400000",
        "0xe82c58c579431b673546b53a86459acaf1de9b93": "0x3635c9adc5dea00000",
        "0xe834c64318205ca7dd4a21abcb08266cb21ff02c": "0x3635c6204739d98000",
        "0xe83604e4ff6be7f96f6018d3ec3072ec525dff6b": "0x9ddc1e3b901180000",
        "0xe845e387c4cbdf982280f6aa01c40e4be958ddb2": "0x54b40b1f852bda00000",
        "0xe848ca7ebff5c24f9b9c316797a43bf7c356292d": "0x62e115c008a880000",
        "0xe84b55b525f1039e744b918cb3332492e45eca7a": "0xad78ebc5ac6200000",
        "0xe84f8076a0f2969ecd333eef8de41042986291f2": "0x176b344f2a78c00000",
        "0xe864fec07ed1214a65311e11e329de040d04f0fd": "0x59ca83f5c404968000",
        "0xe87dbac636a37721df54b08a32ef4959b5e4ff82": "0x6c6b935b8bbd400000",
        "0xe87e9bbfbbb71c1a740c74c723426df55d063dd9": "0x1b1928c00c7a6380000",
        "0xe87eac6d602b4109c9671bf57b950c2cfdb99d55": "0x2b4f21972ecce0000",
        "0xe881bbbe69722d81efecaa48d1952a10a2bfac8f": "0x3635c9adc5dea000000",
        "0xe89249738b7eced7cb666a663c49cbf6de8343ea": "0x6c6b935b8bbd400000",
        "0xe89c22f1a4e1d4746ecfaa59ed386fee12d51e37": "0x26f8e87f0a7da0000",
        "0xe89da96e06beaf6bd880b378f0680c43fd2e9d30": "0x209a1a01a56fec0000",
        "0xe8a91da6cf1b9d65c74a02ec1f96eecb6dd241f3": "0x692ae8897081d00000",
        "0xe8a9a41740f44f54c3688b53e1ddd42e43c9fe94": "0xd8d726b7177a800000",
        "0xe8b28acda971725769db8f563d28666d41ddab6c": "0x21e19e0c9bab2400000",
        "0xe8be24f289443ee473bc76822f55098d89b91cc5": "0x6c6b935b8bbd400000",
        "0xe8c3d3b0e17f97d1e756e684f94e1470f99c95a1": "0x15af1d78b58c400000",
        "0xe8c3f045bb7d38c9d2f395b0ba8492b253230901": "0x1e7e4171bf4d3a00000",
        "0xe8cc43bc4f8acf39bff04ebfbf42aac06a328470": "0x15af1d78b58c400000",
        "0xe8d942d82f175ecb1c16a405b10143b3f46b963a": "0x1ed2e8ff6d971c0000",
        "0xe8ddbed732ebfe754096fde9086b8ea4a4cdc616": "0x6c6b935b8bbd400000",
        "0xe8de725eca5def805ff7941d31ac1c2e342dfe95": "0x857e0d6f1da76a0000",
        "0xe8e9850586e94f5299ab494bb821a5f40c00bd04": "0xcf152640c5c8300000",
        "0xe8ead1bb90ccc3aea2b0dcc5b58056554655d1d5": "0x1a4aba225c207400000",
        "0xe8eaf12944092dc3599b3953fa7cb1c9761cc246": "0x6194049f30f7200000",
        "0xe8ed51bbb3ace69e06024b33f86844c47348db9e": "0x22f9ea89f4a7d6c40000",
        "0xe8ef100d7ce0895832f2678df72d4acf8c28b8e3": "0x1b1b6bd7af64c70000",
        "0xe8f29969e75c65e01ce3d86154207d0a9e7c76f2": "0xa22fa9a73a27198000",
        "0xe8fc36b0131ec120ac9e85afc10ce70b56d8b6ba": "0xad78ebc5ac6200000",
        "0xe90a354cec04d69e5d96ddc0c5138d3d33150aa0": "0x1b1a7dcf8a44d38000",
        "0xe9133e7d31845d5f2b66a2618792e869311acf66": "0x517c0cbf9a390880000",
        "0xe91dac0195b19e37b59b53f7c017c0b2395ba44c": "0x65ea3db75546600000",
        "0xe91fa0badaddb9a97e88d3f4db7c55d6bb7430fe": "0x14620c57dddae00000",
        "0xe923c06177b3427ea448c0a6ff019b54cc548d95": "0x1f780014667f28000",
        "0xe93d47a8ca885d540c4e526f25d5c6f2c108c4b8": "0x17da3a04c7b3e0000000",
        "0xe9458f68bb272cb5673a04f781b403556fd3a387": "0x34e8b88cee2d40000",
        "0xe94941b6036019b4016a30c1037d5a6903babaad": "0x2a48acab6204b00000",
        "0xe9495ba5842728c0ed97be37d0e422b98d69202c": "0x6c6b935b8bbd400000",
        "0xe94ded99dcb572b9bb1dcba32f6dee91e057984e": "0x155bd9307f9fe80000",
        "0xe95179527deca5916ca9a38f215c1e9ce737b4c9": "0x21e19e0c9bab2400000",
        "0xe9559185f166fc9513cc71116144ce2deb0f1d4b": "0x43c33c1937564800000",
        "0xe95e92bbc6de07bf3a660ebf5feb1c8a3527e1c5": "0xfc936392801c0000",
        "0xe965daa34039f7f0df62375a37e5ab8a72b301e7": "0x103fddecdb3f5700000",
        "0xe969ea1595edc5c4a707cfde380929633251a2b0": "0xad78ebc5ac6200000",
        "0xe96b184e1f0f54924ac874f60bbf44707446b72b": "0x9dcc0515b56e0c0000",
        "0xe96d7d4cdd15553a4e4d316d6d6480ca3cea1e38": "0x2955d02e1a135a00000",
        "0xe96e2d3813efd1165f12f602f97f4a62909d3c66": "0x7caee97613e6700000",
        "0xe97fde0b67716325cf0ecce8a191a3761b2c791d": "0x3677036edf0af60000",
        "0xe982e6f28c548f5f96f45e63f7ab708724f53fa1": "0x157ae829a41f3b0000",
        "0xe9864c1afc8eaad37f3ba56fcb7477cc622009b7": "0x448586170a7dc0000",
        "0xe987e6139e6146a717fef96bc24934a5447fe05d": "0x6c6b935b8bbd400000",
        "0xe989733ca1d58d9e7b5029ba5d444858bec03172": "0x1f87408313df4f8000",
        "0xe98c91cadd924c92579e11b41217b282956cdaa1": "0x75c9a8480320c0000",
        "0xe99aece90541cae224b87da673965e0aeb296afd": "0x31df9095a18f600000",
        "0xe99de258a4173ce9ac38ede26c0b3bea3c0973d5": "0x59d0b805e5bb300000",
        "0xe9a2b4914e8553bf0d7c00ca532369b879f931bf": "0x6c6b935b8bbd400000",
        "0xe9a39a8bac0f01c349c64cedb69897f633234ed2": "0xd7c198710e66b00000",
        "0xe9a5ae3c9e05977dd1069e9fd9d3aefbae04b8df": "0x6acb3df27e1f880000",
        "0xe9ac36376efa06109d40726307dd1a57e213eaa9": "0xa844a7424d9c80000",
        "0xe9b1f1fca3fa47269f21b061c353b7f5e96d905a": "0x1b1ae4d6e2ef500000",
        "0xe9b36fe9b51412ddca1a521d6e94bc901213dda8": "0x21e19e0c9bab2400000",
        "0xe9b4a4853577a9dbcc2e795be0310d1bed28641a": "0x3635c9adc5dea00000",
        "0xe9b6a790009bc16642c8d820b7cde0e9fd16d8f5": "0xc55325ca7415e00000",
        "0xe9b9a2747510e310241d2ece98f56b3301d757e0": "0x6c6b935b8bbd400000",
        "0xe9c35c913ca1fceab461582fe1a5815164b4fd21": "0x1b1ae4d6e2ef5000000",
        "0xe9c6dfae97f7099fc5f4e94b784db802923a1419": "0x2a53c6d724f100000",
        "0xe9c758f8da41e3346e4350e5ac3976345c6c1082": "0x68a0d3092826ad0000",
        "0xe9caf827be9d607915b365c83f0d3b7ea8c79b50": "0xa2a15d09519be00000",
        "0xe9cafe41a5e8bbd90ba02d9e06585b4eb546c57f": "0x6c6b935b8bbd400000",
        "0xe9d599456b2543e6db80ea9b210e908026e2146e": "0xad78ebc5ac6200000",
        "0xe9e1f7cb00a110edd0ebf8b377ef8a7bb856117f": "0xad78ebc5ac6200000",
        "0xea14bfda0a6e76668f8788321f07df37824ec5df": "0x2a5a058fc295ed000000",
        "0xea1ea0c599afb9cd36caacbbb52b5bbb97597377": "0x39fbae8d042dd00000",
        "0xea1efb3ce789bedec3d67c3e1b3bc0e9aa227f90": "0x27ca4bd719f0b80000",
        "0xea2c197d26e98b0da83e1b72c787618c979d3db0": "0x11164759ffb320000",
        "0xea3779d14a13f6c78566bcde403591413a6239db": "0x29b76432b94451200000",
        "0xea4e809e266ae5f13cdbe38f9d0456e6386d1274": "0xf3f20b8dfa69d00000",
        "0xea53c954f4ed97fd4810111bdab69ef981ef25b9": "0x3a9d5baa4abf1d00000",
        "0xea53d26564859d9e90bb0e53b7abf560e0162c38": "0x15af1d78b58c400000",
        "0xea60436912de6bf187d3a472ff8f5333a0f7ed06": "0x11164759ffb320000",
        "0xea60549ec7553f511d2149f2d4666cbd9243d93c": "0x6c6b935b8bbd400000",
        "0xea66e7b84dcdbf36eea3e75b85382a75f1a15d96": "0x5dbc9191266f118000",
        "0xea686c5057093c171c66db99e01b0ececb308683": "0x14dda85d2ce1478000",
        "0xea6afe2cc928ac8391eb1e165fc40040e37421e7": "0xa27fa063b2e2e68000",
        "0xea79057dabef5e64e7b44f7f18648e7e533718d2": "0xad78ebc5ac6200000",
        "0xea7c4d6dc729cd6b157c03ad237ca19a209346c3": "0x6c6b935b8bbd400000",
        "0xea8168fbf225e786459ca6bb18d963d26b505309": "0x1b1ae4d6e2ef500000",
        "0xea81ca8638540cd9d4d73d060f2cebf2241ffc3e": "0x6acb3df27e1f880000",
        "0xea8317197959424041d9d7c67a3ece1dbb78bb55": "0x155bd9307f9fe80000",
        "0xea8527febfa1ade29e26419329d393b940bbb7dc": "0x6c6acc67d7b1d40000",
        "0xea8f30b6e4c5e65290fb9864259bc5990fa8ee8a": "0x1158e460913d00000",
        "0xea94f32808a2ef8a9bf0861d1d2404f7b7be258a": "0x1158e460913d00000",
        "0xeaa45cea02d87d2cc8fda9434e2d985bd4031584": "0x681fc2cc6e2b8b0000",
        "0xeab0bd148309186cf8cbd13b7232d8095acb833a": "0x2439a881c6a717c0000",
        "0xeabb90d37989aab31feae547e0e6f3999ce6a35d": "0x6c6b935b8bbd400000",
        "0xeac0827eff0c6e3ff28a7d4a54f65cb7689d7b99": "0x9ad9e69f9d47520000",
        "0xeac1482826acb6111e19d340a45fb851576bed60": "0x1be8bab04d9be8000",
        "0xeac17b81ed5191fb0802aa54337313834107aaa4": "0x1b1ae4d6e2ef5000000",
        "0xeac3af5784927fe9a598fc4eec38b8102f37bc58": "0x3635c9adc5dea00000",
        "0xeac6b98842542ea10bb74f26d7c7488f698b6452": "0x43c33c1937564800000",
        "0xeac768bf14b8f9432e69eaa82a99fbeb94cd0c9c": "0x14dbb2195ca228900000",
        "0xead21c1deccfbf1c5cd96688a2476b69ba07ce4a": "0x3f24d8e4a00700000",
        "0xead4d2eefb76abae5533961edd11400406b298fc": "0xd255d112e103a00000",
        "0xead65262ed5d122df2b2751410f98c32d1238f51": "0x58317ed46b9b80000",
        "0xead75016e3a0815072b6b108bcc1b799acf0383e": "0x6c6b935b8bbd400000",
        "0xeaea23aa057200e7c9c15e8ff190d0e66c0c0e83": "0x6c6b935b8bbd400000",
        "0xeaed16eaf5daab5bf0295e5e077f59fb8255900b": "0xd8d726b7177a800000",
        "0xeaedcc6b8b6962d5d9288c156c579d47c0a9fcff": "0x49b9ca9a694340000",
        "0xeaf52388546ec35aca6f6c6393d8d609de3a4bf3": "0x1158e460913d00000",
        "0xeb10458daca79e4a6b24b29a8a8ada711b7f2eb6": "0xd8bb6549b02bb80000",
        "0xeb1cea7b45d1bd4d0e2a007bd3bfb354759e2c16": "0xabbcd4ef377580000",
        "0xeb25481fcd9c221f1ac7e5fd1ecd9307a16215b8": "0xaadec983fcff40000",
        "0xeb2ef3d38fe652403cd4c9d85ed7f0682cd7c2de": "0x90f534608a728800000",
        "0xeb3bdd59dcdda5a9bb2ac1641fd02180f5f36560": "0x165c96647b38a200000",
        "0xeb3ce7fc381c51db7d5fbd692f8f9e058a4c703d": "0xad78ebc5ac6200000",
        "0xeb453f5a3adddd8ab56750fadb0fe7f94d9c89e7": "0x1158e460913d00000",
        "0xeb4f00e28336ea09942588eeac921811c522143c": "0x6c6b935b8bbd400000",
        "0xeb52ab10553492329c1c54833ae610f398a65b9d": "0x83d6c7aab63600000",
        "0xeb570dba975227b1c42d6e8dea2c56c9ad960670": "0x6c6b935b8bbd400000",
        "0xeb6394a7bfa4d28911d5a5b23e93f35e340c2294": "0x43a77aabd00780000",
        "0xeb6810691d1ae0d19e47bd22cebee0b3ba27f88a": "0x87856315d878150000",
        "0xeb76424c0fd597d3e341a9642ad1ee118b2b579d": "0xd8d726b7177a800000",
        "0xeb7c202b462b7cc5855d7484755f6e26ef43a115": "0x6c6b935b8bbd400000",
        "0xeb835c1a911817878a33d167569ea3cdd387f328": "0x3635c9adc5dea00000",
        "0xeb89a882670909cf377e9e78286ee97ba78d46c2": "0x2b7cc2e9c3225c0000",
        "0xeb90c793b3539761e1c814a29671148692193eb4": "0x28a857425466f800000",
        "0xeb9cc9fe0869d2dab52cc7aae8fd57adb35f9feb": "0x6a93bb17af81f80000",
        "0xeba388b0da27c87b1cc0eac6c57b2c5a0b459c1a": "0x170a0f5040e50400000",
        "0xebaa216de9cc5a43031707d36fe6d5bedc05bdf0": "0x6ac5c62d9486070000",
        "0xebac2b4408ef5431a13b8508e86250982114e145": "0xd8d726b7177a800000",
        "0xebb62cf8e22c884b1b28c6fa88fbbc17938aa787": "0x2b42798403c9b80000",
        "0xebb7d2e11bc6b58f0a8d45c2f6de3010570ac891": "0x1731790534df20000",
        "0xebbb4f2c3da8be3eb62d1ffb1f950261cf98ecda": "0x6c6b935b8bbd400000",
        "0xebbd4db9019952d68b1b0f6d8cf0683c00387bb5": "0x120401563d7d910000",
        "0xebbeeb259184a6e01cccfc2207bbd883785ac90a": "0x219bc1b04783d30000",
        "0xebd356156a383123343d48843bffed6103e866b3": "0x6acb3df27e1f880000",
        "0xebd37b256563e30c6f9289a8e2702f0852880833": "0x6c6acc67d7b1d40000",
        "0xebe46cc3c34c32f5add6c3195bb486c4713eb918": "0x3635c9adc5dea00000",
        "0xebff84bbef423071e604c361bba677f5593def4e": "0x21e19e0c9bab2400000",
        "0xec0927bac7dc36669c28354ab1be83d7eec30934": "0x6c6b935b8bbd400000",
        "0xec0e18a01dc4dc5daae567c3fa4c7f8f9b590205": "0x111ffe404a41e60000",
        "0xec11362cec810985d0ebbd7b73451444985b369f": "0x65a4e49577057318000",
        "0xec2cb8b9378dff31aec3c22e0e6dadff314ab5dd": "0x6c6b935b8bbd400000",
        "0xec30addd895b82ee319e54fb04cb2bb03971f36b": "0x6c6b935b8bbd400000",
        "0xec3b8b58a12703e581ce5ffd7e21c57d1e5c663f": "0x5c283d410394100000",
        "0xec4867d2175ab5b9469361595546554684cda460": "0xa2a15d09519be00000",
        "0xec4d08aa2e47496dca87225de33f2b40a8a5b36f": "0x890b0c2e14fb80000",
        "0xec58bc0d0c20d8f49465664153c5c196fe59e6be": "0x15af1d78b58c400000",
        "0xec5b198a00cfb55a97b5d53644cffa8a04d2ab45": "0x6c6b935b8bbd400000",
        "0xec5df227bfa85d7ad76b426e1cee963bc7f519dd": "0x3635c9adc5dea00000",
        "0xec5feafe210c12bfc9a5d05925a123f1e73fbef8": "0x608fcf3d88748d000000",
        "0xec6904bae1f69790591709b0609783733f2573e3": "0x1b1ae4d6e2ef500000",
        "0xec73114c5e406fdbbe09b4fa621bd70ed54ea1ef": "0x53025cd216fce500000",
        "0xec73833de4b810bb027810fc8f69f544e83c12d1": "0x3635c9adc5dea00000",
        "0xec75b4a47513120ba5f86039814f1998e3817ac3": "0x9b0bce2e8fdba0000",
        "0xec76f12e57a65504033f2c0bce6fc03bd7fa0ac4": "0xc2127af858da700000",
        "0xec8014efc7cbe5b0ce50f3562cf4e67f8593cd32": "0xf015f25736420000",
        "0xec82f50d06475f684df1b392e00da341aa145444": "0x6c6b935b8bbd400000",
        "0xec83e798c396b7a55e2a2224abcd834b27ea459c": "0x28a857425466f800000",
        "0xec89f2b678a1a15b9134ec5eb70c6a62071fbaf9": "0xad78ebc5ac6200000",
        "0xec8c1d7b6aaccd429db3a91ee4c9eb1ca4f6f73c": "0xe664992288f2280000",
        "0xec9851bd917270610267d60518b54d3ca2b35b17": "0x878678326eac9000000",
        "0xec99e95dece46ffffb175eb6400fbebb08ee9b95": "0x56bc75e2d63100000",
        "0xeca5f58792b8c62d2af556717ee3ee3028be4dce": "0x6c6b935b8bbd400000",
        "0xecab5aba5b828de1705381f38bc744b32ba1b437": "0x32f51edbaaa3300000",
        "0xecaf3350b7ce144d068b186010852c84dd0ce0f0": "0x6c6b935b8bbd400000",
        "0xecb94c568bfe59ade650645f4f26306c736cace4": "0xe7eeba3410b740000",
        "0xecbe425e670d39094e20fb5643a9d818eed236de": "0x10f0cf064dd59200000",
        "0xecbe5e1c9ad2b1dccf0a305fc9522f4669dd3ae7": "0x10f0cf064dd59200000",
        "0xeccf7a0457b566b346ca673a180f444130216ac3": "0x56bc75e2d63100000",
        "0xecd1a62802351a41568d23033004acc6c005a5d3": "0x2b5e3af16b1880000",
        "0xecd276af64c79d1bd9a92b86b5e88d9a95eb88f8": "0x1158e460913d00000",
        "0xecd486fc196791b92cf612d348614f9156488b7e": "0x28a857425466f800000",
        "0xecdaf93229b45ee672f65db506fb5eca00f7fce6": "0x5701f96dcc40ee8000",
        "0xece111670b563ccdbebca52384290ecd68fe5c92": "0x1158e460913d00000",
        "0xece1152682b7598fe2d1e21ec15533885435ac85": "0xd8d726b7177a800000",
        "0xece1290877b583e361a2d41b009346e6274e2538": "0x1043561a8829300000",
        "0xecf05d07ea026e7ebf4941002335baf2fed0f002": "0xad78ebc5ac6200000",
        "0xecf24cdd7c22928c441e694de4aa31b0fab59778": "0x2086ac351052600000",
        "0xecfd004d02f36cd4d8b4a8c1a9533b6af85cd716": "0x10f41acb4bb3b9c0000",
        "0xed0206cb23315128f8caff26f6a30b985467d022": "0x878678326eac9000000",
        "0xed1065dbcf9d73c04ffc7908870d881468c1e132": "0x6c6b935b8bbd400000",
        "0xed1276513b6fc68628a74185c2e20cbbca7817bf": "0xa5aa85009e39c0000",
        "0xed12a1ba1fb8adfcb20dfa19582e525aa3b74524": "0x16a6502f15a1e540000",
        "0xed16ce39feef3bd7f5d162045e0f67c0f00046bb": "0x1158e460913d00000",
        "0xed1a5c43c574d4e934299b24f1472cdc9fd6f010": "0xad78ebc5ac6200000",
        "0xed1b24b6912d51b334ac0de6e771c7c0454695ea": "0x22b1c8c1227a00000",
        "0xed1f1e115a0d60ce02fb25df014d289e3a0cbe7d": "0x1b1ae4d6e2ef500000",
        "0xed31305c319f9273d3936d8f5b2f71e9b1b22963": "0x56bc75e2d63100000",
        "0xed327a14d5cfadd98103fc0999718d7ed70528ea": "0x4e1003b28d92800000",
        "0xed3cbc3782cebd67989b305c4133b2cde32211eb": "0x15af1d78b58c400000",
        "0xed4014538cee664a2fbcb6dc669f7ab16d0ba57c": "0xad78ebc5ac6200000",
        "0xed41e1a28f5caa843880ef4e8b08bd6c33141edf": "0x2ad5ddfa7a8d830000",
        "0xed4be04a052d7accb3dcce90319dba4020ab2c68": "0x7f37a70eaf362178000",
        "0xed52a2cc0869dc9e9f842bd0957c47a8e9b0c9ff": "0x205b4dfa1ee74780000",
        "0xed5b4c41e762d942404373caf21ed4615d25e6c1": "0x6d2d4f3d9525b40000",
        "0xed60c4ab6e540206317e35947a63a9ca6b03e2cb": "0x31ad9ad0b467f8000",
        "0xed641e06368fb0efaa1703e01fe48f4a685309eb": "0xad78ebc5ac6200000",
        "0xed6643c0e8884b2d3211853785a08bf8f33ed29f": "0x487a9a304539440000",
        "0xed70a37cdd1cbda9746d939658ae2a6181288578": "0x2086ac3510526000000",
        "0xed7346766e1a676d0d06ec821867a276a083bf31": "0xd98a0931cc2d490000",
        "0xed862616fcbfb3becb7406f73c5cbff00c940755": "0x5c283d410394100000",
        "0xed9e030ca75cb1d29ea01d0d4cdfdccd3844b6e4": "0x1acc116cfafb18000",
        "0xed9ebccba42f9815e78233266dd6e835b6afc31b": "0x14542ba12a337c00000",
        "0xed9fb1f5af2fbf7ffc5029cee42b70ff5c275bf5": "0xf2dc7d47f15600000",
        "0xeda4b2fa59d684b27a810df8978a73df308a63c2": "0xd8d726b7177a800000",
        "0xedb473353979a206879de144c10a3c51d7d7081a": "0x14542ba12a337c00000",
        "0xedb71ec41bda7dce86e766e6e8c3e9907723a69b": "0x1158e460913d00000",
        "0xedbac9527b54d6df7ae2e000cca3613ba015cae3": "0x6acb3df27e1f880000",
        "0xedc22fb92c638e1e21ff5cf039daa6e734dafb29": "0x102794ad20da680000",
        "0xeddacd94ec89a2ef968fcf977a08f1fae2757869": "0x1b1ae4d6e2ef5000000",
        "0xeddbaafbc21be8f25562f1ed6d05d6afb58f02c2": "0x6c6b935b8bbd400000",
        "0xede0147ec032c3618310c1ff25690bf172193dac": "0x6c6b935b8bbd400000",
        "0xede5de7c7fb7eee0f36e64530a41440edfbefacf": "0x21755ee1ef2b180000",
        "0xede79ae1ff4f1606d59270216fa46ab2ddd4ecaa": "0x7ea28327577080000",
        "0xede8c2cb876fbe8a4cca8290361a7ea01a69fdf8": "0x1a78c6b44f841838000",
        "0xedeb4894aadd0081bbddd3e8846804b583d19f27": "0x6c6b935b8bbd400000",
        "0xedf603890228d7d5de9309942b5cad4219ef9ad7": "0x10f0cf064dd59200000",
        "0xedf8a3e1d40f13b79ec8e3e1ecf262fd92116263": "0x890b0c2e14fb80000",
        "0xedfda2d5db98f9380714664d54b4ee971a1cae03": "0x22bb8ddd679be0000",
        "0xee0007b0960d00908a94432a737557876aac7c31": "0x2e0421e69c4cc8000",
        "0xee049af005974dd1c7b3a9ca8d9aa77175ba53aa": "0x1211ecb56d13488000",
        "0xee25b9a7032679b113588ed52c137d1a053a1e94": "0xad50f3f4eea8e0000",
        "0xee31167f9cc93b3c6465609d79db0cde90e8484c": "0x6c6b935b8bbd400000",
        "0xee34c7e7995db9f187cff156918cfb6f13f6e003": "0x6a4076cf7995a00000",
        "0xee3564f5f1ba0f94ec7bac164bddbf31c6888b55": "0x56bc75e2d63100000",
        "0xee58fb3db29070d0130188ce472be0a172b89055": "0x21f42dcdc58e39c0000",
        "0xee655bb4ee0e8d5478526fb9f15e4064e09ff3dd": "0xad78ebc5ac6200000",
        "0xee6959de2b67967b71948c891ab00d8c8f38c7dc": "0x6685ac1bfe32c0000",
        "0xee6c03429969ca1262cb3f0a4a54afa7d348d7f5": "0xde219f91fc18a0000",
        "0xee71793e3acf12a7274f563961f537529d89c7de": "0x6c6b935b8bbd400000",
        "0xee7288d91086d9e2eb910014d9ab90a02d78c2a0": "0x6c6b935b8bbd400000",
        "0xee7c3ded7c28f459c92fe13b4d95bafbab02367d": "0x25f273933db5700000",
        "0xee867d20916bd2e9c9ece08aa04385db667c912e": "0xa968163f0a57b400000",
        "0xee899b02cbcb3939cd61de1342d50482abb68532": "0x5f68e8131ecf800000",
        "0xee906d7d5f1748258174be4cbc38930302ab7b42": "0xad78ebc5ac6200000",
        "0xee97aa8ac69edf7a987d6d70979f8ec1fbca7a94": "0x14620c57dddae00000",
        "0xeea1e97988de75d821cd28ad6822b22cce988b31": "0x1c30731cec03200000",
        "0xeed28c3f068e094a304b853c950a6809ebcb03e0": "0x3a9d5baa4abf1d00000",
        "0xeed384ef2d41d9d203974e57c12328ea760e08ea": "0x3635c9adc5dea00000",
        "0xeedf6c4280e6eb05b934ace428e11d4231b5905b": "0xad78ebc5ac6200000",
        "0xeee761847e33fd61d99387ee14628694d1bfd525": "0x6c6b935b8bbd400000",
        "0xeee9d0526eda01e43116a395322dda8970578f39": "0x21e1999bbd5d2be0000",
        "0xeef1bbb1e5a83fde8248f88ee3018afa2d1332eb": "0xad78ebc5ac6200000",
        "0xeefba12dfc996742db790464ca7d273be6e81b3e": "0x3635c9adc5dea00000",
        "0xeefd05b0e3c417d55b3343060486cdd5e92aa7a6": "0x4d853c8f8908980000",
        "0xef0dc7dd7a53d612728bcbd2b27c19dd4d7d666f": "0x26411c5b35f05a0000",
        "0xef115252b1b845cd857f002d630f1b6fa37a4e50": "0x6acb3df27e1f880000",
        "0xef1c0477f1184d60accab374d374557a0a3e10f3": "0x83d6c7aab63600000",
        "0xef2c34bb487d3762c3cca782ccdd7a8fbb0a9931": "0x9c2007651b2500000",
        "0xef35f6d4b1075e6aa139151c974b2f4658f70538": "0x3c3bc33f94e50d8000",
        "0xef39ca9173df15531d73e6b72a684b51ba0f2bb4": "0x56a0b4756ee2380000",
        "0xef463c2679fb279164e20c3d2691358773a0ad95": "0x6c6b935b8bbd400000",
        "0xef47cf073e36f271d522d7fa4e7120ad5007a0bc": "0x878678326eac900000",
        "0xef61155ba009dcdebef10b28d9da3d1bc6c9ced4": "0x3342d60dff1960000",
        "0xef69781f32ffce33346f2c9ae3f08493f3e82f89": "0xfc936392801c0000",
        "0xef76a4cd8febcbc9b818f17828f8d93473f3f3cb": "0xd8d726b7177a800000",
        "0xef93818f684db0c3675ec81332b3183ecc28a495": "0x54069233bf7f780000",
        "0xef9f59aeda418c1494682d941aab4924b5f4929a": "0x152d02c7e14af6800000",
        "0xefa6b1f0db603537826891b8b4bc163984bb40cd": "0x35659ef93f0fc40000",
        "0xefbd52f97da5fd3a673a46cbf330447b7e8aad5c": "0x56c3c9b80a0a68000",
        "0xefc8cf1963c9a95267b228c086239889f4dfd467": "0x21e19e0c9bab2400000",
        "0xefcaae9ff64d2cd95b5249dcffe7faa0a0c0e44d": "0x15be6174e1912e0000",
        "0xefcce06bd6089d0e458ef561f5a689480afe7000": "0x2086ac351052600000",
        "0xefe0675da98a5dda70cd96196b87f4e726b43348": "0x3f19beb8dd1ab00000",
        "0xefe8ff87fc260e0767638dd5d02fc4672e0ec06d": "0x6c6b935b8bbd400000",
        "0xefeb1997aad277cc33430e6111ed0943594048b8": "0x6c6b935b8bbd400000",
        "0xefeea010756f81da4ba25b721787f058170befbd": "0x1c29c9cf770ef0000",
        "0xeff51d72adfae143edf3a42b1aec55a2ccdd0b90": "0x1043561a8829300000",
        "0xeff86b5123bcdc17ed4ce8e05b7e12e51393a1f7": "0x1b1ae4d6e2ef500000",
        "0xeffc15e487b1beda0a8d1325bdb4172240dc540a": "0x3853939eee1de0000",
        "0xf01195d657ef3c942e6cb83949e5a20b5cfa8b1e": "0x57473d05dabae800000",
        "0xf02796295101674288c1d93467053d042219b794": "0x281d901f4fdd100000",
        "0xf039683d7b3d225bc7d8dfadef63163441be41e2": "0x1dd1e4bd8d1ee0000",
        "0xf04a6a379708b9428d722aa2b06b77e88935cf89": "0x1043561a8829300000",
        "0xf04d2c91efb6e9c45ffbe74b434c8c5f2b028f1f": "0x3635c9adc5dea00000",
        "0xf057aa66ca767ede124a1c5b9cc5fc94ef0b0137": "0x70a24bcab6f45d0000",
        "0xf05ba8d7b68539d933300bc9289c3d9474d0419e": "0x6da27024dd9600000",
        "0xf05ceeab65410564709951773c8445ad9f4ec797": "0x10431627a0933b0000",
        "0xf05fcd4c0d73aa167e5553c8c0d6d4f2faa39757": "0x2d2d66c3170b2980000",
        "0xf067e1f1d683556a4cc4fd0c0313239f32c4cfd8": "0x3635c9adc5dea00000",
        "0xf067fb10dfb293e998abe564c055e3348f9fbf1e": "0x6c6b935b8bbd400000",
        "0xf068dfe95d15cd3a7f98ffa688b4346842be2690": "0x440ad819e0974c0000",
        "0xf06a854a3c5dc36d1c49f4c87d6db333b57e4add": "0x21e19e0c9bab2400000",
        "0xf079e1b1265f50e8c8a98ec0c7815eb3aeac9eb4": "0x116dc3a8994b30000",
        "0xf07bd0e5c2ce69c7c4a724bd26bbfa9d2a17ca03": "0x14061b9d77a5e980000",
        "0xf0832a6bb25503eeca435be31b0bf905ca1fcf57": "0x16a6502f15a1e540000",
        "0xf09b3e87f913ddfd57ae8049c731dba9b636dfc3": "0x20f5b1eaad8d800000",
        "0xf0b1340b996f6f0bf0d9561c849caf7f4430befa": "0x56bc75e2d63100000",
        "0xf0b1f9e27832c6de6914d70afc238c749995ace4": "0x6c6b935b8bbd400000",
        "0xf0b469eae89d400ce7d5d66a9695037036b88903": "0x43c33c1937564800000",
        "0xf0b9d683cea12ba600baace219b0b3c97e8c00e4": "0x56bc75e2d63100000",
        "0xf0be0faf4d7923fc444622d1980cf2d990aab307": "0x6c6b935b8bbd400000",
        "0xf0c081da52a9ae36642adf5e08205f05c54168a6": "0x6046f37e5945c0000",
        "0xf0c70d0d6dab7663aa9ed9ceea567ee2c6b02765": "0x71438ac5a791a08000",
        "0xf0cbef84e169630098d4e301b20208ef05846ac9": "0xe0b8345506b4e0000",
        "0xf0d21663d8b0176e05fde1b90ef31f8530fda95f": "0x6c6acc67d7b1d40000",
        "0xf0d5c31ccb6cbe30c7c9ea19f268d159851f8c9c": "0x3894f0e6f9b9f700000",
        "0xf0d64cf9df09741133d170485fd24b005011d520": "0x1b089341e14fcc0000",
        "0xf0d858105e1b648101ac3f85a0f8222bf4f81d6a": "0x2086ac351052600000",
        "0xf0dc43f205619127507b2b1c1cfdf32d28310920": "0x105eb79b9417088000",
        "0xf0e1dfa42adeac2f17f6fdf584c94862fd563393": "0x1b1ae4d6e2ef500000",
        "0xf0e2649c7e6a3f2c5dfe33bbfbd927ca3c350a58": "0x6c6b935b8bbd400000",
        "0xf0e7fb9e420a5340d536f40408344feaefc06aef": "0x3635c9adc5dea00000",
        "0xf10462e58fcc07f39584a187639451167e859201": "0x934dd5d33bc970000",
        "0xf10661ff94140f203e7a482572437938bec9c3f7": "0x43c33c1937564800000",
        "0xf114ff0d0f24eff896edde5471dea484824a99b3": "0xbe202d6a0eda0000",
        "0xf116b0b4680f53ab72c968ba802e10aa1be11dc8": "0x1158e460913d00000",
        "0xf11cf5d363746fee6864d3ca336dd80679bb87ae": "0x878678326eac9000000",
        "0xf11e01c7a9d12499005f4dae7716095a34176277": "0x15af1d78b58c400000",
        "0xf13b083093ba564e2dc631568cf7540d9a0ec719": "0x6c6acc67d7b1d40000",
        "0xf14f0eb86db0eb68753f16918e5d4b807437bd3e": "0xad78ebc5ac6200000",
        "0xf15178ffc43aa8070ece327e930f809ab1a54f9d": "0xab640391201300000",
        "0xf156dc0b2a981e5b55d3f2f03b8134e331dbadb7": "0x56bc75e2d63100000",
        "0xf15d9d5a21b1929e790371a17f16d95f0c69655c": "0x6c6b935b8bbd400000",
        "0xf15e182c4fbbad79bd93342242d4dccf2be58925": "0x692ae8897081d00000",
        "0xf1624d980b65336feac5a6d54125005cfcf2aacb": "0x6c6b935b8bbd400000",
        "0xf167f5868dcf4233a7830609682caf2df4b1b807": "0x81e542e1a7383f0000",
        "0xf16de1891d8196461395f9b136265b3b9546f6ef": "0x1b28e1f98bbce8000",
        "0xf17a92e0361dbacecdc5de0d1894955af6a9b606": "0x6c6b935b8bbd400000",
        "0xf17adb740f45cbbde3094e7e13716f8103f563bd": "0x6c6b935b8bbd400000",
        "0xf18b14cbf6694336d0fe12ac1f25df2da0c05dbb": "0xd8d4602c26bf6c0000",
        "0xf19b39389d47b11b8a2c3f1da9124decffbefaf7": "0x6c6b935b8bbd400000",
        "0xf19f193508393e4d2a127b20b2031f39c82581c6": "0xbdbd7a83bd2f6c0000",
        "0xf1a1f320407964fd3c8f2e2cc8a4580da94f01ea": "0x6c6c2177557c440000",
        "0xf1b4ecc63525f7432c3d834ffe2b970fbeb87212": "0xa2a24068facd800000",
        "0xf1b58faffa8794f50af8e88309c7a6265455d51a": "0x36330322d5238c0000",
        "0xf1c8c4a941b4628c0d6c30fda56452d99c7e1b64": "0x4e8cea1ede75040000",
        "0xf1da40736f99d5df3b068a5d745fafc6463fc9b1": "0x696ca23058da10000",
        "0xf1dc8ac81042c67a9c3c6792b230c46ac016ca10": "0xad78ebc5ac6200000",
        "0xf1df55dcc34a051012b575cb968bc9c458ea09c9": "0xd8d726b7177a800000",
        "0xf1e980c559a1a8e5e50a47f8fffdc773b7e06a54": "0x65ffbcdea04b7480000",
        "0xf1f391ca92808817b755a8b8f4e2ca08d1fd1108": "0x14542ba12a337c00000",
        "0xf1f766b0e46d73fcd4d52e7a72e1b9190cc632b3": "0x1b1ae4d6e2ef5000000",
        "0xf2049532fd458a83ca1bff2eebacb6d5ca63f4a4": "0xc48c991dc1545c8000",
        "0xf206d328e471d0117b246d2a4619827709e96df3": "0xa2af3dc00543440000",
        "0xf20c9a99b74759d782f25c1ceca802a27e0b436c": "0x5a87e7d7f5f6580000",
        "0xf2127d54188fedef0f338a5f38c7ff73ad9f6f42": "0x43c33c1937564800000",
        "0xf2133431d1d9a37ba2f0762bc40c5acc8aa6978e": "0x6c6b935b8bbd400000",
        "0xf21549bdd1487912f900a7523db5f7626121bba3": "0x21e19e0c9bab2400000",
        "0xf218bd848ee7f9d38bfdd1c4eb2ed2496ae4305f": "0x1b1ae4d6e2ef500000",
        "0xf224eb900b37b4490eee6a0b6420d85c947d8733": "0x34957444b840e80000",
        "0xf2294adbb6f0dcc76e632ebef48ab49f124dbba4": "0x4e43393600a7b10000",
        "0xf22f4078febbbaa8b0e78e642c8a42f35d433905": "0x6c6acc67d7b1d40000",
        "0xf237ef05261c34d79cc22b860de0f17f793c3860": "0xad78ebc5ac6200000",
        "0xf23c7b0cb8cd59b82bd890644a57daf40c85e278": "0x2b66aafe326ff0000",
        "0xf23d01589eb12d439f7448ff54307529f191858d": "0x6c6b935b8bbd400000",
        "0xf23e5c633221a8f7363e65870c9f287424d2a960": "0x4acf58e07257100000",
        "0xf242da845d42d4bf779a00f295b40750fe49ea13": "0x3635c9adc5dea00000",
        "0xf25259a5c939cd25966c9b6303d3731c53ddbc4c": "0xad78ebc5ac6200000",
        "0xf25e4c70bc465632c89e5625a832a7722f6bffab": "0xf34b82fd8e91200000",
        "0xf26bcedce3feadcea3bc3e96eb1040dfd8ffe1a0": "0x2a034919dfbfbc0000",
        "0xf270792576f05d514493ffd1f5e84bec4b2df810": "0x3635c9adc5dea00000",
        "0xf2732cf2c13b8bb8e7492a988f5f89e38273ddc8": "0x2086ac351052600000",
        "0xf2742e6859c569d5f2108351e0bf4dca352a48a8": "0x21e19e0c9bab2400000",
        "0xf2813a64c5265d020235cb9c319b6c96f906c41e": "0x12f939c99edab80000",
        "0xf287ff52f461117adb3e1daa71932d1493c65f2e": "0xc55325ca7415e00000",
        "0xf2ab1161750244d0ecd048ee0d3e51abb143a2fd": "0x42fe2b907373bc0000",
        "0xf2b4ab2c9427a9015ef6eefff5edb60139b719d1": "0x26db992a3b18000000",
        "0xf2c03e2a38998c21648760f1e5ae7ea3077d8522": "0x8f3f7193ab079c0000",
        "0xf2c2904e9fa664a11ee25656d8fd2cc0d9a522a0": "0xb98bc829a6f90000",
        "0xf2c362b0ef991bc82fb36e66ff75932ae8dd8225": "0x402f4cfee62e80000",
        "0xf2d0e986d814ea13c8f466a0538c53dc922651f0": "0x4acf58e07257100000",
        "0xf2d1b7357724ec4c03185b879b63f57e26589153": "0x14542ba12a337c00000",
        "0xf2d5763ce073127e2cedde6faba786c73ca94141": "0x1ac4286100191f00000",
        "0xf2d59c8923759073d6f415aaf8eb065ff2f3b685": "0x1ab2cf7c9f87e200000",
        "0xf2e99f5cbb836b7ad36247571a302cbe4b481c69": "0x6acb3df27e1f880000",
        "0xf2ed3e77254acb83231dc0860e1a11242ba627db": "0x6b56051582a9700000",
        "0xf2edde37f9a8c39ddea24d79f4015757d06bf786": "0x152d02c7e14af6800000",
        "0xf2efe96560c9d97b72bd36447843885c1d90c231": "0x6c6b935b8bbd400000",
        "0xf2fbb6d887f8b8cc3a869aba847f3d1f643c53d6": "0xd8c9460063d31c0000",
        "0xf3034367f87d24d3077fa9a2e38a8b0ccb1104ef": "0x3635c9adc5dea00000",
        "0xf303d5a816affd97e83d9e4dac2f79072bb0098f": "0x340aad21b3b7000000",
        "0xf3159866c2bc86bba40f9d73bb99f1eee57bb9d7": "0x3635c9adc5dea00000",
        "0xf316ef1df2ff4d6c1808dba663ec8093697968e0": "0x61464d6cdc80f00000",
        "0xf32d25eb0ea2b8b3028a4c7a155dc1aae865784d": "0x13593a9297fdad60000",
        "0xf332c0f3e05a27d9126fd0b641a8c2d4060608fd": "0x10f1b62c4d9644e8000",
        "0xf338459f32a159b23db30ac335769ab2351aa63c": "0x65a4da25d3016c00000",
        "0xf33efc6397aa65fb53a8f07a0f893aae30e8bcee": "0x7cf2381f619f150000",
        "0xf34083ecea385017aa40bdd35ef7effb4ce7762d": "0x15af1d78b58c400000",
        "0xf346d7de92741c08fc58a64db55b062dde012d14": "0xfff6b1f761e6d0000",
        "0xf355d3ec0cfb907d8dbb1bf3464e458128190bac": "0x10b046e7f0d80100000",
        "0xf36df02fbd89607347afce2969b9c4236a58a506": "0x6c6b935b8bbd400000",
        "0xf373e9daac0c8675f53b797a160f6fc034ae6b23": "0x56bc75e2d63100000",
        "0xf37b426547a1642d8033324814f0ede3114fc212": "0x15be6174e1912e0000",
        "0xf37bf78c5875154711cb640d37ea6d28cfcb1259": "0xad78ebc5ac6200000",
        "0xf382df583155d8548f3f93440cd5f68cb79d6026": "0x38757d027fc1fd5c0000",
        "0xf382e4c20410b951089e19ba96a2fee3d91cce7e": "0x111fa56eec2a8380000",
        "0xf38a6ca80168537e974d14e1c3d13990a44c2c1b": "0x14542ba12a337c00000",
        "0xf39a9d7aa3581df07ee4279ae6c312ef21033658": "0xd8d726b7177a800000",
        "0xf3b668b3f14d920ebc379092db98031b67b219b3": "0xad6eedd17cf3b8000",
        "0xf3be99b9103ce7550aa74ff1db18e09dfe32e005": "0x6c6b935b8bbd400000",
        "0xf3c1abd29dc57b41dc192d0e384d021df0b4f6d4": "0x97ae0cdf8f86f80000",
        "0xf3c4716d1ee5279a86d0163a14618181e16136c7": "0x3635c9adc5dea00000",
        "0xf3cc8bcb559465f81bfe583bd7ab0a2306453b9e": "0x43c33c1937564800000",
        "0xf3d688f06bbdbf50f9932c4145cbe48ecdf68904": "0x1158e460913d00000",
        "0xf3dbcf135acb9dee1a489c593c024f03c2bbaece": "0x6c6b935b8bbd400000",
        "0xf3de5f26ef6aded6f06d3b911346ee70401da4a0": "0x133ab37d9f9d030000",
        "0xf3df63a97199933330383b3ed7570b96c4812334": "0x6c6b935b8bbd400000",
        "0xf3e74f470c7d3a3f0033780f76a89f3ef691e6cb": "0xa3cfe631d143640000",
        "0xf3eb1948b951e22df1617829bf3b8d8680ec6b68": "0xd8d726b7177a800000",
        "0xf3f1fa3918ca34e2cf7e84670b1f4d8eca160db3": "0x24dce54d34a1a00000",
        "0xf3f24fc29e20403fc0e8f5ebbb553426f78270a2": "0x56bc75e2d63100000",
        "0xf3fa723552a5d0512e2b62f48dca7b2b8105305b": "0x76d41c62494840000",
        "0xf3fe51fde34413c73318b9c85437fe7e820f561a": "0x3662325cd18fe00000",
        "0xf400f93d5f5c7e3fc303129ac8fb0c2f786407fa": "0x6c6b935b8bbd400000",
        "0xf40b134fea22c6b29c8457f49f000f9cda789adb": "0x2086ac351052600000",
        "0xf41557dfdfb1a1bdcefefe2eba1e21fe0a4a9942": "0x6acb3df27e1f880000",
        "0xf4177a0d85d48b0e264211ce2aa2efd3f1b47f08": "0xc2ccca26b7e80e8000",
        "0xf42f905231c770f0a406f2b768877fb49eee0f21": "0xaadec983fcff40000",
        "0xf432b9dbaf11bdbd73b6519fc0a904198771aac6": "0x83d6c7aab63600000",
        "0xf43da3a4e3f5fab104ca9bc1a0f7f3bb4a56f351": "0x6c6acc67d7b1d40000",
        "0xf447108b98df64b57e871033885c1ad71db1a3f9": "0x176f49ead3483508000",
        "0xf44f8551ace933720712c5c491cdb6f2f951736c": "0xd8d726b7177a800000",
        "0xf456055a11ab91ff668e2ec922961f2a23e3db25": "0xfc936392801c0000",
        "0xf456a75bb99655a7412ce97da081816dfdb2b1f2": "0xad78ebc5ac6200000",
        "0xf45b1dcb2e41dc27ffa024daadf619c11175c087": "0x11164759ffb320000",
        "0xf463a90cb3f13e1f0643423636beab84c123b06d": "0x22b1c8c1227a00000",
        "0xf468906e7edf664ab0d8be3d83eb7ab3f7ffdc78": "0x5c283d410394100000",
        "0xf46980e3a4a9d29a6a6e90604537a3114bcb2897": "0x1b1ae4d6e2ef500000",
        "0xf46b6b9c7cb552829c1d3dfd8ffb11aabae782f6": "0x1236efcbcbb340000",
        "0xf476e1267f86247cc908816f2e7ad5388c952db0": "0xd8d726b7177a800000",
        "0xf476f2cb7208a32e051fd94ea8662992638287a2": "0x56bc75e2d63100000",
        "0xf47bb134da30a812d003af8dccb888f44bbf5724": "0x11959b7fe3395580000",
        "0xf483f607a21fcc28100a018c568ffbe140380410": "0x3635c9adc5dea00000",
        "0xf48e1f13f6af4d84b371d7de4b273d03a263278e": "0x2086ac351052600000",
        "0xf49c47b3efd86b6e6a5bc9418d1f9fec814b69ef": "0x43c33c1937564800000",
        "0xf49f6f9baabc018c8f8e119e0115f491fc92a8a4": "0x21e19e0c9bab2400000",
        "0xf4a367b166d2991a2bfda9f56463a09f252c1b1d": "0x6acb3df27e1f880000",
        "0xf4a51fce4a1d5b94b0718389ba4e7814139ca738": "0x1043561a8829300000",
        "0xf4a9d00cefa97b7a58ef9417fc6267a5069039ee": "0x12e89287fa7840000",
        "0xf4aaa3a6163e3706577b49c0767e948a681e16ee": "0x6c6b935b8bbd400000",
        "0xf4b1626e24f30bcad9273c527fcc714b5d007b8f": "0xad78ebc5ac6200000",
        "0xf4b49100757772f33c177b9a76ba95226c8f3dd8": "0x16b352da5e0ed300000",
        "0xf4b6cdcfcb24230b337d770df6034dfbd4e1503f": "0x405fdf7e5af85e00000",
        "0xf4b759cc8a1c75f80849ebbcda878dc8f0d66de4": "0x15af1d78b58c400000",
        "0xf4ba6a46d55140c439cbcf076cc657136262f4f8": "0x6c6b935b8bbd400000",
        "0xf4d67a9044b435b66e8977ff39a28dc4bd53729a": "0xad78ebc5ac6200000",
        "0xf4d97664cc4eec9edbe7fa09f4750a663b507d79": "0xd8d726b7177a800000",
        "0xf4dc7ba85480bbb3f535c09568aaa3af6f3721c6": "0x1871fb6307e35e50000",
        "0xf4ebf50bc7e54f82e9b9bd24baef29438e259ce6": "0x21e19e0c9bab2400000",
        "0xf4ec8e97a20aa5f8dd206f55207e06b813df2cc0": "0xad78ebc5ac6200000",
        "0xf4ed848ec961739c2c7e352f435ba70a7cd5db38": "0x6acb3df27e1f880000",
        "0xf4fc4d39bc0c2c4068a36de50e4ab4d4db7e340a": "0x16037df87ef6a0000",
        "0xf504943aaf16796e0b341bbcdf21d11cc586cdd1": "0x1e7e4171bf4d3a00000",
        "0xf5061ee2e5ee26b815503677130e1de07a52db07": "0x56bc75e2d63100000",
        "0xf509557e90183fbf0f0651a786487bcc428ba175": "0xa844a7424d9c80000",
        "0xf50abbd4aa45d3eb88515465a8ba0b310fd9b521": "0x16a6502f15a1e540000",
        "0xf50ae7fab4cfb5a646ee04ceadf9bf9dd5a8e540": "0xd8d67c2f5895480000",
        "0xf50cbafd397edd556c0678988cb2af5c2617e0a2": "0x26d07efe782bb00000",
        "0xf51fded80acb502890e87369741f3722514cefff": "0x43c3456ca3c6d110000",
        "0xf52a5882e8927d944b359b26366ba2b9cacfbae8": "0x54b41ce2fe63ba80000",
        "0xf52c0a7877345fe0c233bb0f04fd6ab18b6f14ba": "0x54cbe55989f38de00000",
        "0xf5437e158090b2a2d68f82b54a5864b95dd6dbea": "0xd96c16703b2bfe0000",
        "0xf54c19d9ef3873bfd1f7a622d02d86249a328f06": "0x960ae127af32fb28000",
        "0xf5500178cb998f126417831a08c2d7abfff6ab5f": "0x46f4f4a5875a9f8000",
        "0xf5534815dc635efa5cc84b2ac734723e21b29372": "0x55a6e79ccd1d300000",
        "0xf555a27bb1e2fd4e2cc784caee92939fc06e2fc9": "0x6c6b935b8bbd400000",
        "0xf558a2b2dd26dd9593aae04531fd3c3cc3854b67": "0xabbcd4ef377580000",
        "0xf56048dd2181d4a36f64fcecc6215481e42abc15": "0xad78ebc5ac6200000",
        "0xf56442f60e21691395d0bffaa9194dcaff12e2b7": "0xe18398e7601900000",
        "0xf579714a45eb8f52c3d57bbdefd2c15b2e2f11df": "0x54915956c409600000",
        "0xf593c65285ee6bbd6637f3be8f89ad40d489f655": "0xa2a15d09519be00000",
        "0xf598db2e09a8a5ee7d720d2b5c43bb126d11ecc2": "0xad78ebc5ac6200000",
        "0xf59dab1bf8df11327e61f9b7a14b563a96ec3554": "0x14542ba12a337c00000",
        "0xf59f9f02bbc98efe097eabb78210979021898bfd": "0x21e171a3ec9f72c0000",
        "0xf5a5459fcdd5e5b273830df88eea4cb77ddadfb9": "0x409e52b48369a0000",
        "0xf5a7676ad148ae9c1ef8b6f5e5a0c2c473be850b": "0xad78ebc5ac6200000",
        "0xf5b068989df29c253577d0405ade6e0e7528f89e": "0x57473d05dabae80000",
        "0xf5b6e9061a4eb096160777e26762cf48bdd8b55d": "0xdc55fdb17647b0000",
        "0xf5cffbba624e7eb321bc83c60ca68199b4e36671": "0x6c6b935b8bbd400000",
        "0xf5d14552b1dce0d6dc1f320da6ffc8a331cd6f0c": "0x487a9a304539440000",
        "0xf5d61ac4ca95475e5b7bffd5f2f690b316759615": "0x692ae8897081d000000",
        "0xf5d9cf00d658dd45517a48a9d3f5f633541a533d": "0x64f5fdf494f780000",
        "0xf5eadcd2d1b8657a121f33c458a8b13e76b65526": "0xd8b0f5a5ac24a0000",
        "0xf607c2150d3e1b99f24fa1c7d540add35c4ebe1e": "0xa7f1aa07fc8faa0000",
        "0xf60bd735543e6bfd2ea6f11bff627340bc035a23": "0x6c6b935b8bbd400000",
        "0xf60c1b45f164b9580e20275a5c39e1d71e35f891": "0x6c6b935b8bbd400000",
        "0xf60f62d73937953fef35169e11d872d2ea317eec": "0x121ea68c114e5100000",
        "0xf61283b4bd8504058ca360e993999b62cbc8cd67": "0xdd2d5fcf3bc9c0000",
        "0xf617b967b9bd485f7695d2ef51fb7792d898f500": "0x1b1ae4d6e2ef500000",
        "0xf618d9b104411480a863e623fc55232d1a4f48aa": "0xe689e6d44b1668000",
        "0xf622e584a6623eaaf99f2be49e5380c5cbcf5cd8": "0xad78ebc5ac6200000",
        "0xf632adff490da4b72d1236d04b510f74d2faa3cd": "0x4be4e7267b6ae00000",
        "0xf639ac31da9f67271bd10402b7654e5ce763bd47": "0x15af0f42baf9260000",
        "0xf63a579bc3eac2a9490410128dbcebe6d9de8243": "0x50c5e761a444080000",
        "0xf645dd7c890093e8e4c8aa92a6bb353522d3dc98": "0x7439fa2099e580000",
        "0xf648ea89c27525710172944e79edff847803b775": "0x152d02c7e14af6800000",
        "0xf64a4ac8d540a9289c68d960d5fb7cc45a77831c": "0x6c6b935b8bbd400000",
        "0xf64ecf2117931c6d535a311e4ffeaef9d49405b8": "0x90f534608a72880000",
        "0xf64fe0939a8d1eea2a0ecd9a9730fd7958e33109": "0x11de1e6db450c0000",
        "0xf65616be9c8b797e7415227c9138faa0891742d7": "0x2ad373ce668e980000",
        "0xf657fcbe682eb4e8db152ecf892456000b513d15": "0x692ae8897081d00000",
        "0xf65819ac4cc14c137f05dd7977c7dae08d1a4ab5": "0x58788cb94b1d80000",
        "0xf67bb8e2118bbcd59027666eedf6943ec9f880a5": "0xd8d726b7177a800000",
        "0xf68464bf64f2411356e4d3250efefe5c50a5f65b": "0x1158e460913d00000",
        "0xf686785b89720b61145fea80978d6acc8e0bc196": "0xd8d726b7177a800000",
        "0xf68c5e33fa97139df5b2e63886ce34ebf3e4979c": "0xb3fa4169e2d8e00000",
        "0xf6a8635757c5e8c134d20d028cf778cf8609e46a": "0x4f1d772faec17c0000",
        "0xf6b782f4dcd745a6c0e2e030600e04a24b25e542": "0x15af1d78b58c400000",
        "0xf6bc37b1d2a3788d589b6de212dc1713b2f6e78e": "0x10f0cf064dd59200000",
        "0xf6c3c48a1ac0a34799f04db86ec7a975fe7768f3": "0x6acb3df27e1f880000",
        "0xf6d25d3f3d846d239f525fa8cac97bc43578dbac": "0x30927f74c9de000000",
        "0xf6eaac7032d492ef17fd6095afc11d634f56b382": "0x1b1b6bd7af64c70000",
        "0xf6ead67dbf5b7eb13358e10f36189d53e643cfcf": "0x878678326eac9000000",
        "0xf6f1a44309051c6b25e47dff909b179bb9ab591c": "0x692ae8897081d00000",
        "0xf70328ef97625fe745faa49ee0f9d4aa3b0dfb69": "0x3635c9adc5dea00000",
        "0xf70a998a717b338d1dd99854409b1a338deea4b0": "0x6c6b935b8bbd400000",
        "0xf70d637a845c06db6cdc91e6371ce7c4388a628e": "0x1158e460913d00000",
        "0xf7155213449892744bc60f2e04400788bd041fdd": "0x39fbae8d042dd0000",
        "0xf71b4534f286e43093b1e15efea749e7597b8b57": "0x161c13d3341c87280000",
        "0xf734ec03724ddee5bb5279aa1afcf61b0cb448a1": "0xe5bf2cc9b097800000",
        "0xf736dc96760012388fe88b66c06efe57e0d7cf0a": "0x71d75ab9b920500000",
        "0xf73ac46c203be1538111b151ec8220c786d84144": "0xff7377817b82b8000",
        "0xf73dd9c142b71bce11d06e30e7e7d032f2ec9c9e": "0x6acb3df27e1f880000",
        "0xf7418aa0e713d248228776b2e7434222ae75e3a5": "0x6c6b935b8bbd400000",
        "0xf74e6e145382b4db821fe0f2d98388f45609c69f": "0x56bc75e2d63100000",
        "0xf7500c166f8bea2f82347606e5024be9e4f4ce99": "0x1158e460913d00000",
        "0xf757fc8720d3c4fa5277075e60bd5c411aebd977": "0x6c6b935b8bbd400000",
        "0xf75bb39c799779ebc04a336d260da63146ed98d0": "0x15af1d78b58c40000",
        "0xf768f321fd6433d96b4f354d3cc1652c1732f57f": "0x21e19e0c9bab2400000",
        "0xf76f69cee4faa0a63b30ae1e7881f4f715657010": "0xad78ebc5ac6200000",
        "0xf777361a3dd8ab62e5f1b9b047568cc0b555704c": "0x3635c9adc5dea00000",
        "0xf77c7b845149efba19e261bc7c75157908afa990": "0x6c6b935b8bbd400000",
        "0xf77f9587ff7a2d7295f1f571c886bd33926a527c": "0x6c68ccd09b022c0000",
        "0xf78258c12481bcdddbb72a8ca0c043097261c6c5": "0x1158e460913d00000",
        "0xf798d16da4e460c460cd485fae0fa0599708eb82": "0x3635c9adc5dea00000",
        "0xf7a1ade2d0f529123d1055f19b17919f56214e67": "0x1b1ae4d6e2ef500000",
        "0xf7acff934b84da0969dc37a8fcf643b7d7fbed41": "0x6c6acc67d7b1d40000",
        "0xf7b151cc5e571c17c76539dbe9964cbb6fe5de79": "0x74717cfb6883100000",
        "0xf7b29b82195c882dab7897c2ae95e77710f57875": "0x7735416132dbfc0000",
        "0xf7bc4c44910d5aedd66ed2355538a6b193c361ec": "0x541de2c2d8d620000",
        "0xf7c00cdb1f020310d5acab7b496aaa44b779085e": "0x5a87e7d7f5f6580000",
        "0xf7c1b443968b117b5dd9b755572fcd39ca5ec04b": "0x18b968c292f1b50000",
        "0xf7c50f922ad16b61c6d1baa045ed816815bac48f": "0x2a9396a9784ad7d0000",
        "0xf7c708015071d4fb0a3a2a09a45d156396e3349e": "0xa2a15d09519be00000",
        "0xf7cbdba6be6cfe68dbc23c2b0ff530ee05226f84": "0x1158e460913d00000",
        "0xf7d0d310acea18406138baaabbfe0571e80de85f": "0x487a9a304539440000",
        "0xf7d7af204c56f31fd94398e40df1964bd8bf123c": "0x821d221b5291f8000",
        "0xf7dc251196fbcbb77c947d7c1946b0ff65021cea": "0x3635c9adc5dea00000",
        "0xf7e45a12aa711c709acefe95f33b78612d2ad22a": "0xe0655e2f26bc9180000",
        "0xf7f4898c4c526d955f21f055cb6e47b915e51964": "0x7c0860e5a80dc00000",
        "0xf7f91e7acb5b8129a306877ce3168e6f438b66a1": "0x98a7d9b8314c00000",
        "0xf7fc45abf76f5088e2e5b5a8d132f28a4d4ec1c0": "0x6c6b935b8bbd400000",
        "0xf8063af4cc1dd9619ab5d8bff3fcd1faa8488221": "0x6c6b935b8bbd400000",
        "0xf8086e42661ea929d2dda1ab6c748ce3055d111e": "0x3635c9adc5dea00000",
        "0xf8087786b42da04ed6d1e0fe26f6c0eefe1e9f5a": "0x21e19e0c9bab2400000",
        "0xf80d3619702fa5838c48391859a839fb9ce7160f": "0x6c07a7d1b16e700000",
        "0xf814799f6ddf4dcb29c7ee870e75f9cc2d35326d": "0x3635c9adc5dea00000",
        "0xf815c10a032d13c34b8976fa6e3bd2c9131a8ba9": "0x487a9a304539440000",
        "0xf81622e55757daea6675975dd93538da7d16991e": "0x6c6b935b8bbd400000",
        "0xf824ee331e4ac3cc587693395b57ecf625a6c0c2": "0x56c95de8e8ca1d0000",
        "0xf827d56ed2d32720d4abf103d6d0ef4d3bcd559b": "0x16c80065791a28000",
        "0xf8298591523e50b103f0b701d623cbf0f74556f6": "0xad78ebc5ac6200000",
        "0xf848fce9ab611c7d99206e23fac69ad488b94fe1": "0x2a1129d0936720000",
        "0xf84f090adf3f8db7e194b350fbb77500699f66fd": "0x6acb3df27e1f880000",
        "0xf851b010f633c40af1a8f06a73ebbaab65077ab5": "0xee86442fcd06c00000",
        "0xf858171a04d357a13b4941c16e7e55ddd4941329": "0x246a5218f2a000000",
        "0xf85bab1cb3710fc05fa19ffac22e67521a0ba21d": "0x6c95357fa6b36c0000",
        "0xf86a3ea8071f7095c7db8a05ae507a8929dbb876": "0x1236efcbcbb3400000",
        "0xf8704c16d2fd5ba3a2c01d0eb20484e6ecfa3109": "0xad78ebc5ac6200000",
        "0xf870995fe1e522321d754337a45c0c9d7b38951c": "0x1158e460913d00000",
        "0xf873e57a65c93b6e18cb75f0dc077d5b8933dc5c": "0xaadec983fcff40000",
        "0xf875619d8a23e45d8998d184d480c0748970822a": "0xd8d726b7177a800000",
        "0xf87bb07b289df7301e54c0efda6a2cf291e89200": "0x4be4e7267b6ae00000",
        "0xf88900db737955b1519b1a7d170a18864ce590eb": "0xfc936392801c0000",
        "0xf88b58db37420b464c0be88b45ee2b95290f8cfa": "0x22b1c8c1227a00000",
        "0xf8962b75db5d24c7e8b7cef1068c3e67cebb30a5": "0xf2dc7d47f15600000",
        "0xf8a065f287d91d77cd626af38ffa220d9b552a2b": "0x678a932062e4180000",
        "0xf8a49ca2390c1f6d5c0e62513b079571743f7cc6": "0xa2a15d09519be00000",
        "0xf8a50cee2e688ceee3aca4d4a29725d4072cc483": "0x6c6b935b8bbd400000",
        "0xf8ac4a39b53c11307820973b441365cffe596f66": "0x6c6b935b8bbd400000",
        "0xf8ae857b67a4a2893a3fbe7c7a87ff1c01c6a6e7": "0xd8d726b7177a800000",
        "0xf8bf9c04874e5a77f38f4c38527e80c676f7b887": "0x6c6b935b8bbd400000",
        "0xf8c7f34a38b31801da43063477b12b27d0f203ff": "0x1ad2baba6fef480000",
        "0xf8ca336c8e91bd20e314c20b2dd4608b9c8b9459": "0x2ddc9bc5b32c780000",
        "0xf8d17424c767bea31205739a2b57a7277214eebe": "0x246ddf97976680000",
        "0xf8d52dcc5f96cc28007b3ecbb409f7e22a646caa": "0x81690e18128480000",
        "0xf8dce867f0a39c5bef9eeba609229efa02678b6c": "0x6c6b935b8bbd400000",
        "0xf8f226142a428434ab17a1864a2597f64aab2f06": "0x9598b2fb2e9f28000",
        "0xf8f6645e0dee644b3dad81d571ef9baf840021ad": "0x6c6b935b8bbd400000",
        "0xf901c00fc1db88b69c4bc3252b5ca70ea6ee5cf6": "0x15af1d78b58c400000",
        "0xf93d5bcb0644b0cce5fcdda343f5168ffab2877d": "0xb6207b67d26f90000",
        "0xf9570e924c95debb7061369792cf2efec2a82d5e": "0x1158e460913d00000",
        "0xf9642086b1fbae61a6804dbe5fb15ec2d2b537f4": "0x6c6b935b8bbd400000",
        "0xf96488698590dc3b2c555642b871348dfa067ad5": "0x1b1ae4d6e2ef500000",
        "0xf964d98d281730ba35b2e3a314796e7b42fedf67": "0x53b0876098d80c0000",
        "0xf9650d6989f199ab1cc479636ded30f241021f65": "0x2e141ea081ca080000",
        "0xf96883582459908c827627e86f28e646f9c7fc7a": "0x1c4a78737cdcfb80000",
        "0xf96b4c00766f53736a8574f822e6474c2f21da2d": "0x15af1d78b58c400000",
        "0xf9729d48282c9e87166d5eef2d01eda9dbf78821": "0x56b83ddc728548000",
        "0xf9767e4ecb4a5980527508d7bec3d45e4c649c13": "0x678a932062e4180000",
        "0xf978b025b64233555cc3c19ada7f4199c9348bf7": "0x54b40b1f852bda000000",
        "0xf97b56ebd5b77abc9fbacbabd494b9d2c221cd03": "0x6acb3df27e1f880000",
        "0xf9811fa19dadbf029f8bfe569adb18228c80481a": "0xad78ebc5ac6200000",
        "0xf98250730c4c61c57f129835f2680894794542f3": "0xd8d726b7177a800000",
        "0xf989346772995ec1906faffeba2a7fe7de9c6bab": "0x16a6502f15a1e540000",
        "0xf998ca3411730a6cd10e7455b0410fb0f6d3ff80": "0x6c6b935b8bbd400000",
        "0xf99aee444b5783c093cfffd1c4632cf93c6f050c": "0x15af1d78b58c400000",
        "0xf99eeece39fa7ef5076d855061384009792cf2e0": "0x1b1ae4d6e2ef500000",
        "0xf9a59c3cc5ffacbcb67be0fc7256f64c9b127cb4": "0x6c6b935b8bbd400000",
        "0xf9a94bd56198da245ed01d1e6430b24b2708dcc0": "0x28a77afda87ee50000",
        "0xf9b37825f03073d31e249378c30c795c33f83af2": "0xad9aabf8c9bfc0000",
        "0xf9b617f752edecae3e909fbb911d2f8192f84209": "0x90f534608a72880000",
        "0xf9bfb59d538afc4874d4f5941b08c9730e38e24b": "0x22b1c8c1227a00000",
        "0xf9dd239008182fb519fb30eedd2093fed1639be8": "0x1b1ae4d6e2ef500000",
        "0xf9debaecb5f339beea4894e5204bfa340d067f25": "0x5a42844673b1640000",
        "0xf9e37447406c412197b2e2aebc001d6e30c98c60": "0x1c479bb4349c0ee0000",
        "0xf9e7222faaf0f4da40c1c4a40630373a09bed7b6": "0x9b4fdcb09456240000",
        "0xf9ece022bccd2c92346911e79dd50303c01e0188": "0x3635c9adc5dea00000",
        "0xfa00c376e89c05e887817a9dd0748d96f341aa89": "0x104d0d00d2b7f60000",
        "0xfa0c1a988c8a17ad3528eb28b3409daa58225f26": "0xad78ebc5ac6200000",
        "0xfa105f1a11b6e4b1f56012a27922e2ac2da4812f": "0x205b4dfa1ee74780000",
        "0xfa142fe47eda97e6503b386b18a2bedd73ccb5b1": "0x2e153ad81548100000",
        "0xfa14b566234abee73042c31d21717182cba14aa1": "0x11c7ea162e78200000",
        "0xfa19d6f7a50f4f079893d167bf14e21d0073d196": "0x1cbb3a3ff08d080000",
        "0xfa1f1971a775c3504fef5079f640c2c4bce7ac05": "0x6c6b935b8bbd400000",
        "0xfa279bfd8767f956bf7fa0bd5660168da75686bd": "0x90f534608a72880000",
        "0xfa27cc49d00b6c987336a875ae39da58fb041b2e": "0x21e19e0c9bab2400000",
        "0xfa283299603d8758e8cab082125d2c8f7d445429": "0x15bcacb1e0501ae8000",
        "0xfa2bbca15d3fe39f8a328e91f90da14f7ac6253d": "0xad78ebc5ac6200000",
        "0xfa2fd29d03fee9a07893df3a269f56b72f2e1e64": "0x21e19e0c9bab2400000",
        "0xfa33553285a973719a0d5f956ff861b2d89ed304": "0x1158e460913d00000",
        "0xfa3a0c4b903f6ea52ea7ab7b8863b6a616ad6650": "0x1158e460913d00000",
        "0xfa3a1aa4488b351aa7560cf5ee630a2fd45c3222": "0x2fa47e6aa7340d0000",
        "0xfa410971ad229c3036f41acf852f2ac999281950": "0xd8b311a8ddfa7c0000",
        "0xfa44a855e404c86d0ca8ef3324251dfb349c539e": "0x542253a126ce400000",
        "0xfa5201fe1342af11307b9142a041243ca92e2f09": "0x2038116a3ac043980000",
        "0xfa60868aafd4ff4c5c57914b8ed58b425773dfa9": "0x1cfe5c808f39fbc0000",
        "0xfa67b67b4f37a0150915110ede073b05b853bda2": "0x2319ba947371ad0000",
        "0xfa68e0cb3edf51f0a6f211c9b2cb5e073c9bffe6": "0xfc936392801c00000",
        "0xfa6a37f018e97967937fc5e8617ba1d786dd5f77": "0x43c30fb0884a96c0000",
        "0xfa7606435b356cee257bd2fcd3d9eacb3cd1c4e1": "0x56bc75e2d63100000",
        "0xfa7adf660b8d99ce15933d7c5f072f3cbeb99d33": "0x14061b9d77a5e980000",
        "0xfa86ca27bf2854d98870837fb6f6dfe4bf6453fc": "0x11757e8525cf148000",
        "0xfa8cf4e627698c5d5788abb7880417e750231399": "0xe61a3696eef6100000",
        "0xfa8e3b1f13433900737daaf1f6299c4887f85b5f": "0x26c29e47c4844c0000",
        "0xfa9ec8efe08686fa58c181335872ba698560ecab": "0x6c6acc67d7b1d40000",
        "0xfaad905d847c7b23418aeecbe3addb8dd3f8924a": "0x6acb3df27e1f880000",
        "0xfaaeba8fc0bbda553ca72e30ef3d732e26e82041": "0x488d282aafc9f68000",
        "0xfab487500df20fb83ebed916791d561772adbebf": "0x6c6b4c4da6ddbe0000",
        "0xfac5ca94758078fbfccd19db3558da7ee8a0a768": "0x3728a62b0dcff60000",
        "0xfad96ab6ac768ad5099452ac4777bd1a47edc48f": "0x56bc75e2d63100000",
        "0xfae76719d97eac41870428e940279d97dd57b2f6": "0x14dbb2195ca228900000",
        "0xfae881937047895a660cf229760f27e66828d643": "0x9ddc1e3b901180000",
        "0xfae92c1370e9e1859a5df83b56d0f586aa3b404c": "0x5c5b4f3d843980000",
        "0xfaf5f0b7b6d558f5090d9ea1fb2d42259c586078": "0x15affb8420c6b640000",
        "0xfb126f0ec769f49dcefca2f200286451583084b8": "0x10fcbc2350396bf0000",
        "0xfb135eb15a8bac72b69915342a60bbc06b7e077c": "0x43c33c1937564800000",
        "0xfb223c1e22eac1269b32ee156a5385922ed36fb8": "0x6c6b935b8bbd400000",
        "0xfb37cf6b4f81a9e222fba22e9bd24b5098b733cf": "0x21a754a6dc5280000",
        "0xfb3860f4121c432ebdc8ec6a0331b1b709792e90": "0x208c394af1c8880000",
        "0xfb39189af876e762c71d6c3e741893df226cedd6": "0xd8d726b7177a800000",
        "0xfb3a0b0d6b6a718f6fc0292a825dc9247a90a5d0": "0xad6dd199e975b0000",
        "0xfb3fa1ac08aba9cc3bf0fe9d483820688f65b410": "0x65a4da25d3016c00000",
        "0xfb3fe09bb836861529d7518da27635f538505615": "0x4be39216fda0700000",
        "0xfb5125bf0f5eb0b6f020e56bfc2fdf3d402c097e": "0x14061b9d77a5e980000",
        "0xfb5518714cefc36d04865de5915ef0ff47dfe743": "0x6c6b935b8bbd400000",
        "0xfb5ffaa0f7615726357891475818939d2037cf96": "0x1158e460913d00000",
        "0xfb685c15e439965ef626bf0d834cd1a89f2b5695": "0xd5967be4fc3f100000",
        "0xfb744b951d094b310262c8f986c860df9ab1de65": "0x2d1c515f1cb4a8000",
        "0xfb79abdb925c55b9f98efeef64cfc9eb61f51bb1": "0x6140c056fb0ac80000",
        "0xfb8113f94d9173eefd5a3073f516803a10b286ae": "0x4563918244f400000",
        "0xfb842ca2c5ef133917a236a0d4ac40690110b038": "0x10969a62be15880000",
        "0xfb91fb1a695553f0c68e21276decf0b83909b86d": "0x56c003617af780000",
        "0xfb9473cf7712350a1fa0395273fc80560752e4fb": "0x6af2198ba85aa0000",
        "0xfb949c647fdcfd2514c7d58e31f28a532d8c5833": "0x43c33c1937564800000",
        "0xfba5486d53c6e240494241abf87e43c7600d413a": "0x6bbf61494948340000",
        "0xfbb161fe875f09290a4b262bc60110848f0d2226": "0x6c6b935b8bbd400000",
        "0xfbbbebcfbe235e57dd2306ad1a9ec581c7f9f48f": "0x22b1c8c1227a00000",
        "0xfbc01db54e47cdc3c438694ab717a856c23fe6e9": "0x1ca7150ab174f470000",
        "0xfbcfcc4a7b0f26cf26e9f3332132e2fc6a230766": "0x1b1ae4d6e2ef5000000",
        "0xfbe71622bcbd31c1a36976e7e5f670c07ffe16de": "0x15af1d78b58c400000",
        "0xfbede32c349f3300ef4cd33b4de7dc18e443d326": "0xab4dcf399a3a600000",
        "0xfbf204c813f836d83962c7870c7808ca347fd33e": "0x1158e460913d00000",
        "0xfbf75933e01b75b154ef0669076be87f62dffae1": "0x10846372f249d4c00000",
        "0xfc0096b21e95acb8d619d176a4a1d8d529badbef": "0x14d9693bcbec028000",
        "0xfc00a420a36107dfd5f495128a5fe5abb2db0f34": "0x143179d869110200000",
        "0xfc018a690ad6746dbe3acf9712ddca52b6250039": "0x21e19e0c9bab2400000",
        "0xfc02734033e57f70517e0afc7ee62461f06fad8e": "0x155bd9307f9fe80000",
        "0xfc0ee6f7c2b3714ae9916c45566605b656f32441": "0x5f68e8131ecf800000",
        "0xfc10b7a67b3268d5331bfb6a14def5ea4a162ca3": "0xad78ebc5ac6200000",
        "0xfc15cb99a8d1030b12770add033a79ee0d0c908c": "0x12fa00bd52e6240000",
        "0xfc2952b4c49fedd0bc0528a308495e6d6a1c71d6": "0x6c6b935b8bbd400000",
        "0xfc2c1f88961d019c3e9ea33009152e0693fbf88a": "0x1b1ae4d6e2ef5000000",
        "0xfc361105dd90f9ede566499d69e9130395f12ac8": "0x53a4fe2f204e80e00000",
        "0xfc372ff6927cb396d9cf29803500110da632bc52": "0x6c6b935b8bbd400000",
        "0xfc39be41094b1997d2169e8264c2c3baa6c99bc4": "0x6c6b935b8bbd400000",
        "0xfc3d226bb36a58f526568857b0bb12d109ec9301": "0x6c6b935b8bbd400000",
        "0xfc43829ac787ff88aaf183ba352aadbf5a15b193": "0xd6ac0a2b0552e00000",
        "0xfc49c1439a41d6b3cf26bb67e0365224e5e38f5f": "0x3636d7af5ec98e0000",
        "0xfc5500825105cf712a318a5e9c3bfc69c89d0c12": "0xd8d726b7177a800000",
        "0xfc66faba277f4b5de64ad45eb19c31e00ced3ed5": "0x131beb925ffd3200000",
        "0xfc7e22a503ec5abe9b08c50bd14999f520fa4884": "0x15a477dfbe1ea148000",
        "0xfc8215a0a69913f62a43bf1c8590b9ddcd0d8ddb": "0x6c6b935b8bbd400000",
        "0xfc989cb487bf1a7d17e4c1b7c4b7aafdda6b0a8d": "0x1158e460913d00000",
        "0xfc9b347464b2f9929d807e039dae48d3d98de379": "0x2f6f10780d22cc00000",
        "0xfca43bbc23a0d321ba9e46b929735ce7d8ef0c18": "0x1158e460913d00000",
        "0xfca73eff8771c0103ba3cc1a9c259448c72abf0b": "0x3635c9adc5dea00000",
        "0xfcada300283f6bcc134a91456760b0d77de410e0": "0x6c6b935b8bbd400000",
        "0xfcbc5c71ace79741450b012cf6b8d3f17db68a70": "0x205b4dfa1ee74780000",
        "0xfcbd85feea6a754fcf3449449e37ff9784f7773c": "0xa74ada69abd7780000",
        "0xfcc9d4a4262e7a027ab7519110d802c495ceea39": "0x1595182224b26480000",
        "0xfccd0d1ecee27addea95f6857aeec8c7a04b28ee": "0x21e19e0c9bab2400000",
        "0xfcd0b4827cd208ffbf5e759dba8c3cc61d8c2c3c": "0x1b1ae4d6e2ef5000000",
        "0xfce089635ce97abac06b44819be5bb0a3e2e0b37": "0x503920a7630a78000",
        "0xfcf199f8b854222f182e4e1d099d4e323e2aae01": "0x3635c9adc5dea00000",
        "0xfcfc3a5004d678613f0b36a642269a7f371c3f6a": "0x3635c9adc5dea00000",
        "0xfd191a35157d781373fb411bf9f25290047c5eef": "0x3635c9adc5dea00000",
        "0xfd1faa347b0fcc804c2da86c36d5f1d18b7087bb": "0x2d6eb247a96f60000",
        "0xfd1fb5a89a89a721b8797068fbc47f3e9d52e149": "0xcd0b5837fc6580000",
        "0xfd204f4f4aba2525ba728afdf78792cbdeb735ae": "0x6c6b935b8bbd400000",
        "0xfd2757cc3551a095878d97875615fe0c6a32aa8a": "0x206db15299beac0000",
        "0xfd2872d19e57853cfa16effe93d0b1d47b4f93fb": "0xd8d726b7177a800000",
        "0xfd2929271e9d2095a264767e7b0df52ea0d1d400": "0xa2a1eb251b5ae40000",
        "0xfd377a385272900cb436a3bb7962cdffe93f5dad": "0x6c6b935b8bbd400000",
        "0xfd40242bb34a70855ef0fd90f3802dec2136b327": "0x68a875073e29240000",
        "0xfd452c3969ece3801c542020f1cdcaa1c71ed23d": "0x152d02c7e14af6800000",
        "0xfd4b551f6fdbcda6c511b5bb372250a6b783e534": "0x11de1e6db450c0000",
        "0xfd4b989558ae11be0c3b36e2d6f2a54a9343ca2e": "0x6c6b935b8bbd400000",
        "0xfd4de8e3748a289cf7d060517d9d38388db01fb8": "0xd8d726b7177a80000",
        "0xfd5a63157f914fd398eab19c137dd9550bb7715c": "0x56bc75e2d63100000",
        "0xfd60d2b5af3d35f7aaf0c393052e79c4d823d985": "0x30eb50d2e14080000",
        "0xfd686de53fa97f99639e2568549720bc588c9efc": "0x6ac5c62d9486070000",
        "0xfd7ede8f5240a06541eb699d782c2f9afb2170f6": "0x487a9a304539440000",
        "0xfd812bc69fb170ef57e2327e80affd14f8e4b6d2": "0x6c6b935b8bbd400000",
        "0xfd88d114220f081cb3d5e15be8152ab07366576a": "0x1043561a8829300000",
        "0xfd918536a8efa6f6cefe1fa1153995fef5e33d3b": "0x1b1ae4d6e2ef500000",
        "0xfd920f722682afb5af451b0544d4f41b3b9d5742": "0x7e52056a123f3c0000",
        "0xfd9579f119bbc819a02b61e38d8803c942f24d32": "0x5b97e9081d9400000",
        "0xfda0ce15330707f10bce3201172d2018b9ddea74": "0x2d041d705a2c60000",
        "0xfda3042819af3e662900e1b92b4358eda6e92590": "0x1907a284d58f63e00000",
        "0xfda6810ea5ac985d6ffbf1c511f1c142edcfddf7": "0xd8d726b7177a800000",
        "0xfdb33944f2360615e5be239577c8a19ba52d9887": "0x209d922f5259c50000",
        "0xfdba5359f7ec3bc770ac49975d844ec9716256f1": "0x3635c9adc5dea00000",
        "0xfdc4d4765a942f5bf96931a9e8cc7ab8b757ff4c": "0x126c478a0e3ea8600000",
        "0xfdcd5d80b105897a57abc47865768b2900524295": "0x15af1d78b58c4000000",
        "0xfdd1195f797d4f35717d15e6f9810a9a3ff55460": "0xfc936392801c0000",
        "0xfdd502a74e813bcfa355ceda3c176f6a6871af7f": "0x15af1d78b58c400000",
        "0xfde395bc0b6d5cbb4c1d8fea3e0b4bff635e9db7": "0x6c6b935b8bbd400000",
        "0xfdeaac2acf1d138e19f2fc3f9fb74592e3ed818a": "0x243d4d18229ca20000",
        "0xfdecc82ddfc56192e26f563c3d68cb544a96bfed": "0x17da3a04c7b3e00000",
        "0xfdf42343019b0b0c6bf260b173afab7e45b9d621": "0x6c6acc67d7b1d40000",
        "0xfdf449f108c6fb4f5a2b081eed7e45e6919e4d25": "0x6c6b935b8bbd400000",
        "0xfdfd6134c04a8ab7eb16f00643f8fed7daaaecb2": "0x15af1d78b58c400000",
        "0xfe00bf439911a553982db638039245bcf032dbdc": "0x155bd9307f9fe80000",
        "0xfe016ec17ec5f10e3bb98ff4a1eda045157682ab": "0x145f5402e7b2e60000",
        "0xfe0e30e214290d743dd30eb082f1f0a5225ade61": "0xad78ebc5ac6200000",
        "0xfe210b8f04dc6d4f76216acfcbd59ba83be9b630": "0x1158e460913d00000",
        "0xfe22a0b388668d1ae2643e771dacf38a434223cc": "0xd8db5ebd7b26380000",
        "0xfe362688845fa244cc807e4b1130eb3741a8051e": "0x3635c9adc5dea00000",
        "0xfe3827d57630cf8761d512797b0b858e478bbd12": "0x1158e460913d00000",
        "0xfe418b421a9c6d373602790475d2303e11a75930": "0x3708baed3d68900000",
        "0xfe4249127950e2f896ec0e7e2e3d055aab10550f": "0x243d4d18229ca20000",
        "0xfe4d8403216fd571572bf1bdb01d00578978d688": "0x215f835bc769da80000",
        "0xfe53b94989d89964da2061539526bbe979dd2ea9": "0x68a875073e29240000",
        "0xfe549bbfe64740189892932538daaf46d2b61d4f": "0x22b1c8c1227a00000",
        "0xfe615d975c0887e0c9113ec7298420a793af8b96": "0x1b1ae4d6e2ef5000000",
        "0xfe65c4188d7922576909642044fdc52395560165": "0xd8d726b7177a800000",
        "0xfe697ff22ca547bfc95e33d960da605c6763f35b": "0x47d4119fd960940000",
        "0xfe6a895b795cb4bf85903d3ce09c5aa43953d3bf": "0xb8507a820728200000",
        "0xfe6f5f42b6193b1ad16206e4afb5239d4d7db45e": "0x5dc892aa1131c80000",
        "0xfe7011b698bf3371132d7445b19eb5b094356aee": "0x6c6b935b8bbd400000",
        "0xfe80e9232deaff19baf99869883a4bdf0004e53c": "0x2e62f20a69be400000",
        "0xfe8e6e3665570dff7a1bda697aa589c0b4e9024a": "0x6c6b935b8bbd400000",
        "0xfe8f1fdcab7fbec9a6a3fcc507619600505c36a3": "0x11164759ffb320000",
        "0xfe91eccf2bd566afa11696c5049fa84c69630a52": "0x692ae8897081d00000",
        "0xfe96c4cd381562401aa32a86e65b9d52fa8aee27": "0x8f1d5c1cae37400000",
        "0xfe98c664c3e447a95e69bd582171b7176ea2a685": "0xd8d726b7177a800000",
        "0xfe9ad12ef05d6d90261f96c8340a0381974df477": "0x6c6b935b8bbd400000",
        "0xfe9c0fffefb803081256c0cf4d6659e6d33eb4fb": "0x52d542804f1ce00000",
        "0xfe9cfc3bb293ddb285e625f3582f74a6b0a5a6cd": "0x6acb3df27e1f880000",
        "0xfe9e1197d7974a7648dcc7a03112a88edbc9045d": "0x10afc1ade3b4ed40000",
        "0xfeaca2ac74624bf348dac9985143cfd652a4be55": "0x5897fcbb02914088000",
        "0xfead1803e5e737a68e18472d9ac715f0994cc2be": "0x1b1ae4d6e2ef500000",
        "0xfeb8b8e2af716ae41fc7c04bcf29540156461e6b": "0x545174a528a77a0000",
        "0xfeb92d30bf01ff9a1901666c5573532bfa07eeec": "0x3635c9adc5dea00000",
        "0xfebc3173bc9072136354002b7b4fb3bfc53f22f1": "0x140ec80fa7ee880000",
        "0xfebd48d0ffdbd5656cd5e686363a61145228f279": "0x97c9ce4cf6d5c00000",
        "0xfebd9f81cf78bd5fb6c4b9a24bd414bb9bfa4c4e": "0x6be10fb8ed6e138000",
        "0xfec06fe27b44c784b2396ec92f7b923ad17e9077": "0x6c6b935b8bbd400000",
        "0xfec14e5485de2b3eef5e74c46146db8e454e0335": "0x9b41fbf9e0aec0000",
        "0xfed8476d10d584b38bfa6737600ef19d35c41ed8": "0x62a992e53a0af00000",
        "0xfeef3b6eabc94affd3310c1c4d0e65375e131119": "0x1158e460913d00000",
        "0xfef09d70243f39ed8cd800bf9651479e8f4aca3c": "0xad78ebc5ac6200000",
        "0xfef3b3dead1a6926d49aa32b12c22af54d9ff985": "0x3635c9adc5dea00000",
        "0xff0b7cb71da9d4c1ea6ecc28ebda504c63f82fd1": "0x388a885df2fc6c0000",
        "0xff0c3c7798e8733dd2668152891bab80a8be955c": "0x45946b0f9e9d60000",
        "0xff0cb06c42e3d88948e45bd7b0d4e291aefeea51": "0x678a932062e4180000",
        "0xff0cc8dac824fa24fc3caa2169e6e057cf638ad6": "0xd8d726b7177a800000",
        "0xff0e2fec304207467e1e3307f64cbf30af8fd9cd": "0x6c6b935b8bbd400000",
        "0xff128f4b355be1dc4a6f94fa510d7f15d53c2aff": "0x93739534d286800000",
        "0xff12e49d8e06aa20f886293c0b98ed7eff788805": "0xd8d726b7177a800000",
        "0xff207308ced238a6c01ad0213ca9eb4465d42590": "0x6c6acc67d7b1d40000",
        "0xff26138330274df4e0a3081e6df7dd983ec6e78f": "0x6c6b935b8bbd400000",
        "0xff2726294148b86c78a9372497e459898ed3fee3": "0x6acb3df27e1f880000",
        "0xff3ded7a40d3aff0d7a8c45fa6136aa0433db457": "0x6c68ccd09b022c0000",
        "0xff3eee57c34d6dae970d8b311117c53586cd3502": "0x5c283d410394100000",
        "0xff3ef6ba151c21b59986ae64f6e8228bc9a2c733": "0x6c6b935b8bbd400000",
        "0xff41d9e1b4effe18d8b0d1f63fc4255fb4e06c3d": "0x487a9a304539440000",
        "0xff45cb34c928364d9cc9d8bb00373474618f06f3": "0x56bc75e2d63100000",
        "0xff49a775814ec00051a795a875de24592ea400d4": "0x2a5a058fc295ed000000",
        "0xff4a408f50e9e72146a28ce4fc8d90271f116e84": "0x6acb3df27e1f880000",
        "0xff4d9c8484c43c42ff2c5ab759996498d323994d": "0xd8d726b7177a800000",
        "0xff4fc66069046c525658c337a917f2d4b832b409": "0x6c6b935b8bbd400000",
        "0xff5162f2354dc492c75fd6e3a107268660eecb47": "0x5c283d410394100000",
        "0xff545bbb66fbd00eb5e6373ff4e326f5feb5fe12": "0x1158e460913d00000",
        "0xff5e7ee7d5114821e159dca5e81f18f1bfffbff9": "0x6c6b935b8bbd400000",
        "0xff61c9c1b7a3d8b53bba20b34466544b7b216644": "0x6c6b935b8bbd400000",
        "0xff65511cada259260c1ddc41974ecaecd32d6357": "0x5f68e8131ecf800000",
        "0xff7843c7010aa7e61519b762dfe49124a76b0e4e": "0xc5b17924412b9bb00000",
        "0xff78541756ab2b706e0d70b18adb700fc4f1643d": "0x92896529baddc880000",
        "0xff83855051ee8ffb70b4817dba3211ed2355869d": "0x15af1d78b58c400000",
        "0xff850e3be1eb6a4d726c08fa73aad358f39706da": "0x692ae8897081d00000",
        "0xff86e5e8e15b53909600e41308dab75f0e24e46b": "0x30eb50d2e140800000",
        "0xff88ebacc41b3687f39e4b59e159599b80cba33f": "0x15af1d78b58c400000",
        "0xff8a2ca5a81333f19998255f203256e1a819c0aa": "0xc249fdd3277800000",
        "0xff8eb07de3d49d9d52bbe8e5b26dbe1d160fa834": "0xd814dcb94453080000",
        "0xffa4aff1a37f984b0a67272149273ae9bd41e3bc": "0x21e19e0c9bab2400000",
        "0xffa696ecbd787e66abae4fe87b635f07ca57d848": "0x487a9a304539440000",
        "0xffac3db879a6c7158e8dec603b407463ba0d31cf": "0x6acb3df27e1f880000",
        "0xffad3dd74e2c1f796ac640de56dc99b4c792a402": "0x10f0cf064dd59200000",
        "0xffb04726dfa41afdc819168418610472970d7bfc": "0xd8d726b7177a800000",
        "0xffb3bcc3196a8c3cb834cec94c34fed35b3e1054": "0x48a43c54602f700000",
        "0xffb974673367f5c07be5fd270dc4b7138b074d57": "0x85ebc8bdb9066d8000",
        "0xffb9c7217e66743031eb377af65c77db7359dcda": "0x22b1c8c1227a00000",
        "0xffbc3da0381ec339c1c049eb1ed9ee34fdcea6ca": "0xd8d726b7177a800000",
        "0xffc5fc4b7e8a0293ff39a3a0f7d60d2646d37a74": "0x6c6b935b8bbd400000",
        "0xffc9cc3094b041ad0e076f968a0de3b167255866": "0x1770c1650beee80000",
        "0xffd5170fd1a8118d558e7511e364b24906c4f6b3": "0x341d8cd27f1588000",
        "0xffd6da958eecbc016bab91058440d39b41c7be83": "0x43c33c1937564800000",
        "0xffe0e997f1977a615f5a315af413fd4869343ba0": "0x56cd55fc64dfe0000",
        "0xffe28db53c9044b4ecd4053fd1b4b10d7056c688": "0x56bc75e2d63100000",
        "0xffe2e28c3fb74749d7e780dc8a5d422538e6e451": "0xdbb81e05bc12d8000",
        "0xffe8cbc1681e5e9db74a0f93f8ed25897519120f": "0x51b1d3839261ac0000",
        "0xffeac0305ede3a915295ec8e61c7f881006f4474": "0x556f64c1fe7fa0000",
        "0xffec0913c635baca2f5e57a37aa9fb7b6c9b6e26": "0x2ba39e82ed5d740000",
        "0xfff33a3bd36abdbd412707b8e310d6011454a7ae": "0x1b1ae4d6e2ef5000000",
        "0xfff4bad596633479a2a29f9a8b3f78eefd07e6ee": "0x56bc75e2d63100000",
        "0xfff7ac99c8e4feb60c9750054bdc14ce1857f181": "0x3635c9adc5dea00000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/ropsten.json
  var require_ropsten2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/ropsten.json"(exports, module) {
      module.exports = {
        "0x0000000000000000000000000000000000000000": "0x1",
        "0x0000000000000000000000000000000000000001": "0x1",
        "0x0000000000000000000000000000000000000002": "0x1",
        "0x0000000000000000000000000000000000000003": "0x1",
        "0x0000000000000000000000000000000000000004": "0x1",
        "0x0000000000000000000000000000000000000005": "0x1",
        "0x0000000000000000000000000000000000000006": "0x1",
        "0x0000000000000000000000000000000000000007": "0x1",
        "0x0000000000000000000000000000000000000008": "0x1",
        "0x0000000000000000000000000000000000000009": "0x1",
        "0x000000000000000000000000000000000000000a": "0x0",
        "0x000000000000000000000000000000000000000b": "0x0",
        "0x000000000000000000000000000000000000000c": "0x0",
        "0x000000000000000000000000000000000000000d": "0x0",
        "0x000000000000000000000000000000000000000e": "0x0",
        "0x000000000000000000000000000000000000000f": "0x0",
        "0x0000000000000000000000000000000000000010": "0x0",
        "0x0000000000000000000000000000000000000011": "0x0",
        "0x0000000000000000000000000000000000000012": "0x0",
        "0x0000000000000000000000000000000000000013": "0x0",
        "0x0000000000000000000000000000000000000014": "0x0",
        "0x0000000000000000000000000000000000000015": "0x0",
        "0x0000000000000000000000000000000000000016": "0x0",
        "0x0000000000000000000000000000000000000017": "0x0",
        "0x0000000000000000000000000000000000000018": "0x0",
        "0x0000000000000000000000000000000000000019": "0x0",
        "0x000000000000000000000000000000000000001a": "0x0",
        "0x000000000000000000000000000000000000001b": "0x0",
        "0x000000000000000000000000000000000000001c": "0x0",
        "0x000000000000000000000000000000000000001d": "0x0",
        "0x000000000000000000000000000000000000001e": "0x0",
        "0x000000000000000000000000000000000000001f": "0x0",
        "0x0000000000000000000000000000000000000020": "0x0",
        "0x0000000000000000000000000000000000000021": "0x0",
        "0x0000000000000000000000000000000000000022": "0x0",
        "0x0000000000000000000000000000000000000023": "0x0",
        "0x0000000000000000000000000000000000000024": "0x0",
        "0x0000000000000000000000000000000000000025": "0x0",
        "0x0000000000000000000000000000000000000026": "0x0",
        "0x0000000000000000000000000000000000000027": "0x0",
        "0x0000000000000000000000000000000000000028": "0x0",
        "0x0000000000000000000000000000000000000029": "0x0",
        "0x000000000000000000000000000000000000002a": "0x0",
        "0x000000000000000000000000000000000000002b": "0x0",
        "0x000000000000000000000000000000000000002c": "0x0",
        "0x000000000000000000000000000000000000002d": "0x0",
        "0x000000000000000000000000000000000000002e": "0x0",
        "0x000000000000000000000000000000000000002f": "0x0",
        "0x0000000000000000000000000000000000000030": "0x0",
        "0x0000000000000000000000000000000000000031": "0x0",
        "0x0000000000000000000000000000000000000032": "0x0",
        "0x0000000000000000000000000000000000000033": "0x0",
        "0x0000000000000000000000000000000000000034": "0x0",
        "0x0000000000000000000000000000000000000035": "0x0",
        "0x0000000000000000000000000000000000000036": "0x0",
        "0x0000000000000000000000000000000000000037": "0x0",
        "0x0000000000000000000000000000000000000038": "0x0",
        "0x0000000000000000000000000000000000000039": "0x0",
        "0x000000000000000000000000000000000000003a": "0x0",
        "0x000000000000000000000000000000000000003b": "0x0",
        "0x000000000000000000000000000000000000003c": "0x0",
        "0x000000000000000000000000000000000000003d": "0x0",
        "0x000000000000000000000000000000000000003e": "0x0",
        "0x000000000000000000000000000000000000003f": "0x0",
        "0x0000000000000000000000000000000000000040": "0x0",
        "0x0000000000000000000000000000000000000041": "0x0",
        "0x0000000000000000000000000000000000000042": "0x0",
        "0x0000000000000000000000000000000000000043": "0x0",
        "0x0000000000000000000000000000000000000044": "0x0",
        "0x0000000000000000000000000000000000000045": "0x0",
        "0x0000000000000000000000000000000000000046": "0x0",
        "0x0000000000000000000000000000000000000047": "0x0",
        "0x0000000000000000000000000000000000000048": "0x0",
        "0x0000000000000000000000000000000000000049": "0x0",
        "0x000000000000000000000000000000000000004a": "0x0",
        "0x000000000000000000000000000000000000004b": "0x0",
        "0x000000000000000000000000000000000000004c": "0x0",
        "0x000000000000000000000000000000000000004d": "0x0",
        "0x000000000000000000000000000000000000004e": "0x0",
        "0x000000000000000000000000000000000000004f": "0x0",
        "0x0000000000000000000000000000000000000050": "0x0",
        "0x0000000000000000000000000000000000000051": "0x0",
        "0x0000000000000000000000000000000000000052": "0x0",
        "0x0000000000000000000000000000000000000053": "0x0",
        "0x0000000000000000000000000000000000000054": "0x0",
        "0x0000000000000000000000000000000000000055": "0x0",
        "0x0000000000000000000000000000000000000056": "0x0",
        "0x0000000000000000000000000000000000000057": "0x0",
        "0x0000000000000000000000000000000000000058": "0x0",
        "0x0000000000000000000000000000000000000059": "0x0",
        "0x000000000000000000000000000000000000005a": "0x0",
        "0x000000000000000000000000000000000000005b": "0x0",
        "0x000000000000000000000000000000000000005c": "0x0",
        "0x000000000000000000000000000000000000005d": "0x0",
        "0x000000000000000000000000000000000000005e": "0x0",
        "0x000000000000000000000000000000000000005f": "0x0",
        "0x0000000000000000000000000000000000000060": "0x0",
        "0x0000000000000000000000000000000000000061": "0x0",
        "0x0000000000000000000000000000000000000062": "0x0",
        "0x0000000000000000000000000000000000000063": "0x0",
        "0x0000000000000000000000000000000000000064": "0x0",
        "0x0000000000000000000000000000000000000065": "0x0",
        "0x0000000000000000000000000000000000000066": "0x0",
        "0x0000000000000000000000000000000000000067": "0x0",
        "0x0000000000000000000000000000000000000068": "0x0",
        "0x0000000000000000000000000000000000000069": "0x0",
        "0x000000000000000000000000000000000000006a": "0x0",
        "0x000000000000000000000000000000000000006b": "0x0",
        "0x000000000000000000000000000000000000006c": "0x0",
        "0x000000000000000000000000000000000000006d": "0x0",
        "0x000000000000000000000000000000000000006e": "0x0",
        "0x000000000000000000000000000000000000006f": "0x0",
        "0x0000000000000000000000000000000000000070": "0x0",
        "0x0000000000000000000000000000000000000071": "0x0",
        "0x0000000000000000000000000000000000000072": "0x0",
        "0x0000000000000000000000000000000000000073": "0x0",
        "0x0000000000000000000000000000000000000074": "0x0",
        "0x0000000000000000000000000000000000000075": "0x0",
        "0x0000000000000000000000000000000000000076": "0x0",
        "0x0000000000000000000000000000000000000077": "0x0",
        "0x0000000000000000000000000000000000000078": "0x0",
        "0x0000000000000000000000000000000000000079": "0x0",
        "0x000000000000000000000000000000000000007a": "0x0",
        "0x000000000000000000000000000000000000007b": "0x0",
        "0x000000000000000000000000000000000000007c": "0x0",
        "0x000000000000000000000000000000000000007d": "0x0",
        "0x000000000000000000000000000000000000007e": "0x0",
        "0x000000000000000000000000000000000000007f": "0x0",
        "0x0000000000000000000000000000000000000080": "0x0",
        "0x0000000000000000000000000000000000000081": "0x0",
        "0x0000000000000000000000000000000000000082": "0x0",
        "0x0000000000000000000000000000000000000083": "0x0",
        "0x0000000000000000000000000000000000000084": "0x0",
        "0x0000000000000000000000000000000000000085": "0x0",
        "0x0000000000000000000000000000000000000086": "0x0",
        "0x0000000000000000000000000000000000000087": "0x0",
        "0x0000000000000000000000000000000000000088": "0x0",
        "0x0000000000000000000000000000000000000089": "0x0",
        "0x000000000000000000000000000000000000008a": "0x0",
        "0x000000000000000000000000000000000000008b": "0x0",
        "0x000000000000000000000000000000000000008c": "0x0",
        "0x000000000000000000000000000000000000008d": "0x0",
        "0x000000000000000000000000000000000000008e": "0x0",
        "0x000000000000000000000000000000000000008f": "0x0",
        "0x0000000000000000000000000000000000000090": "0x0",
        "0x0000000000000000000000000000000000000091": "0x0",
        "0x0000000000000000000000000000000000000092": "0x0",
        "0x0000000000000000000000000000000000000093": "0x0",
        "0x0000000000000000000000000000000000000094": "0x0",
        "0x0000000000000000000000000000000000000095": "0x0",
        "0x0000000000000000000000000000000000000096": "0x0",
        "0x0000000000000000000000000000000000000097": "0x0",
        "0x0000000000000000000000000000000000000098": "0x0",
        "0x0000000000000000000000000000000000000099": "0x0",
        "0x000000000000000000000000000000000000009a": "0x0",
        "0x000000000000000000000000000000000000009b": "0x0",
        "0x000000000000000000000000000000000000009c": "0x0",
        "0x000000000000000000000000000000000000009d": "0x0",
        "0x000000000000000000000000000000000000009e": "0x0",
        "0x000000000000000000000000000000000000009f": "0x0",
        "0x00000000000000000000000000000000000000a0": "0x0",
        "0x00000000000000000000000000000000000000a1": "0x0",
        "0x00000000000000000000000000000000000000a2": "0x0",
        "0x00000000000000000000000000000000000000a3": "0x0",
        "0x00000000000000000000000000000000000000a4": "0x0",
        "0x00000000000000000000000000000000000000a5": "0x0",
        "0x00000000000000000000000000000000000000a6": "0x0",
        "0x00000000000000000000000000000000000000a7": "0x0",
        "0x00000000000000000000000000000000000000a8": "0x0",
        "0x00000000000000000000000000000000000000a9": "0x0",
        "0x00000000000000000000000000000000000000aa": "0x0",
        "0x00000000000000000000000000000000000000ab": "0x0",
        "0x00000000000000000000000000000000000000ac": "0x0",
        "0x00000000000000000000000000000000000000ad": "0x0",
        "0x00000000000000000000000000000000000000ae": "0x0",
        "0x00000000000000000000000000000000000000af": "0x0",
        "0x00000000000000000000000000000000000000b0": "0x0",
        "0x00000000000000000000000000000000000000b1": "0x0",
        "0x00000000000000000000000000000000000000b2": "0x0",
        "0x00000000000000000000000000000000000000b3": "0x0",
        "0x00000000000000000000000000000000000000b4": "0x0",
        "0x00000000000000000000000000000000000000b5": "0x0",
        "0x00000000000000000000000000000000000000b6": "0x0",
        "0x00000000000000000000000000000000000000b7": "0x0",
        "0x00000000000000000000000000000000000000b8": "0x0",
        "0x00000000000000000000000000000000000000b9": "0x0",
        "0x00000000000000000000000000000000000000ba": "0x0",
        "0x00000000000000000000000000000000000000bb": "0x0",
        "0x00000000000000000000000000000000000000bc": "0x0",
        "0x00000000000000000000000000000000000000bd": "0x0",
        "0x00000000000000000000000000000000000000be": "0x0",
        "0x00000000000000000000000000000000000000bf": "0x0",
        "0x00000000000000000000000000000000000000c0": "0x0",
        "0x00000000000000000000000000000000000000c1": "0x0",
        "0x00000000000000000000000000000000000000c2": "0x0",
        "0x00000000000000000000000000000000000000c3": "0x0",
        "0x00000000000000000000000000000000000000c4": "0x0",
        "0x00000000000000000000000000000000000000c5": "0x0",
        "0x00000000000000000000000000000000000000c6": "0x0",
        "0x00000000000000000000000000000000000000c7": "0x0",
        "0x00000000000000000000000000000000000000c8": "0x0",
        "0x00000000000000000000000000000000000000c9": "0x0",
        "0x00000000000000000000000000000000000000ca": "0x0",
        "0x00000000000000000000000000000000000000cb": "0x0",
        "0x00000000000000000000000000000000000000cc": "0x0",
        "0x00000000000000000000000000000000000000cd": "0x0",
        "0x00000000000000000000000000000000000000ce": "0x0",
        "0x00000000000000000000000000000000000000cf": "0x0",
        "0x00000000000000000000000000000000000000d0": "0x0",
        "0x00000000000000000000000000000000000000d1": "0x0",
        "0x00000000000000000000000000000000000000d2": "0x0",
        "0x00000000000000000000000000000000000000d3": "0x0",
        "0x00000000000000000000000000000000000000d4": "0x0",
        "0x00000000000000000000000000000000000000d5": "0x0",
        "0x00000000000000000000000000000000000000d6": "0x0",
        "0x00000000000000000000000000000000000000d7": "0x0",
        "0x00000000000000000000000000000000000000d8": "0x0",
        "0x00000000000000000000000000000000000000d9": "0x0",
        "0x00000000000000000000000000000000000000da": "0x0",
        "0x00000000000000000000000000000000000000db": "0x0",
        "0x00000000000000000000000000000000000000dc": "0x0",
        "0x00000000000000000000000000000000000000dd": "0x0",
        "0x00000000000000000000000000000000000000de": "0x0",
        "0x00000000000000000000000000000000000000df": "0x0",
        "0x00000000000000000000000000000000000000e0": "0x0",
        "0x00000000000000000000000000000000000000e1": "0x0",
        "0x00000000000000000000000000000000000000e2": "0x0",
        "0x00000000000000000000000000000000000000e3": "0x0",
        "0x00000000000000000000000000000000000000e4": "0x0",
        "0x00000000000000000000000000000000000000e5": "0x0",
        "0x00000000000000000000000000000000000000e6": "0x0",
        "0x00000000000000000000000000000000000000e7": "0x0",
        "0x00000000000000000000000000000000000000e8": "0x0",
        "0x00000000000000000000000000000000000000e9": "0x0",
        "0x00000000000000000000000000000000000000ea": "0x0",
        "0x00000000000000000000000000000000000000eb": "0x0",
        "0x00000000000000000000000000000000000000ec": "0x0",
        "0x00000000000000000000000000000000000000ed": "0x0",
        "0x00000000000000000000000000000000000000ee": "0x0",
        "0x00000000000000000000000000000000000000ef": "0x0",
        "0x00000000000000000000000000000000000000f0": "0x0",
        "0x00000000000000000000000000000000000000f1": "0x0",
        "0x00000000000000000000000000000000000000f2": "0x0",
        "0x00000000000000000000000000000000000000f3": "0x0",
        "0x00000000000000000000000000000000000000f4": "0x0",
        "0x00000000000000000000000000000000000000f5": "0x0",
        "0x00000000000000000000000000000000000000f6": "0x0",
        "0x00000000000000000000000000000000000000f7": "0x0",
        "0x00000000000000000000000000000000000000f8": "0x0",
        "0x00000000000000000000000000000000000000f9": "0x0",
        "0x00000000000000000000000000000000000000fa": "0x0",
        "0x00000000000000000000000000000000000000fb": "0x0",
        "0x00000000000000000000000000000000000000fc": "0x0",
        "0x00000000000000000000000000000000000000fd": "0x0",
        "0x00000000000000000000000000000000000000fe": "0x0",
        "0x00000000000000000000000000000000000000ff": "0x0",
        "0x874b54a8bd152966d63f706bae1ffeb0411921e5": "0xc9f2c9cd04674edea40000000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/rinkeby.json
  var require_rinkeby2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/rinkeby.json"(exports, module) {
      module.exports = {
        "0x0000000000000000000000000000000000000000": "0x1",
        "0x0000000000000000000000000000000000000001": "0x1",
        "0x0000000000000000000000000000000000000002": "0x1",
        "0x0000000000000000000000000000000000000003": "0x1",
        "0x0000000000000000000000000000000000000004": "0x1",
        "0x0000000000000000000000000000000000000005": "0x1",
        "0x0000000000000000000000000000000000000006": "0x1",
        "0x0000000000000000000000000000000000000007": "0x1",
        "0x0000000000000000000000000000000000000008": "0x1",
        "0x0000000000000000000000000000000000000009": "0x1",
        "0x000000000000000000000000000000000000000a": "0x1",
        "0x000000000000000000000000000000000000000b": "0x1",
        "0x000000000000000000000000000000000000000c": "0x1",
        "0x000000000000000000000000000000000000000d": "0x1",
        "0x000000000000000000000000000000000000000e": "0x1",
        "0x000000000000000000000000000000000000000f": "0x1",
        "0x0000000000000000000000000000000000000010": "0x1",
        "0x0000000000000000000000000000000000000011": "0x1",
        "0x0000000000000000000000000000000000000012": "0x1",
        "0x0000000000000000000000000000000000000013": "0x1",
        "0x0000000000000000000000000000000000000014": "0x1",
        "0x0000000000000000000000000000000000000015": "0x1",
        "0x0000000000000000000000000000000000000016": "0x1",
        "0x0000000000000000000000000000000000000017": "0x1",
        "0x0000000000000000000000000000000000000018": "0x1",
        "0x0000000000000000000000000000000000000019": "0x1",
        "0x000000000000000000000000000000000000001a": "0x1",
        "0x000000000000000000000000000000000000001b": "0x1",
        "0x000000000000000000000000000000000000001c": "0x1",
        "0x000000000000000000000000000000000000001d": "0x1",
        "0x000000000000000000000000000000000000001e": "0x1",
        "0x000000000000000000000000000000000000001f": "0x1",
        "0x0000000000000000000000000000000000000020": "0x1",
        "0x0000000000000000000000000000000000000021": "0x1",
        "0x0000000000000000000000000000000000000022": "0x1",
        "0x0000000000000000000000000000000000000023": "0x1",
        "0x0000000000000000000000000000000000000024": "0x1",
        "0x0000000000000000000000000000000000000025": "0x1",
        "0x0000000000000000000000000000000000000026": "0x1",
        "0x0000000000000000000000000000000000000027": "0x1",
        "0x0000000000000000000000000000000000000028": "0x1",
        "0x0000000000000000000000000000000000000029": "0x1",
        "0x000000000000000000000000000000000000002a": "0x1",
        "0x000000000000000000000000000000000000002b": "0x1",
        "0x000000000000000000000000000000000000002c": "0x1",
        "0x000000000000000000000000000000000000002d": "0x1",
        "0x000000000000000000000000000000000000002e": "0x1",
        "0x000000000000000000000000000000000000002f": "0x1",
        "0x0000000000000000000000000000000000000030": "0x1",
        "0x0000000000000000000000000000000000000031": "0x1",
        "0x0000000000000000000000000000000000000032": "0x1",
        "0x0000000000000000000000000000000000000033": "0x1",
        "0x0000000000000000000000000000000000000034": "0x1",
        "0x0000000000000000000000000000000000000035": "0x1",
        "0x0000000000000000000000000000000000000036": "0x1",
        "0x0000000000000000000000000000000000000037": "0x1",
        "0x0000000000000000000000000000000000000038": "0x1",
        "0x0000000000000000000000000000000000000039": "0x1",
        "0x000000000000000000000000000000000000003a": "0x1",
        "0x000000000000000000000000000000000000003b": "0x1",
        "0x000000000000000000000000000000000000003c": "0x1",
        "0x000000000000000000000000000000000000003d": "0x1",
        "0x000000000000000000000000000000000000003e": "0x1",
        "0x000000000000000000000000000000000000003f": "0x1",
        "0x0000000000000000000000000000000000000040": "0x1",
        "0x0000000000000000000000000000000000000041": "0x1",
        "0x0000000000000000000000000000000000000042": "0x1",
        "0x0000000000000000000000000000000000000043": "0x1",
        "0x0000000000000000000000000000000000000044": "0x1",
        "0x0000000000000000000000000000000000000045": "0x1",
        "0x0000000000000000000000000000000000000046": "0x1",
        "0x0000000000000000000000000000000000000047": "0x1",
        "0x0000000000000000000000000000000000000048": "0x1",
        "0x0000000000000000000000000000000000000049": "0x1",
        "0x000000000000000000000000000000000000004a": "0x1",
        "0x000000000000000000000000000000000000004b": "0x1",
        "0x000000000000000000000000000000000000004c": "0x1",
        "0x000000000000000000000000000000000000004d": "0x1",
        "0x000000000000000000000000000000000000004e": "0x1",
        "0x000000000000000000000000000000000000004f": "0x1",
        "0x0000000000000000000000000000000000000050": "0x1",
        "0x0000000000000000000000000000000000000051": "0x1",
        "0x0000000000000000000000000000000000000052": "0x1",
        "0x0000000000000000000000000000000000000053": "0x1",
        "0x0000000000000000000000000000000000000054": "0x1",
        "0x0000000000000000000000000000000000000055": "0x1",
        "0x0000000000000000000000000000000000000056": "0x1",
        "0x0000000000000000000000000000000000000057": "0x1",
        "0x0000000000000000000000000000000000000058": "0x1",
        "0x0000000000000000000000000000000000000059": "0x1",
        "0x000000000000000000000000000000000000005a": "0x1",
        "0x000000000000000000000000000000000000005b": "0x1",
        "0x000000000000000000000000000000000000005c": "0x1",
        "0x000000000000000000000000000000000000005d": "0x1",
        "0x000000000000000000000000000000000000005e": "0x1",
        "0x000000000000000000000000000000000000005f": "0x1",
        "0x0000000000000000000000000000000000000060": "0x1",
        "0x0000000000000000000000000000000000000061": "0x1",
        "0x0000000000000000000000000000000000000062": "0x1",
        "0x0000000000000000000000000000000000000063": "0x1",
        "0x0000000000000000000000000000000000000064": "0x1",
        "0x0000000000000000000000000000000000000065": "0x1",
        "0x0000000000000000000000000000000000000066": "0x1",
        "0x0000000000000000000000000000000000000067": "0x1",
        "0x0000000000000000000000000000000000000068": "0x1",
        "0x0000000000000000000000000000000000000069": "0x1",
        "0x000000000000000000000000000000000000006a": "0x1",
        "0x000000000000000000000000000000000000006b": "0x1",
        "0x000000000000000000000000000000000000006c": "0x1",
        "0x000000000000000000000000000000000000006d": "0x1",
        "0x000000000000000000000000000000000000006e": "0x1",
        "0x000000000000000000000000000000000000006f": "0x1",
        "0x0000000000000000000000000000000000000070": "0x1",
        "0x0000000000000000000000000000000000000071": "0x1",
        "0x0000000000000000000000000000000000000072": "0x1",
        "0x0000000000000000000000000000000000000073": "0x1",
        "0x0000000000000000000000000000000000000074": "0x1",
        "0x0000000000000000000000000000000000000075": "0x1",
        "0x0000000000000000000000000000000000000076": "0x1",
        "0x0000000000000000000000000000000000000077": "0x1",
        "0x0000000000000000000000000000000000000078": "0x1",
        "0x0000000000000000000000000000000000000079": "0x1",
        "0x000000000000000000000000000000000000007a": "0x1",
        "0x000000000000000000000000000000000000007b": "0x1",
        "0x000000000000000000000000000000000000007c": "0x1",
        "0x000000000000000000000000000000000000007d": "0x1",
        "0x000000000000000000000000000000000000007e": "0x1",
        "0x000000000000000000000000000000000000007f": "0x1",
        "0x0000000000000000000000000000000000000080": "0x1",
        "0x0000000000000000000000000000000000000081": "0x1",
        "0x0000000000000000000000000000000000000082": "0x1",
        "0x0000000000000000000000000000000000000083": "0x1",
        "0x0000000000000000000000000000000000000084": "0x1",
        "0x0000000000000000000000000000000000000085": "0x1",
        "0x0000000000000000000000000000000000000086": "0x1",
        "0x0000000000000000000000000000000000000087": "0x1",
        "0x0000000000000000000000000000000000000088": "0x1",
        "0x0000000000000000000000000000000000000089": "0x1",
        "0x000000000000000000000000000000000000008a": "0x1",
        "0x000000000000000000000000000000000000008b": "0x1",
        "0x000000000000000000000000000000000000008c": "0x1",
        "0x000000000000000000000000000000000000008d": "0x1",
        "0x000000000000000000000000000000000000008e": "0x1",
        "0x000000000000000000000000000000000000008f": "0x1",
        "0x0000000000000000000000000000000000000090": "0x1",
        "0x0000000000000000000000000000000000000091": "0x1",
        "0x0000000000000000000000000000000000000092": "0x1",
        "0x0000000000000000000000000000000000000093": "0x1",
        "0x0000000000000000000000000000000000000094": "0x1",
        "0x0000000000000000000000000000000000000095": "0x1",
        "0x0000000000000000000000000000000000000096": "0x1",
        "0x0000000000000000000000000000000000000097": "0x1",
        "0x0000000000000000000000000000000000000098": "0x1",
        "0x0000000000000000000000000000000000000099": "0x1",
        "0x000000000000000000000000000000000000009a": "0x1",
        "0x000000000000000000000000000000000000009b": "0x1",
        "0x000000000000000000000000000000000000009c": "0x1",
        "0x000000000000000000000000000000000000009d": "0x1",
        "0x000000000000000000000000000000000000009e": "0x1",
        "0x000000000000000000000000000000000000009f": "0x1",
        "0x00000000000000000000000000000000000000a0": "0x1",
        "0x00000000000000000000000000000000000000a1": "0x1",
        "0x00000000000000000000000000000000000000a2": "0x1",
        "0x00000000000000000000000000000000000000a3": "0x1",
        "0x00000000000000000000000000000000000000a4": "0x1",
        "0x00000000000000000000000000000000000000a5": "0x1",
        "0x00000000000000000000000000000000000000a6": "0x1",
        "0x00000000000000000000000000000000000000a7": "0x1",
        "0x00000000000000000000000000000000000000a8": "0x1",
        "0x00000000000000000000000000000000000000a9": "0x1",
        "0x00000000000000000000000000000000000000aa": "0x1",
        "0x00000000000000000000000000000000000000ab": "0x1",
        "0x00000000000000000000000000000000000000ac": "0x1",
        "0x00000000000000000000000000000000000000ad": "0x1",
        "0x00000000000000000000000000000000000000ae": "0x1",
        "0x00000000000000000000000000000000000000af": "0x1",
        "0x00000000000000000000000000000000000000b0": "0x1",
        "0x00000000000000000000000000000000000000b1": "0x1",
        "0x00000000000000000000000000000000000000b2": "0x1",
        "0x00000000000000000000000000000000000000b3": "0x1",
        "0x00000000000000000000000000000000000000b4": "0x1",
        "0x00000000000000000000000000000000000000b5": "0x1",
        "0x00000000000000000000000000000000000000b6": "0x1",
        "0x00000000000000000000000000000000000000b7": "0x1",
        "0x00000000000000000000000000000000000000b8": "0x1",
        "0x00000000000000000000000000000000000000b9": "0x1",
        "0x00000000000000000000000000000000000000ba": "0x1",
        "0x00000000000000000000000000000000000000bb": "0x1",
        "0x00000000000000000000000000000000000000bc": "0x1",
        "0x00000000000000000000000000000000000000bd": "0x1",
        "0x00000000000000000000000000000000000000be": "0x1",
        "0x00000000000000000000000000000000000000bf": "0x1",
        "0x00000000000000000000000000000000000000c0": "0x1",
        "0x00000000000000000000000000000000000000c1": "0x1",
        "0x00000000000000000000000000000000000000c2": "0x1",
        "0x00000000000000000000000000000000000000c3": "0x1",
        "0x00000000000000000000000000000000000000c4": "0x1",
        "0x00000000000000000000000000000000000000c5": "0x1",
        "0x00000000000000000000000000000000000000c6": "0x1",
        "0x00000000000000000000000000000000000000c7": "0x1",
        "0x00000000000000000000000000000000000000c8": "0x1",
        "0x00000000000000000000000000000000000000c9": "0x1",
        "0x00000000000000000000000000000000000000ca": "0x1",
        "0x00000000000000000000000000000000000000cb": "0x1",
        "0x00000000000000000000000000000000000000cc": "0x1",
        "0x00000000000000000000000000000000000000cd": "0x1",
        "0x00000000000000000000000000000000000000ce": "0x1",
        "0x00000000000000000000000000000000000000cf": "0x1",
        "0x00000000000000000000000000000000000000d0": "0x1",
        "0x00000000000000000000000000000000000000d1": "0x1",
        "0x00000000000000000000000000000000000000d2": "0x1",
        "0x00000000000000000000000000000000000000d3": "0x1",
        "0x00000000000000000000000000000000000000d4": "0x1",
        "0x00000000000000000000000000000000000000d5": "0x1",
        "0x00000000000000000000000000000000000000d6": "0x1",
        "0x00000000000000000000000000000000000000d7": "0x1",
        "0x00000000000000000000000000000000000000d8": "0x1",
        "0x00000000000000000000000000000000000000d9": "0x1",
        "0x00000000000000000000000000000000000000da": "0x1",
        "0x00000000000000000000000000000000000000db": "0x1",
        "0x00000000000000000000000000000000000000dc": "0x1",
        "0x00000000000000000000000000000000000000dd": "0x1",
        "0x00000000000000000000000000000000000000de": "0x1",
        "0x00000000000000000000000000000000000000df": "0x1",
        "0x00000000000000000000000000000000000000e0": "0x1",
        "0x00000000000000000000000000000000000000e1": "0x1",
        "0x00000000000000000000000000000000000000e2": "0x1",
        "0x00000000000000000000000000000000000000e3": "0x1",
        "0x00000000000000000000000000000000000000e4": "0x1",
        "0x00000000000000000000000000000000000000e5": "0x1",
        "0x00000000000000000000000000000000000000e6": "0x1",
        "0x00000000000000000000000000000000000000e7": "0x1",
        "0x00000000000000000000000000000000000000e8": "0x1",
        "0x00000000000000000000000000000000000000e9": "0x1",
        "0x00000000000000000000000000000000000000ea": "0x1",
        "0x00000000000000000000000000000000000000eb": "0x1",
        "0x00000000000000000000000000000000000000ec": "0x1",
        "0x00000000000000000000000000000000000000ed": "0x1",
        "0x00000000000000000000000000000000000000ee": "0x1",
        "0x00000000000000000000000000000000000000ef": "0x1",
        "0x00000000000000000000000000000000000000f0": "0x1",
        "0x00000000000000000000000000000000000000f1": "0x1",
        "0x00000000000000000000000000000000000000f2": "0x1",
        "0x00000000000000000000000000000000000000f3": "0x1",
        "0x00000000000000000000000000000000000000f4": "0x1",
        "0x00000000000000000000000000000000000000f5": "0x1",
        "0x00000000000000000000000000000000000000f6": "0x1",
        "0x00000000000000000000000000000000000000f7": "0x1",
        "0x00000000000000000000000000000000000000f8": "0x1",
        "0x00000000000000000000000000000000000000f9": "0x1",
        "0x00000000000000000000000000000000000000fa": "0x1",
        "0x00000000000000000000000000000000000000fb": "0x1",
        "0x00000000000000000000000000000000000000fc": "0x1",
        "0x00000000000000000000000000000000000000fd": "0x1",
        "0x00000000000000000000000000000000000000fe": "0x1",
        "0x00000000000000000000000000000000000000ff": "0x1",
        "0x31b98d14007bdee637298086988a0bbd31184523": "0x200000000000000000000000000000000000000000000000000000000000000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/kovan.json
  var require_kovan2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/kovan.json"(exports, module) {
      module.exports = {
        "0x0000000000000000000000000000000000000001": "0x1",
        "0x0000000000000000000000000000000000000002": "0x1",
        "0x0000000000000000000000000000000000000003": "0x1",
        "0x0000000000000000000000000000000000000004": "0x1",
        "0x00521965e7bd230323c423d96c657db5b79d099f": "0x100000000000000000000000000000000000000000000000000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/goerli.json
  var require_goerli2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/goerli.json"(exports, module) {
      module.exports = {
        "0x0000000000000000000000000000000000000000": "0x1",
        "0x0000000000000000000000000000000000000001": "0x1",
        "0x0000000000000000000000000000000000000002": "0x1",
        "0x0000000000000000000000000000000000000003": "0x1",
        "0x0000000000000000000000000000000000000004": "0x1",
        "0x0000000000000000000000000000000000000005": "0x1",
        "0x0000000000000000000000000000000000000006": "0x1",
        "0x0000000000000000000000000000000000000007": "0x1",
        "0x0000000000000000000000000000000000000008": "0x1",
        "0x0000000000000000000000000000000000000009": "0x1",
        "0x000000000000000000000000000000000000000a": "0x1",
        "0x000000000000000000000000000000000000000b": "0x1",
        "0x000000000000000000000000000000000000000c": "0x1",
        "0x000000000000000000000000000000000000000d": "0x1",
        "0x000000000000000000000000000000000000000e": "0x1",
        "0x000000000000000000000000000000000000000f": "0x1",
        "0x0000000000000000000000000000000000000010": "0x1",
        "0x0000000000000000000000000000000000000011": "0x1",
        "0x0000000000000000000000000000000000000012": "0x1",
        "0x0000000000000000000000000000000000000013": "0x1",
        "0x0000000000000000000000000000000000000014": "0x1",
        "0x0000000000000000000000000000000000000015": "0x1",
        "0x0000000000000000000000000000000000000016": "0x1",
        "0x0000000000000000000000000000000000000017": "0x1",
        "0x0000000000000000000000000000000000000018": "0x1",
        "0x0000000000000000000000000000000000000019": "0x1",
        "0x000000000000000000000000000000000000001a": "0x1",
        "0x000000000000000000000000000000000000001b": "0x1",
        "0x000000000000000000000000000000000000001c": "0x1",
        "0x000000000000000000000000000000000000001d": "0x1",
        "0x000000000000000000000000000000000000001e": "0x1",
        "0x000000000000000000000000000000000000001f": "0x1",
        "0x0000000000000000000000000000000000000020": "0x1",
        "0x0000000000000000000000000000000000000021": "0x1",
        "0x0000000000000000000000000000000000000022": "0x1",
        "0x0000000000000000000000000000000000000023": "0x1",
        "0x0000000000000000000000000000000000000024": "0x1",
        "0x0000000000000000000000000000000000000025": "0x1",
        "0x0000000000000000000000000000000000000026": "0x1",
        "0x0000000000000000000000000000000000000027": "0x1",
        "0x0000000000000000000000000000000000000028": "0x1",
        "0x0000000000000000000000000000000000000029": "0x1",
        "0x000000000000000000000000000000000000002a": "0x1",
        "0x000000000000000000000000000000000000002b": "0x1",
        "0x000000000000000000000000000000000000002c": "0x1",
        "0x000000000000000000000000000000000000002d": "0x1",
        "0x000000000000000000000000000000000000002e": "0x1",
        "0x000000000000000000000000000000000000002f": "0x1",
        "0x0000000000000000000000000000000000000030": "0x1",
        "0x0000000000000000000000000000000000000031": "0x1",
        "0x0000000000000000000000000000000000000032": "0x1",
        "0x0000000000000000000000000000000000000033": "0x1",
        "0x0000000000000000000000000000000000000034": "0x1",
        "0x0000000000000000000000000000000000000035": "0x1",
        "0x0000000000000000000000000000000000000036": "0x1",
        "0x0000000000000000000000000000000000000037": "0x1",
        "0x0000000000000000000000000000000000000038": "0x1",
        "0x0000000000000000000000000000000000000039": "0x1",
        "0x000000000000000000000000000000000000003a": "0x1",
        "0x000000000000000000000000000000000000003b": "0x1",
        "0x000000000000000000000000000000000000003c": "0x1",
        "0x000000000000000000000000000000000000003d": "0x1",
        "0x000000000000000000000000000000000000003e": "0x1",
        "0x000000000000000000000000000000000000003f": "0x1",
        "0x0000000000000000000000000000000000000040": "0x1",
        "0x0000000000000000000000000000000000000041": "0x1",
        "0x0000000000000000000000000000000000000042": "0x1",
        "0x0000000000000000000000000000000000000043": "0x1",
        "0x0000000000000000000000000000000000000044": "0x1",
        "0x0000000000000000000000000000000000000045": "0x1",
        "0x0000000000000000000000000000000000000046": "0x1",
        "0x0000000000000000000000000000000000000047": "0x1",
        "0x0000000000000000000000000000000000000048": "0x1",
        "0x0000000000000000000000000000000000000049": "0x1",
        "0x000000000000000000000000000000000000004a": "0x1",
        "0x000000000000000000000000000000000000004b": "0x1",
        "0x000000000000000000000000000000000000004c": "0x1",
        "0x000000000000000000000000000000000000004d": "0x1",
        "0x000000000000000000000000000000000000004e": "0x1",
        "0x000000000000000000000000000000000000004f": "0x1",
        "0x0000000000000000000000000000000000000050": "0x1",
        "0x0000000000000000000000000000000000000051": "0x1",
        "0x0000000000000000000000000000000000000052": "0x1",
        "0x0000000000000000000000000000000000000053": "0x1",
        "0x0000000000000000000000000000000000000054": "0x1",
        "0x0000000000000000000000000000000000000055": "0x1",
        "0x0000000000000000000000000000000000000056": "0x1",
        "0x0000000000000000000000000000000000000057": "0x1",
        "0x0000000000000000000000000000000000000058": "0x1",
        "0x0000000000000000000000000000000000000059": "0x1",
        "0x000000000000000000000000000000000000005a": "0x1",
        "0x000000000000000000000000000000000000005b": "0x1",
        "0x000000000000000000000000000000000000005c": "0x1",
        "0x000000000000000000000000000000000000005d": "0x1",
        "0x000000000000000000000000000000000000005e": "0x1",
        "0x000000000000000000000000000000000000005f": "0x1",
        "0x0000000000000000000000000000000000000060": "0x1",
        "0x0000000000000000000000000000000000000061": "0x1",
        "0x0000000000000000000000000000000000000062": "0x1",
        "0x0000000000000000000000000000000000000063": "0x1",
        "0x0000000000000000000000000000000000000064": "0x1",
        "0x0000000000000000000000000000000000000065": "0x1",
        "0x0000000000000000000000000000000000000066": "0x1",
        "0x0000000000000000000000000000000000000067": "0x1",
        "0x0000000000000000000000000000000000000068": "0x1",
        "0x0000000000000000000000000000000000000069": "0x1",
        "0x000000000000000000000000000000000000006a": "0x1",
        "0x000000000000000000000000000000000000006b": "0x1",
        "0x000000000000000000000000000000000000006c": "0x1",
        "0x000000000000000000000000000000000000006d": "0x1",
        "0x000000000000000000000000000000000000006e": "0x1",
        "0x000000000000000000000000000000000000006f": "0x1",
        "0x0000000000000000000000000000000000000070": "0x1",
        "0x0000000000000000000000000000000000000071": "0x1",
        "0x0000000000000000000000000000000000000072": "0x1",
        "0x0000000000000000000000000000000000000073": "0x1",
        "0x0000000000000000000000000000000000000074": "0x1",
        "0x0000000000000000000000000000000000000075": "0x1",
        "0x0000000000000000000000000000000000000076": "0x1",
        "0x0000000000000000000000000000000000000077": "0x1",
        "0x0000000000000000000000000000000000000078": "0x1",
        "0x0000000000000000000000000000000000000079": "0x1",
        "0x000000000000000000000000000000000000007a": "0x1",
        "0x000000000000000000000000000000000000007b": "0x1",
        "0x000000000000000000000000000000000000007c": "0x1",
        "0x000000000000000000000000000000000000007d": "0x1",
        "0x000000000000000000000000000000000000007e": "0x1",
        "0x000000000000000000000000000000000000007f": "0x1",
        "0x0000000000000000000000000000000000000080": "0x1",
        "0x0000000000000000000000000000000000000081": "0x1",
        "0x0000000000000000000000000000000000000082": "0x1",
        "0x0000000000000000000000000000000000000083": "0x1",
        "0x0000000000000000000000000000000000000084": "0x1",
        "0x0000000000000000000000000000000000000085": "0x1",
        "0x0000000000000000000000000000000000000086": "0x1",
        "0x0000000000000000000000000000000000000087": "0x1",
        "0x0000000000000000000000000000000000000088": "0x1",
        "0x0000000000000000000000000000000000000089": "0x1",
        "0x000000000000000000000000000000000000008a": "0x1",
        "0x000000000000000000000000000000000000008b": "0x1",
        "0x000000000000000000000000000000000000008c": "0x1",
        "0x000000000000000000000000000000000000008d": "0x1",
        "0x000000000000000000000000000000000000008e": "0x1",
        "0x000000000000000000000000000000000000008f": "0x1",
        "0x0000000000000000000000000000000000000090": "0x1",
        "0x0000000000000000000000000000000000000091": "0x1",
        "0x0000000000000000000000000000000000000092": "0x1",
        "0x0000000000000000000000000000000000000093": "0x1",
        "0x0000000000000000000000000000000000000094": "0x1",
        "0x0000000000000000000000000000000000000095": "0x1",
        "0x0000000000000000000000000000000000000096": "0x1",
        "0x0000000000000000000000000000000000000097": "0x1",
        "0x0000000000000000000000000000000000000098": "0x1",
        "0x0000000000000000000000000000000000000099": "0x1",
        "0x000000000000000000000000000000000000009a": "0x1",
        "0x000000000000000000000000000000000000009b": "0x1",
        "0x000000000000000000000000000000000000009c": "0x1",
        "0x000000000000000000000000000000000000009d": "0x1",
        "0x000000000000000000000000000000000000009e": "0x1",
        "0x000000000000000000000000000000000000009f": "0x1",
        "0x00000000000000000000000000000000000000a0": "0x1",
        "0x00000000000000000000000000000000000000a1": "0x1",
        "0x00000000000000000000000000000000000000a2": "0x1",
        "0x00000000000000000000000000000000000000a3": "0x1",
        "0x00000000000000000000000000000000000000a4": "0x1",
        "0x00000000000000000000000000000000000000a5": "0x1",
        "0x00000000000000000000000000000000000000a6": "0x1",
        "0x00000000000000000000000000000000000000a7": "0x1",
        "0x00000000000000000000000000000000000000a8": "0x1",
        "0x00000000000000000000000000000000000000a9": "0x1",
        "0x00000000000000000000000000000000000000aa": "0x1",
        "0x00000000000000000000000000000000000000ab": "0x1",
        "0x00000000000000000000000000000000000000ac": "0x1",
        "0x00000000000000000000000000000000000000ad": "0x1",
        "0x00000000000000000000000000000000000000ae": "0x1",
        "0x00000000000000000000000000000000000000af": "0x1",
        "0x00000000000000000000000000000000000000b0": "0x1",
        "0x00000000000000000000000000000000000000b1": "0x1",
        "0x00000000000000000000000000000000000000b2": "0x1",
        "0x00000000000000000000000000000000000000b3": "0x1",
        "0x00000000000000000000000000000000000000b4": "0x1",
        "0x00000000000000000000000000000000000000b5": "0x1",
        "0x00000000000000000000000000000000000000b6": "0x1",
        "0x00000000000000000000000000000000000000b7": "0x1",
        "0x00000000000000000000000000000000000000b8": "0x1",
        "0x00000000000000000000000000000000000000b9": "0x1",
        "0x00000000000000000000000000000000000000ba": "0x1",
        "0x00000000000000000000000000000000000000bb": "0x1",
        "0x00000000000000000000000000000000000000bc": "0x1",
        "0x00000000000000000000000000000000000000bd": "0x1",
        "0x00000000000000000000000000000000000000be": "0x1",
        "0x00000000000000000000000000000000000000bf": "0x1",
        "0x00000000000000000000000000000000000000c0": "0x1",
        "0x00000000000000000000000000000000000000c1": "0x1",
        "0x00000000000000000000000000000000000000c2": "0x1",
        "0x00000000000000000000000000000000000000c3": "0x1",
        "0x00000000000000000000000000000000000000c4": "0x1",
        "0x00000000000000000000000000000000000000c5": "0x1",
        "0x00000000000000000000000000000000000000c6": "0x1",
        "0x00000000000000000000000000000000000000c7": "0x1",
        "0x00000000000000000000000000000000000000c8": "0x1",
        "0x00000000000000000000000000000000000000c9": "0x1",
        "0x00000000000000000000000000000000000000ca": "0x1",
        "0x00000000000000000000000000000000000000cb": "0x1",
        "0x00000000000000000000000000000000000000cc": "0x1",
        "0x00000000000000000000000000000000000000cd": "0x1",
        "0x00000000000000000000000000000000000000ce": "0x1",
        "0x00000000000000000000000000000000000000cf": "0x1",
        "0x00000000000000000000000000000000000000d0": "0x1",
        "0x00000000000000000000000000000000000000d1": "0x1",
        "0x00000000000000000000000000000000000000d2": "0x1",
        "0x00000000000000000000000000000000000000d3": "0x1",
        "0x00000000000000000000000000000000000000d4": "0x1",
        "0x00000000000000000000000000000000000000d5": "0x1",
        "0x00000000000000000000000000000000000000d6": "0x1",
        "0x00000000000000000000000000000000000000d7": "0x1",
        "0x00000000000000000000000000000000000000d8": "0x1",
        "0x00000000000000000000000000000000000000d9": "0x1",
        "0x00000000000000000000000000000000000000da": "0x1",
        "0x00000000000000000000000000000000000000db": "0x1",
        "0x00000000000000000000000000000000000000dc": "0x1",
        "0x00000000000000000000000000000000000000dd": "0x1",
        "0x00000000000000000000000000000000000000de": "0x1",
        "0x00000000000000000000000000000000000000df": "0x1",
        "0x00000000000000000000000000000000000000e0": "0x1",
        "0x00000000000000000000000000000000000000e1": "0x1",
        "0x00000000000000000000000000000000000000e2": "0x1",
        "0x00000000000000000000000000000000000000e3": "0x1",
        "0x00000000000000000000000000000000000000e4": "0x1",
        "0x00000000000000000000000000000000000000e5": "0x1",
        "0x00000000000000000000000000000000000000e6": "0x1",
        "0x00000000000000000000000000000000000000e7": "0x1",
        "0x00000000000000000000000000000000000000e8": "0x1",
        "0x00000000000000000000000000000000000000e9": "0x1",
        "0x00000000000000000000000000000000000000ea": "0x1",
        "0x00000000000000000000000000000000000000eb": "0x1",
        "0x00000000000000000000000000000000000000ec": "0x1",
        "0x00000000000000000000000000000000000000ed": "0x1",
        "0x00000000000000000000000000000000000000ee": "0x1",
        "0x00000000000000000000000000000000000000ef": "0x1",
        "0x00000000000000000000000000000000000000f0": "0x1",
        "0x00000000000000000000000000000000000000f1": "0x1",
        "0x00000000000000000000000000000000000000f2": "0x1",
        "0x00000000000000000000000000000000000000f3": "0x1",
        "0x00000000000000000000000000000000000000f4": "0x1",
        "0x00000000000000000000000000000000000000f5": "0x1",
        "0x00000000000000000000000000000000000000f6": "0x1",
        "0x00000000000000000000000000000000000000f7": "0x1",
        "0x00000000000000000000000000000000000000f8": "0x1",
        "0x00000000000000000000000000000000000000f9": "0x1",
        "0x00000000000000000000000000000000000000fa": "0x1",
        "0x00000000000000000000000000000000000000fb": "0x1",
        "0x00000000000000000000000000000000000000fc": "0x1",
        "0x00000000000000000000000000000000000000fd": "0x1",
        "0x00000000000000000000000000000000000000fe": "0x1",
        "0x00000000000000000000000000000000000000ff": "0x1",
        "0x4c2ae482593505f0163cdefc073e81c63cda4107": "0x152d02c7e14af6800000",
        "0xa8e8f14732658e4b51e8711931053a8a69baf2b1": "0x152d02c7e14af6800000",
        "0xd9a5179f091d85051d3c982785efd1455cec8699": "0x84595161401484a000000",
        "0xe0a2bd4258d2768837baa26a28fe71dc079f84c7": "0x4a47e3c12448f4ad000000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/genesisStates/sepolia.json
  var require_sepolia2 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/genesisStates/sepolia.json"(exports, module) {
      module.exports = {
        "0xa2A6d93439144FFE4D27c9E088dCD8b783946263": "0xD3C21BCECCEDA1000000",
        "0xBc11295936Aa79d594139de1B2e12629414F3BDB": "0xD3C21BCECCEDA1000000",
        "0x7cF5b79bfe291A67AB02b393E456cCc4c266F753": "0xD3C21BCECCEDA1000000",
        "0xaaec86394441f915bce3e6ab399977e9906f3b69": "0xD3C21BCECCEDA1000000",
        "0xF47CaE1CF79ca6758Bfc787dbD21E6bdBe7112B8": "0xD3C21BCECCEDA1000000",
        "0xd7eDDB78ED295B3C9629240E8924fb8D8874ddD8": "0xD3C21BCECCEDA1000000",
        "0x8b7F0977Bb4f0fBE7076FA22bC24acA043583F5e": "0xD3C21BCECCEDA1000000",
        "0xe2e2659028143784d557bcec6ff3a0721048880a": "0xD3C21BCECCEDA1000000",
        "0xd9a5179f091d85051d3c982785efd1455cec8699": "0xD3C21BCECCEDA1000000",
        "0xbeef32ca5b9a198d27B4e02F4c70439fE60356Cf": "0xD3C21BCECCEDA1000000",
        "0x0000006916a87b82333f4245046623b23794c65c": "0x84595161401484A000000",
        "0xb21c33de1fab3fa15499c62b59fe0cc3250020d1": "0x52B7D2DCC80CD2E4000000",
        "0x10F5d45854e038071485AC9e402308cF80D2d2fE": "0x52B7D2DCC80CD2E4000000",
        "0xd7d76c58b3a519e9fA6Cc4D22dC017259BC49F1E": "0x52B7D2DCC80CD2E4000000",
        "0x799D329e5f583419167cD722962485926E338F4a": "0xDE0B6B3A7640000"
      };
    }
  });

  // node_modules/@ethereumjs/common/dist.browser/index.js
  var require_dist4 = __commonJS({
    "node_modules/@ethereumjs/common/dist.browser/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || /* @__PURE__ */ (function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __values = exports && exports.__values || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
          next: function() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;
      var events_1 = require_events();
      var crc_32_1 = require_crc32();
      var ethereumjs_util_1 = require_dist3();
      var chains_1 = require_chains();
      var hardforks_1 = require_hardforks();
      var eips_1 = require_eips();
      var CustomChain;
      (function(CustomChain2) {
        CustomChain2["PolygonMainnet"] = "polygon-mainnet";
        CustomChain2["PolygonMumbai"] = "polygon-mumbai";
        CustomChain2["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
        CustomChain2["xDaiChain"] = "x-dai-chain";
        CustomChain2["OptimisticKovan"] = "optimistic-kovan";
        CustomChain2["OptimisticEthereum"] = "optimistic-ethereum";
      })(CustomChain = exports.CustomChain || (exports.CustomChain = {}));
      var Chain;
      (function(Chain2) {
        Chain2[Chain2["Mainnet"] = 1] = "Mainnet";
        Chain2[Chain2["Ropsten"] = 3] = "Ropsten";
        Chain2[Chain2["Rinkeby"] = 4] = "Rinkeby";
        Chain2[Chain2["Kovan"] = 42] = "Kovan";
        Chain2[Chain2["Goerli"] = 5] = "Goerli";
        Chain2[Chain2["Sepolia"] = 11155111] = "Sepolia";
      })(Chain = exports.Chain || (exports.Chain = {}));
      var Hardfork;
      (function(Hardfork2) {
        Hardfork2["Chainstart"] = "chainstart";
        Hardfork2["Homestead"] = "homestead";
        Hardfork2["Dao"] = "dao";
        Hardfork2["TangerineWhistle"] = "tangerineWhistle";
        Hardfork2["SpuriousDragon"] = "spuriousDragon";
        Hardfork2["Byzantium"] = "byzantium";
        Hardfork2["Constantinople"] = "constantinople";
        Hardfork2["Petersburg"] = "petersburg";
        Hardfork2["Istanbul"] = "istanbul";
        Hardfork2["MuirGlacier"] = "muirGlacier";
        Hardfork2["Berlin"] = "berlin";
        Hardfork2["London"] = "london";
        Hardfork2["ArrowGlacier"] = "arrowGlacier";
        Hardfork2["GrayGlacier"] = "grayGlacier";
        Hardfork2["MergeForkIdTransition"] = "mergeForkIdTransition";
        Hardfork2["Merge"] = "merge";
        Hardfork2["Shanghai"] = "shanghai";
      })(Hardfork = exports.Hardfork || (exports.Hardfork = {}));
      var ConsensusType;
      (function(ConsensusType2) {
        ConsensusType2["ProofOfStake"] = "pos";
        ConsensusType2["ProofOfWork"] = "pow";
        ConsensusType2["ProofOfAuthority"] = "poa";
      })(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));
      var ConsensusAlgorithm;
      (function(ConsensusAlgorithm2) {
        ConsensusAlgorithm2["Ethash"] = "ethash";
        ConsensusAlgorithm2["Clique"] = "clique";
        ConsensusAlgorithm2["Casper"] = "casper";
      })(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));
      var Common = (
        /** @class */
        (function(_super) {
          __extends(Common2, _super);
          function Common2(opts) {
            var e_1, _a;
            var _this = this;
            var _b, _c;
            _this = _super.call(this) || this;
            _this._supportedHardforks = [];
            _this._eips = [];
            _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];
            _this._chainParams = _this.setChain(opts.chain);
            _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;
            try {
              for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {
                var hf = _e.value;
                if (!hf.forkHash) {
                  hf.forkHash = _this._calcForkHash(hf.name);
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            _this._hardfork = _this.DEFAULT_HARDFORK;
            if (opts.supportedHardforks) {
              _this._supportedHardforks = opts.supportedHardforks;
            }
            if (opts.hardfork) {
              _this.setHardfork(opts.hardfork);
            }
            if (opts.eips) {
              _this.setEIPs(opts.eips);
            }
            return _this;
          }
          Common2.custom = function(chainParamsOrName, opts) {
            var _a;
            if (opts === void 0) {
              opts = {};
            }
            var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : "mainnet";
            var standardChainParams = __assign({}, Common2._getChainParams(baseChain));
            standardChainParams["name"] = "custom-chain";
            if (typeof chainParamsOrName !== "string") {
              return new Common2(__assign({ chain: __assign(__assign({}, standardChainParams), chainParamsOrName) }, opts));
            } else {
              if (chainParamsOrName === CustomChain.PolygonMainnet) {
                return Common2.custom({
                  name: CustomChain.PolygonMainnet,
                  chainId: 137,
                  networkId: 137
                }, opts);
              }
              if (chainParamsOrName === CustomChain.PolygonMumbai) {
                return Common2.custom({
                  name: CustomChain.PolygonMumbai,
                  chainId: 80001,
                  networkId: 80001
                }, opts);
              }
              if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {
                return Common2.custom({
                  name: CustomChain.ArbitrumRinkebyTestnet,
                  chainId: 421611,
                  networkId: 421611
                }, opts);
              }
              if (chainParamsOrName === CustomChain.xDaiChain) {
                return Common2.custom({
                  name: CustomChain.xDaiChain,
                  chainId: 100,
                  networkId: 100
                }, opts);
              }
              if (chainParamsOrName === CustomChain.OptimisticKovan) {
                return Common2.custom({
                  name: CustomChain.OptimisticKovan,
                  chainId: 69,
                  networkId: 69
                }, __assign({ hardfork: Hardfork.Berlin }, opts));
              }
              if (chainParamsOrName === CustomChain.OptimisticEthereum) {
                return Common2.custom({
                  name: CustomChain.OptimisticEthereum,
                  chainId: 10,
                  networkId: 10
                }, __assign({ hardfork: Hardfork.Berlin }, opts));
              }
              throw new Error("Custom chain ".concat(chainParamsOrName, " not supported"));
            }
          };
          Common2.forCustomChain = function(baseChain, customChainParams, hardfork, supportedHardforks) {
            var standardChainParams = Common2._getChainParams(baseChain);
            return new Common2({
              chain: __assign(__assign({}, standardChainParams), customChainParams),
              hardfork,
              supportedHardforks
            });
          };
          Common2.isSupportedChainId = function(chainId) {
            var initializedChains = (0, chains_1._getInitializedChains)();
            return Boolean(initializedChains["names"][chainId.toString()]);
          };
          Common2._getChainParams = function(chain, customChains) {
            var initializedChains = (0, chains_1._getInitializedChains)(customChains);
            if (typeof chain === "number" || ethereumjs_util_1.BN.isBN(chain)) {
              chain = chain.toString();
              if (initializedChains["names"][chain]) {
                var name_1 = initializedChains["names"][chain];
                return initializedChains[name_1];
              }
              throw new Error("Chain with ID ".concat(chain, " not supported"));
            }
            if (initializedChains[chain]) {
              return initializedChains[chain];
            }
            throw new Error("Chain with name ".concat(chain, " not supported"));
          };
          Common2.prototype.setChain = function(chain) {
            var e_2, _a;
            if (typeof chain === "number" || typeof chain === "string" || ethereumjs_util_1.BN.isBN(chain)) {
              var plainCustomChains = void 0;
              if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {
                plainCustomChains = this._customChains.map(function(e) {
                  return e[0];
                });
              } else {
                plainCustomChains = this._customChains;
              }
              this._chainParams = Common2._getChainParams(chain, plainCustomChains);
            } else if (typeof chain === "object") {
              if (this._customChains.length > 0) {
                throw new Error("Chain must be a string, number, or BN when initialized with customChains passed in");
              }
              var required = ["networkId", "genesis", "hardforks", "bootstrapNodes"];
              try {
                for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {
                  var param = required_1_1.value;
                  if (chain[param] === void 0) {
                    throw new Error("Missing required chain parameter: ".concat(param));
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);
                } finally {
                  if (e_2) throw e_2.error;
                }
              }
              this._chainParams = chain;
            } else {
              throw new Error("Wrong input format");
            }
            return this._chainParams;
          };
          Common2.prototype.setHardfork = function(hardfork) {
            var e_3, _a;
            if (!this._isSupportedHardfork(hardfork)) {
              throw new Error("Hardfork ".concat(hardfork, " not set as supported in supportedHardforks"));
            }
            var existing = false;
            try {
              for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {
                var hfChanges = HARDFORK_CHANGES_1_1.value;
                if (hfChanges[0] === hardfork) {
                  if (this._hardfork !== hardfork) {
                    this._hardfork = hardfork;
                    this.emit("hardforkChanged", hardfork);
                  }
                  existing = true;
                }
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);
              } finally {
                if (e_3) throw e_3.error;
              }
            }
            if (!existing) {
              throw new Error("Hardfork with name ".concat(hardfork, " not supported"));
            }
          };
          Common2.prototype.getHardforkByBlockNumber = function(blockNumber, td) {
            var e_4, _a;
            blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
            td = (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN);
            var hardfork = Hardfork.Chainstart;
            var minTdHF;
            var maxTdHF;
            var previousHF;
            try {
              for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hf = _c.value;
                if (hf.block === null) {
                  if (td !== void 0 && td !== null && hf.td !== void 0 && hf.td !== null) {
                    if (td.gte(new ethereumjs_util_1.BN(hf.td))) {
                      return hf.name;
                    }
                  }
                  continue;
                }
                if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {
                  hardfork = hf.name;
                }
                if (td && hf.td) {
                  if (td.gte(new ethereumjs_util_1.BN(hf.td))) {
                    minTdHF = hf.name;
                  } else {
                    maxTdHF = previousHF;
                  }
                }
                previousHF = hf.name;
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_4) throw e_4.error;
              }
            }
            if (td) {
              var msgAdd = "block number: ".concat(blockNumber, " (-> ").concat(hardfork, "), ");
              if (minTdHF) {
                if (!this.hardforkGteHardfork(hardfork, minTdHF)) {
                  var msg = "HF determined by block number is lower than the minimum total difficulty HF";
                  msgAdd += "total difficulty: ".concat(td, " (-> ").concat(minTdHF, ")");
                  throw new Error("".concat(msg, ": ").concat(msgAdd));
                }
              }
              if (maxTdHF) {
                if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {
                  var msg = "Maximum HF determined by total difficulty is lower than the block number HF";
                  msgAdd += "total difficulty: ".concat(td, " (-> ").concat(maxTdHF, ")");
                  throw new Error("".concat(msg, ": ").concat(msgAdd));
                }
              }
            }
            return hardfork;
          };
          Common2.prototype.setHardforkByBlockNumber = function(blockNumber, td) {
            var hardfork = this.getHardforkByBlockNumber(blockNumber, td);
            this.setHardfork(hardfork);
            return hardfork;
          };
          Common2.prototype._chooseHardfork = function(hardfork, onlySupported) {
            if (onlySupported === void 0) {
              onlySupported = true;
            }
            if (!hardfork) {
              hardfork = this._hardfork;
            } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {
              throw new Error("Hardfork ".concat(hardfork, " not set as supported in supportedHardforks"));
            }
            return hardfork;
          };
          Common2.prototype._getHardfork = function(hardfork) {
            var e_5, _a;
            var hfs = this.hardforks();
            try {
              for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {
                var hf = hfs_1_1.value;
                if (hf["name"] === hardfork)
                  return hf;
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);
              } finally {
                if (e_5) throw e_5.error;
              }
            }
            throw new Error("Hardfork ".concat(hardfork, " not defined for chain ").concat(this.chainName()));
          };
          Common2.prototype._isSupportedHardfork = function(hardfork) {
            var e_6, _a;
            if (this._supportedHardforks.length > 0) {
              try {
                for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var supportedHf = _c.value;
                  if (hardfork === supportedHf)
                    return true;
                }
              } catch (e_6_1) {
                e_6 = { error: e_6_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally {
                  if (e_6) throw e_6.error;
                }
              }
            } else {
              return true;
            }
            return false;
          };
          Common2.prototype.setEIPs = function(eips) {
            var e_7, _a;
            var _this = this;
            if (eips === void 0) {
              eips = [];
            }
            var _loop_1 = function(eip2) {
              if (!(eip2 in eips_1.EIPs)) {
                throw new Error("".concat(eip2, " not supported"));
              }
              var minHF = this_1.gteHardfork(eips_1.EIPs[eip2]["minimumHardfork"]);
              if (!minHF) {
                throw new Error("".concat(eip2, " cannot be activated on hardfork ").concat(this_1.hardfork(), ", minimumHardfork: ").concat(minHF));
              }
              if (eips_1.EIPs[eip2].requiredEIPs) {
                ;
                eips_1.EIPs[eip2].requiredEIPs.forEach(function(elem) {
                  if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {
                    throw new Error("".concat(eip2, " requires EIP ").concat(elem, ", but is not included in the EIP list"));
                  }
                });
              }
            };
            var this_1 = this;
            try {
              for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {
                var eip = eips_2_1.value;
                _loop_1(eip);
              }
            } catch (e_7_1) {
              e_7 = { error: e_7_1 };
            } finally {
              try {
                if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);
              } finally {
                if (e_7) throw e_7.error;
              }
            }
            this._eips = eips;
          };
          Common2.prototype.param = function(topic, name2) {
            var e_8, _a;
            var value = null;
            try {
              for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {
                var eip = _c.value;
                value = this.paramByEIP(topic, name2, eip);
                if (value !== null) {
                  return value;
                }
              }
            } catch (e_8_1) {
              e_8 = { error: e_8_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_8) throw e_8.error;
              }
            }
            return this.paramByHardfork(topic, name2, this._hardfork);
          };
          Common2.prototype.paramByHardfork = function(topic, name2, hardfork) {
            var e_9, _a, e_10, _b;
            hardfork = this._chooseHardfork(hardfork);
            var value = null;
            try {
              for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {
                var hfChanges = HARDFORK_CHANGES_2_1.value;
                if ("eips" in hfChanges[1]) {
                  var hfEIPs = hfChanges[1]["eips"];
                  try {
                    for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {
                      var eip = hfEIPs_1_1.value;
                      var valueEIP = this.paramByEIP(topic, name2, eip);
                      value = valueEIP !== null ? valueEIP : value;
                    }
                  } catch (e_10_1) {
                    e_10 = { error: e_10_1 };
                  } finally {
                    try {
                      if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);
                    } finally {
                      if (e_10) throw e_10.error;
                    }
                  }
                } else {
                  if (!hfChanges[1][topic]) {
                    throw new Error("Topic ".concat(topic, " not defined"));
                  }
                  if (hfChanges[1][topic][name2] !== void 0) {
                    value = hfChanges[1][topic][name2].v;
                  }
                }
                if (hfChanges[0] === hardfork)
                  break;
              }
            } catch (e_9_1) {
              e_9 = { error: e_9_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);
              } finally {
                if (e_9) throw e_9.error;
              }
            }
            return value;
          };
          Common2.prototype.paramByEIP = function(topic, name2, eip) {
            if (!(eip in eips_1.EIPs)) {
              throw new Error("".concat(eip, " not supported"));
            }
            var eipParams = eips_1.EIPs[eip];
            if (!(topic in eipParams)) {
              throw new Error("Topic ".concat(topic, " not defined"));
            }
            if (eipParams[topic][name2] === void 0) {
              return null;
            }
            var value = eipParams[topic][name2].v;
            return value;
          };
          Common2.prototype.paramByBlock = function(topic, name2, blockNumber) {
            var activeHfs = this.activeHardforks(blockNumber);
            var hardfork = activeHfs[activeHfs.length - 1]["name"];
            return this.paramByHardfork(topic, name2, hardfork);
          };
          Common2.prototype.isActivatedEIP = function(eip) {
            var e_11, _a;
            if (this.eips().includes(eip)) {
              return true;
            }
            try {
              for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {
                var hfChanges = HARDFORK_CHANGES_3_1.value;
                var hf = hfChanges[1];
                if (this.gteHardfork(hf["name"]) && "eips" in hf) {
                  if (hf["eips"].includes(eip)) {
                    return true;
                  }
                }
              }
            } catch (e_11_1) {
              e_11 = { error: e_11_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);
              } finally {
                if (e_11) throw e_11.error;
              }
            }
            return false;
          };
          Common2.prototype.hardforkIsActiveOnBlock = function(hardfork, blockNumber, opts) {
            var _a;
            if (opts === void 0) {
              opts = {};
            }
            blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
            var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;
            hardfork = this._chooseHardfork(hardfork, onlySupported);
            var hfBlock = this.hardforkBlockBN(hardfork);
            if (hfBlock && blockNumber.gte(hfBlock)) {
              return true;
            }
            return false;
          };
          Common2.prototype.activeOnBlock = function(blockNumber, opts) {
            return this.hardforkIsActiveOnBlock(null, blockNumber, opts);
          };
          Common2.prototype.hardforkGteHardfork = function(hardfork1, hardfork2, opts) {
            var e_12, _a;
            if (opts === void 0) {
              opts = {};
            }
            var onlyActive = opts.onlyActive === void 0 ? false : opts.onlyActive;
            hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);
            var hardforks;
            if (onlyActive) {
              hardforks = this.activeHardforks(null, opts);
            } else {
              hardforks = this.hardforks();
            }
            var posHf1 = -1, posHf2 = -1;
            var index = 0;
            try {
              for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {
                var hf = hardforks_2_1.value;
                if (hf["name"] === hardfork1)
                  posHf1 = index;
                if (hf["name"] === hardfork2)
                  posHf2 = index;
                index += 1;
              }
            } catch (e_12_1) {
              e_12 = { error: e_12_1 };
            } finally {
              try {
                if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);
              } finally {
                if (e_12) throw e_12.error;
              }
            }
            return posHf1 >= posHf2 && posHf2 !== -1;
          };
          Common2.prototype.gteHardfork = function(hardfork, opts) {
            return this.hardforkGteHardfork(null, hardfork, opts);
          };
          Common2.prototype.hardforkIsActiveOnChain = function(hardfork, opts) {
            var e_13, _a;
            var _b;
            if (opts === void 0) {
              opts = {};
            }
            var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;
            hardfork = this._chooseHardfork(hardfork, onlySupported);
            try {
              for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var hf = _d.value;
                if (hf["name"] === hardfork && hf["block"] !== null)
                  return true;
              }
            } catch (e_13_1) {
              e_13 = { error: e_13_1 };
            } finally {
              try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
              } finally {
                if (e_13) throw e_13.error;
              }
            }
            return false;
          };
          Common2.prototype.activeHardforks = function(blockNumber, opts) {
            var e_14, _a;
            if (opts === void 0) {
              opts = {};
            }
            var activeHardforks = [];
            var hfs = this.hardforks();
            try {
              for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {
                var hf = hfs_2_1.value;
                if (hf["block"] === null)
                  continue;
                if (blockNumber !== void 0 && blockNumber !== null && blockNumber < hf["block"])
                  break;
                if (opts.onlySupported && !this._isSupportedHardfork(hf["name"]))
                  continue;
                activeHardforks.push(hf);
              }
            } catch (e_14_1) {
              e_14 = { error: e_14_1 };
            } finally {
              try {
                if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);
              } finally {
                if (e_14) throw e_14.error;
              }
            }
            return activeHardforks;
          };
          Common2.prototype.activeHardfork = function(blockNumber, opts) {
            if (opts === void 0) {
              opts = {};
            }
            var activeHardforks = this.activeHardforks(blockNumber, opts);
            if (activeHardforks.length > 0) {
              return activeHardforks[activeHardforks.length - 1]["name"];
            } else {
              throw new Error("No (supported) active hardfork found");
            }
          };
          Common2.prototype.hardforkBlock = function(hardfork) {
            var block = this.hardforkBlockBN(hardfork);
            return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);
          };
          Common2.prototype.hardforkBlockBN = function(hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            var block = this._getHardfork(hardfork)["block"];
            if (block === void 0 || block === null) {
              return null;
            }
            return new ethereumjs_util_1.BN(block);
          };
          Common2.prototype.hardforkTD = function(hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            var td = this._getHardfork(hardfork)["td"];
            if (td === void 0 || td === null) {
              return null;
            }
            return new ethereumjs_util_1.BN(td);
          };
          Common2.prototype.isHardforkBlock = function(blockNumber, hardfork) {
            blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
            hardfork = this._chooseHardfork(hardfork, false);
            var block = this.hardforkBlockBN(hardfork);
            return block ? block.eq(blockNumber) : false;
          };
          Common2.prototype.nextHardforkBlock = function(hardfork) {
            var block = this.nextHardforkBlockBN(hardfork);
            return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);
          };
          Common2.prototype.nextHardforkBlockBN = function(hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            var hfBlock = this.hardforkBlockBN(hardfork);
            if (hfBlock === null) {
              return null;
            }
            var nextHfBlock = this.hardforks().reduce(function(acc, hf) {
              var block = new ethereumjs_util_1.BN(hf.block);
              return block.gt(hfBlock) && acc === null ? block : acc;
            }, null);
            return nextHfBlock;
          };
          Common2.prototype.isNextHardforkBlock = function(blockNumber, hardfork) {
            blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);
            hardfork = this._chooseHardfork(hardfork, false);
            var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);
            return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);
          };
          Common2.prototype._calcForkHash = function(hardfork) {
            var e_15, _a;
            var genesis = Buffer2.from(this.genesis().hash.substr(2), "hex");
            var hfBuffer = Buffer2.alloc(0);
            var prevBlock = 0;
            try {
              for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hf = _c.value;
                var block = hf.block;
                if (block !== 0 && block !== null && block !== prevBlock) {
                  var hfBlockBuffer = Buffer2.from(block.toString(16).padStart(16, "0"), "hex");
                  hfBuffer = Buffer2.concat([hfBuffer, hfBlockBuffer]);
                }
                if (hf.name === hardfork)
                  break;
                if (block !== null) {
                  prevBlock = block;
                }
              }
            } catch (e_15_1) {
              e_15 = { error: e_15_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_15) throw e_15.error;
              }
            }
            var inputBuffer = Buffer2.concat([genesis, hfBuffer]);
            var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString("hex");
            return "0x".concat(forkhash);
          };
          Common2.prototype.forkHash = function(hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            var data = this._getHardfork(hardfork);
            if (data["block"] === null && data["td"] === void 0) {
              var msg = "No fork hash calculation possible for future hardfork";
              throw new Error(msg);
            }
            if (data["forkHash"] !== void 0) {
              return data["forkHash"];
            }
            return this._calcForkHash(hardfork);
          };
          Common2.prototype.hardforkForForkHash = function(forkHash) {
            var resArray = this.hardforks().filter(function(hf) {
              return hf.forkHash === forkHash;
            });
            return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
          };
          Common2.prototype.genesis = function() {
            return this._chainParams["genesis"];
          };
          Common2.prototype.genesisState = function() {
            var e_16, _a;
            switch (this.chainName()) {
              case "mainnet":
                return require_mainnet2();
              case "ropsten":
                return require_ropsten2();
              case "rinkeby":
                return require_rinkeby2();
              case "kovan":
                return require_kovan2();
              case "goerli":
                return require_goerli2();
              case "sepolia":
                return require_sepolia2();
            }
            if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {
              try {
                for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var chainArrayWithGenesis = _c.value;
                  if (chainArrayWithGenesis[0].name === this.chainName()) {
                    return chainArrayWithGenesis[1];
                  }
                }
              } catch (e_16_1) {
                e_16 = { error: e_16_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally {
                  if (e_16) throw e_16.error;
                }
              }
            }
            return {};
          };
          Common2.prototype.hardforks = function() {
            return this._chainParams["hardforks"];
          };
          Common2.prototype.bootstrapNodes = function() {
            return this._chainParams["bootstrapNodes"];
          };
          Common2.prototype.dnsNetworks = function() {
            return this._chainParams["dnsNetworks"];
          };
          Common2.prototype.hardfork = function() {
            return this._hardfork;
          };
          Common2.prototype.chainId = function() {
            return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);
          };
          Common2.prototype.chainIdBN = function() {
            return new ethereumjs_util_1.BN(this._chainParams["chainId"]);
          };
          Common2.prototype.chainName = function() {
            return this._chainParams["name"];
          };
          Common2.prototype.networkId = function() {
            return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);
          };
          Common2.prototype.networkIdBN = function() {
            return new ethereumjs_util_1.BN(this._chainParams["networkId"]);
          };
          Common2.prototype.eips = function() {
            return this._eips;
          };
          Common2.prototype.consensusType = function() {
            var e_17, _a;
            var hardfork = this.hardfork();
            var value;
            try {
              for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {
                var hfChanges = HARDFORK_CHANGES_4_1.value;
                if ("consensus" in hfChanges[1]) {
                  value = hfChanges[1]["consensus"]["type"];
                }
                if (hfChanges[0] === hardfork)
                  break;
              }
            } catch (e_17_1) {
              e_17 = { error: e_17_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);
              } finally {
                if (e_17) throw e_17.error;
              }
            }
            if (value) {
              return value;
            }
            return this._chainParams["consensus"]["type"];
          };
          Common2.prototype.consensusAlgorithm = function() {
            var e_18, _a;
            var hardfork = this.hardfork();
            var value;
            try {
              for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {
                var hfChanges = HARDFORK_CHANGES_5_1.value;
                if ("consensus" in hfChanges[1]) {
                  value = hfChanges[1]["consensus"]["algorithm"];
                }
                if (hfChanges[0] === hardfork)
                  break;
              }
            } catch (e_18_1) {
              e_18 = { error: e_18_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);
              } finally {
                if (e_18) throw e_18.error;
              }
            }
            if (value) {
              return value;
            }
            return this._chainParams["consensus"]["algorithm"];
          };
          Common2.prototype.consensusConfig = function() {
            var e_19, _a;
            var hardfork = this.hardfork();
            var value;
            try {
              for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {
                var hfChanges = HARDFORK_CHANGES_6_1.value;
                if ("consensus" in hfChanges[1]) {
                  value = hfChanges[1]["consensus"][hfChanges[1]["consensus"]["algorithm"]];
                }
                if (hfChanges[0] === hardfork)
                  break;
              }
            } catch (e_19_1) {
              e_19 = { error: e_19_1 };
            } finally {
              try {
                if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);
              } finally {
                if (e_19) throw e_19.error;
              }
            }
            if (value) {
              return value;
            }
            var consensusAlgorithm = this.consensusAlgorithm();
            return this._chainParams["consensus"][consensusAlgorithm];
          };
          Common2.prototype.copy = function() {
            var copy3 = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
            copy3.removeAllListeners();
            return copy3;
          };
          return Common2;
        })(events_1.EventEmitter)
      );
      exports.default = Common;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js
  var require_baseTransaction = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      }) : (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      }));
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }) : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __values = exports && exports.__values || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
          next: function() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BaseTransaction = void 0;
      var common_1 = __importStar(require_dist4());
      var ethereumjs_util_1 = require_dist3();
      var types_1 = require_types3();
      var BaseTransaction = (
        /** @class */
        (function() {
          function BaseTransaction2(txData, opts) {
            this.cache = {
              hash: void 0,
              dataFee: void 0
            };
            this.activeCapabilities = [];
            this.DEFAULT_CHAIN = common_1.Chain.Mainnet;
            this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;
            var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type2 = txData.type;
            this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type2)).toNumber();
            this.txOptions = opts;
            var toB = (0, ethereumjs_util_1.toBuffer)(to === "" ? "0x" : to);
            var vB = (0, ethereumjs_util_1.toBuffer)(v === "" ? "0x" : v);
            var rB = (0, ethereumjs_util_1.toBuffer)(r === "" ? "0x" : r);
            var sB = (0, ethereumjs_util_1.toBuffer)(s === "" ? "0x" : s);
            this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === "" ? "0x" : nonce));
            this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === "" ? "0x" : gasLimit));
            this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : void 0;
            this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === "" ? "0x" : value));
            this.data = (0, ethereumjs_util_1.toBuffer)(data === "" ? "0x" : data);
            this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : void 0;
            this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : void 0;
            this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : void 0;
            this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
            this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
            this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
          }
          Object.defineProperty(BaseTransaction2.prototype, "transactionType", {
            /**
             * Alias for {@link BaseTransaction.type}
             *
             * @deprecated Use `type` instead
             */
            get: function() {
              return this.type;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(BaseTransaction2.prototype, "type", {
            /**
             * Returns the transaction type.
             *
             * Note: legacy txs will return tx type `0`.
             */
            get: function() {
              return this._type;
            },
            enumerable: false,
            configurable: true
          });
          BaseTransaction2.prototype.supports = function(capability) {
            return this.activeCapabilities.includes(capability);
          };
          BaseTransaction2.prototype.validate = function(stringError) {
            if (stringError === void 0) {
              stringError = false;
            }
            var errors2 = [];
            if (this.getBaseFee().gt(this.gasLimit)) {
              errors2.push("gasLimit is too low. given ".concat(this.gasLimit, ", need at least ").concat(this.getBaseFee()));
            }
            if (this.isSigned() && !this.verifySignature()) {
              errors2.push("Invalid Signature");
            }
            return stringError ? errors2 : errors2.length === 0;
          };
          BaseTransaction2.prototype.getBaseFee = function() {
            var fee = this.getDataFee().addn(this.common.param("gasPrices", "tx"));
            if (this.common.gteHardfork("homestead") && this.toCreationAddress()) {
              fee.iaddn(this.common.param("gasPrices", "txCreation"));
            }
            return fee;
          };
          BaseTransaction2.prototype.getDataFee = function() {
            var txDataZero = this.common.param("gasPrices", "txDataZero");
            var txDataNonZero = this.common.param("gasPrices", "txDataNonZero");
            var cost = 0;
            for (var i = 0; i < this.data.length; i++) {
              this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;
            }
            cost = new ethereumjs_util_1.BN(cost);
            if ((this.to === void 0 || this.to === null) && this.common.isActivatedEIP(3860)) {
              var dataLength = Math.ceil(this.data.length / 32);
              var initCodeCost = new ethereumjs_util_1.BN(this.common.param("gasPrices", "initCodeWordCost")).imuln(dataLength);
              cost.iadd(initCodeCost);
            }
            return cost;
          };
          BaseTransaction2.prototype.toCreationAddress = function() {
            return this.to === void 0 || this.to.buf.length === 0;
          };
          BaseTransaction2.prototype.isSigned = function() {
            var _a = this, v = _a.v, r = _a.r, s = _a.s;
            if (this.type === 0) {
              if (!v || !r || !s) {
                return false;
              } else {
                return true;
              }
            } else {
              if (v === void 0 || !r || !s) {
                return false;
              } else {
                return true;
              }
            }
          };
          BaseTransaction2.prototype.verifySignature = function() {
            try {
              var publicKey = this.getSenderPublicKey();
              return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;
            } catch (e) {
              return false;
            }
          };
          BaseTransaction2.prototype.getSenderAddress = function() {
            return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));
          };
          BaseTransaction2.prototype.sign = function(privateKey) {
            if (privateKey.length !== 32) {
              var msg = this._errorMsg("Private key must be 32 bytes in length.");
              throw new Error(msg);
            }
            var hackApplied = false;
            if (this.type === 0 && this.common.gteHardfork("spuriousDragon") && !this.supports(types_1.Capability.EIP155ReplayProtection)) {
              this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
              hackApplied = true;
            }
            var msgHash = this.getMessageToSign(true);
            var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;
            var tx = this._processSignature(v, r, s);
            if (hackApplied) {
              var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);
              if (index > -1) {
                this.activeCapabilities.splice(index, 1);
              }
            }
            return tx;
          };
          BaseTransaction2.prototype._getCommon = function(common, chainId) {
            var _a;
            if (chainId) {
              var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));
              if (common) {
                if (!common.chainIdBN().eq(chainIdBN)) {
                  var msg = this._errorMsg("The chain ID does not match the chain ID of Common");
                  throw new Error(msg);
                }
                return common.copy();
              } else {
                if (common_1.default.isSupportedChainId(chainIdBN)) {
                  return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });
                } else {
                  return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {
                    name: "custom-chain",
                    networkId: chainIdBN,
                    chainId: chainIdBN
                  }, this.DEFAULT_HARDFORK);
                }
              }
            } else {
              return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
            }
          };
          BaseTransaction2.prototype._validateCannotExceedMaxInteger = function(values, bits, cannotEqual) {
            var e_1, _a;
            if (bits === void 0) {
              bits = 256;
            }
            if (cannotEqual === void 0) {
              cannotEqual = false;
            }
            try {
              for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                switch (bits) {
                  case 64:
                    if (cannotEqual) {
                      if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_UINT64)) {
                        var msg = this._errorMsg("".concat(key, " cannot equal or exceed MAX_UINT64 (2^64-1), given ").concat(value));
                        throw new Error(msg);
                      }
                    } else {
                      if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_UINT64)) {
                        var msg = this._errorMsg("".concat(key, " cannot exceed MAX_UINT64 (2^64-1), given ").concat(value));
                        throw new Error(msg);
                      }
                    }
                    break;
                  case 256:
                    if (cannotEqual) {
                      if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_INTEGER)) {
                        var msg = this._errorMsg("".concat(key, " cannot equal or exceed MAX_INTEGER (2^256-1), given ").concat(value));
                        throw new Error(msg);
                      }
                    } else {
                      if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {
                        var msg = this._errorMsg("".concat(key, " cannot exceed MAX_INTEGER (2^256-1), given ").concat(value));
                        throw new Error(msg);
                      }
                    }
                    break;
                  default: {
                    var msg = this._errorMsg("unimplemented bits value");
                    throw new Error(msg);
                  }
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          };
          BaseTransaction2.prototype._getSharedErrorPostfix = function() {
            var hash = "";
            try {
              hash = this.isSigned() ? (0, ethereumjs_util_1.bufferToHex)(this.hash()) : "not available (unsigned)";
            } catch (e) {
              hash = "error";
            }
            var isSigned = "";
            try {
              isSigned = this.isSigned().toString();
            } catch (e) {
              hash = "error";
            }
            var hf = "";
            try {
              hf = this.common.hardfork();
            } catch (e) {
              hf = "error";
            }
            var postfix = "tx type=".concat(this.type, " hash=").concat(hash, " nonce=").concat(this.nonce, " value=").concat(this.value, " ");
            postfix += "signed=".concat(isSigned, " hf=").concat(hf);
            return postfix;
          };
          return BaseTransaction2;
        })()
      );
      exports.BaseTransaction = BaseTransaction;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/util.js
  var require_util3 = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/util.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AccessLists = exports.checkMaxInitCodeSize = void 0;
      var ethereumjs_util_1 = require_dist3();
      var types_1 = require_types3();
      function checkMaxInitCodeSize(common, length) {
        if (length > common.param("vm", "maxInitCodeSize")) {
          throw new Error("the initcode size of this transaction is too large: it is ".concat(length, " while the max is ").concat(common.param("vm", "maxInitCodeSize")));
        }
      }
      exports.checkMaxInitCodeSize = checkMaxInitCodeSize;
      var AccessLists = (
        /** @class */
        (function() {
          function AccessLists2() {
          }
          AccessLists2.getAccessListData = function(accessList) {
            var AccessListJSON;
            var bufferAccessList;
            if (accessList && (0, types_1.isAccessList)(accessList)) {
              AccessListJSON = accessList;
              var newAccessList = [];
              for (var i = 0; i < accessList.length; i++) {
                var item = accessList[i];
                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);
                var storageItems = [];
                for (var index = 0; index < item.storageKeys.length; index++) {
                  storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));
                }
                newAccessList.push([addressBuffer, storageItems]);
              }
              bufferAccessList = newAccessList;
            } else {
              bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
              var json = [];
              for (var i = 0; i < bufferAccessList.length; i++) {
                var data = bufferAccessList[i];
                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);
                var storageKeys = [];
                for (var item = 0; item < data[1].length; item++) {
                  storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));
                }
                var jsonItem = {
                  address,
                  storageKeys
                };
                json.push(jsonItem);
              }
              AccessListJSON = json;
            }
            return {
              AccessListJSON,
              accessList: bufferAccessList
            };
          };
          AccessLists2.verifyAccessList = function(accessList) {
            for (var key = 0; key < accessList.length; key++) {
              var accessListItem = accessList[key];
              var address = accessListItem[0];
              var storageSlots = accessListItem[1];
              if (accessListItem[2] !== void 0) {
                throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
              }
              if (address.length != 20) {
                throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
              }
              for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {
                if (storageSlots[storageSlot].length != 32) {
                  throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
                }
              }
            }
          };
          AccessLists2.getAccessListJSON = function(accessList) {
            var accessListJSON = [];
            for (var index = 0; index < accessList.length; index++) {
              var item = accessList[index];
              var JSONItem = {
                address: "0x" + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString("hex"),
                storageKeys: []
              };
              var storageSlots = item[1];
              for (var slot = 0; slot < storageSlots.length; slot++) {
                var storageSlot = storageSlots[slot];
                JSONItem.storageKeys.push("0x" + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString("hex"));
              }
              accessListJSON.push(JSONItem);
            }
            return accessListJSON;
          };
          AccessLists2.getDataFeeEIP2930 = function(accessList, common) {
            var accessListStorageKeyCost = common.param("gasPrices", "accessListStorageKeyCost");
            var accessListAddressCost = common.param("gasPrices", "accessListAddressCost");
            var slots = 0;
            for (var index = 0; index < accessList.length; index++) {
              var item = accessList[index];
              var storageSlots = item[1];
              slots += storageSlots.length;
            }
            var addresses = accessList.length;
            return addresses * accessListAddressCost + slots * accessListStorageKeyCost;
          };
          return AccessLists2;
        })()
      );
      exports.AccessLists = AccessLists;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js
  var require_legacyTransaction = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || /* @__PURE__ */ (function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_util_1 = require_dist3();
      var types_1 = require_types3();
      var baseTransaction_1 = require_baseTransaction();
      var util_1 = require_util3();
      var TRANSACTION_TYPE = 0;
      var Transaction = (
        /** @class */
        (function(_super) {
          __extends(Transaction2, _super);
          function Transaction2(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            var _this = this;
            var _a;
            _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;
            _this.common = _this._validateTxV(_this.v, opts.common);
            _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === "" ? "0x" : txData.gasPrice));
            if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {
              var msg = _this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");
              throw new Error(msg);
            }
            _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });
            if (_this.common.gteHardfork("spuriousDragon")) {
              if (!_this.isSigned()) {
                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
              } else {
                var v = _this.v;
                var chainIdDoubled = _this.common.chainIdBN().muln(2);
                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {
                  _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);
                }
              }
            }
            if (_this.common.isActivatedEIP(3860)) {
              (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
            }
            var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
            if (freeze) {
              Object.freeze(_this);
            }
            return _this;
          }
          Transaction2.fromTxData = function(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return new Transaction2(txData, opts);
          };
          Transaction2.fromSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            var values = ethereumjs_util_1.rlp.decode(serialized);
            if (!Array.isArray(values)) {
              throw new Error("Invalid serialized tx input. Must be array");
            }
            return this.fromValuesArray(values, opts);
          };
          Transaction2.fromRlpSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return Transaction2.fromSerializedTx(serialized, opts);
          };
          Transaction2.fromValuesArray = function(values, opts) {
            if (opts === void 0) {
              opts = {};
            }
            if (values.length !== 6 && values.length !== 9) {
              throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
            }
            var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];
            (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
            return new Transaction2({
              nonce,
              gasPrice,
              gasLimit,
              to,
              value,
              data,
              v,
              r,
              s
            }, opts);
          };
          Transaction2.prototype.raw = function() {
            return [
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
              this.to !== void 0 ? this.to.buf : Buffer2.from([]),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
              this.data,
              this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer2.from([]),
              this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer2.from([]),
              this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer2.from([])
            ];
          };
          Transaction2.prototype.serialize = function() {
            return ethereumjs_util_1.rlp.encode(this.raw());
          };
          Transaction2.prototype._getMessageToSign = function() {
            var values = [
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
              this.to !== void 0 ? this.to.buf : Buffer2.from([]),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
              this.data
            ];
            if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
              values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));
              values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
              values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));
            }
            return values;
          };
          Transaction2.prototype.getMessageToSign = function(hashMessage) {
            if (hashMessage === void 0) {
              hashMessage = true;
            }
            var message = this._getMessageToSign();
            if (hashMessage) {
              return (0, ethereumjs_util_1.rlphash)(message);
            } else {
              return message;
            }
          };
          Transaction2.prototype.getDataFee = function() {
            if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
            }
            if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                value: _super.prototype.getDataFee.call(this),
                hardfork: this.common.hardfork()
              };
            }
            return _super.prototype.getDataFee.call(this);
          };
          Transaction2.prototype.getUpfrontCost = function() {
            return this.gasLimit.mul(this.gasPrice).add(this.value);
          };
          Transaction2.prototype.hash = function() {
            if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());
              }
              return this.cache.hash;
            }
            return (0, ethereumjs_util_1.rlphash)(this.raw());
          };
          Transaction2.prototype.getMessageToVerifySignature = function() {
            if (!this.isSigned()) {
              var msg = this._errorMsg("This transaction is not signed");
              throw new Error(msg);
            }
            var message = this._getMessageToSign();
            return (0, ethereumjs_util_1.rlphash)(message);
          };
          Transaction2.prototype.getSenderPublicKey = function() {
            var _a;
            var msgHash = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
              var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
              throw new Error(msg);
            }
            var _b = this, v = _b.v, r = _b.r, s = _b.s;
            try {
              return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : void 0);
            } catch (e) {
              var msg = this._errorMsg("Invalid Signature");
              throw new Error(msg);
            }
          };
          Transaction2.prototype._processSignature = function(v, r, s) {
            var vBN = new ethereumjs_util_1.BN(v);
            if (this.supports(types_1.Capability.EIP155ReplayProtection)) {
              vBN.iadd(this.common.chainIdBN().muln(2).addn(8));
            }
            var opts = __assign(__assign({}, this.txOptions), { common: this.common });
            return Transaction2.fromTxData({
              nonce: this.nonce,
              gasPrice: this.gasPrice,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              v: vBN,
              r: new ethereumjs_util_1.BN(r),
              s: new ethereumjs_util_1.BN(s)
            }, opts);
          };
          Transaction2.prototype.toJSON = function() {
            return {
              nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
              gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
              gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
              to: this.to !== void 0 ? this.to.toString() : void 0,
              value: (0, ethereumjs_util_1.bnToHex)(this.value),
              data: "0x" + this.data.toString("hex"),
              v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
              r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
              s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
            };
          };
          Transaction2.prototype._validateTxV = function(v, common) {
            if (v !== void 0) {
              if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {
                throw new Error("Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ".concat(v));
              }
            }
            var chainIdBN;
            if (v !== void 0 && (!common || common.gteHardfork("spuriousDragon")) && !v.eqn(27) && !v.eqn(28)) {
              if (common) {
                var chainIdDoubled = common.chainIdBN().muln(2);
                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
                if (!isValidEIP155V) {
                  throw new Error("Incompatible EIP155-based V ".concat(v, " and chain id ").concat(common.chainIdBN(), ". See the Common parameter of the Transaction constructor to set the chain id."));
                }
              } else {
                var numSub = void 0;
                if (v.subn(35).isEven()) {
                  numSub = 35;
                } else {
                  numSub = 36;
                }
                chainIdBN = v.subn(numSub).divn(2);
              }
            }
            return this._getCommon(common, chainIdBN);
          };
          Transaction2.prototype._unsignedTxImplementsEIP155 = function() {
            return this.common.gteHardfork("spuriousDragon");
          };
          Transaction2.prototype._signedTxImplementsEIP155 = function() {
            if (!this.isSigned()) {
              var msg = this._errorMsg("This transaction is not signed");
              throw new Error(msg);
            }
            var onEIP155BlockOrLater = this.common.gteHardfork("spuriousDragon");
            var v = this.v;
            var chainIdDoubled = this.common.chainIdBN().muln(2);
            var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));
            return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;
          };
          Transaction2.prototype.errorStr = function() {
            var errorStr = this._getSharedErrorPostfix();
            errorStr += " gasPrice=".concat(this.gasPrice);
            return errorStr;
          };
          Transaction2.prototype._errorMsg = function(msg) {
            return "".concat(msg, " (").concat(this.errorStr(), ")");
          };
          return Transaction2;
        })(baseTransaction_1.BaseTransaction)
      );
      exports.default = Transaction;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js
  var require_eip2930Transaction = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || /* @__PURE__ */ (function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_util_1 = require_dist3();
      var baseTransaction_1 = require_baseTransaction();
      var types_1 = require_types3();
      var util_1 = require_util3();
      var TRANSACTION_TYPE = 1;
      var TRANSACTION_TYPE_BUFFER = Buffer2.from(TRANSACTION_TYPE.toString(16).padStart(2, "0"), "hex");
      var AccessListEIP2930Transaction = (
        /** @class */
        (function(_super) {
          __extends(AccessListEIP2930Transaction2, _super);
          function AccessListEIP2930Transaction2(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            var _this = this;
            var _a, _b;
            _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;
            _this.DEFAULT_HARDFORK = "berlin";
            var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;
            _this.common = _this._getCommon(opts.common, chainId);
            _this.chainId = _this.common.chainIdBN();
            if (!_this.common.isActivatedEIP(2930)) {
              throw new Error("EIP-2930 not enabled on Common");
            }
            _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);
            var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
            _this.accessList = accessListData.accessList;
            _this.AccessListJSON = accessListData.AccessListJSON;
            util_1.AccessLists.verifyAccessList(_this.accessList);
            _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === "" ? "0x" : gasPrice));
            _this._validateCannotExceedMaxInteger({
              gasPrice: _this.gasPrice
            });
            if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {
              var msg = _this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");
              throw new Error(msg);
            }
            if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
              var msg = _this._errorMsg("The y-parity of the transaction should either be 0 or 1");
              throw new Error(msg);
            }
            if (_this.common.gteHardfork("homestead") && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
              var msg = _this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
              throw new Error(msg);
            }
            if (_this.common.isActivatedEIP(3860)) {
              (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
            }
            var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
            if (freeze) {
              Object.freeze(_this);
            }
            return _this;
          }
          Object.defineProperty(AccessListEIP2930Transaction2.prototype, "senderR", {
            /**
             * EIP-2930 alias for `r`
             *
             * @deprecated use `r` instead
             */
            get: function() {
              return this.r;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(AccessListEIP2930Transaction2.prototype, "senderS", {
            /**
             * EIP-2930 alias for `s`
             *
             * @deprecated use `s` instead
             */
            get: function() {
              return this.s;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(AccessListEIP2930Transaction2.prototype, "yParity", {
            /**
             * EIP-2930 alias for `v`
             *
             * @deprecated use `v` instead
             */
            get: function() {
              return this.v;
            },
            enumerable: false,
            configurable: true
          });
          AccessListEIP2930Transaction2.fromTxData = function(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return new AccessListEIP2930Transaction2(txData, opts);
          };
          AccessListEIP2930Transaction2.fromSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
              throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ".concat(TRANSACTION_TYPE, ", received: ").concat(serialized.slice(0, 1).toString("hex")));
            }
            var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
            if (!Array.isArray(values)) {
              throw new Error("Invalid serialized tx input: must be array");
            }
            return AccessListEIP2930Transaction2.fromValuesArray(values, opts);
          };
          AccessListEIP2930Transaction2.fromRlpSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return AccessListEIP2930Transaction2.fromSerializedTx(serialized, opts);
          };
          AccessListEIP2930Transaction2.fromValuesArray = function(values, opts) {
            if (opts === void 0) {
              opts = {};
            }
            if (values.length !== 8 && values.length !== 11) {
              throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
            }
            var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];
            (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
            var emptyAccessList = [];
            return new AccessListEIP2930Transaction2({
              chainId: new ethereumjs_util_1.BN(chainId),
              nonce,
              gasPrice,
              gasLimit,
              to,
              value,
              data,
              accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
              v: v !== void 0 ? new ethereumjs_util_1.BN(v) : void 0,
              r,
              s
            }, opts);
          };
          AccessListEIP2930Transaction2.prototype.getDataFee = function() {
            if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
            }
            var cost = _super.prototype.getDataFee.call(this);
            cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
            if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                value: cost,
                hardfork: this.common.hardfork()
              };
            }
            return cost;
          };
          AccessListEIP2930Transaction2.prototype.getUpfrontCost = function() {
            return this.gasLimit.mul(this.gasPrice).add(this.value);
          };
          AccessListEIP2930Transaction2.prototype.raw = function() {
            return [
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
              this.to !== void 0 ? this.to.buf : Buffer2.from([]),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
              this.data,
              this.accessList,
              this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer2.from([]),
              this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer2.from([]),
              this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer2.from([])
            ];
          };
          AccessListEIP2930Transaction2.prototype.serialize = function() {
            var base2 = this.raw();
            return Buffer2.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base2)]);
          };
          AccessListEIP2930Transaction2.prototype.getMessageToSign = function(hashMessage) {
            if (hashMessage === void 0) {
              hashMessage = true;
            }
            var base2 = this.raw().slice(0, 8);
            var message = Buffer2.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base2)]);
            if (hashMessage) {
              return (0, ethereumjs_util_1.keccak256)(message);
            } else {
              return message;
            }
          };
          AccessListEIP2930Transaction2.prototype.hash = function() {
            if (!this.isSigned()) {
              var msg = this._errorMsg("Cannot call hash method if transaction is not signed");
              throw new Error(msg);
            }
            if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
              }
              return this.cache.hash;
            }
            return (0, ethereumjs_util_1.keccak256)(this.serialize());
          };
          AccessListEIP2930Transaction2.prototype.getMessageToVerifySignature = function() {
            return this.getMessageToSign();
          };
          AccessListEIP2930Transaction2.prototype.getSenderPublicKey = function() {
            var _a;
            if (!this.isSigned()) {
              var msg = this._errorMsg("Cannot call this method if transaction is not signed");
              throw new Error(msg);
            }
            var msgHash = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
              var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
              throw new Error(msg);
            }
            var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;
            try {
              return (0, ethereumjs_util_1.ecrecover)(
                msgHash,
                yParity.addn(27),
                // Recover the 27 which was stripped from ecsign
                (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r),
                (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s)
              );
            } catch (e) {
              var msg = this._errorMsg("Invalid Signature");
              throw new Error(msg);
            }
          };
          AccessListEIP2930Transaction2.prototype._processSignature = function(v, r, s) {
            var opts = __assign(__assign({}, this.txOptions), { common: this.common });
            return AccessListEIP2930Transaction2.fromTxData({
              chainId: this.chainId,
              nonce: this.nonce,
              gasPrice: this.gasPrice,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              accessList: this.accessList,
              v: new ethereumjs_util_1.BN(v - 27),
              r: new ethereumjs_util_1.BN(r),
              s: new ethereumjs_util_1.BN(s)
            }, opts);
          };
          AccessListEIP2930Transaction2.prototype.toJSON = function() {
            var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
            return {
              chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
              nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
              gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),
              gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
              to: this.to !== void 0 ? this.to.toString() : void 0,
              value: (0, ethereumjs_util_1.bnToHex)(this.value),
              data: "0x" + this.data.toString("hex"),
              accessList: accessListJSON,
              v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
              r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
              s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
            };
          };
          AccessListEIP2930Transaction2.prototype.errorStr = function() {
            var _a, _b;
            var errorStr = this._getSharedErrorPostfix();
            errorStr += " gasPrice=".concat(this.gasPrice, " accessListCount=").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
            return errorStr;
          };
          AccessListEIP2930Transaction2.prototype._errorMsg = function(msg) {
            return "".concat(msg, " (").concat(this.errorStr(), ")");
          };
          return AccessListEIP2930Transaction2;
        })(baseTransaction_1.BaseTransaction)
      );
      exports.default = AccessListEIP2930Transaction;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js
  var require_transactionFactory = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_util_1 = require_dist3();
      var _1 = require_dist5();
      var TransactionFactory = (
        /** @class */
        (function() {
          function TransactionFactory2() {
          }
          TransactionFactory2.fromTxData = function(txData, txOptions) {
            if (txOptions === void 0) {
              txOptions = {};
            }
            if (!("type" in txData) || txData.type === void 0) {
              return _1.Transaction.fromTxData(txData, txOptions);
            } else {
              var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();
              if (txType === 0) {
                return _1.Transaction.fromTxData(txData, txOptions);
              } else if (txType === 1) {
                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);
              } else if (txType === 2) {
                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
              } else {
                throw new Error("Tx instantiation with type ".concat(txType, " not supported"));
              }
            }
          };
          TransactionFactory2.fromSerializedData = function(data, txOptions) {
            if (txOptions === void 0) {
              txOptions = {};
            }
            if (data[0] <= 127) {
              var EIP = void 0;
              switch (data[0]) {
                case 1:
                  EIP = 2930;
                  break;
                case 2:
                  EIP = 1559;
                  break;
                default:
                  throw new Error("TypedTransaction with ID ".concat(data[0], " unknown"));
              }
              if (EIP === 1559) {
                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
              } else {
                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
              }
            } else {
              return _1.Transaction.fromSerializedTx(data, txOptions);
            }
          };
          TransactionFactory2.fromBlockBodyData = function(data, txOptions) {
            if (txOptions === void 0) {
              txOptions = {};
            }
            if (Buffer2.isBuffer(data)) {
              return this.fromSerializedData(data, txOptions);
            } else if (Array.isArray(data)) {
              return _1.Transaction.fromValuesArray(data, txOptions);
            } else {
              throw new Error("Cannot decode transaction: unknown type input");
            }
          };
          TransactionFactory2.getTransactionClass = function(transactionID, _common) {
            if (transactionID === void 0) {
              transactionID = 0;
            }
            var legacyTxn = transactionID == 0 || transactionID >= 128 && transactionID <= 255;
            if (legacyTxn) {
              return _1.Transaction;
            }
            switch (transactionID) {
              case 1:
                return _1.AccessListEIP2930Transaction;
              case 2:
                return _1.FeeMarketEIP1559Transaction;
              default:
                throw new Error("TypedTransaction with ID ".concat(transactionID, " unknown"));
            }
          };
          return TransactionFactory2;
        })()
      );
      exports.default = TransactionFactory;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js
  var require_eip1559Transaction = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __extends = exports && exports.__extends || /* @__PURE__ */ (function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      })();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __read = exports && exports.__read || function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_util_1 = require_dist3();
      var baseTransaction_1 = require_baseTransaction();
      var types_1 = require_types3();
      var util_1 = require_util3();
      var TRANSACTION_TYPE = 2;
      var TRANSACTION_TYPE_BUFFER = Buffer2.from(TRANSACTION_TYPE.toString(16).padStart(2, "0"), "hex");
      var FeeMarketEIP1559Transaction = (
        /** @class */
        (function(_super) {
          __extends(FeeMarketEIP1559Transaction2, _super);
          function FeeMarketEIP1559Transaction2(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            var _this = this;
            var _a, _b;
            _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE }), opts) || this;
            _this.DEFAULT_HARDFORK = "london";
            var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;
            _this.common = _this._getCommon(opts.common, chainId);
            _this.chainId = _this.common.chainIdBN();
            if (!_this.common.isActivatedEIP(1559)) {
              throw new Error("EIP-1559 not enabled on Common");
            }
            _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);
            var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
            _this.accessList = accessListData.accessList;
            _this.AccessListJSON = accessListData.AccessListJSON;
            util_1.AccessLists.verifyAccessList(_this.accessList);
            _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === "" ? "0x" : maxFeePerGas));
            _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === "" ? "0x" : maxPriorityFeePerGas));
            _this._validateCannotExceedMaxInteger({
              maxFeePerGas: _this.maxFeePerGas,
              maxPriorityFeePerGas: _this.maxPriorityFeePerGas
            });
            if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {
              var msg = _this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");
              throw new Error(msg);
            }
            if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {
              var msg = _this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
              throw new Error(msg);
            }
            if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {
              var msg = _this._errorMsg("The y-parity of the transaction should either be 0 or 1");
              throw new Error(msg);
            }
            if (_this.common.gteHardfork("homestead") && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
              var msg = _this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
              throw new Error(msg);
            }
            if (_this.common.isActivatedEIP(3860)) {
              (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);
            }
            var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;
            if (freeze) {
              Object.freeze(_this);
            }
            return _this;
          }
          Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "senderR", {
            /**
             * EIP-2930 alias for `r`
             *
             * @deprecated use `r` instead
             */
            get: function() {
              return this.r;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "senderS", {
            /**
             * EIP-2930 alias for `s`
             *
             * @deprecated use `s` instead
             */
            get: function() {
              return this.s;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FeeMarketEIP1559Transaction2.prototype, "yParity", {
            /**
             * EIP-2930 alias for `v`
             *
             * @deprecated use `v` instead
             */
            get: function() {
              return this.v;
            },
            enumerable: false,
            configurable: true
          });
          FeeMarketEIP1559Transaction2.fromTxData = function(txData, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return new FeeMarketEIP1559Transaction2(txData, opts);
          };
          FeeMarketEIP1559Transaction2.fromSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {
              throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ".concat(TRANSACTION_TYPE, ", received: ").concat(serialized.slice(0, 1).toString("hex")));
            }
            var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));
            if (!Array.isArray(values)) {
              throw new Error("Invalid serialized tx input: must be array");
            }
            return FeeMarketEIP1559Transaction2.fromValuesArray(values, opts);
          };
          FeeMarketEIP1559Transaction2.fromRlpSerializedTx = function(serialized, opts) {
            if (opts === void 0) {
              opts = {};
            }
            return FeeMarketEIP1559Transaction2.fromSerializedTx(serialized, opts);
          };
          FeeMarketEIP1559Transaction2.fromValuesArray = function(values, opts) {
            if (opts === void 0) {
              opts = {};
            }
            if (values.length !== 9 && values.length !== 12) {
              throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
            }
            var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];
            (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });
            return new FeeMarketEIP1559Transaction2({
              chainId: new ethereumjs_util_1.BN(chainId),
              nonce,
              maxPriorityFeePerGas,
              maxFeePerGas,
              gasLimit,
              to,
              value,
              data,
              accessList: accessList !== null && accessList !== void 0 ? accessList : [],
              v: v !== void 0 ? new ethereumjs_util_1.BN(v) : void 0,
              r,
              s
            }, opts);
          };
          FeeMarketEIP1559Transaction2.prototype.getDataFee = function() {
            if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
            }
            var cost = _super.prototype.getDataFee.call(this);
            cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));
            if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                value: cost,
                hardfork: this.common.hardfork()
              };
            }
            return cost;
          };
          FeeMarketEIP1559Transaction2.prototype.getUpfrontCost = function(baseFee) {
            if (baseFee === void 0) {
              baseFee = new ethereumjs_util_1.BN(0);
            }
            var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));
            var gasPrice = inclusionFeePerGas.add(baseFee);
            return this.gasLimit.mul(gasPrice).add(this.value);
          };
          FeeMarketEIP1559Transaction2.prototype.raw = function() {
            return [
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),
              this.to !== void 0 ? this.to.buf : Buffer2.from([]),
              (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),
              this.data,
              this.accessList,
              this.v !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer2.from([]),
              this.r !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer2.from([]),
              this.s !== void 0 ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer2.from([])
            ];
          };
          FeeMarketEIP1559Transaction2.prototype.serialize = function() {
            var base2 = this.raw();
            return Buffer2.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base2)]);
          };
          FeeMarketEIP1559Transaction2.prototype.getMessageToSign = function(hashMessage) {
            if (hashMessage === void 0) {
              hashMessage = true;
            }
            var base2 = this.raw().slice(0, 9);
            var message = Buffer2.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base2)]);
            if (hashMessage) {
              return (0, ethereumjs_util_1.keccak256)(message);
            } else {
              return message;
            }
          };
          FeeMarketEIP1559Transaction2.prototype.hash = function() {
            if (!this.isSigned()) {
              var msg = this._errorMsg("Cannot call hash method if transaction is not signed");
              throw new Error(msg);
            }
            if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());
              }
              return this.cache.hash;
            }
            return (0, ethereumjs_util_1.keccak256)(this.serialize());
          };
          FeeMarketEIP1559Transaction2.prototype.getMessageToVerifySignature = function() {
            return this.getMessageToSign();
          };
          FeeMarketEIP1559Transaction2.prototype.getSenderPublicKey = function() {
            var _a;
            if (!this.isSigned()) {
              var msg = this._errorMsg("Cannot call this method if transaction is not signed");
              throw new Error(msg);
            }
            var msgHash = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {
              var msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
              throw new Error(msg);
            }
            var _b = this, v = _b.v, r = _b.r, s = _b.s;
            try {
              return (0, ethereumjs_util_1.ecrecover)(
                msgHash,
                v.addn(27),
                // Recover the 27 which was stripped from ecsign
                (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r),
                (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s)
              );
            } catch (e) {
              var msg = this._errorMsg("Invalid Signature");
              throw new Error(msg);
            }
          };
          FeeMarketEIP1559Transaction2.prototype._processSignature = function(v, r, s) {
            var opts = __assign(__assign({}, this.txOptions), { common: this.common });
            return FeeMarketEIP1559Transaction2.fromTxData({
              chainId: this.chainId,
              nonce: this.nonce,
              maxPriorityFeePerGas: this.maxPriorityFeePerGas,
              maxFeePerGas: this.maxFeePerGas,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              accessList: this.accessList,
              v: new ethereumjs_util_1.BN(v - 27),
              r: new ethereumjs_util_1.BN(r),
              s: new ethereumjs_util_1.BN(s)
            }, opts);
          };
          FeeMarketEIP1559Transaction2.prototype.toJSON = function() {
            var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);
            return {
              chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),
              nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),
              maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),
              maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),
              gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),
              to: this.to !== void 0 ? this.to.toString() : void 0,
              value: (0, ethereumjs_util_1.bnToHex)(this.value),
              data: "0x" + this.data.toString("hex"),
              accessList: accessListJSON,
              v: this.v !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.v) : void 0,
              r: this.r !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.r) : void 0,
              s: this.s !== void 0 ? (0, ethereumjs_util_1.bnToHex)(this.s) : void 0
            };
          };
          FeeMarketEIP1559Transaction2.prototype.errorStr = function() {
            var errorStr = this._getSharedErrorPostfix();
            errorStr += " maxFeePerGas=".concat(this.maxFeePerGas, " maxPriorityFeePerGas=").concat(this.maxPriorityFeePerGas);
            return errorStr;
          };
          FeeMarketEIP1559Transaction2.prototype._errorMsg = function(msg) {
            return "".concat(msg, " (").concat(this.errorStr(), ")");
          };
          return FeeMarketEIP1559Transaction2;
        })(baseTransaction_1.BaseTransaction)
      );
      exports.default = FeeMarketEIP1559Transaction;
    }
  });

  // node_modules/@ethereumjs/tx/dist.browser/index.js
  var require_dist5 = __commonJS({
    "node_modules/@ethereumjs/tx/dist.browser/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      }) : (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      }));
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FeeMarketEIP1559Transaction = exports.TransactionFactory = exports.AccessListEIP2930Transaction = exports.Transaction = void 0;
      var legacyTransaction_1 = require_legacyTransaction();
      Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
        return __importDefault(legacyTransaction_1).default;
      } });
      var eip2930Transaction_1 = require_eip2930Transaction();
      Object.defineProperty(exports, "AccessListEIP2930Transaction", { enumerable: true, get: function() {
        return __importDefault(eip2930Transaction_1).default;
      } });
      var transactionFactory_1 = require_transactionFactory();
      Object.defineProperty(exports, "TransactionFactory", { enumerable: true, get: function() {
        return __importDefault(transactionFactory_1).default;
      } });
      var eip1559Transaction_1 = require_eip1559Transaction();
      Object.defineProperty(exports, "FeeMarketEIP1559Transaction", { enumerable: true, get: function() {
        return __importDefault(eip1559Transaction_1).default;
      } });
      __exportStar(require_types3(), exports);
    }
  });

  // web3-global-shim.js
  var web3_global_shim_exports = {};
  __export(web3_global_shim_exports, {
    Web3: () => Web3,
    default: () => web3_global_shim_default
  });
  var W, web3_global_shim_default, Web3;
  var init_web3_global_shim = __esm({
    "web3-global-shim.js"() {
      init_process();
      init_buffer();
      W = typeof window !== "undefined" && window.Web3 || void 0;
      if (!W) {
        throw new Error('Global Web3 not found. Load "/gsn/web3.min.js" BEFORE gsn-umd.js');
      }
      web3_global_shim_default = W;
      Web3 = W;
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IPaymaster.json
  var require_IPaymaster = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IPaymaster.json"(exports, module) {
      module.exports = [{ inputs: [], name: "getGasAndDataLimits", outputs: [{ components: [{ internalType: "uint256", name: "acceptanceBudget", type: "uint256" }, { internalType: "uint256", name: "preRelayedCallGasLimit", type: "uint256" }, { internalType: "uint256", name: "postRelayedCallGasLimit", type: "uint256" }, { internalType: "uint256", name: "calldataSizeLimit", type: "uint256" }], internalType: "struct IPaymaster.GasAndDataLimits", name: "limits", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [], name: "trustedForwarder", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getHubAddr", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getRelayHubDeposit", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }, { internalType: "uint256", name: "validUntil", type: "uint256" }], internalType: "struct IForwarder.ForwardRequest", name: "request", type: "tuple" }, { components: [{ internalType: "uint256", name: "gasPrice", type: "uint256" }, { internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { internalType: "address", name: "relayWorker", type: "address" }, { internalType: "address", name: "paymaster", type: "address" }, { internalType: "address", name: "forwarder", type: "address" }, { internalType: "bytes", name: "paymasterData", type: "bytes" }, { internalType: "uint256", name: "clientId", type: "uint256" }], internalType: "struct GsnTypes.RelayData", name: "relayData", type: "tuple" }], internalType: "struct GsnTypes.RelayRequest", name: "relayRequest", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }, { internalType: "bytes", name: "approvalData", type: "bytes" }, { internalType: "uint256", name: "maxPossibleGas", type: "uint256" }], name: "preRelayedCall", outputs: [{ internalType: "bytes", name: "context", type: "bytes" }, { internalType: "bool", name: "rejectOnRecipientRevert", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "context", type: "bytes" }, { internalType: "bool", name: "success", type: "bool" }, { internalType: "uint256", name: "gasUseWithoutPost", type: "uint256" }, { components: [{ internalType: "uint256", name: "gasPrice", type: "uint256" }, { internalType: "uint256", name: "pctRelayFee", type: "uint256" }, { internalType: "uint256", name: "baseRelayFee", type: "uint256" }, { internalType: "address", name: "relayWorker", type: "address" }, { internalType: "address", name: "paymaster", type: "address" }, { internalType: "address", name: "forwarder", type: "address" }, { internalType: "bytes", name: "paymasterData", type: "bytes" }, { internalType: "uint256", name: "clientId", type: "uint256" }], internalType: "struct GsnTypes.RelayData", name: "relayData", type: "tuple" }], name: "postRelayedCall", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "versionPaymaster", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IForwarder.json
  var require_IForwarder = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IForwarder.json"(exports, module) {
      module.exports = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "domainSeparator", type: "bytes32" }, { indexed: false, internalType: "bytes", name: "domainValue", type: "bytes" }], name: "DomainRegistered", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "typeHash", type: "bytes32" }, { indexed: false, internalType: "string", name: "typeStr", type: "string" }], name: "RequestTypeRegistered", type: "event" }, { inputs: [{ internalType: "address", name: "from", type: "address" }], name: "getNonce", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }, { internalType: "uint256", name: "validUntil", type: "uint256" }], internalType: "struct IForwarder.ForwardRequest", name: "forwardRequest", type: "tuple" }, { internalType: "bytes32", name: "domainSeparator", type: "bytes32" }, { internalType: "bytes32", name: "requestTypeHash", type: "bytes32" }, { internalType: "bytes", name: "suffixData", type: "bytes" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }, { internalType: "uint256", name: "validUntil", type: "uint256" }], internalType: "struct IForwarder.ForwardRequest", name: "forwardRequest", type: "tuple" }, { internalType: "bytes32", name: "domainSeparator", type: "bytes32" }, { internalType: "bytes32", name: "requestTypeHash", type: "bytes32" }, { internalType: "bytes", name: "suffixData", type: "bytes" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "execute", outputs: [{ internalType: "bool", name: "success", type: "bool" }, { internalType: "bytes", name: "ret", type: "bytes" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "string", name: "typeName", type: "string" }, { internalType: "string", name: "typeSuffix", type: "string" }], name: "registerRequestType", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "name", type: "string" }, { internalType: "string", name: "version", type: "string" }], name: "registerDomainSeparator", outputs: [], stateMutability: "nonpayable", type: "function" }];
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IStakeManager.json
  var require_IStakeManager = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IStakeManager.json"(exports, module) {
      module.exports = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "relayHub", type: "address" }], name: "HubAuthorized", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "relayHub", type: "address" }, { indexed: false, internalType: "uint256", name: "removalBlock", type: "uint256" }], name: "HubUnauthorized", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "owner", type: "address" }], name: "OwnerSet", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: false, internalType: "uint256", name: "stake", type: "uint256" }, { indexed: false, internalType: "uint256", name: "unstakeDelay", type: "uint256" }], name: "StakeAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "beneficiary", type: "address" }, { indexed: false, internalType: "uint256", name: "reward", type: "uint256" }], name: "StakePenalized", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: false, internalType: "uint256", name: "withdrawBlock", type: "uint256" }], name: "StakeUnlocked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "relayManager", type: "address" }, { indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "StakeWithdrawn", type: "event" }, { inputs: [{ internalType: "address payable", name: "owner", type: "address" }], name: "setRelayManagerOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }, { internalType: "uint256", name: "unstakeDelay", type: "uint256" }], name: "stakeForRelayManager", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }], name: "unlockStake", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }], name: "withdrawStake", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }, { internalType: "address", name: "relayHub", type: "address" }], name: "authorizeHubByOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayHub", type: "address" }], name: "authorizeHubByManager", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }, { internalType: "address", name: "relayHub", type: "address" }], name: "unauthorizeHubByOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayHub", type: "address" }], name: "unauthorizeHubByManager", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }, { internalType: "address", name: "relayHub", type: "address" }, { internalType: "uint256", name: "minAmount", type: "uint256" }, { internalType: "uint256", name: "minUnstakeDelay", type: "uint256" }], name: "isRelayManagerStaked", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }, { internalType: "address payable", name: "beneficiary", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "penalizeRelayManager", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "relayManager", type: "address" }], name: "getStakeInfo", outputs: [{ components: [{ internalType: "uint256", name: "stake", type: "uint256" }, { internalType: "uint256", name: "unstakeDelay", type: "uint256" }, { internalType: "uint256", name: "withdrawBlock", type: "uint256" }, { internalType: "address payable", name: "owner", type: "address" }], internalType: "struct IStakeManager.StakeInfo", name: "stakeInfo", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [], name: "maxUnstakeDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "versionSM", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IPenalizer.json
  var require_IPenalizer = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IPenalizer.json"(exports, module) {
      module.exports = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "sender", type: "address" }, { indexed: true, internalType: "bytes32", name: "commitHash", type: "bytes32" }, { indexed: false, internalType: "uint256", name: "readyBlockNumber", type: "uint256" }], name: "CommitAdded", type: "event" }, { inputs: [{ internalType: "bytes32", name: "commitHash", type: "bytes32" }], name: "commit", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "unsignedTx1", type: "bytes" }, { internalType: "bytes", name: "signature1", type: "bytes" }, { internalType: "bytes", name: "unsignedTx2", type: "bytes" }, { internalType: "bytes", name: "signature2", type: "bytes" }, { internalType: "contract IRelayHub", name: "hub", type: "address" }, { internalType: "uint256", name: "randomValue", type: "uint256" }], name: "penalizeRepeatedNonce", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes", name: "unsignedTx", type: "bytes" }, { internalType: "bytes", name: "signature", type: "bytes" }, { internalType: "contract IRelayHub", name: "hub", type: "address" }, { internalType: "uint256", name: "randomValue", type: "uint256" }], name: "penalizeIllegalTransaction", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "versionPenalizer", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "penalizeBlockDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "penalizeBlockExpiration", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IRelayRecipient.json
  var require_IRelayRecipient = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IRelayRecipient.json"(exports, module) {
      module.exports = [{ inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "versionRecipient", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
    }
  });

  // node_modules/@opengsn/common/dist/interfaces/IVersionRegistry.json
  var require_IVersionRegistry = __commonJS({
    "node_modules/@opengsn/common/dist/interfaces/IVersionRegistry.json"(exports, module) {
      module.exports = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "id", type: "bytes32" }, { indexed: false, internalType: "bytes32", name: "version", type: "bytes32" }, { indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: false, internalType: "uint256", name: "time", type: "uint256" }], name: "VersionAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "id", type: "bytes32" }, { indexed: false, internalType: "bytes32", name: "version", type: "bytes32" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VersionCanceled", type: "event" }, { inputs: [{ internalType: "bytes32", name: "id", type: "bytes32" }, { internalType: "bytes32", name: "version", type: "bytes32" }, { internalType: "string", name: "value", type: "string" }], name: "addVersion", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "id", type: "bytes32" }, { internalType: "bytes32", name: "version", type: "bytes32" }, { internalType: "string", name: "reason", type: "string" }], name: "cancelVersion", outputs: [], stateMutability: "nonpayable", type: "function" }];
    }
  });

  // node_modules/semver/internal/constants.js
  var require_constants2 = __commonJS({
    "node_modules/semver/internal/constants.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256;
      var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
      9007199254740991;
      var MAX_SAFE_COMPONENT_LENGTH = 16;
      var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
      var RELEASE_TYPES = [
        "major",
        "premajor",
        "minor",
        "preminor",
        "patch",
        "prepatch",
        "prerelease"
      ];
      module.exports = {
        MAX_LENGTH,
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_SAFE_INTEGER,
        RELEASE_TYPES,
        SEMVER_SPEC_VERSION,
        FLAG_INCLUDE_PRERELEASE: 1,
        FLAG_LOOSE: 2
      };
    }
  });

  // node_modules/semver/internal/debug.js
  var require_debug = __commonJS({
    "node_modules/semver/internal/debug.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var debug2 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
      };
      module.exports = debug2;
    }
  });

  // node_modules/semver/internal/re.js
  var require_re = __commonJS({
    "node_modules/semver/internal/re.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var {
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_LENGTH
      } = require_constants2();
      var debug2 = require_debug();
      exports = module.exports = {};
      var re = exports.re = [];
      var safeRe = exports.safeRe = [];
      var src = exports.src = [];
      var safeSrc = exports.safeSrc = [];
      var t = exports.t = {};
      var R = 0;
      var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
      var safeRegexReplacements = [
        ["\\s", 1],
        ["\\d", MAX_LENGTH],
        [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
      ];
      var makeSafeRegex = (value) => {
        for (const [token, max] of safeRegexReplacements) {
          value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
        }
        return value;
      };
      var createToken = (name2, value, isGlobal) => {
        const safe = makeSafeRegex(value);
        const index = R++;
        debug2(name2, index, value);
        t[name2] = index;
        src[index] = value;
        safeSrc[index] = safe;
        re[index] = new RegExp(value, isGlobal ? "g" : void 0);
        safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
      };
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
      createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
      createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
      createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
      createToken("FULL", `^${src[t.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
      createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
      createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
      createToken("COERCERTL", src[t.COERCE], true);
      createToken("COERCERTLFULL", src[t.COERCEFULL], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
      exports.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
      exports.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
      exports.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    }
  });

  // node_modules/semver/internal/parse-options.js
  var require_parse_options = __commonJS({
    "node_modules/semver/internal/parse-options.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var looseOption = Object.freeze({ loose: true });
      var emptyOpts = Object.freeze({});
      var parseOptions = (options) => {
        if (!options) {
          return emptyOpts;
        }
        if (typeof options !== "object") {
          return looseOption;
        }
        return options;
      };
      module.exports = parseOptions;
    }
  });

  // node_modules/semver/internal/identifiers.js
  var require_identifiers = __commonJS({
    "node_modules/semver/internal/identifiers.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var numeric = /^[0-9]+$/;
      var compareIdentifiers = (a, b) => {
        const anum = numeric.test(a);
        const bnum = numeric.test(b);
        if (anum && bnum) {
          a = +a;
          b = +b;
        }
        return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
      };
      var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
      module.exports = {
        compareIdentifiers,
        rcompareIdentifiers
      };
    }
  });

  // node_modules/semver/classes/semver.js
  var require_semver = __commonJS({
    "node_modules/semver/classes/semver.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var debug2 = require_debug();
      var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants2();
      var { safeRe: re, t } = require_re();
      var parseOptions = require_parse_options();
      var { compareIdentifiers } = require_identifiers();
      var SemVer = class _SemVer {
        constructor(version3, options) {
          options = parseOptions(options);
          if (version3 instanceof _SemVer) {
            if (version3.loose === !!options.loose && version3.includePrerelease === !!options.includePrerelease) {
              return version3;
            } else {
              version3 = version3.version;
            }
          } else if (typeof version3 !== "string") {
            throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version3}".`);
          }
          if (version3.length > MAX_LENGTH) {
            throw new TypeError(
              `version is longer than ${MAX_LENGTH} characters`
            );
          }
          debug2("SemVer", version3, options);
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          const m = version3.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
          if (!m) {
            throw new TypeError(`Invalid Version: ${version3}`);
          }
          this.raw = version3;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(other) {
          debug2("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof _SemVer)) {
            if (typeof other === "string" && other === this.version) {
              return 0;
            }
            other = new _SemVer(other, this.options);
          }
          if (other.version === this.version) {
            return 0;
          }
          return this.compareMain(other) || this.comparePre(other);
        }
        compareMain(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }
        comparePre(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          let i = 0;
          do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug2("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        compareBuild(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          let i = 0;
          do {
            const a = this.build[i];
            const b = other.build[i];
            debug2("build compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        // preminor will bump the version up to the next minor release, and immediately
        // down to pre-release. premajor and prepatch work the same way.
        inc(release4, identifier, identifierBase) {
          if (release4.startsWith("pre")) {
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (identifier) {
              const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]);
              if (!match || match[1] !== identifier) {
                throw new Error(`invalid identifier: ${identifier}`);
              }
            }
          }
          switch (release4) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier, identifierBase);
              this.inc("pre", identifier, identifierBase);
              break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier, identifierBase);
              }
              this.inc("pre", identifier, identifierBase);
              break;
            case "release":
              if (this.prerelease.length === 0) {
                throw new Error(`version ${this.raw} is not a prerelease`);
              }
              this.prerelease.length = 0;
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre": {
              const base2 = Number(identifierBase) ? 1 : 0;
              if (this.prerelease.length === 0) {
                this.prerelease = [base2];
              } else {
                let i = this.prerelease.length;
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }
                if (i === -1) {
                  if (identifier === this.prerelease.join(".") && identifierBase === false) {
                    throw new Error("invalid increment argument: identifier already exists");
                  }
                  this.prerelease.push(base2);
                }
              }
              if (identifier) {
                let prerelease = [identifier, base2];
                if (identifierBase === false) {
                  prerelease = [identifier];
                }
                if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = prerelease;
                  }
                } else {
                  this.prerelease = prerelease;
                }
              }
              break;
            }
            default:
              throw new Error(`invalid increment argument: ${release4}`);
          }
          this.raw = this.format();
          if (this.build.length) {
            this.raw += `+${this.build.join(".")}`;
          }
          return this;
        }
      };
      module.exports = SemVer;
    }
  });

  // node_modules/semver/functions/parse.js
  var require_parse = __commonJS({
    "node_modules/semver/functions/parse.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var parse3 = (version3, options, throwErrors = false) => {
        if (version3 instanceof SemVer) {
          return version3;
        }
        try {
          return new SemVer(version3, options);
        } catch (er) {
          if (!throwErrors) {
            return null;
          }
          throw er;
        }
      };
      module.exports = parse3;
    }
  });

  // node_modules/semver/functions/valid.js
  var require_valid = __commonJS({
    "node_modules/semver/functions/valid.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var parse3 = require_parse();
      var valid = (version3, options) => {
        const v = parse3(version3, options);
        return v ? v.version : null;
      };
      module.exports = valid;
    }
  });

  // node_modules/semver/functions/clean.js
  var require_clean = __commonJS({
    "node_modules/semver/functions/clean.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var parse3 = require_parse();
      var clean = (version3, options) => {
        const s = parse3(version3.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      };
      module.exports = clean;
    }
  });

  // node_modules/semver/functions/inc.js
  var require_inc = __commonJS({
    "node_modules/semver/functions/inc.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var inc = (version3, release4, options, identifier, identifierBase) => {
        if (typeof options === "string") {
          identifierBase = identifier;
          identifier = options;
          options = void 0;
        }
        try {
          return new SemVer(
            version3 instanceof SemVer ? version3.version : version3,
            options
          ).inc(release4, identifier, identifierBase).version;
        } catch (er) {
          return null;
        }
      };
      module.exports = inc;
    }
  });

  // node_modules/semver/functions/diff.js
  var require_diff = __commonJS({
    "node_modules/semver/functions/diff.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var parse3 = require_parse();
      var diff = (version1, version22) => {
        const v1 = parse3(version1, null, true);
        const v2 = parse3(version22, null, true);
        const comparison = v1.compare(v2);
        if (comparison === 0) {
          return null;
        }
        const v1Higher = comparison > 0;
        const highVersion = v1Higher ? v1 : v2;
        const lowVersion = v1Higher ? v2 : v1;
        const highHasPre = !!highVersion.prerelease.length;
        const lowHasPre = !!lowVersion.prerelease.length;
        if (lowHasPre && !highHasPre) {
          if (!lowVersion.patch && !lowVersion.minor) {
            return "major";
          }
          if (lowVersion.compareMain(highVersion) === 0) {
            if (lowVersion.minor && !lowVersion.patch) {
              return "minor";
            }
            return "patch";
          }
        }
        const prefix = highHasPre ? "pre" : "";
        if (v1.major !== v2.major) {
          return prefix + "major";
        }
        if (v1.minor !== v2.minor) {
          return prefix + "minor";
        }
        if (v1.patch !== v2.patch) {
          return prefix + "patch";
        }
        return "prerelease";
      };
      module.exports = diff;
    }
  });

  // node_modules/semver/functions/major.js
  var require_major = __commonJS({
    "node_modules/semver/functions/major.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var major = (a, loose) => new SemVer(a, loose).major;
      module.exports = major;
    }
  });

  // node_modules/semver/functions/minor.js
  var require_minor = __commonJS({
    "node_modules/semver/functions/minor.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var minor = (a, loose) => new SemVer(a, loose).minor;
      module.exports = minor;
    }
  });

  // node_modules/semver/functions/patch.js
  var require_patch = __commonJS({
    "node_modules/semver/functions/patch.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var patch = (a, loose) => new SemVer(a, loose).patch;
      module.exports = patch;
    }
  });

  // node_modules/semver/functions/prerelease.js
  var require_prerelease = __commonJS({
    "node_modules/semver/functions/prerelease.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var parse3 = require_parse();
      var prerelease = (version3, options) => {
        const parsed = parse3(version3, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      };
      module.exports = prerelease;
    }
  });

  // node_modules/semver/functions/compare.js
  var require_compare = __commonJS({
    "node_modules/semver/functions/compare.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var compare6 = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
      module.exports = compare6;
    }
  });

  // node_modules/semver/functions/rcompare.js
  var require_rcompare = __commonJS({
    "node_modules/semver/functions/rcompare.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var rcompare = (a, b, loose) => compare6(b, a, loose);
      module.exports = rcompare;
    }
  });

  // node_modules/semver/functions/compare-loose.js
  var require_compare_loose = __commonJS({
    "node_modules/semver/functions/compare-loose.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var compareLoose = (a, b) => compare6(a, b, true);
      module.exports = compareLoose;
    }
  });

  // node_modules/semver/functions/compare-build.js
  var require_compare_build = __commonJS({
    "node_modules/semver/functions/compare-build.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var compareBuild = (a, b, loose) => {
        const versionA = new SemVer(a, loose);
        const versionB = new SemVer(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      };
      module.exports = compareBuild;
    }
  });

  // node_modules/semver/functions/sort.js
  var require_sort = __commonJS({
    "node_modules/semver/functions/sort.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compareBuild = require_compare_build();
      var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      module.exports = sort;
    }
  });

  // node_modules/semver/functions/rsort.js
  var require_rsort = __commonJS({
    "node_modules/semver/functions/rsort.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compareBuild = require_compare_build();
      var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      module.exports = rsort;
    }
  });

  // node_modules/semver/functions/gt.js
  var require_gt = __commonJS({
    "node_modules/semver/functions/gt.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var gt = (a, b, loose) => compare6(a, b, loose) > 0;
      module.exports = gt;
    }
  });

  // node_modules/semver/functions/lt.js
  var require_lt = __commonJS({
    "node_modules/semver/functions/lt.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var lt = (a, b, loose) => compare6(a, b, loose) < 0;
      module.exports = lt;
    }
  });

  // node_modules/semver/functions/eq.js
  var require_eq = __commonJS({
    "node_modules/semver/functions/eq.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var eq = (a, b, loose) => compare6(a, b, loose) === 0;
      module.exports = eq;
    }
  });

  // node_modules/semver/functions/neq.js
  var require_neq = __commonJS({
    "node_modules/semver/functions/neq.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var neq = (a, b, loose) => compare6(a, b, loose) !== 0;
      module.exports = neq;
    }
  });

  // node_modules/semver/functions/gte.js
  var require_gte = __commonJS({
    "node_modules/semver/functions/gte.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var gte = (a, b, loose) => compare6(a, b, loose) >= 0;
      module.exports = gte;
    }
  });

  // node_modules/semver/functions/lte.js
  var require_lte = __commonJS({
    "node_modules/semver/functions/lte.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var compare6 = require_compare();
      var lte = (a, b, loose) => compare6(a, b, loose) <= 0;
      module.exports = lte;
    }
  });

  // node_modules/semver/functions/cmp.js
  var require_cmp = __commonJS({
    "node_modules/semver/functions/cmp.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var eq = require_eq();
      var neq = require_neq();
      var gt = require_gt();
      var gte = require_gte();
      var lt = require_lt();
      var lte = require_lte();
      var cmp = (a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a === b;
          case "!==":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a !== b;
          case "":
          case "=":
          case "==":
            return eq(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError(`Invalid operator: ${op}`);
        }
      };
      module.exports = cmp;
    }
  });

  // node_modules/semver/functions/coerce.js
  var require_coerce = __commonJS({
    "node_modules/semver/functions/coerce.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var parse3 = require_parse();
      var { safeRe: re, t } = require_re();
      var coerce = (version3, options) => {
        if (version3 instanceof SemVer) {
          return version3;
        }
        if (typeof version3 === "number") {
          version3 = String(version3);
        }
        if (typeof version3 !== "string") {
          return null;
        }
        options = options || {};
        let match = null;
        if (!options.rtl) {
          match = version3.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
        } else {
          const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
          let next;
          while ((next = coerceRtlRegex.exec(version3)) && (!match || match.index + match[0].length !== version3.length)) {
            if (!match || next.index + next[0].length !== match.index + match[0].length) {
              match = next;
            }
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
          }
          coerceRtlRegex.lastIndex = -1;
        }
        if (match === null) {
          return null;
        }
        const major = match[2];
        const minor = match[3] || "0";
        const patch = match[4] || "0";
        const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
        const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
        return parse3(`${major}.${minor}.${patch}${prerelease}${build}`, options);
      };
      module.exports = coerce;
    }
  });

  // node_modules/semver/internal/lrucache.js
  var require_lrucache = __commonJS({
    "node_modules/semver/internal/lrucache.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var LRUCache = class {
        constructor() {
          this.max = 1e3;
          this.map = /* @__PURE__ */ new Map();
        }
        get(key) {
          const value = this.map.get(key);
          if (value === void 0) {
            return void 0;
          } else {
            this.map.delete(key);
            this.map.set(key, value);
            return value;
          }
        }
        delete(key) {
          return this.map.delete(key);
        }
        set(key, value) {
          const deleted = this.delete(key);
          if (!deleted && value !== void 0) {
            if (this.map.size >= this.max) {
              const firstKey = this.map.keys().next().value;
              this.delete(firstKey);
            }
            this.map.set(key, value);
          }
          return this;
        }
      };
      module.exports = LRUCache;
    }
  });

  // node_modules/semver/classes/range.js
  var require_range2 = __commonJS({
    "node_modules/semver/classes/range.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SPACE_CHARACTERS = /\s+/g;
      var Range = class _Range {
        constructor(range, options) {
          options = parseOptions(options);
          if (range instanceof _Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new _Range(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            this.raw = range.value;
            this.set = [[range]];
            this.formatted = void 0;
            return this;
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
          this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
          }
          if (this.set.length > 1) {
            const first = this.set[0];
            this.set = this.set.filter((c) => !isNullSet(c[0]));
            if (this.set.length === 0) {
              this.set = [first];
            } else if (this.set.length > 1) {
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
          }
          this.formatted = void 0;
        }
        get range() {
          if (this.formatted === void 0) {
            this.formatted = "";
            for (let i = 0; i < this.set.length; i++) {
              if (i > 0) {
                this.formatted += "||";
              }
              const comps = this.set[i];
              for (let k = 0; k < comps.length; k++) {
                if (k > 0) {
                  this.formatted += " ";
                }
                this.formatted += comps[k].toString().trim();
              }
            }
          }
          return this.formatted;
        }
        format() {
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(range) {
          const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
          const memoKey = memoOpts + ":" + range;
          const cached = cache.get(memoKey);
          if (cached) {
            return cached;
          }
          const loose = this.options.loose;
          const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
          debug2("hyphen replace", range);
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
          debug2("comparator trim", range);
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
          debug2("tilde trim", range);
          range = range.replace(re[t.CARETTRIM], caretTrimReplace);
          debug2("caret trim", range);
          let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
          if (loose) {
            rangeList = rangeList.filter((comp) => {
              debug2("loose invalid filter", comp, this.options);
              return !!comp.match(re[t.COMPARATORLOOSE]);
            });
          }
          debug2("range list", rangeList);
          const rangeMap = /* @__PURE__ */ new Map();
          const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
          for (const comp of comparators) {
            if (isNullSet(comp)) {
              return [comp];
            }
            rangeMap.set(comp.value, comp);
          }
          if (rangeMap.size > 1 && rangeMap.has("")) {
            rangeMap.delete("");
          }
          const result = [...rangeMap.values()];
          cache.set(memoKey, result);
          return result;
        }
        intersects(range, options) {
          if (!(range instanceof _Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((thisComparators) => {
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
              return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
                return rangeComparators.every((rangeComparator) => {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }
        // if ANY of the sets match ALL of its comparators, then pass
        test(version3) {
          if (!version3) {
            return false;
          }
          if (typeof version3 === "string") {
            try {
              version3 = new SemVer(version3, this.options);
            } catch (er) {
              return false;
            }
          }
          for (let i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version3, this.options)) {
              return true;
            }
          }
          return false;
        }
      };
      module.exports = Range;
      var LRU = require_lrucache();
      var cache = new LRU();
      var parseOptions = require_parse_options();
      var Comparator = require_comparator();
      var debug2 = require_debug();
      var SemVer = require_semver();
      var {
        safeRe: re,
        t,
        comparatorTrimReplace,
        tildeTrimReplace,
        caretTrimReplace
      } = require_re();
      var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants2();
      var isNullSet = (c) => c.value === "<0.0.0-0";
      var isAny = (c) => c.value === "";
      var isSatisfiable = (comparators, options) => {
        let result = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while (result && remainingComparators.length) {
          result = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options);
          });
          testComparator = remainingComparators.pop();
        }
        return result;
      };
      var parseComparator = (comp, options) => {
        debug2("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug2("caret", comp);
        comp = replaceTildes(comp, options);
        debug2("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug2("xrange", comp);
        comp = replaceStars(comp, options);
        debug2("stars", comp);
        return comp;
      };
      var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
      var replaceTildes = (comp, options) => {
        return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
      };
      var replaceTilde = (comp, options) => {
        const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
        return comp.replace(r, (_, M, m, p, pr) => {
          debug2("tilde", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
          } else if (pr) {
            debug2("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
          }
          debug2("tilde return", ret);
          return ret;
        });
      };
      var replaceCarets = (comp, options) => {
        return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
      };
      var replaceCaret = (comp, options) => {
        debug2("caret", comp, options);
        const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
        const z = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr) => {
          debug2("caret", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            } else {
              ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            }
          } else if (pr) {
            debug2("replaceCaret pr", pr);
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            }
          } else {
            debug2("no pr");
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
          }
          debug2("caret return", ret);
          return ret;
        });
      };
      var replaceXRanges = (comp, options) => {
        debug2("replaceXRanges", comp, options);
        return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
      };
      var replaceXRange = (comp, options) => {
        comp = comp.trim();
        const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
          debug2("xRange", comp, ret, gtlt, M, m, p, pr);
          const xM = isX(M);
          const xm = xM || isX(m);
          const xp = xm || isX(p);
          const anyX = xp;
          if (gtlt === "=" && anyX) {
            gtlt = "";
          }
          pr = options.includePrerelease ? "-0" : "";
          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              ret = "<0.0.0-0";
            } else {
              ret = "*";
            }
          } else if (gtlt && anyX) {
            if (xm) {
              m = 0;
            }
            p = 0;
            if (gtlt === ">") {
              gtlt = ">=";
              if (xm) {
                M = +M + 1;
                m = 0;
                p = 0;
              } else {
                m = +m + 1;
                p = 0;
              }
            } else if (gtlt === "<=") {
              gtlt = "<";
              if (xm) {
                M = +M + 1;
              } else {
                m = +m + 1;
              }
            }
            if (gtlt === "<") {
              pr = "-0";
            }
            ret = `${gtlt + M}.${m}.${p}${pr}`;
          } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
          }
          debug2("xRange return", ret);
          return ret;
        });
      };
      var replaceStars = (comp, options) => {
        debug2("replaceStars", comp, options);
        return comp.trim().replace(re[t.STAR], "");
      };
      var replaceGTE0 = (comp, options) => {
        debug2("replaceGTE0", comp, options);
        return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
      };
      var hyphenReplace = (incPr) => ($0, from3, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
        if (isX(fM)) {
          from3 = "";
        } else if (isX(fm)) {
          from3 = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        } else if (isX(fp)) {
          from3 = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        } else if (fpr) {
          from3 = `>=${from3}`;
        } else {
          from3 = `>=${from3}${incPr ? "-0" : ""}`;
        }
        if (isX(tM)) {
          to = "";
        } else if (isX(tm)) {
          to = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
          to = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
          to = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
          to = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
          to = `<=${to}`;
        }
        return `${from3} ${to}`.trim();
      };
      var testSet = (set, version3, options) => {
        for (let i = 0; i < set.length; i++) {
          if (!set[i].test(version3)) {
            return false;
          }
        }
        if (version3.prerelease.length && !options.includePrerelease) {
          for (let i = 0; i < set.length; i++) {
            debug2(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
              continue;
            }
            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (allowed.major === version3.major && allowed.minor === version3.minor && allowed.patch === version3.patch) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      };
    }
  });

  // node_modules/semver/classes/comparator.js
  var require_comparator = __commonJS({
    "node_modules/semver/classes/comparator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ANY = Symbol("SemVer ANY");
      var Comparator = class _Comparator {
        static get ANY() {
          return ANY;
        }
        constructor(comp, options) {
          options = parseOptions(options);
          if (comp instanceof _Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          comp = comp.trim().split(/\s+/).join(" ");
          debug2("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug2("comp", this);
        }
        parse(comp) {
          const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          const m = comp.match(r);
          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
          }
          this.operator = m[1] !== void 0 ? m[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(version3) {
          debug2("Comparator.test", version3, this.options.loose);
          if (this.semver === ANY || version3 === ANY) {
            return true;
          }
          if (typeof version3 === "string") {
            try {
              version3 = new SemVer(version3, this.options);
            } catch (er) {
              return false;
            }
          }
          return cmp(version3, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
          if (!(comp instanceof _Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new Range(comp.value, options).test(this.value);
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true;
            }
            return new Range(this.value, options).test(comp.semver);
          }
          options = parseOptions(options);
          if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
            return false;
          }
          if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
            return false;
          }
          if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
            return true;
          }
          if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
            return true;
          }
          if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
            return true;
          }
          if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
            return true;
          }
          if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
            return true;
          }
          return false;
        }
      };
      module.exports = Comparator;
      var parseOptions = require_parse_options();
      var { safeRe: re, t } = require_re();
      var cmp = require_cmp();
      var debug2 = require_debug();
      var SemVer = require_semver();
      var Range = require_range2();
    }
  });

  // node_modules/semver/functions/satisfies.js
  var require_satisfies = __commonJS({
    "node_modules/semver/functions/satisfies.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Range = require_range2();
      var satisfies = (version3, range, options) => {
        try {
          range = new Range(range, options);
        } catch (er) {
          return false;
        }
        return range.test(version3);
      };
      module.exports = satisfies;
    }
  });

  // node_modules/semver/ranges/to-comparators.js
  var require_to_comparators = __commonJS({
    "node_modules/semver/ranges/to-comparators.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Range = require_range2();
      var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      module.exports = toComparators;
    }
  });

  // node_modules/semver/ranges/max-satisfying.js
  var require_max_satisfying = __commonJS({
    "node_modules/semver/ranges/max-satisfying.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var Range = require_range2();
      var maxSatisfying = (versions3, range, options) => {
        let max = null;
        let maxSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions3.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!max || maxSV.compare(v) === -1) {
              max = v;
              maxSV = new SemVer(max, options);
            }
          }
        });
        return max;
      };
      module.exports = maxSatisfying;
    }
  });

  // node_modules/semver/ranges/min-satisfying.js
  var require_min_satisfying = __commonJS({
    "node_modules/semver/ranges/min-satisfying.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var Range = require_range2();
      var minSatisfying = (versions3, range, options) => {
        let min = null;
        let minSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions3.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!min || minSV.compare(v) === 1) {
              min = v;
              minSV = new SemVer(min, options);
            }
          }
        });
        return min;
      };
      module.exports = minSatisfying;
    }
  });

  // node_modules/semver/ranges/min-version.js
  var require_min_version = __commonJS({
    "node_modules/semver/ranges/min-version.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var Range = require_range2();
      var gt = require_gt();
      var minVersion = (range, loose) => {
        range = new Range(range, loose);
        let minver = new SemVer("0.0.0");
        if (range.test(minver)) {
          return minver;
        }
        minver = new SemVer("0.0.0-0");
        if (range.test(minver)) {
          return minver;
        }
        minver = null;
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let setMin = null;
          comparators.forEach((comparator) => {
            const compver = new SemVer(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++;
                } else {
                  compver.prerelease.push(0);
                }
                compver.raw = compver.format();
              /* fallthrough */
              case "":
              case ">=":
                if (!setMin || gt(compver, setMin)) {
                  setMin = compver;
                }
                break;
              case "<":
              case "<=":
                break;
              /* istanbul ignore next */
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
          });
          if (setMin && (!minver || gt(minver, setMin))) {
            minver = setMin;
          }
        }
        if (minver && range.test(minver)) {
          return minver;
        }
        return null;
      };
      module.exports = minVersion;
    }
  });

  // node_modules/semver/ranges/valid.js
  var require_valid2 = __commonJS({
    "node_modules/semver/ranges/valid.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Range = require_range2();
      var validRange = (range, options) => {
        try {
          return new Range(range, options).range || "*";
        } catch (er) {
          return null;
        }
      };
      module.exports = validRange;
    }
  });

  // node_modules/semver/ranges/outside.js
  var require_outside = __commonJS({
    "node_modules/semver/ranges/outside.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var SemVer = require_semver();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var Range = require_range2();
      var satisfies = require_satisfies();
      var gt = require_gt();
      var lt = require_lt();
      var lte = require_lte();
      var gte = require_gte();
      var outside = (version3, range, hilo, options) => {
        version3 = new SemVer(version3, options);
        range = new Range(range, options);
        let gtfn, ltefn, ltfn, comp, ecomp;
        switch (hilo) {
          case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt;
            comp = ">";
            ecomp = ">=";
            break;
          case "<":
            gtfn = lt;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version3, range, options)) {
          return false;
        }
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let high = null;
          let low = null;
          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0");
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator;
            }
          });
          if (high.operator === comp || high.operator === ecomp) {
            return false;
          }
          if ((!low.operator || low.operator === comp) && ltefn(version3, low.semver)) {
            return false;
          } else if (low.operator === ecomp && ltfn(version3, low.semver)) {
            return false;
          }
        }
        return true;
      };
      module.exports = outside;
    }
  });

  // node_modules/semver/ranges/gtr.js
  var require_gtr = __commonJS({
    "node_modules/semver/ranges/gtr.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var outside = require_outside();
      var gtr = (version3, range, options) => outside(version3, range, ">", options);
      module.exports = gtr;
    }
  });

  // node_modules/semver/ranges/ltr.js
  var require_ltr = __commonJS({
    "node_modules/semver/ranges/ltr.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var outside = require_outside();
      var ltr = (version3, range, options) => outside(version3, range, "<", options);
      module.exports = ltr;
    }
  });

  // node_modules/semver/ranges/intersects.js
  var require_intersects = __commonJS({
    "node_modules/semver/ranges/intersects.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Range = require_range2();
      var intersects = (r1, r2, options) => {
        r1 = new Range(r1, options);
        r2 = new Range(r2, options);
        return r1.intersects(r2, options);
      };
      module.exports = intersects;
    }
  });

  // node_modules/semver/ranges/simplify.js
  var require_simplify = __commonJS({
    "node_modules/semver/ranges/simplify.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var satisfies = require_satisfies();
      var compare6 = require_compare();
      module.exports = (versions3, range, options) => {
        const set = [];
        let first = null;
        let prev = null;
        const v = versions3.sort((a, b) => compare6(a, b, options));
        for (const version3 of v) {
          const included = satisfies(version3, range, options);
          if (included) {
            prev = version3;
            if (!first) {
              first = version3;
            }
          } else {
            if (prev) {
              set.push([first, prev]);
            }
            prev = null;
            first = null;
          }
        }
        if (first) {
          set.push([first, null]);
        }
        const ranges = [];
        for (const [min, max] of set) {
          if (min === max) {
            ranges.push(min);
          } else if (!max && min === v[0]) {
            ranges.push("*");
          } else if (!max) {
            ranges.push(`>=${min}`);
          } else if (min === v[0]) {
            ranges.push(`<=${max}`);
          } else {
            ranges.push(`${min} - ${max}`);
          }
        }
        const simplified = ranges.join(" || ");
        const original = typeof range.raw === "string" ? range.raw : String(range);
        return simplified.length < original.length ? simplified : range;
      };
    }
  });

  // node_modules/semver/ranges/subset.js
  var require_subset = __commonJS({
    "node_modules/semver/ranges/subset.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Range = require_range2();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var satisfies = require_satisfies();
      var compare6 = require_compare();
      var subset = (sub, dom, options = {}) => {
        if (sub === dom) {
          return true;
        }
        sub = new Range(sub, options);
        dom = new Range(dom, options);
        let sawNonNull = false;
        OUTER: for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
        return true;
      };
      var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
      var minimumVersion = [new Comparator(">=0.0.0")];
      var simpleSubset = (sub, dom, options) => {
        if (sub === dom) {
          return true;
        }
        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY) {
            return true;
          } else if (options.includePrerelease) {
            sub = minimumVersionWithPreRelease;
          } else {
            sub = minimumVersion;
          }
        }
        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease) {
            return true;
          } else {
            dom = minimumVersion;
          }
        }
        const eqSet = /* @__PURE__ */ new Set();
        let gt, lt;
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=") {
            gt = higherGT(gt, c, options);
          } else if (c.operator === "<" || c.operator === "<=") {
            lt = lowerLT(lt, c, options);
          } else {
            eqSet.add(c.semver);
          }
        }
        if (eqSet.size > 1) {
          return null;
        }
        let gtltComp;
        if (gt && lt) {
          gtltComp = compare6(gt.semver, lt.semver, options);
          if (gtltComp > 0) {
            return null;
          } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
            return null;
          }
        }
        for (const eq of eqSet) {
          if (gt && !satisfies(eq, String(gt), options)) {
            return null;
          }
          if (lt && !satisfies(eq, String(lt), options)) {
            return null;
          }
          for (const c of dom) {
            if (!satisfies(eq, String(c), options)) {
              return false;
            }
          }
          return true;
        }
        let higher, lower;
        let hasDomLT, hasDomGT;
        let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
        let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
        if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
          needDomLTPre = false;
        }
        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
          if (gt) {
            if (needDomGTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
                needDomGTPre = false;
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt, c, options);
              if (higher === c && higher !== gt) {
                return false;
              }
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
              return false;
            }
          }
          if (lt) {
            if (needDomLTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
                needDomLTPre = false;
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt, c, options);
              if (lower === c && lower !== lt) {
                return false;
              }
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
              return false;
            }
          }
          if (!c.operator && (lt || gt) && gtltComp !== 0) {
            return false;
          }
        }
        if (gt && hasDomLT && !lt && gtltComp !== 0) {
          return false;
        }
        if (lt && hasDomGT && !gt && gtltComp !== 0) {
          return false;
        }
        if (needDomGTPre || needDomLTPre) {
          return false;
        }
        return true;
      };
      var higherGT = (a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare6(a.semver, b.semver, options);
        return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
      };
      var lowerLT = (a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare6(a.semver, b.semver, options);
        return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
      };
      module.exports = subset;
    }
  });

  // node_modules/semver/index.js
  var require_semver2 = __commonJS({
    "node_modules/semver/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var internalRe = require_re();
      var constants = require_constants2();
      var SemVer = require_semver();
      var identifiers = require_identifiers();
      var parse3 = require_parse();
      var valid = require_valid();
      var clean = require_clean();
      var inc = require_inc();
      var diff = require_diff();
      var major = require_major();
      var minor = require_minor();
      var patch = require_patch();
      var prerelease = require_prerelease();
      var compare6 = require_compare();
      var rcompare = require_rcompare();
      var compareLoose = require_compare_loose();
      var compareBuild = require_compare_build();
      var sort = require_sort();
      var rsort = require_rsort();
      var gt = require_gt();
      var lt = require_lt();
      var eq = require_eq();
      var neq = require_neq();
      var gte = require_gte();
      var lte = require_lte();
      var cmp = require_cmp();
      var coerce = require_coerce();
      var Comparator = require_comparator();
      var Range = require_range2();
      var satisfies = require_satisfies();
      var toComparators = require_to_comparators();
      var maxSatisfying = require_max_satisfying();
      var minSatisfying = require_min_satisfying();
      var minVersion = require_min_version();
      var validRange = require_valid2();
      var outside = require_outside();
      var gtr = require_gtr();
      var ltr = require_ltr();
      var intersects = require_intersects();
      var simplifyRange = require_simplify();
      var subset = require_subset();
      module.exports = {
        parse: parse3,
        valid,
        clean,
        inc,
        diff,
        major,
        minor,
        patch,
        prerelease,
        compare: compare6,
        rcompare,
        compareLoose,
        compareBuild,
        sort,
        rsort,
        gt,
        lt,
        eq,
        neq,
        gte,
        lte,
        cmp,
        coerce,
        Comparator,
        Range,
        satisfies,
        toComparators,
        maxSatisfying,
        minSatisfying,
        minVersion,
        validRange,
        outside,
        gtr,
        ltr,
        intersects,
        simplifyRange,
        subset,
        SemVer,
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
        RELEASE_TYPES: constants.RELEASE_TYPES,
        compareIdentifiers: identifiers.compareIdentifiers,
        rcompareIdentifiers: identifiers.rcompareIdentifiers
      };
    }
  });

  // node_modules/@opengsn/common/dist/VersionsManager.js
  var require_VersionsManager = __commonJS({
    "node_modules/@opengsn/common/dist/VersionsManager.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var semver_1 = __importDefault(require_semver2());
      var VersionsManager = class {
        /**
         * @param componentVersion - a semver of a component that uses the VersionsManager
         * @param requiredVersionRange - a semver that has to be satisfied by the
         */
        constructor(componentVersion, requiredVersionRange) {
          if (semver_1.default.valid(componentVersion) == null) {
            throw new Error("Component version is not valid");
          }
          if (requiredVersionRange == null) {
            const ver = new semver_1.default.SemVer(componentVersion);
            ver.patch = 0;
            requiredVersionRange = "^" + ver.format();
          }
          this.requiredVersionRange = requiredVersionRange;
        }
        /**
         * @param version - the version of a dependency to compare against
         * @return true if {@param version} satisfies the {@link requiredVersionRange}
         */
        isRequiredVersionSatisfied(version3) {
          version3 = version3.replace("_", "-");
          return semver_1.default.satisfies(version3, this.requiredVersionRange, { includePrerelease: true });
        }
      };
      exports.VersionsManager = VersionsManager;
    }
  });

  // node_modules/@opengsn/common/dist/ErrorReplacerJSON.js
  var require_ErrorReplacerJSON = __commonJS({
    "node_modules/@opengsn/common/dist/ErrorReplacerJSON.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      function replaceErrors(key, value) {
        if (value instanceof Map) {
          return {
            dataType: "Map",
            value: Array.from(value.entries())
          };
        } else if (value instanceof Error) {
          const error2 = {};
          Object.getOwnPropertyNames(value).filter((e) => !["request", "response"].includes(e)).forEach(function(key2) {
            error2[key2] = // @ts-ignore
            value[key2];
          });
          return error2;
        }
        return value;
      }
      exports.replaceErrors = replaceErrors;
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color-convert/conversions.js"(exports, module) {
      init_process();
      init_buffer();
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color-convert/route.js"(exports, module) {
      init_process();
      init_buffer();
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue3 = [fromModel];
        graph[fromModel].distance = 0;
        while (queue3.length) {
          const current = queue3.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue3.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from3, to) {
        return function(args) {
          return to(from3(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color-convert/index.js"(exports, module) {
      init_process();
      init_buffer();
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/ansi-styles/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get3) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get3();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name2] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles[name2] = wrap(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes2 = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            // Bright color
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes2.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes2,
          enumerable: false
        });
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/supports-color/browser.js
  var require_browser4 = __commonJS({
    "node_modules/supports-color/browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/chalk/source/util.js
  var require_util4 = __commonJS({
    "node_modules/chalk/source/util.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring);
        if (index === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
          endIndex = index + substringLength;
          index = string.indexOf(substring, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
          endIndex = index + 1;
          index = string.indexOf("\n", endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "node_modules/chalk/source/templates.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape2(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name2, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number = Number(chunk);
          if (!Number.isNaN(number)) {
            results.push(number);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, character) => escape2 ? unescape2(escape2) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name2 = matches[1];
          if (matches[2]) {
            const args = parseArguments(name2, matches[2]);
            results.push([name2].concat(args));
          } else {
            results.push([name2]);
          }
        }
        return results;
      }
      function buildStyle(chalk, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module.exports = (chalk, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape2(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMessage);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "node_modules/chalk/source/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_browser4();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util4();
      var { isArray: isArray4 } = Array;
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options = {}) => {
        if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options.level === void 0 ? colorLevel : options.level;
      };
      var ChalkClass = class {
        constructor(options) {
          return chalkFactory(options);
        }
      };
      var chalkFactory = (options) => {
        const chalk2 = {};
        applyOptions(chalk2, options);
        chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
        Object.setPrototypeOf(chalk2, Chalk.prototype);
        Object.setPrototypeOf(chalk2.template, chalk2);
        chalk2.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk2.template.Instance = ChalkClass;
        return chalk2.template;
      };
      function Chalk(options) {
        return chalkFactory(options);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray4(arguments_[0]) && isArray4(arguments_[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...arguments_));
          }
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        Object.setPrototypeOf(builder, proto);
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk2, ...strings) => {
        const [firstString] = strings;
        if (!isArray4(firstString) || !isArray4(firstString.raw)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++) {
          parts.push(
            String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
            String(firstString.raw[i])
          );
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk2, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk = Chalk();
      chalk.supportsColor = stdoutColor;
      chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk.stderr.supportsColor = stderrColor;
      module.exports = chalk;
    }
  });

  // node_modules/@opengsn/common/dist/Environments.js
  var require_Environments = __commonJS({
    "node_modules/@opengsn/common/dist/Environments.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var defaultStakeManagerMaxUnstakeDelay = 1e7;
      var defaultPenalizerConfiguration = {
        penalizeBlockDelay: 5,
        penalizeBlockExpiration: 6e4
      };
      var defaultRelayHubConfiguration = {
        gasOverhead: 31907,
        postOverhead: 11890,
        gasReserve: 1e5,
        maxWorkerCount: 10,
        minimumStake: 1e18.toString(),
        minimumUnstakeDelay: 1e3,
        maximumRecipientDeposit: 2e18.toString(),
        dataGasCostPerByte: 13,
        externalCallDataCostOverhead: 22402
      };
      var preRelayedCallGasLimit = 1e5;
      var forwarderHubOverhead = 5e4;
      var defaultPaymasterConfiguration = {
        forwarderHubOverhead,
        preRelayedCallGasLimit,
        postRelayedCallGasLimit: 11e4,
        acceptanceBudget: preRelayedCallGasLimit + forwarderHubOverhead,
        calldataSizeLimit: 10404
      };
      exports.environments = {
        istanbul: {
          chainId: 1,
          relayHubConfiguration: defaultRelayHubConfiguration,
          penalizerConfiguration: defaultPenalizerConfiguration,
          paymasterConfiguration: defaultPaymasterConfiguration,
          maxUnstakeDelay: defaultStakeManagerMaxUnstakeDelay,
          mintxgascost: 21e3,
          gtxdatanonzero: 16,
          gtxdatazero: 4
        },
        constantinople: {
          chainId: 1,
          relayHubConfiguration: defaultRelayHubConfiguration,
          penalizerConfiguration: defaultPenalizerConfiguration,
          paymasterConfiguration: defaultPaymasterConfiguration,
          maxUnstakeDelay: defaultStakeManagerMaxUnstakeDelay,
          mintxgascost: 21e3,
          gtxdatanonzero: 16,
          gtxdatazero: 4
        },
        ganacheLocal: {
          chainId: 1337,
          relayHubConfiguration: defaultRelayHubConfiguration,
          penalizerConfiguration: defaultPenalizerConfiguration,
          paymasterConfiguration: defaultPaymasterConfiguration,
          maxUnstakeDelay: defaultStakeManagerMaxUnstakeDelay,
          mintxgascost: 21e3,
          gtxdatanonzero: 16,
          gtxdatazero: 4
        }
      };
      exports.defaultEnvironment = exports.environments.ganacheLocal;
    }
  });

  // node_modules/@opengsn/common/dist/Utils.js
  var require_Utils = __commonJS({
    "node_modules/@opengsn/common/dist/Utils.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        }
        result["default"] = mod;
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var bn_js_1 = __importDefault(require_bn5());
      var web3_eth_abi_1 = __importDefault(require_src5());
      var web3_utils_1 = __importStar(require_src4());
      var tx_1 = require_dist5();
      var ethereumjs_util_1 = require_dist3();
      var chalk_1 = __importDefault(require_source());
      var rlp_1 = require_dist2();
      var Environments_1 = require_Environments();
      function removeHexPrefix(hex) {
        if (hex == null || typeof hex.replace !== "function") {
          throw new Error("Cannot remove hex prefix");
        }
        return hex.replace(/^0x/, "");
      }
      exports.removeHexPrefix = removeHexPrefix;
      var zeroPad = "0000000000000000000000000000000000000000000000000000000000000000";
      function padTo64(hex) {
        if (hex.length < 64) {
          hex = (zeroPad + hex).slice(-64);
        }
        return hex;
      }
      exports.padTo64 = padTo64;
      function signatureRSV2Hex(r, s, v) {
        return "0x" + padTo64(r.toString("hex")) + padTo64(s.toString("hex")) + v.toString(16).padStart(2, "0");
      }
      exports.signatureRSV2Hex = signatureRSV2Hex;
      function event2topic(contract, names) {
        if (!contract.options || !contract.options.jsonInterface) {
          return names;
        }
        return contract.options.jsonInterface.filter((e) => names.includes(e.name)).map(web3_eth_abi_1.default.encodeEventSignature);
      }
      exports.event2topic = event2topic;
      function addresses2topics(addresses) {
        return addresses.map(address2topic);
      }
      exports.addresses2topics = addresses2topics;
      function address2topic(address) {
        return "0x" + "0".repeat(24) + address.toLowerCase().slice(2);
      }
      exports.address2topic = address2topic;
      function decodeRevertReason(revertBytes, throwOnError = false) {
        if (revertBytes == null) {
          return null;
        }
        if (!revertBytes.startsWith("0x08c379a0")) {
          if (throwOnError) {
            throw new Error("invalid revert bytes: " + revertBytes);
          }
          return revertBytes;
        }
        return web3_eth_abi_1.default.decodeParameter("string", "0x" + revertBytes.slice(10));
      }
      exports.decodeRevertReason = decodeRevertReason;
      async function getDefaultMethodSuffix(web3) {
        const nodeInfo = await web3.eth.getNodeInfo();
        if (nodeInfo.toLowerCase().includes("testrpc"))
          return "";
        if (nodeInfo.toLowerCase().includes("hardhat"))
          return "_v4";
        return "_v4";
      }
      exports.getDefaultMethodSuffix = getDefaultMethodSuffix;
      async function getEip712Signature(web3, typedRequestData, methodSuffix = null, jsonStringifyRequest = false) {
        const senderAddress = typedRequestData.message.from;
        let dataToSign;
        if (jsonStringifyRequest) {
          dataToSign = JSON.stringify(typedRequestData);
        } else {
          dataToSign = typedRequestData;
        }
        methodSuffix = methodSuffix !== null && methodSuffix !== void 0 ? methodSuffix : await getDefaultMethodSuffix(web3);
        return await new Promise((resolve2, reject) => {
          let method;
          if (typeof web3.currentProvider.sendAsync === "function") {
            method = web3.currentProvider.sendAsync;
          } else {
            method = web3.currentProvider.send;
          }
          const paramBlock = {
            method: `eth_signTypedData${methodSuffix}`,
            params: [senderAddress, dataToSign],
            jsonrpc: "2.0",
            id: Date.now()
          };
          method.bind(web3.currentProvider)(paramBlock, (error2, result) => {
            var _a;
            if ((result === null || result === void 0 ? void 0 : result.error) != null) {
              error2 = result.error;
            }
            if (error2 != null || result == null) {
              reject((_a = error2.message) !== null && _a !== void 0 ? _a : error2);
            } else {
              resolve2(correctV(result.result));
            }
          });
        });
      }
      exports.getEip712Signature = getEip712Signature;
      function correctV(result) {
        const buffer = ethereumjs_util_1.toBuffer(result);
        const last = buffer.length - 1;
        const oldV = buffer[last];
        if (oldV < 2) {
          buffer[last] += 27;
          console.warn(`signature V adjusted from ${oldV} to ${buffer[last]}`);
        }
        return ethereumjs_util_1.bufferToHex(buffer);
      }
      function calculateCalldataCost(calldata) {
        const calldataBuf = Buffer2.from(calldata.replace("0x", ""), "hex");
        let sum = 0;
        calldataBuf.forEach((ch) => {
          sum += ch === 0 ? Environments_1.defaultEnvironment.gtxdatazero : Environments_1.defaultEnvironment.gtxdatanonzero;
        });
        return sum;
      }
      exports.calculateCalldataCost = calculateCalldataCost;
      function calculateTransactionMaxPossibleGas({ gasAndDataLimits, hubOverhead, relayCallGasLimit, msgData, msgDataGasCostInsideTransaction }) {
        return hubOverhead + msgDataGasCostInsideTransaction + calculateCalldataCost(msgData) + parseInt(relayCallGasLimit) + parseInt(gasAndDataLimits.preRelayedCallGasLimit.toString()) + parseInt(gasAndDataLimits.postRelayedCallGasLimit.toString());
      }
      exports.calculateTransactionMaxPossibleGas = calculateTransactionMaxPossibleGas;
      function getEcRecoverMeta(message, signature) {
        if (typeof signature === "string") {
          const r = parseHexString(signature.substr(2, 65));
          const s = parseHexString(signature.substr(66, 65));
          const v = parseHexString(signature.substr(130, 2));
          signature = {
            v,
            r,
            s
          };
        }
        const msg = Buffer2.concat([Buffer2.from("Ethereum Signed Message:\n32"), Buffer2.from(removeHexPrefix(message), "hex")]);
        const signed = web3_utils_1.default.sha3("0x" + msg.toString("hex"));
        if (signed == null) {
          throw new Error("web3Utils.sha3 failed somehow");
        }
        const bufSigned = Buffer2.from(removeHexPrefix(signed), "hex");
        const recoveredPubKey = ethereumjs_util_1.ecrecover(bufSigned, signature.v[0], Buffer2.from(signature.r), Buffer2.from(signature.s));
        return ethereumjs_util_1.bufferToHex(ethereumjs_util_1.pubToAddress(recoveredPubKey));
      }
      exports.getEcRecoverMeta = getEcRecoverMeta;
      function parseHexString(str) {
        const result = [];
        while (str.length >= 2) {
          result.push(parseInt(str.substring(0, 2), 16));
          str = str.substring(2, str.length);
        }
        return result;
      }
      exports.parseHexString = parseHexString;
      function isSameAddress(address1, address2) {
        return address1.toLowerCase() === address2.toLowerCase();
      }
      exports.isSameAddress = isSameAddress;
      async function sleep(ms) {
        return await new Promise((resolve2) => setTimeout(resolve2, ms));
      }
      exports.sleep = sleep;
      function ether(n) {
        return new bn_js_1.default(web3_utils_1.toWei(n, "ether"));
      }
      exports.ether = ether;
      function randomInRange(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
      }
      exports.randomInRange = randomInRange;
      function eventsComparator(a, b) {
        if (a.blockNumber === b.blockNumber) {
          return b.transactionIndex - a.transactionIndex;
        }
        return b.blockNumber - a.blockNumber;
      }
      exports.eventsComparator = eventsComparator;
      function isSecondEventLater(a, b) {
        return eventsComparator(a, b) > 0;
      }
      exports.isSecondEventLater = isSecondEventLater;
      function getLatestEventData(events) {
        if (events.length === 0) {
          return;
        }
        const eventDataSorted = events.sort(eventsComparator);
        return eventDataSorted[0];
      }
      exports.getLatestEventData = getLatestEventData;
      function boolString(bool) {
        return bool ? chalk_1.default.green("good".padEnd(14)) : chalk_1.default.red("wrong".padEnd(14));
      }
      exports.boolString = boolString;
      function getDataAndSignature(tx, chainId) {
        if (tx.to == null) {
          throw new Error("tx.to must be defined");
        }
        if (tx.s == null || tx.r == null || tx.v == null) {
          throw new Error("tx signature must be defined");
        }
        const input = [ethereumjs_util_1.bnToUnpaddedBuffer(tx.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(tx.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(tx.gasLimit), tx.to.toBuffer(), ethereumjs_util_1.bnToUnpaddedBuffer(tx.value), tx.data];
        input.push(ethereumjs_util_1.toBuffer(chainId), ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));
        let vInt = tx.v.toNumber();
        if (vInt > 28) {
          vInt -= chainId * 2 + 8;
        }
        const data = `0x${rlp_1.encode(input).toString("hex")}`;
        const signature = signatureRSV2Hex(tx.r, tx.s, vInt);
        return {
          data,
          signature
        };
      }
      exports.getDataAndSignature = getDataAndSignature;
      function signedTransactionToHash(signedTransaction, transactionOptions) {
        return ethereumjs_util_1.bufferToHex(tx_1.Transaction.fromSerializedTx(ethereumjs_util_1.toBuffer(signedTransaction), transactionOptions).hash());
      }
      exports.signedTransactionToHash = signedTransactionToHash;
    }
  });

  // node_modules/@opengsn/common/dist/LightTruffleContract.js
  var require_LightTruffleContract = __commonJS({
    "node_modules/@opengsn/common/dist/LightTruffleContract.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var web3_1 = __importDefault((init_web3_global_shim(), __toCommonJS(web3_global_shim_exports)));
      var web3_utils_1 = require_src4();
      function getComponent(key, components) {
        const component = components[key];
        if (component != null) {
          return component;
        }
        return components.find((it) => it.name === key);
      }
      function retypeItem(abiOutput, ret) {
        if (abiOutput.type.includes("int")) {
          return web3_utils_1.toBN(ret);
        } else if (abiOutput.type.includes("tuple") && abiOutput.components != null) {
          const keys2 = Object.keys(ret);
          const newRet = {};
          for (let i = 0; i < keys2.length; i++) {
            const component = getComponent(keys2[i], abiOutput.components);
            if (component == null) {
              continue;
            }
            newRet[keys2[i]] = retypeItem(component, ret[keys2[i]]);
          }
          return newRet;
        } else {
          return ret;
        }
      }
      function retype(outputs, ret) {
        if ((outputs === null || outputs === void 0 ? void 0 : outputs.length) === 1) {
          return retypeItem(outputs[0], ret);
        } else {
          return ret;
        }
      }
      var Contract = class {
        constructor(contractName, abi) {
          this.contractName = contractName;
          this.abi = abi;
        }
        createContract(address) {
          return new this.web3.eth.Contract(this.abi, address);
        }
        // return a contract instance at the given address.
        // UNLIKE TF, we don't do any on-chain check if the contract exist.
        // the application is assumed to call some view function (e.g. version) that implicitly verifies a contract
        // is deployed at that address (and has that view function)
        async at(address) {
          const contract = this.createContract(address);
          const obj = {
            address,
            contract,
            async getPastEvents(name2, options) {
              return contract.getPastEvents(name2, options).map((e) => Object.assign(Object.assign({}, e), {
                args: e.returnValues
                // TODO: web3 uses strings, Truffle uses BN for numbers
              }));
            }
          };
          this.abi.forEach((m) => {
            var _a, _b, _c;
            const methodName = (_a = m.name) !== null && _a !== void 0 ? _a : "";
            const nArgs = (_c = (_b = m.inputs) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;
            const isViewFunction = m.stateMutability === "view" || m.stateMutability === "pure";
            obj[methodName] = async function() {
              let args = Array.from(arguments);
              let options;
              if (args.length === nArgs + 1 && typeof args[args.length - 1] === "object") {
                options = args[args.length - 1];
                args = args.slice(0, args.length - 1);
              }
              const methodCall = contract.methods[methodName].apply(contract.methods, args);
              if (!isViewFunction) {
                return methodCall.send(options);
              } else {
                return methodCall.call(options).then((res) => {
                  return retype(m.outputs, res);
                });
              }
            };
          });
          return obj;
        }
        setProvider(provider, _) {
          this.web3 = new web3_1.default(provider);
        }
      };
      exports.Contract = Contract;
      function TruffleContract({ contractName, abi }) {
        return new Contract(contractName, abi);
      }
      exports.TruffleContract = TruffleContract;
    }
  });

  // node_modules/@opengsn/common/dist/Version.js
  var require_Version = __commonJS({
    "node_modules/@opengsn/common/dist/Version.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.gsnRuntimeVersion = "2.2.6";
      exports.gsnRequiredVersion = "^2.2.0";
    }
  });

  // node_modules/@opengsn/common/dist/types/GSNContractsDataTypes.js
  var require_GSNContractsDataTypes = __commonJS({
    "node_modules/@opengsn/common/dist/types/GSNContractsDataTypes.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CommitAdded = "CommitAdded";
      exports.RelayServerRegistered = "RelayServerRegistered";
      exports.RelayWorkersAdded = "RelayWorkersAdded";
      exports.TransactionRejectedByPaymaster = "TransactionRejectedByPaymaster";
      exports.TransactionRelayed = "TransactionRelayed";
      exports.Deposited = "Deposited";
      exports.ActiveManagerEvents = [exports.RelayServerRegistered, exports.RelayWorkersAdded, exports.TransactionRelayed, exports.TransactionRejectedByPaymaster];
      function isInfoFromEvent(info) {
        return "relayManager" in info && "baseRelayFee" in info && "pctRelayFee" in info;
      }
      exports.isInfoFromEvent = isInfoFromEvent;
      exports.HubAuthorized = "HubAuthorized";
      exports.HubUnauthorized = "HubUnauthorized";
      exports.StakeAdded = "StakeAdded";
      exports.StakePenalized = "StakePenalized";
      exports.StakeUnlocked = "StakeUnlocked";
      exports.StakeWithdrawn = "StakeWithdrawn";
      exports.OwnerSet = "OwnerSet";
      exports.allStakeManagerEvents = [exports.StakeAdded, exports.HubAuthorized, exports.HubUnauthorized, exports.StakeUnlocked, exports.StakeWithdrawn, exports.StakePenalized];
    }
  });

  // node_modules/@opengsn/common/dist/ContractInteractor.js
  var require_ContractInteractor = __commonJS({
    "node_modules/@opengsn/common/dist/ContractInteractor.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var bn_js_1 = __importDefault(require_bn5());
      var web3_1 = __importDefault((init_web3_global_shim(), __toCommonJS(web3_global_shim_exports)));
      var web3_utils_1 = require_src4();
      var web3_eth_abi_1 = __importDefault(require_src5());
      var IPaymaster_json_1 = __importDefault(require_IPaymaster());
      var IRelayHub_json_1 = __importDefault(require_IRelayHub());
      var IForwarder_json_1 = __importDefault(require_IForwarder());
      var IStakeManager_json_1 = __importDefault(require_IStakeManager());
      var IPenalizer_json_1 = __importDefault(require_IPenalizer());
      var IRelayRecipient_json_1 = __importDefault(require_IRelayRecipient());
      var IVersionRegistry_json_1 = __importDefault(require_IVersionRegistry());
      var VersionsManager_1 = require_VersionsManager();
      var ErrorReplacerJSON_1 = require_ErrorReplacerJSON();
      var Utils_1 = require_Utils();
      var LightTruffleContract_1 = require_LightTruffleContract();
      var Version_1 = require_Version();
      var common_1 = __importDefault(require_dist4());
      var GSNContractsDataTypes_1 = require_GSNContractsDataTypes();
      var Utils_js_1 = require_Utils();
      var ContractInteractor = class {
        constructor({ maxPageSize, provider, versionManager, logger, deployment = {} }) {
          this.maxPageSize = maxPageSize;
          this.logger = logger;
          this.versionManager = versionManager !== null && versionManager !== void 0 ? versionManager : new VersionsManager_1.VersionsManager(Version_1.gsnRuntimeVersion, Version_1.gsnRequiredVersion);
          this.web3 = new web3_1.default(provider);
          this.deployment = deployment;
          this.provider = provider;
          this.lastBlockNumber = 0;
          this.IPaymasterContract = LightTruffleContract_1.TruffleContract({
            contractName: "IPaymaster",
            abi: IPaymaster_json_1.default
          });
          this.IRelayHubContract = LightTruffleContract_1.TruffleContract({
            contractName: "IRelayHub",
            abi: IRelayHub_json_1.default
          });
          this.IForwarderContract = LightTruffleContract_1.TruffleContract({
            contractName: "IForwarder",
            abi: IForwarder_json_1.default
          });
          this.IStakeManager = LightTruffleContract_1.TruffleContract({
            contractName: "IStakeManager",
            abi: IStakeManager_json_1.default
          });
          this.IPenalizer = LightTruffleContract_1.TruffleContract({
            contractName: "IPenalizer",
            abi: IPenalizer_json_1.default
          });
          this.IRelayRecipient = LightTruffleContract_1.TruffleContract({
            contractName: "IRelayRecipient",
            abi: IRelayRecipient_json_1.default
          });
          this.IVersionRegistry = LightTruffleContract_1.TruffleContract({
            contractName: "IVersionRegistry",
            abi: IVersionRegistry_json_1.default
          });
          this.IStakeManager.setProvider(this.provider, void 0);
          this.IRelayHubContract.setProvider(this.provider, void 0);
          this.IPaymasterContract.setProvider(this.provider, void 0);
          this.IForwarderContract.setProvider(this.provider, void 0);
          this.IPenalizer.setProvider(this.provider, void 0);
          this.IRelayRecipient.setProvider(this.provider, void 0);
          this.IVersionRegistry.setProvider(this.provider, void 0);
          this.relayCallMethod = this.IRelayHubContract.createContract("").methods.relayCall;
        }
        async init() {
          this.logger.debug("interactor init start");
          if (this.rawTxOptions != null) {
            throw new Error("_init was already called");
          }
          await this._resolveDeployment();
          await this._initializeContracts();
          await this._validateCompatibility();
          await this._initializeNetworkParams();
          return this;
        }
        async _initializeNetworkParams() {
          this.chainId = await this.web3.eth.getChainId();
          this.networkId = await this.web3.eth.net.getId();
          this.networkType = await this.web3.eth.net.getNetworkType();
          this.rawTxOptions = getRawTxOptions(this.chainId, this.networkId, this.networkType);
        }
        async _resolveDeployment() {
          if (this.deployment.paymasterAddress != null && this.deployment.relayHubAddress != null) {
            this.logger.warn("Already resolved!");
            return;
          }
          if (this.deployment.paymasterAddress != null) {
            await this._resolveDeploymentFromPaymaster(this.deployment.paymasterAddress);
          } else if (this.deployment.relayHubAddress != null) {
            await this._resolveDeploymentFromRelayHub(this.deployment.relayHubAddress);
          } else {
            this.logger.info(`Contract interactor cannot resolve a full deployment from the following input: ${JSON.stringify(this.deployment)}`);
          }
        }
        async _resolveDeploymentFromPaymaster(paymasterAddress) {
          this.paymasterInstance = await this._createPaymaster(paymasterAddress);
          const [relayHubAddress, forwarderAddress, paymasterVersion] = await Promise.all([
            this.paymasterInstance.getHubAddr().catch((e) => {
              throw new Error(`Not a paymaster contract: ${e.message}`);
            }),
            this.paymasterInstance.trustedForwarder().catch((e) => {
              throw new Error(`paymaster has no trustedForwarder(): ${e.message}`);
            }),
            this.paymasterInstance.versionPaymaster().catch((e) => {
              throw new Error(`Not a paymaster contract: ${e.message}`);
            }).then((version3) => {
              this._validateVersion(version3);
              return version3;
            })
          ]);
          this.deployment.relayHubAddress = relayHubAddress;
          this.deployment.forwarderAddress = forwarderAddress;
          this.paymasterVersion = paymasterVersion;
          await this._resolveDeploymentFromRelayHub(relayHubAddress);
        }
        async _resolveDeploymentFromRelayHub(relayHubAddress) {
          this.relayHubInstance = await this._createRelayHub(relayHubAddress);
          const [stakeManagerAddress, penalizerAddress] = await Promise.all([
            this._hubStakeManagerAddress(),
            this._hubPenalizerAddress()
          ]);
          this.deployment.relayHubAddress = relayHubAddress;
          this.deployment.stakeManagerAddress = stakeManagerAddress;
          this.deployment.penalizerAddress = penalizerAddress;
        }
        async _validateCompatibility() {
          if (this.deployment == null || this.relayHubInstance == null) {
            return;
          }
          const hub = this.relayHubInstance;
          const version3 = await hub.versionHub();
          this._validateVersion(version3);
        }
        _validateVersion(version3) {
          const versionSatisfied = this.versionManager.isRequiredVersionSatisfied(version3);
          if (!versionSatisfied) {
            throw new Error(`Provided Hub version(${version3}) does not satisfy the requirement(${this.versionManager.requiredVersionRange})`);
          }
        }
        async _initializeContracts() {
          if (this.relayHubInstance == null && this.deployment.relayHubAddress != null) {
            this.relayHubInstance = await this._createRelayHub(this.deployment.relayHubAddress);
          }
          if (this.paymasterInstance == null && this.deployment.paymasterAddress != null) {
            this.paymasterInstance = await this._createPaymaster(this.deployment.paymasterAddress);
          }
          if (this.deployment.forwarderAddress != null) {
            this.forwarderInstance = await this._createForwarder(this.deployment.forwarderAddress);
          }
          if (this.deployment.stakeManagerAddress != null) {
            this.stakeManagerInstance = await this._createStakeManager(this.deployment.stakeManagerAddress);
          }
          if (this.deployment.penalizerAddress != null) {
            this.penalizerInstance = await this._createPenalizer(this.deployment.penalizerAddress);
          }
          if (this.deployment.versionRegistryAddress != null) {
            this.versionRegistry = await this._createVersionRegistry(this.deployment.versionRegistryAddress);
          }
        }
        // must use these options when creating Transaction object
        getRawTxOptions() {
          if (this.rawTxOptions == null) {
            throw new Error("_init not called");
          }
          return this.rawTxOptions;
        }
        async _createRecipient(address) {
          if (this.relayRecipientInstance != null && this.relayRecipientInstance.address.toLowerCase() === address.toLowerCase()) {
            return this.relayRecipientInstance;
          }
          this.relayRecipientInstance = await this.IRelayRecipient.at(address);
          return this.relayRecipientInstance;
        }
        async _createPaymaster(address) {
          return await this.IPaymasterContract.at(address);
        }
        async _createRelayHub(address) {
          return await this.IRelayHubContract.at(address);
        }
        async _createForwarder(address) {
          return await this.IForwarderContract.at(address);
        }
        async _createStakeManager(address) {
          return await this.IStakeManager.at(address);
        }
        async _createPenalizer(address) {
          return await this.IPenalizer.at(address);
        }
        async _createVersionRegistry(address) {
          return await this.IVersionRegistry.at(address);
        }
        async isTrustedForwarder(recipientAddress, forwarder) {
          const recipient = await this._createRecipient(recipientAddress);
          return await recipient.isTrustedForwarder(forwarder);
        }
        async getSenderNonce(sender, forwarderAddress) {
          const forwarder = await this._createForwarder(forwarderAddress);
          const nonce = await forwarder.getNonce(sender);
          return nonce.toString();
        }
        async _getBlockGasLimit() {
          const latestBlock = await this.web3.eth.getBlock("latest");
          return latestBlock.gasLimit;
        }
        /**
         * make a view call to relayCall(), just like the way it will be called by the relayer.
         * returns:
         * - paymasterAccepted - true if accepted
         * - reverted - true if relayCall was reverted.
         * - returnValue - if either reverted or paymaster NOT accepted, then this is the reason string.
         */
        async validateRelayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, maxViewableGasLimit) {
          var _a;
          const relayHub = this.relayHubInstance;
          try {
            const externalGasLimit = await this.getMaxViewableGasLimit(relayRequest, maxViewableGasLimit);
            const encodedRelayCall = relayHub.contract.methods.relayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, externalGasLimit).encodeABI();
            const res = await new Promise((resolve2, reject) => {
              this.web3.currentProvider.send({
                jsonrpc: "2.0",
                id: 1,
                method: "eth_call",
                params: [
                  {
                    from: relayRequest.relayData.relayWorker,
                    to: relayHub.address,
                    gasPrice: web3_utils_1.toHex(relayRequest.relayData.gasPrice),
                    gas: web3_utils_1.toHex(externalGasLimit),
                    data: encodedRelayCall
                  },
                  "latest"
                ]
              }, (err2, res2) => {
                const revertMsg = this._decodeRevertFromResponse(err2, res2);
                if (revertMsg != null) {
                  reject(new Error(revertMsg));
                } else if (err2 !== null) {
                  reject(err2);
                } else {
                  resolve2(res2.result);
                }
              });
            });
            this.logger.debug("relayCall res=" + res);
            const decoded = web3_eth_abi_1.default.decodeParameters(["bool", "bytes"], res);
            const paymasterAccepted = decoded[0];
            let returnValue;
            if (paymasterAccepted) {
              returnValue = decoded[1];
            } else {
              returnValue = (_a = this._decodeRevertFromResponse({}, { result: decoded[1] })) !== null && _a !== void 0 ? _a : decoded[1];
            }
            return {
              returnValue,
              paymasterAccepted,
              reverted: false
            };
          } catch (e) {
            const message = e instanceof Error ? e.message : JSON.stringify(e, ErrorReplacerJSON_1.replaceErrors);
            return {
              paymasterAccepted: false,
              reverted: true,
              returnValue: `view call to 'relayCall' reverted in client: ${message}`
            };
          }
        }
        async getMaxViewableGasLimit(relayRequest, maxViewableGasLimit) {
          const blockGasLimit = web3_utils_1.toBN(maxViewableGasLimit !== null && maxViewableGasLimit !== void 0 ? maxViewableGasLimit : await this._getBlockGasLimit());
          const workerBalance = web3_utils_1.toBN(await this.getBalance(relayRequest.relayData.relayWorker));
          const workerGasLimit = workerBalance.div(web3_utils_1.toBN(relayRequest.relayData.gasPrice === "0" ? 1 : relayRequest.relayData.gasPrice));
          return bn_js_1.default.min(blockGasLimit, workerGasLimit);
        }
        /**
         * decode revert from rpc response.
         * called from the callback of the provider "eth_call" call.
         * check if response is revert, and extract revert reason from it.
         * support kovan, geth, ganache error formats..
         * @param err - provider err value
         * @param res - provider res value
         */
        // decode revert from rpc response.
        //
        _decodeRevertFromResponse(err2, res) {
          var _a, _b, _c, _d, _e, _f, _g;
          let matchGanache = (_b = (_a = err2 === null || err2 === void 0 ? void 0 : err2.data) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toString().match(/: revert(?:ed)? (.*)/);
          if (matchGanache == null) {
            matchGanache = (_d = (_c = res === null || res === void 0 ? void 0 : res.error) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.toString().match(/: revert(?:ed)? (.*)/);
          }
          if (matchGanache != null) {
            return matchGanache[1];
          }
          const errorData = (_e = err2 === null || err2 === void 0 ? void 0 : err2.data) !== null && _e !== void 0 ? _e : (_f = res === null || res === void 0 ? void 0 : res.error) === null || _f === void 0 ? void 0 : _f.data;
          const m = errorData === null || errorData === void 0 ? void 0 : errorData.toString().match(/(0x08c379a0\S*)/);
          if (m != null) {
            return Utils_1.decodeRevertReason(m[1]);
          }
          const result = (_g = res === null || res === void 0 ? void 0 : res.result) !== null && _g !== void 0 ? _g : "";
          if (result.startsWith("0x08c379a0")) {
            return Utils_1.decodeRevertReason(result);
          }
          return null;
        }
        encodeABI(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit) {
          return this.relayCallMethod(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit).encodeABI();
        }
        async getPastEventsForHub(extraTopics, options, names = GSNContractsDataTypes_1.ActiveManagerEvents) {
          return await this._getPastEventsPaginated(this.relayHubInstance.contract, names, extraTopics, options);
        }
        async getPastEventsForStakeManager(names, extraTopics, options) {
          const stakeManager = await this.stakeManagerInstance;
          return await this._getPastEventsPaginated(stakeManager.contract, names, extraTopics, options);
        }
        async getPastEventsForPenalizer(names, extraTopics, options) {
          return await this._getPastEventsPaginated(this.penalizerInstance.contract, names, extraTopics, options);
        }
        async getPastEventsForVersionRegistry(names, extraTopics, options) {
          return await this._getPastEventsPaginated(this.versionRegistry.contract, names, extraTopics, options);
        }
        getLogsPagesForRange(fromBlock = 1, toBlock) {
          if (this.maxPageSize === Number.MAX_SAFE_INTEGER) {
            return 1;
          }
          if (typeof fromBlock !== "number" || typeof toBlock !== "number") {
            throw new Error(`ContractInteractor:getLogsPagesForRange: [${fromBlock.toString()}..${toBlock === null || toBlock === void 0 ? void 0 : toBlock.toString()}]: only numbers supported when using pagination`);
          }
          const rangeSize = toBlock - fromBlock + 1;
          const pagesForRange = Math.max(Math.ceil(rangeSize / this.maxPageSize), 1);
          if (pagesForRange > 1) {
            this.logger.info(`Splitting request for ${rangeSize} blocks into ${pagesForRange} smaller paginated requests!`);
          }
          return pagesForRange;
        }
        splitRange(fromBlock, toBlock, parts) {
          if (parts === 1) {
            return [{ fromBlock, toBlock }];
          }
          if (typeof fromBlock !== "number" || typeof toBlock !== "number") {
            throw new Error(`ContractInteractor:splitRange: only number supported for block range when using pagination, ${fromBlock} ${toBlock} ${parts}`);
          }
          const rangeSize = toBlock - fromBlock + 1;
          const splitSize = Math.ceil(rangeSize / parts);
          const ret = [];
          for (let b = fromBlock; b <= toBlock; b += splitSize) {
            ret.push({ fromBlock: b, toBlock: Math.min(toBlock, b + splitSize - 1) });
          }
          return ret;
        }
        /**
         * Splits requested range into pages to avoid fetching too many blocks at once.
         * In case 'getLogs' returned with a common error message of "more than X events" dynamically decrease page size.
         */
        async _getPastEventsPaginated(contract, names, extraTopics, options) {
          const delay = this.getNetworkType() === "private" ? 0 : 300;
          if (options.toBlock == null) {
            options.toBlock = "latest";
          }
          if (options.fromBlock == null) {
            options.fromBlock = 1;
          }
          if (this.maxPageSize !== Number.MAX_SAFE_INTEGER && options.toBlock === "latest") {
            options.toBlock = await this.getBlockNumber();
            if (options.fromBlock > options.toBlock) {
              options.toBlock = options.fromBlock;
            }
          }
          if (options.fromBlock > options.toBlock) {
            const message = `fromBlock(${options.fromBlock.toString()}) >  
              toBlock(${options.toBlock.toString()})`;
            this.logger.error(message);
            throw new Error(message);
          }
          let pagesCurrent = await this.getLogsPagesForRange(options.fromBlock, options.toBlock);
          const relayEventParts = [];
          while (true) {
            const rangeParts = await this.splitRange(options.fromBlock, options.toBlock, pagesCurrent);
            try {
              for (const { fromBlock, toBlock } of rangeParts) {
                let attempts = 0;
                while (true) {
                  try {
                    const pastEvents = await this._getPastEvents(contract, names, extraTopics, Object.assign({}, options, { fromBlock, toBlock }));
                    relayEventParts.push(pastEvents);
                    break;
                  } catch (e) {
                    this.logger.error(`error in getPastEvents. 
              fromBlock: ${fromBlock.toString()} 
              toBlock: ${toBlock.toString()} 
              attempts: ${attempts.toString()}
              names: ${names.toString()}
              extraTopics: ${extraTopics.toString()}
              options: ${JSON.stringify(options)}
              
${e.toString()}`);
                    attempts++;
                    if (attempts >= 100) {
                      this.logger.error("Too many attempts. throwing ");
                      throw e;
                    }
                    await Utils_js_1.sleep(delay);
                  }
                }
              }
              break;
            } catch (e) {
              if (e.toString().match(/query returned more than/) != null) {
                this.logger.warn('Received "query returned more than X events" error from server, will try to split the request into smaller chunks');
                if (pagesCurrent > 16) {
                  throw new Error(`Too many events after splitting by ${pagesCurrent}`);
                }
                pagesCurrent *= 4;
              } else {
                throw e;
              }
            }
          }
          return relayEventParts.flat();
        }
        async _getPastEvents(contract, names, extraTopics, options) {
          const topics = [];
          const eventTopic = Utils_1.event2topic(contract, names);
          topics.push(eventTopic);
          if (extraTopics.length > 0) {
            topics.push(extraTopics);
          }
          return contract.getPastEvents("allEvents", Object.assign({}, options, { topics }));
        }
        async getBalance(address, defaultBlock = "latest") {
          return await this.web3.eth.getBalance(address, defaultBlock);
        }
        async getBlockNumber() {
          let blockNumber = -1;
          let attempts = 0;
          const delay = this.getNetworkType() === "private" ? 0 : 1e3;
          while (blockNumber < this.lastBlockNumber && attempts <= 10) {
            try {
              blockNumber = await this.web3.eth.getBlockNumber();
            } catch (e) {
              this.logger.error(`getBlockNumber: ${e.message}`);
            }
            if (blockNumber >= this.lastBlockNumber) {
              break;
            }
            await Utils_js_1.sleep(delay);
            attempts++;
          }
          if (blockNumber < this.lastBlockNumber) {
            throw new Error(`couldn't retrieve latest blockNumber from node. last block: ${this.lastBlockNumber}, got block: ${blockNumber}`);
          }
          this.lastBlockNumber = blockNumber;
          return blockNumber;
        }
        async sendSignedTransaction(rawTx) {
          return await this.web3.eth.sendSignedTransaction(rawTx);
        }
        async estimateGas(gsnTransactionDetails) {
          return await this.web3.eth.estimateGas(gsnTransactionDetails);
        }
        // TODO: cache response for some time to optimize. It doesn't make sense to optimize these requests in calling code.
        async getGasPrice() {
          return await this.web3.eth.getGasPrice();
        }
        async getTransactionCount(address, defaultBlock) {
          return await this.web3.eth.getTransactionCount(address, defaultBlock);
        }
        async getTransaction(transactionHash) {
          return await this.web3.eth.getTransaction(transactionHash);
        }
        async getBlock(blockHashOrBlockNumber) {
          return await this.web3.eth.getBlock(blockHashOrBlockNumber);
        }
        validateAddress(address, exceptionTitle = "invalid address:") {
          if (!this.web3.utils.isAddress(address)) {
            throw new Error(exceptionTitle + " " + address);
          }
        }
        async getCode(address) {
          return await this.web3.eth.getCode(address);
        }
        getNetworkId() {
          if (this.networkId == null) {
            throw new Error("_init not called");
          }
          return this.networkId;
        }
        getNetworkType() {
          if (this.networkType == null) {
            throw new Error("_init not called");
          }
          return this.networkType;
        }
        async isContractDeployed(address) {
          const code = await this.web3.eth.getCode(address);
          return code !== "0x";
        }
        async getStakeInfo(managerAddress) {
          const stakeManager = await this.stakeManagerInstance;
          return await stakeManager.getStakeInfo(managerAddress);
        }
        async workerToManager(worker) {
          return await this.relayHubInstance.workerToManager(worker);
        }
        /**
         * Gets balance of an address on the current RelayHub.
         * @param address - can be a Paymaster or a Relay Manger
         */
        async hubBalanceOf(address) {
          return await this.relayHubInstance.balanceOf(address);
        }
        /**
         * Gets stake of an address on the current StakeManager.
         * @param address - must be a Relay Manger
         */
        async stakeManagerStakeInfo(address) {
          return await this.stakeManagerInstance.getStakeInfo(address);
        }
        async isRelayManagerStakedOnHub(relayManager) {
          return await this.relayHubInstance.isRelayManagerStaked(relayManager);
        }
        async isRelayManagerStakedOnSM(relayManager, minAmount, minUnstakeDelay) {
          return await this.stakeManagerInstance.isRelayManagerStaked(relayManager, this.relayHubInstance.address, minAmount, minUnstakeDelay);
        }
        async initDeployment(deployment) {
          this.deployment = deployment;
          await this._initializeContracts();
        }
        getDeployment() {
          if (this.deployment == null) {
            throw new Error("Contracts deployment is not initialized for Contract Interactor!");
          }
          return this.deployment;
        }
        async withdrawHubBalanceEstimateGas(amount, destination, managerAddress, gasPrice) {
          const hub = this.relayHubInstance;
          const method = hub.contract.methods.withdraw(amount.toString(), destination);
          const withdrawTxGasLimit = await method.estimateGas({
            from: managerAddress
          });
          const gasCost = web3_utils_1.toBN(withdrawTxGasLimit).mul(web3_utils_1.toBN(gasPrice));
          return {
            gasLimit: parseInt(withdrawTxGasLimit),
            gasCost,
            method
          };
        }
        // TODO: a way to make a relay hub transaction with a specified nonce without exposing the 'method' abstraction
        async getRegisterRelayMethod(baseRelayFee, pctRelayFee, url) {
          const hub = this.relayHubInstance;
          return hub.contract.methods.registerRelayServer(baseRelayFee, pctRelayFee, url);
        }
        async getAddRelayWorkersMethod(workers) {
          const hub = this.relayHubInstance;
          return hub.contract.methods.addRelayWorkers(workers);
        }
        async getSetRelayManagerMethod(owner) {
          const sm = this.stakeManagerInstance;
          return sm.contract.methods.setRelayManagerOwner(owner);
        }
        /**
         * Web3.js as of 1.2.6 (see web3-core-method::_confirmTransaction) does not allow
         * broadcasting of a transaction without waiting for it to be mined.
         * This method sends the RPC call directly
         * @param signedTransaction - the raw signed transaction to broadcast
         */
        async broadcastTransaction(signedTransaction) {
          return await new Promise((resolve2, reject) => {
            if (this.provider == null) {
              throw new Error("provider is not set");
            }
            this.provider.send({
              jsonrpc: "2.0",
              method: "eth_sendRawTransaction",
              params: [
                signedTransaction
              ],
              id: Date.now()
            }, (e, r) => {
              if (e != null) {
                reject(e);
              } else if (r.error != null) {
                reject(r.error);
              } else {
                resolve2(r.result);
              }
            });
          });
        }
        async hubDepositFor(paymaster, transactionDetails) {
          return await this.relayHubInstance.depositFor(paymaster, transactionDetails);
        }
        async resolveDeploymentVersions() {
          const versionsMap = {};
          if (this.deployment.relayHubAddress != null) {
            versionsMap[this.deployment.relayHubAddress] = await this.relayHubInstance.versionHub();
          }
          if (this.deployment.penalizerAddress != null) {
            versionsMap[this.deployment.penalizerAddress] = await this.penalizerInstance.versionPenalizer();
          }
          if (this.deployment.stakeManagerAddress != null) {
            versionsMap[this.deployment.stakeManagerAddress] = await this.stakeManagerInstance.versionSM();
          }
          return versionsMap;
        }
        async queryDeploymentBalances() {
          const balances = {};
          if (this.deployment.relayHubAddress != null) {
            balances[this.deployment.relayHubAddress] = await this.getBalance(this.deployment.relayHubAddress);
          }
          if (this.deployment.penalizerAddress != null) {
            balances[this.deployment.penalizerAddress] = await this.getBalance(this.deployment.penalizerAddress);
          }
          if (this.deployment.stakeManagerAddress != null) {
            balances[this.deployment.stakeManagerAddress] = await this.getBalance(this.deployment.stakeManagerAddress);
          }
          return balances;
        }
        async _hubStakeManagerAddress() {
          return await this.relayHubInstance.stakeManager();
        }
        stakeManagerAddress() {
          return this.stakeManagerInstance.address;
        }
        async _hubPenalizerAddress() {
          return await this.relayHubInstance.penalizer();
        }
        penalizerAddress() {
          return this.penalizerInstance.address;
        }
        async getRegisteredWorkers(managerAddress) {
          const topics = Utils_1.address2topic(managerAddress);
          const workersAddedEvents = await this.getPastEventsForHub([topics], { fromBlock: 1 }, [GSNContractsDataTypes_1.RelayWorkersAdded]);
          return workersAddedEvents.map((it) => it.returnValues.newRelayWorkers).flat();
        }
        /* Version Registry methods */
        async addVersionInVersionRegistry(id, version3, value, transactionDetails) {
          await this.versionRegistry.addVersion(id, version3, value, transactionDetails);
        }
        async cancelVersionInVersionRegistry(id, version3, cancelReason, transactionDetails) {
          await this.versionRegistry.cancelVersion(id, version3, cancelReason, transactionDetails);
        }
      };
      exports.ContractInteractor = ContractInteractor;
      function getRawTxOptions(chainId, networkId, chain) {
        if (chain == null || chain === "main" || chain === "private") {
          chain = "mainnet";
        }
        return {
          common: common_1.default.forCustomChain(chain, {
            chainId,
            networkId
          }, "istanbul")
        };
      }
      exports.getRawTxOptions = getRawTxOptions;
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/bn.js/lib/bn.js
  var require_bn7 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js
  var require_secp256k1v3_lib = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var BN = require_bn7();
      var EC = require_elliptic().ec;
      var ec = new EC("secp256k1");
      var ecparams = ec.curve;
      exports.privateKeyExport = function(privateKey, compressed) {
        if (compressed === void 0) {
          compressed = true;
        }
        var d = new BN(privateKey);
        if (d.ucmp(ecparams.n) >= 0) {
          throw new Error("couldn't export to DER format");
        }
        var point = ec.g.mul(d);
        return toPublicKey(point.getX(), point.getY(), compressed);
      };
      exports.privateKeyModInverse = function(privateKey) {
        var bn = new BN(privateKey);
        if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
          throw new Error("private key range is invalid");
        }
        return bn.invm(ecparams.n).toArrayLike(Buffer2, "be", 32);
      };
      exports.signatureImport = function(sigObj) {
        var r = new BN(sigObj.r);
        if (r.ucmp(ecparams.n) >= 0) {
          r = new BN(0);
        }
        var s = new BN(sigObj.s);
        if (s.ucmp(ecparams.n) >= 0) {
          s = new BN(0);
        }
        return Buffer2.concat([r.toArrayLike(Buffer2, "be", 32), s.toArrayLike(Buffer2, "be", 32)]);
      };
      exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
        if (compressed === void 0) {
          compressed = true;
        }
        var point = ec.keyFromPublic(publicKey);
        var scalar = new BN(privateKey);
        if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
          throw new Error("scalar was invalid (zero or overflow)");
        }
        var shared = point.pub.mul(scalar);
        return toPublicKey(shared.getX(), shared.getY(), compressed);
      };
      var toPublicKey = function(x, y, compressed) {
        var publicKey;
        if (compressed) {
          publicKey = Buffer2.alloc(33);
          publicKey[0] = y.isOdd() ? 3 : 2;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
        } else {
          publicKey = Buffer2.alloc(65);
          publicKey[0] = 4;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
          y.toArrayLike(Buffer2, "be", 32).copy(publicKey, 33);
        }
        return publicKey;
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js
  var require_der = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer2.from([
        // begin
        48,
        129,
        211,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        133,
        48,
        129,
        130,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        33,
        2,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        36,
        3,
        34,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer2.from([
        // begin
        48,
        130,
        1,
        19,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        165,
        48,
        129,
        162,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        65,
        4,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        72,
        58,
        218,
        119,
        38,
        163,
        196,
        101,
        93,
        164,
        251,
        252,
        14,
        17,
        8,
        168,
        253,
        23,
        180,
        72,
        166,
        133,
        84,
        25,
        156,
        71,
        208,
        143,
        251,
        16,
        212,
        184,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        68,
        3,
        66,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      exports.privateKeyExport = function(privateKey, publicKey, compressed) {
        if (compressed === void 0) {
          compressed = true;
        }
        var result = Buffer2.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
      };
      exports.privateKeyImport = function(privateKey) {
        var length = privateKey.length;
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 48)
          return null;
        index += 1;
        if (length < index + 1 || !(privateKey[index] & 128))
          return null;
        var lenb = privateKey[index] & 127;
        index += 1;
        if (lenb < 1 || lenb > 2)
          return null;
        if (length < index + lenb)
          return null;
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len)
          return null;
        if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) {
          return null;
        }
        index += 3;
        if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) {
          return null;
        }
        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
      };
      exports.signatureImportLax = function(signature) {
        var r = Buffer2.alloc(32, 0);
        var s = Buffer2.alloc(32, 0);
        var length = signature.length;
        var index = 0;
        if (signature[index++] !== 48) {
          return null;
        }
        var lenbyte = signature[index++];
        if (lenbyte & 128) {
          index += lenbyte - 128;
          if (index > length) {
            return null;
          }
        }
        if (signature[index++] !== 2) {
          return null;
        }
        var rlen = signature[index++];
        if (rlen & 128) {
          lenbyte = rlen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1)
            ;
          for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            rlen = (rlen << 8) + signature[index];
        }
        if (rlen > length - index) {
          return null;
        }
        var rindex = index;
        index += rlen;
        if (signature[index++] !== 2) {
          return null;
        }
        var slen = signature[index++];
        if (slen & 128) {
          lenbyte = slen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1)
            ;
          for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            slen = (slen << 8) + signature[index];
        }
        if (slen > length - index) {
          return null;
        }
        var sindex = index;
        index += slen;
        for (; rlen > 0 && signature[rindex] === 0; rlen -= 1, rindex += 1)
          ;
        if (rlen > 32) {
          return null;
        }
        var rvalue = signature.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);
        for (; slen > 0 && signature[sindex] === 0; slen -= 1, sindex += 1)
          ;
        if (slen > 32) {
          return null;
        }
        var svalue = signature.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);
        return { r, s };
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js
  var require_secp256k1v3_adapter = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
      var secp256k1 = require_secp256k12();
      var secp256k1v3 = require_secp256k1v3_lib();
      var der = require_der();
      exports.privateKeyVerify = function(privateKey) {
        if (privateKey.length !== 32) {
          return false;
        }
        return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
      };
      exports.privateKeyExport = function(privateKey, compressed) {
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
        return der.privateKeyExport(privateKey, publicKey, compressed);
      };
      exports.privateKeyImport = function(privateKey) {
        privateKey = der.privateKeyImport(privateKey);
        if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
          return privateKey;
        }
        throw new Error("couldn't import from DER format");
      };
      exports.privateKeyNegate = function(privateKey) {
        return Buffer2.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
      };
      exports.privateKeyModInverse = function(privateKey) {
        if (privateKey.length !== 32) {
          throw new Error("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
      };
      exports.privateKeyTweakAdd = function(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
      };
      exports.privateKeyTweakMul = function(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
      };
      exports.publicKeyCreate = function(privateKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
      };
      exports.publicKeyConvert = function(publicKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
      };
      exports.publicKeyVerify = function(publicKey) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          return false;
        }
        return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
      };
      exports.publicKeyTweakAdd = function(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      exports.publicKeyTweakMul = function(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      exports.publicKeyCombine = function(publicKeys, compressed) {
        var keys2 = [];
        publicKeys.forEach(function(publicKey) {
          keys2.push(Uint8Array.from(publicKey));
        });
        return Buffer2.from(secp256k1.publicKeyCombine(keys2, compressed));
      };
      exports.signatureNormalize = function(signature) {
        return Buffer2.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
      };
      exports.signatureExport = function(signature) {
        return Buffer2.from(secp256k1.signatureExport(Uint8Array.from(signature)));
      };
      exports.signatureImport = function(signature) {
        return Buffer2.from(secp256k1.signatureImport(Uint8Array.from(signature)));
      };
      exports.signatureImportLax = function(signature) {
        if (signature.length === 0) {
          throw new RangeError("signature length is invalid");
        }
        var sigObj = der.signatureImportLax(signature);
        if (sigObj === null) {
          throw new Error("couldn't parse DER signature");
        }
        return secp256k1v3.signatureImport(sigObj);
      };
      exports.sign = function(message, privateKey, options) {
        if (options === null) {
          throw new TypeError("options should be an Object");
        }
        var signOptions = void 0;
        if (options) {
          signOptions = {};
          if (options.data === null) {
            throw new TypeError("options.data should be a Buffer");
          }
          if (options.data) {
            if (options.data.length != 32) {
              throw new RangeError("options.data length is invalid");
            }
            signOptions.data = new Uint8Array(options.data);
          }
          if (options.noncefn === null) {
            throw new TypeError("options.noncefn should be a Function");
          }
          if (options.noncefn) {
            signOptions.noncefn = function(message2, privateKey2, algo, data, attempt) {
              var bufferAlgo = algo != null ? Buffer2.from(algo) : null;
              var bufferData = data != null ? Buffer2.from(data) : null;
              var buffer = Buffer2.from("");
              if (options.noncefn) {
                buffer = options.noncefn(Buffer2.from(message2), Buffer2.from(privateKey2), bufferAlgo, bufferData, attempt);
              }
              return new Uint8Array(buffer);
            };
          }
        }
        var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
        return {
          signature: Buffer2.from(sig.signature),
          recovery: sig.recid
        };
      };
      exports.verify = function(message, signature, publicKey) {
        return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
      };
      exports.recover = function(message, signature, recid, compressed) {
        return Buffer2.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
      };
      exports.ecdh = function(publicKey, privateKey) {
        return Buffer2.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
      };
      exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          throw new RangeError("public key length is invalid");
        }
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
      };
    }
  });

  // node_modules/ethjs-util/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/ethjs-util/lib/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var isHexPrefixed = require_src();
      var stripHexPrefix = require_src2();
      function padToEven(value) {
        var a = value;
        if (typeof a !== "string") {
          throw new Error("[ethjs-util] while padding to even, value must be string, is currently " + typeof a + ", while padToEven.");
        }
        if (a.length % 2) {
          a = "0" + a;
        }
        return a;
      }
      function intToHex(i) {
        var hex = i.toString(16);
        return "0x" + hex;
      }
      function intToBuffer(i) {
        var hex = intToHex(i);
        return new Buffer2(padToEven(hex.slice(2)), "hex");
      }
      function getBinarySize(str) {
        if (typeof str !== "string") {
          throw new Error("[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '" + typeof str + "'.");
        }
        return Buffer2.byteLength(str, "utf8");
      }
      function arrayContainsArray(superset, subset, some) {
        if (Array.isArray(superset) !== true) {
          throw new Error("[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '" + typeof superset + "'");
        }
        if (Array.isArray(subset) !== true) {
          throw new Error("[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '" + typeof subset + "'");
        }
        return subset[Boolean(some) && "some" || "every"](function(value) {
          return superset.indexOf(value) >= 0;
        });
      }
      function toUtf8(hex) {
        var bufferValue = new Buffer2(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, "")), "hex");
        return bufferValue.toString("utf8");
      }
      function toAscii(hex) {
        var str = "";
        var i = 0, l = hex.length;
        if (hex.substring(0, 2) === "0x") {
          i = 2;
        }
        for (; i < l; i += 2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
        }
        return str;
      }
      function fromUtf8(stringValue) {
        var str = new Buffer2(stringValue, "utf8");
        return "0x" + padToEven(str.toString("hex")).replace(/^0+|0+$/g, "");
      }
      function fromAscii(stringValue) {
        var hex = "";
        for (var i = 0; i < stringValue.length; i++) {
          var code = stringValue.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? "0" + n : n;
        }
        return "0x" + hex;
      }
      function getKeys(params, key, allowEmpty) {
        if (!Array.isArray(params)) {
          throw new Error("[ethjs-util] method getKeys expecting type Array as 'params' input, got '" + typeof params + "'");
        }
        if (typeof key !== "string") {
          throw new Error("[ethjs-util] method getKeys expecting type String for input 'key' got '" + typeof key + "'.");
        }
        var result = [];
        for (var i = 0; i < params.length; i++) {
          var value = params[i][key];
          if (allowEmpty && !value) {
            value = "";
          } else if (typeof value !== "string") {
            throw new Error("invalid abi");
          }
          result.push(value);
        }
        return result;
      }
      function isHexString(value, length) {
        if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
        }
        if (length && value.length !== 2 + 2 * length) {
          return false;
        }
        return true;
      }
      module.exports = {
        arrayContainsArray,
        intToBuffer,
        getBinarySize,
        isHexPrefixed,
        stripHexPrefix,
        padToEven,
        intToHex,
        fromAscii,
        fromUtf8,
        toAscii,
        toUtf8,
        getKeys,
        isHexString
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/constants.js
  var require_constants3 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/constants.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
      var BN = require_bn7();
      exports.MAX_INTEGER = new BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
      exports.TWO_POW256 = new BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
      exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
      exports.KECCAK256_NULL = Buffer2.from(exports.KECCAK256_NULL_S, "hex");
      exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
      exports.KECCAK256_RLP_ARRAY = Buffer2.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
      exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
      exports.KECCAK256_RLP = Buffer2.from(exports.KECCAK256_RLP_S, "hex");
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/bytes.js
  var require_bytes3 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/bytes.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
      var ethjsUtil = require_lib3();
      var BN = require_bn7();
      exports.zeros = function(bytes) {
        return Buffer2.allocUnsafe(bytes).fill(0);
      };
      exports.setLengthLeft = function(msg, length, right) {
        if (right === void 0) {
          right = false;
        }
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
          if (msg.length < length) {
            msg.copy(buf);
            return buf;
          }
          return msg.slice(0, length);
        } else {
          if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
          }
          return msg.slice(-length);
        }
      };
      exports.setLength = exports.setLengthLeft;
      exports.setLengthRight = function(msg, length) {
        return exports.setLength(msg, length, true);
      };
      exports.unpad = function(a) {
        a = ethjsUtil.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === "0") {
          a = a.slice(1);
          first = a[0];
        }
        return a;
      };
      exports.stripZeros = exports.unpad;
      exports.toBuffer = function(v) {
        if (!Buffer2.isBuffer(v)) {
          if (Array.isArray(v)) {
            v = Buffer2.from(v);
          } else if (typeof v === "string") {
            if (ethjsUtil.isHexString(v)) {
              v = Buffer2.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), "hex");
            } else {
              throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
            }
          } else if (typeof v === "number") {
            v = ethjsUtil.intToBuffer(v);
          } else if (v === null || v === void 0) {
            v = Buffer2.allocUnsafe(0);
          } else if (BN.isBN(v)) {
            v = v.toArrayLike(Buffer2);
          } else if (v.toArray) {
            v = Buffer2.from(v.toArray());
          } else {
            throw new Error("invalid type");
          }
        }
        return v;
      };
      exports.bufferToInt = function(buf) {
        return new BN(exports.toBuffer(buf)).toNumber();
      };
      exports.bufferToHex = function(buf) {
        buf = exports.toBuffer(buf);
        return "0x" + buf.toString("hex");
      };
      exports.fromSigned = function(num) {
        return new BN(num).fromTwos(256);
      };
      exports.toUnsigned = function(num) {
        return Buffer2.from(num.toTwos(256).toArray());
      };
      exports.addHexPrefix = function(str) {
        if (typeof str !== "string") {
          return str;
        }
        return ethjsUtil.isHexPrefixed(str) ? str : "0x" + str;
      };
      exports.baToJSON = function(ba) {
        if (Buffer2.isBuffer(ba)) {
          return "0x" + ba.toString("hex");
        } else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
          }
          return array;
        }
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/hash.js
  var require_hash5 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/hash.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
      var _a = require_keccak3();
      var keccak224 = _a.keccak224;
      var keccak384 = _a.keccak384;
      var k256 = _a.keccak256;
      var keccak512 = _a.keccak512;
      var createHash = require_browser3();
      var ethjsUtil = require_lib3();
      var rlp = require_dist2();
      var bytes_1 = require_bytes3();
      exports.keccak = function(a, bits) {
        if (bits === void 0) {
          bits = 256;
        }
        if (typeof a === "string" && !ethjsUtil.isHexString(a)) {
          a = Buffer2.from(a, "utf8");
        } else {
          a = bytes_1.toBuffer(a);
        }
        if (!bits)
          bits = 256;
        switch (bits) {
          case 224: {
            return keccak224(a);
          }
          case 256: {
            return k256(a);
          }
          case 384: {
            return keccak384(a);
          }
          case 512: {
            return keccak512(a);
          }
          default: {
            throw new Error("Invald algorithm: keccak" + bits);
          }
        }
      };
      exports.keccak256 = function(a) {
        return exports.keccak(a);
      };
      exports.sha256 = function(a) {
        a = bytes_1.toBuffer(a);
        return createHash("sha256").update(a).digest();
      };
      exports.ripemd160 = function(a, padded) {
        a = bytes_1.toBuffer(a);
        var hash = createHash("rmd160").update(a).digest();
        if (padded === true) {
          return bytes_1.setLength(hash, 32);
        } else {
          return hash;
        }
      };
      exports.rlphash = function(a) {
        return exports.keccak(rlp.encode(a));
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/account.js
  var require_account2 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/account.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
      var assert3 = require_assert();
      var ethjsUtil = require_lib3();
      var secp256k1 = require_secp256k1v3_adapter();
      var BN = require_bn7();
      var bytes_1 = require_bytes3();
      var hash_1 = require_hash5();
      exports.zeroAddress = function() {
        var addressLength = 20;
        var addr = bytes_1.zeros(addressLength);
        return bytes_1.bufferToHex(addr);
      };
      exports.isValidAddress = function(address) {
        return /^0x[0-9a-fA-F]{40}$/.test(address);
      };
      exports.isZeroAddress = function(address) {
        var zeroAddr = exports.zeroAddress();
        return zeroAddr === bytes_1.addHexPrefix(address);
      };
      exports.toChecksumAddress = function(address, eip1191ChainId) {
        address = ethjsUtil.stripHexPrefix(address).toLowerCase();
        var prefix = eip1191ChainId !== void 0 ? eip1191ChainId.toString() + "0x" : "";
        var hash = hash_1.keccak(prefix + address).toString("hex");
        var ret = "0x";
        for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
          } else {
            ret += address[i];
          }
        }
        return ret;
      };
      exports.isValidChecksumAddress = function(address, eip1191ChainId) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
      };
      exports.generateAddress = function(from3, nonce) {
        from3 = bytes_1.toBuffer(from3);
        var nonceBN = new BN(nonce);
        if (nonceBN.isZero()) {
          return hash_1.rlphash([from3, null]).slice(-20);
        }
        return hash_1.rlphash([from3, Buffer2.from(nonceBN.toArray())]).slice(-20);
      };
      exports.generateAddress2 = function(from3, salt, initCode) {
        var fromBuf = bytes_1.toBuffer(from3);
        var saltBuf = bytes_1.toBuffer(salt);
        var initCodeBuf = bytes_1.toBuffer(initCode);
        assert3(fromBuf.length === 20);
        assert3(saltBuf.length === 32);
        var address = hash_1.keccak256(Buffer2.concat([Buffer2.from("ff", "hex"), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
        return address.slice(-20);
      };
      exports.isPrecompiled = function(address) {
        var a = bytes_1.unpad(address);
        return a.length === 1 && a[0] >= 1 && a[0] <= 8;
      };
      exports.isValidPrivate = function(privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
      };
      exports.isValidPublic = function(publicKey, sanitize) {
        if (sanitize === void 0) {
          sanitize = false;
        }
        if (publicKey.length === 64) {
          return secp256k1.publicKeyVerify(Buffer2.concat([Buffer2.from([4]), publicKey]));
        }
        if (!sanitize) {
          return false;
        }
        return secp256k1.publicKeyVerify(publicKey);
      };
      exports.pubToAddress = function(pubKey, sanitize) {
        if (sanitize === void 0) {
          sanitize = false;
        }
        pubKey = bytes_1.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
        }
        assert3(pubKey.length === 64);
        return hash_1.keccak(pubKey).slice(-20);
      };
      exports.publicToAddress = exports.pubToAddress;
      exports.privateToAddress = function(privateKey) {
        return exports.publicToAddress(exports.privateToPublic(privateKey));
      };
      exports.privateToPublic = function(privateKey) {
        privateKey = bytes_1.toBuffer(privateKey);
        return secp256k1.publicKeyCreate(privateKey, false).slice(1);
      };
      exports.importPublic = function(publicKey) {
        publicKey = bytes_1.toBuffer(publicKey);
        if (publicKey.length !== 64) {
          publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/signature.js
  var require_signature4 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/signature.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
      var secp256k1 = require_secp256k1v3_adapter();
      var BN = require_bn7();
      var bytes_1 = require_bytes3();
      var hash_1 = require_hash5();
      exports.ecsign = function(msgHash, privateKey, chainId) {
        var sig = secp256k1.sign(msgHash, privateKey);
        var recovery = sig.recovery;
        var ret = {
          r: sig.signature.slice(0, 32),
          s: sig.signature.slice(32, 64),
          v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27
        };
        return ret;
      };
      exports.ecrecover = function(msgHash, v, r, s, chainId) {
        var signature = Buffer2.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
          throw new Error("Invalid signature v value");
        }
        var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
        return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
      };
      exports.toRpcSig = function(v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
          throw new Error("Invalid signature v value");
        }
        return bytes_1.bufferToHex(Buffer2.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
      };
      exports.fromRpcSig = function(sig) {
        var buf = bytes_1.toBuffer(sig);
        if (buf.length !== 65) {
          throw new Error("Invalid signature length");
        }
        var v = buf[64];
        if (v < 27) {
          v += 27;
        }
        return {
          v,
          r: buf.slice(0, 32),
          s: buf.slice(32, 64)
        };
      };
      exports.isValidSignature = function(v, r, s, homesteadOrLater, chainId) {
        if (homesteadOrLater === void 0) {
          homesteadOrLater = true;
        }
        var SECP256K1_N_DIV_2 = new BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
        var SECP256K1_N = new BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
        if (r.length !== 32 || s.length !== 32) {
          return false;
        }
        if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
          return false;
        }
        var rBN = new BN(r);
        var sBN = new BN(s);
        if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
          return false;
        }
        if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
          return false;
        }
        return true;
      };
      exports.hashPersonalMessage = function(message) {
        var prefix = Buffer2.from("Ethereum Signed Message:\n" + message.length.toString(), "utf-8");
        return hash_1.keccak(Buffer2.concat([prefix, message]));
      };
      function calculateSigRecovery(v, chainId) {
        return chainId ? v - (2 * chainId + 35) : v - 27;
      }
      function isValidSigRecovery(recovery) {
        return recovery === 0 || recovery === 1;
      }
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/object.js
  var require_object2 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/object.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defineProperties = void 0;
      var assert3 = require_assert();
      var ethjsUtil = require_lib3();
      var rlp = require_dist2();
      var bytes_1 = require_bytes3();
      exports.defineProperties = function(self2, fields, data) {
        self2.raw = [];
        self2._fields = [];
        self2.toJSON = function(label) {
          if (label === void 0) {
            label = false;
          }
          if (label) {
            var obj_1 = {};
            self2._fields.forEach(function(field) {
              obj_1[field] = "0x" + self2[field].toString("hex");
            });
            return obj_1;
          }
          return bytes_1.baToJSON(self2.raw);
        };
        self2.serialize = function serialize() {
          return rlp.encode(self2.raw);
        };
        fields.forEach(function(field, i) {
          self2._fields.push(field.name);
          function getter() {
            return self2.raw[i];
          }
          function setter(v) {
            v = bytes_1.toBuffer(v);
            if (v.toString("hex") === "00" && !field.allowZero) {
              v = Buffer2.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
              v = bytes_1.stripZeros(v);
              assert3(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            } else if (!(field.allowZero && v.length === 0) && field.length) {
              assert3(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self2.raw[i] = v;
          }
          Object.defineProperty(self2, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
          });
          if (field.default) {
            self2[field.name] = field.default;
          }
          if (field.alias) {
            Object.defineProperty(self2, field.alias, {
              enumerable: false,
              configurable: true,
              set: setter,
              get: getter
            });
          }
        });
        if (data) {
          if (typeof data === "string") {
            data = Buffer2.from(ethjsUtil.stripHexPrefix(data), "hex");
          }
          if (Buffer2.isBuffer(data)) {
            data = rlp.decode(data);
          }
          if (Array.isArray(data)) {
            if (data.length > self2._fields.length) {
              throw new Error("wrong number of fields in data");
            }
            data.forEach(function(d, i) {
              self2[self2._fields[i]] = bytes_1.toBuffer(d);
            });
          } else if (typeof data === "object") {
            var keys_1 = Object.keys(data);
            fields.forEach(function(field) {
              if (keys_1.indexOf(field.name) !== -1)
                self2[field.name] = data[field.name];
              if (keys_1.indexOf(field.alias) !== -1)
                self2[field.alias] = data[field.alias];
            });
          } else {
            throw new Error("invalid data");
          }
        }
      };
    }
  });

  // node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/index.js
  var require_dist6 = __commonJS({
    "node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __createBinding = exports && exports.__createBinding || (Object.create ? (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      }) : (function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      }));
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !exports2.hasOwnProperty(p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.secp256k1 = exports.rlp = exports.BN = void 0;
      var secp256k1 = require_secp256k1v3_adapter();
      exports.secp256k1 = secp256k1;
      var ethjsUtil = require_lib3();
      var BN = require_bn7();
      exports.BN = BN;
      var rlp = require_dist2();
      exports.rlp = rlp;
      Object.assign(exports, ethjsUtil);
      __exportStar(require_constants3(), exports);
      __exportStar(require_account2(), exports);
      __exportStar(require_hash5(), exports);
      __exportStar(require_signature4(), exports);
      __exportStar(require_bytes3(), exports);
      __exportStar(require_object2(), exports);
    }
  });

  // node_modules/pbkdf2/lib/precondition.js
  var require_precondition = __commonJS({
    "node_modules/pbkdf2/lib/precondition.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var $isFinite = isFinite;
      var MAX_ALLOC = Math.pow(2, 30) - 1;
      module.exports = function(iterations, keylen) {
        if (typeof iterations !== "number") {
          throw new TypeError("Iterations not a number");
        }
        if (iterations < 0 || !$isFinite(iterations)) {
          throw new TypeError("Bad iterations");
        }
        if (typeof keylen !== "number") {
          throw new TypeError("Key length not a number");
        }
        if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
          throw new TypeError("Bad key length");
        }
      };
    }
  });

  // node_modules/pbkdf2/lib/default-encoding.js
  var require_default_encoding = __commonJS({
    "node_modules/pbkdf2/lib/default-encoding.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var defaultEncoding;
      if (window.process && window.process.browser) {
        defaultEncoding = "utf-8";
      } else if (window.process && window.process.version) {
        pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
        defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
      } else {
        defaultEncoding = "utf-8";
      }
      var pVersionMajor;
      module.exports = defaultEncoding;
    }
  });

  // node_modules/create-hash/md5.js
  var require_md52 = __commonJS({
    "node_modules/create-hash/md5.js"(exports, module) {
      init_process();
      init_buffer();
      var MD5 = require_md5();
      module.exports = function(buffer) {
        return new MD5().update(buffer).digest();
      };
    }
  });

  // node_modules/pbkdf2/lib/to-buffer.js
  var require_to_buffer3 = __commonJS({
    "node_modules/pbkdf2/lib/to-buffer.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var toBuffer = require_to_buffer();
      var useUint8Array = typeof Uint8Array !== "undefined";
      var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== "undefined";
      var isView2 = useArrayBuffer && ArrayBuffer.isView;
      module.exports = function(thing, encoding, name2) {
        if (typeof thing === "string" || Buffer4.isBuffer(thing) || useUint8Array && thing instanceof Uint8Array || isView2 && isView2(thing)) {
          return toBuffer(thing, encoding);
        }
        throw new TypeError(name2 + " must be a string, a Buffer, a Uint8Array, or a DataView");
      };
    }
  });

  // node_modules/pbkdf2/lib/sync-browser.js
  var require_sync_browser = __commonJS({
    "node_modules/pbkdf2/lib/sync-browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var md5 = require_md52();
      var RIPEMD160 = require_ripemd160();
      var sha = require_sha4();
      var Buffer4 = require_safe_buffer().Buffer;
      var checkParameters = require_precondition();
      var defaultEncoding = require_default_encoding();
      var toBuffer = require_to_buffer3();
      var ZEROS = Buffer4.alloc(128);
      var sizes = {
        __proto__: null,
        md5: 16,
        sha1: 20,
        sha224: 28,
        sha256: 32,
        sha384: 48,
        sha512: 64,
        "sha512-256": 32,
        ripemd160: 20,
        rmd160: 20
      };
      var mapping = {
        __proto__: null,
        "sha-1": "sha1",
        "sha-224": "sha224",
        "sha-256": "sha256",
        "sha-384": "sha384",
        "sha-512": "sha512",
        "ripemd-160": "ripemd160"
      };
      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
      }
      function getDigest(alg) {
        function shaFunc(data) {
          return sha(alg).update(data).digest();
        }
        if (alg === "rmd160" || alg === "ripemd160") {
          return rmd160Func;
        }
        if (alg === "md5") {
          return md5;
        }
        return shaFunc;
      }
      function Hmac(alg, key, saltLen) {
        var hash = getDigest(alg);
        var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
        if (key.length > blocksize) {
          key = hash(key);
        } else if (key.length < blocksize) {
          key = Buffer4.concat([key, ZEROS], blocksize);
        }
        var ipad = Buffer4.allocUnsafe(blocksize + sizes[alg]);
        var opad = Buffer4.allocUnsafe(blocksize + sizes[alg]);
        for (var i = 0; i < blocksize; i++) {
          ipad[i] = key[i] ^ 54;
          opad[i] = key[i] ^ 92;
        }
        var ipad1 = Buffer4.allocUnsafe(blocksize + saltLen + 4);
        ipad.copy(ipad1, 0, 0, blocksize);
        this.ipad1 = ipad1;
        this.ipad2 = ipad;
        this.opad = opad;
        this.alg = alg;
        this.blocksize = blocksize;
        this.hash = hash;
        this.size = sizes[alg];
      }
      Hmac.prototype.run = function(data, ipad) {
        data.copy(ipad, this.blocksize);
        var h = this.hash(ipad);
        h.copy(this.opad, this.blocksize);
        return this.hash(this.opad);
      };
      function pbkdf2(password, salt, iterations, keylen, digest) {
        checkParameters(iterations, keylen);
        password = toBuffer(password, defaultEncoding, "Password");
        salt = toBuffer(salt, defaultEncoding, "Salt");
        var lowerDigest = (digest || "sha1").toLowerCase();
        var mappedDigest = mapping[lowerDigest] || lowerDigest;
        var size = sizes[mappedDigest];
        if (typeof size !== "number" || !size) {
          throw new TypeError("Digest algorithm not supported: " + digest);
        }
        var hmac = new Hmac(mappedDigest, password, salt.length);
        var DK = Buffer4.allocUnsafe(keylen);
        var block1 = Buffer4.allocUnsafe(salt.length + 4);
        salt.copy(block1, 0, 0, salt.length);
        var destPos = 0;
        var hLen = size;
        var l = Math.ceil(keylen / hLen);
        for (var i = 1; i <= l; i++) {
          block1.writeUInt32BE(i, salt.length);
          var T = hmac.run(block1, hmac.ipad1);
          var U = T;
          for (var j = 1; j < iterations; j++) {
            U = hmac.run(U, hmac.ipad2);
            for (var k = 0; k < hLen; k++) {
              T[k] ^= U[k];
            }
          }
          T.copy(DK, destPos);
          destPos += hLen;
        }
        return DK;
      }
      module.exports = pbkdf2;
    }
  });

  // node_modules/pbkdf2/lib/async.js
  var require_async = __commonJS({
    "node_modules/pbkdf2/lib/async.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Buffer4 = require_safe_buffer().Buffer;
      var checkParameters = require_precondition();
      var defaultEncoding = require_default_encoding();
      var sync = require_sync_browser();
      var toBuffer = require_to_buffer3();
      var ZERO_BUF;
      var subtle = window.crypto && window.crypto.subtle;
      var toBrowser = {
        sha: "SHA-1",
        "sha-1": "SHA-1",
        sha1: "SHA-1",
        sha256: "SHA-256",
        "sha-256": "SHA-256",
        sha384: "SHA-384",
        "sha-384": "SHA-384",
        "sha-512": "SHA-512",
        sha512: "SHA-512"
      };
      var checks = [];
      var nextTick3;
      function getNextTick() {
        if (nextTick3) {
          return nextTick3;
        }
        if (window.process && window.process.nextTick) {
          nextTick3 = window.process.nextTick;
        } else if (window.queueMicrotask) {
          nextTick3 = window.queueMicrotask;
        } else if (window.setImmediate) {
          nextTick3 = window.setImmediate;
        } else {
          nextTick3 = window.setTimeout;
        }
        return nextTick3;
      }
      function browserPbkdf2(password, salt, iterations, length, algo) {
        return subtle.importKey("raw", password, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(key) {
          return subtle.deriveBits({
            name: "PBKDF2",
            salt,
            iterations,
            hash: {
              name: algo
            }
          }, key, length << 3);
        }).then(function(res) {
          return Buffer4.from(res);
        });
      }
      function checkNative(algo) {
        if (window.process && !window.process.browser) {
          return Promise.resolve(false);
        }
        if (!subtle || !subtle.importKey || !subtle.deriveBits) {
          return Promise.resolve(false);
        }
        if (checks[algo] !== void 0) {
          return checks[algo];
        }
        ZERO_BUF = ZERO_BUF || Buffer4.alloc(8);
        var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(
          function() {
            return true;
          },
          function() {
            return false;
          }
        );
        checks[algo] = prom;
        return prom;
      }
      function resolvePromise(promise, callback) {
        promise.then(function(out) {
          getNextTick()(function() {
            callback(null, out);
          });
        }, function(e) {
          getNextTick()(function() {
            callback(e);
          });
        });
      }
      module.exports = function(password, salt, iterations, keylen, digest, callback) {
        if (typeof digest === "function") {
          callback = digest;
          digest = void 0;
        }
        checkParameters(iterations, keylen);
        password = toBuffer(password, defaultEncoding, "Password");
        salt = toBuffer(salt, defaultEncoding, "Salt");
        if (typeof callback !== "function") {
          throw new Error("No callback provided to pbkdf2");
        }
        digest = digest || "sha1";
        var algo = toBrowser[digest.toLowerCase()];
        if (!algo || typeof window.Promise !== "function") {
          getNextTick()(function() {
            var out;
            try {
              out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
              callback(e);
              return;
            }
            callback(null, out);
          });
          return;
        }
        resolvePromise(checkNative(algo).then(function(resp) {
          if (resp) {
            return browserPbkdf2(password, salt, iterations, keylen, algo);
          }
          return sync(password, salt, iterations, keylen, digest);
        }), callback);
      };
    }
  });

  // node_modules/pbkdf2/browser.js
  var require_browser5 = __commonJS({
    "node_modules/pbkdf2/browser.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      exports.pbkdf2 = require_async();
      exports.pbkdf2Sync = require_sync_browser();
    }
  });

  // node_modules/scryptsy/lib/scrypt.js
  var require_scrypt = __commonJS({
    "node_modules/scryptsy/lib/scrypt.js"(exports, module) {
      init_process();
      init_buffer();
      var pbkdf2Sync = require_browser5().pbkdf2Sync;
      var MAX_VALUE = 2147483647;
      function scrypt(key, salt, N, r, p, dkLen, progressCallback) {
        if (N === 0 || (N & N - 1) !== 0) throw Error("N must be > 0 and a power of 2");
        if (N > MAX_VALUE / 128 / r) throw Error("Parameter N is too large");
        if (r > MAX_VALUE / 128 / p) throw Error("Parameter r is too large");
        var XY = new Buffer2(256 * r);
        var V = new Buffer2(128 * r * N);
        var B32 = new Int32Array(16);
        var x = new Int32Array(16);
        var _X = new Buffer2(64);
        var B = pbkdf2Sync(key, salt, 1, p * 128 * r, "sha256");
        var tickCallback;
        if (progressCallback) {
          var totalOps = p * N * 2;
          var currentOp = 0;
          tickCallback = function() {
            ++currentOp;
            if (currentOp % 1e3 === 0) {
              progressCallback({
                current: currentOp,
                total: totalOps,
                percent: currentOp / totalOps * 100
              });
            }
          };
        }
        for (var i = 0; i < p; i++) {
          smix(B, i * 128 * r, r, N, V, XY);
        }
        return pbkdf2Sync(key, B, 1, dkLen, "sha256");
        function smix(B2, Bi, r2, N2, V2, XY2) {
          var Xi = 0;
          var Yi = 128 * r2;
          var i2;
          B2.copy(XY2, Xi, Bi, Bi + Yi);
          for (i2 = 0; i2 < N2; i2++) {
            XY2.copy(V2, i2 * Yi, Xi, Xi + Yi);
            blockmix_salsa8(XY2, Xi, Yi, r2);
            if (tickCallback) tickCallback();
          }
          for (i2 = 0; i2 < N2; i2++) {
            var offset = Xi + (2 * r2 - 1) * 64;
            var j = XY2.readUInt32LE(offset) & N2 - 1;
            blockxor(V2, j * Yi, XY2, Xi, Yi);
            blockmix_salsa8(XY2, Xi, Yi, r2);
            if (tickCallback) tickCallback();
          }
          XY2.copy(B2, Bi, Xi, Xi + Yi);
        }
        function blockmix_salsa8(BY, Bi, Yi, r2) {
          var i2;
          arraycopy(BY, Bi + (2 * r2 - 1) * 64, _X, 0, 64);
          for (i2 = 0; i2 < 2 * r2; i2++) {
            blockxor(BY, i2 * 64, _X, 0, 64);
            salsa20_8(_X);
            arraycopy(_X, 0, BY, Yi + i2 * 64, 64);
          }
          for (i2 = 0; i2 < r2; i2++) {
            arraycopy(BY, Yi + i2 * 2 * 64, BY, Bi + i2 * 64, 64);
          }
          for (i2 = 0; i2 < r2; i2++) {
            arraycopy(BY, Yi + (i2 * 2 + 1) * 64, BY, Bi + (i2 + r2) * 64, 64);
          }
        }
        function R(a, b) {
          return a << b | a >>> 32 - b;
        }
        function salsa20_8(B2) {
          var i2;
          for (i2 = 0; i2 < 16; i2++) {
            B32[i2] = (B2[i2 * 4 + 0] & 255) << 0;
            B32[i2] |= (B2[i2 * 4 + 1] & 255) << 8;
            B32[i2] |= (B2[i2 * 4 + 2] & 255) << 16;
            B32[i2] |= (B2[i2 * 4 + 3] & 255) << 24;
          }
          arraycopy(B32, 0, x, 0, 16);
          for (i2 = 8; i2 > 0; i2 -= 2) {
            x[4] ^= R(x[0] + x[12], 7);
            x[8] ^= R(x[4] + x[0], 9);
            x[12] ^= R(x[8] + x[4], 13);
            x[0] ^= R(x[12] + x[8], 18);
            x[9] ^= R(x[5] + x[1], 7);
            x[13] ^= R(x[9] + x[5], 9);
            x[1] ^= R(x[13] + x[9], 13);
            x[5] ^= R(x[1] + x[13], 18);
            x[14] ^= R(x[10] + x[6], 7);
            x[2] ^= R(x[14] + x[10], 9);
            x[6] ^= R(x[2] + x[14], 13);
            x[10] ^= R(x[6] + x[2], 18);
            x[3] ^= R(x[15] + x[11], 7);
            x[7] ^= R(x[3] + x[15], 9);
            x[11] ^= R(x[7] + x[3], 13);
            x[15] ^= R(x[11] + x[7], 18);
            x[1] ^= R(x[0] + x[3], 7);
            x[2] ^= R(x[1] + x[0], 9);
            x[3] ^= R(x[2] + x[1], 13);
            x[0] ^= R(x[3] + x[2], 18);
            x[6] ^= R(x[5] + x[4], 7);
            x[7] ^= R(x[6] + x[5], 9);
            x[4] ^= R(x[7] + x[6], 13);
            x[5] ^= R(x[4] + x[7], 18);
            x[11] ^= R(x[10] + x[9], 7);
            x[8] ^= R(x[11] + x[10], 9);
            x[9] ^= R(x[8] + x[11], 13);
            x[10] ^= R(x[9] + x[8], 18);
            x[12] ^= R(x[15] + x[14], 7);
            x[13] ^= R(x[12] + x[15], 9);
            x[14] ^= R(x[13] + x[12], 13);
            x[15] ^= R(x[14] + x[13], 18);
          }
          for (i2 = 0; i2 < 16; ++i2) B32[i2] = x[i2] + B32[i2];
          for (i2 = 0; i2 < 16; i2++) {
            var bi = i2 * 4;
            B2[bi + 0] = B32[i2] >> 0 & 255;
            B2[bi + 1] = B32[i2] >> 8 & 255;
            B2[bi + 2] = B32[i2] >> 16 & 255;
            B2[bi + 3] = B32[i2] >> 24 & 255;
          }
        }
        function blockxor(S, Si, D, Di, len) {
          for (var i2 = 0; i2 < len; i2++) {
            D[Di + i2] ^= S[Si + i2];
          }
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        if (Buffer2.isBuffer(src) && Buffer2.isBuffer(dest)) {
          src.copy(dest, destPos, srcPos, srcPos + length);
        } else {
          while (length--) {
            dest[destPos++] = src[srcPos++];
          }
        }
      }
      module.exports = scrypt;
    }
  });

  // node_modules/uuid/lib/rng-browser.js
  var require_rng_browser = __commonJS({
    "node_modules/uuid/lib/rng-browser.js"(exports, module) {
      init_process();
      init_buffer();
      var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
      if (getRandomValues) {
        rnds8 = new Uint8Array(16);
        module.exports = function whatwgRNG() {
          getRandomValues(rnds8);
          return rnds8;
        };
      } else {
        rnds = new Array(16);
        module.exports = function mathRNG() {
          for (var i = 0, r; i < 16; i++) {
            if ((i & 3) === 0) r = Math.random() * 4294967296;
            rnds[i] = r >>> ((i & 3) << 3) & 255;
          }
          return rnds;
        };
      }
      var rnds8;
      var rnds;
    }
  });

  // node_modules/uuid/lib/bytesToUuid.js
  var require_bytesToUuid = __commonJS({
    "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
      init_process();
      init_buffer();
      var byteToHex = [];
      for (i = 0; i < 256; ++i) {
        byteToHex[i] = (i + 256).toString(16).substr(1);
      }
      var i;
      function bytesToUuid(buf, offset) {
        var i2 = offset || 0;
        var bth = byteToHex;
        return [
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]],
          "-",
          bth[buf[i2++]],
          bth[buf[i2++]],
          "-",
          bth[buf[i2++]],
          bth[buf[i2++]],
          "-",
          bth[buf[i2++]],
          bth[buf[i2++]],
          "-",
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]],
          bth[buf[i2++]]
        ].join("");
      }
      module.exports = bytesToUuid;
    }
  });

  // node_modules/uuid/v4.js
  var require_v4 = __commonJS({
    "node_modules/uuid/v4.js"(exports, module) {
      init_process();
      init_buffer();
      var rng = require_rng_browser();
      var bytesToUuid = require_bytesToUuid();
      function v4(options, buf, offset) {
        var i = buf && offset || 0;
        if (typeof options == "string") {
          buf = options === "binary" ? new Array(16) : null;
          options = null;
        }
        options = options || {};
        var rnds = options.random || (options.rng || rng)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
          for (var ii = 0; ii < 16; ++ii) {
            buf[i + ii] = rnds[ii];
          }
        }
        return buf || bytesToUuid(rnds);
      }
      module.exports = v4;
    }
  });

  // node_modules/base-x/src/index.js
  var require_src6 = __commonJS({
    "node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _Buffer = require_safe_buffer().Buffer;
      function base2(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode2(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (psz < source.length) {
            var charCode = source.charCodeAt(psz);
            if (charCode > 255) {
              return;
            }
            var carry = BASE_MAP[charCode];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode: encode2,
          decodeUnsafe,
          decode
        };
      }
      module.exports = base2;
    }
  });

  // node_modules/bs58/index.js
  var require_bs58 = __commonJS({
    "node_modules/bs58/index.js"(exports, module) {
      init_process();
      init_buffer();
      var basex = require_src6();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/bs58check/base.js
  var require_base2 = __commonJS({
    "node_modules/bs58check/base.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var base58 = require_bs58();
      var Buffer4 = require_safe_buffer().Buffer;
      module.exports = function(checksumFn) {
        function encode2(payload) {
          var checksum = checksumFn(payload);
          return base58.encode(Buffer4.concat([
            payload,
            checksum
          ], payload.length + 4));
        }
        function decodeRaw(buffer) {
          var payload = buffer.slice(0, -4);
          var checksum = buffer.slice(-4);
          var newChecksum = checksumFn(payload);
          if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
          return payload;
        }
        function decodeUnsafe(string) {
          var buffer = base58.decodeUnsafe(string);
          if (!buffer) return;
          return decodeRaw(buffer);
        }
        function decode(string) {
          var buffer = base58.decode(string);
          var payload = decodeRaw(buffer, checksumFn);
          if (!payload) throw new Error("Invalid checksum");
          return payload;
        }
        return {
          encode: encode2,
          decode,
          decodeUnsafe
        };
      };
    }
  });

  // node_modules/bs58check/index.js
  var require_bs58check = __commonJS({
    "node_modules/bs58check/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var createHash = require_browser3();
      var bs58checkBase = require_base2();
      function sha256x2(buffer) {
        var tmp = createHash("sha256").update(buffer).digest();
        return createHash("sha256").update(tmp).digest();
      }
      module.exports = bs58checkBase(sha256x2);
    }
  });

  // node_modules/ethereumjs-wallet/index.js
  var require_ethereumjs_wallet = __commonJS({
    "node_modules/ethereumjs-wallet/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var Buffer4 = require_safe_buffer().Buffer;
      var ethUtil = require_dist6();
      var crypto2 = require_crypto2();
      var randomBytes = require_browser();
      var scryptsy = require_scrypt();
      var uuidv4 = require_v4();
      var bs58check = require_bs58check();
      function assert3(val, msg) {
        if (!val) {
          throw new Error(msg || "Assertion failed");
        }
      }
      function runCipherBuffer(cipher, data) {
        return Buffer4.concat([cipher.update(data), cipher.final()]);
      }
      var Wallet = function Wallet2(priv, pub) {
        if (priv && pub) {
          throw new Error("Cannot supply both a private and a public key to the constructor");
        }
        if (priv && !ethUtil.isValidPrivate(priv)) {
          throw new Error("Private key does not satisfy the curve requirements (ie. it is invalid)");
        }
        if (pub && !ethUtil.isValidPublic(pub)) {
          throw new Error("Invalid public key");
        }
        this._privKey = priv;
        this._pubKey = pub;
      };
      Object.defineProperty(Wallet.prototype, "privKey", {
        get: function get3() {
          assert3(this._privKey, "This is a public key only wallet");
          return this._privKey;
        }
      });
      Object.defineProperty(Wallet.prototype, "pubKey", {
        get: function get3() {
          if (!this._pubKey) {
            this._pubKey = ethUtil.privateToPublic(this.privKey);
          }
          return this._pubKey;
        }
      });
      Wallet.generate = function(icapDirect) {
        if (icapDirect) {
          var max = new ethUtil.BN("088f924eeceeda7fe92e1f5b0fffffffffffffff", 16);
          while (true) {
            var privKey = randomBytes(32);
            if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {
              return new Wallet(privKey);
            }
          }
        } else {
          return new Wallet(randomBytes(32));
        }
      };
      Wallet.generateVanityAddress = function(pattern) {
        if ((typeof pattern === "undefined" ? "undefined" : _typeof(pattern)) !== "object") {
          pattern = new RegExp(pattern);
        }
        while (true) {
          var privKey = randomBytes(32);
          var address = ethUtil.privateToAddress(privKey);
          if (pattern.test(address.toString("hex"))) {
            return new Wallet(privKey);
          }
        }
      };
      Wallet.prototype.getPrivateKey = function() {
        return this.privKey;
      };
      Wallet.prototype.getPrivateKeyString = function() {
        return ethUtil.bufferToHex(this.getPrivateKey());
      };
      Wallet.prototype.getPublicKey = function() {
        return this.pubKey;
      };
      Wallet.prototype.getPublicKeyString = function() {
        return ethUtil.bufferToHex(this.getPublicKey());
      };
      Wallet.prototype.getAddress = function() {
        return ethUtil.publicToAddress(this.pubKey);
      };
      Wallet.prototype.getAddressString = function() {
        return ethUtil.bufferToHex(this.getAddress());
      };
      Wallet.prototype.getChecksumAddressString = function() {
        return ethUtil.toChecksumAddress(this.getAddressString());
      };
      Wallet.prototype.toV3 = function(password, opts) {
        assert3(this._privKey, "This is a public key only wallet");
        opts = opts || {};
        var salt = opts.salt || randomBytes(32);
        var iv = opts.iv || randomBytes(16);
        var derivedKey;
        var kdf = opts.kdf || "scrypt";
        var kdfparams = {
          dklen: opts.dklen || 32,
          salt: salt.toString("hex")
        };
        if (kdf === "pbkdf2") {
          kdfparams.c = opts.c || 262144;
          kdfparams.prf = "hmac-sha256";
          derivedKey = crypto2.pbkdf2Sync(Buffer4.from(password), salt, kdfparams.c, kdfparams.dklen, "sha256");
        } else if (kdf === "scrypt") {
          kdfparams.n = opts.n || 262144;
          kdfparams.r = opts.r || 8;
          kdfparams.p = opts.p || 1;
          derivedKey = scryptsy(Buffer4.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else {
          throw new Error("Unsupported kdf");
        }
        var cipher = crypto2.createCipheriv(opts.cipher || "aes-128-ctr", derivedKey.slice(0, 16), iv);
        if (!cipher) {
          throw new Error("Unsupported cipher");
        }
        var ciphertext = runCipherBuffer(cipher, this.privKey);
        var mac = ethUtil.keccak256(Buffer4.concat([derivedKey.slice(16, 32), Buffer4.from(ciphertext, "hex")]));
        return {
          version: 3,
          id: uuidv4({ random: opts.uuid || randomBytes(16) }),
          address: this.getAddress().toString("hex"),
          crypto: {
            ciphertext: ciphertext.toString("hex"),
            cipherparams: {
              iv: iv.toString("hex")
            },
            cipher: opts.cipher || "aes-128-ctr",
            kdf,
            kdfparams,
            mac: mac.toString("hex")
          }
        };
      };
      Wallet.prototype.getV3Filename = function(timestamp2) {
        var ts = timestamp2 ? new Date(timestamp2) : /* @__PURE__ */ new Date();
        return ["UTC--", ts.toJSON().replace(/:/g, "-"), "--", this.getAddress().toString("hex")].join("");
      };
      Wallet.prototype.toV3String = function(password, opts) {
        return JSON.stringify(this.toV3(password, opts));
      };
      Wallet.fromPublicKey = function(pub, nonStrict) {
        if (nonStrict) {
          pub = ethUtil.importPublic(pub);
        }
        return new Wallet(null, pub);
      };
      Wallet.fromExtendedPublicKey = function(pub) {
        assert3(pub.slice(0, 4) === "xpub", "Not an extended public key");
        pub = bs58check.decode(pub).slice(45);
        return Wallet.fromPublicKey(pub, true);
      };
      Wallet.fromPrivateKey = function(priv) {
        return new Wallet(priv);
      };
      Wallet.fromExtendedPrivateKey = function(priv) {
        assert3(priv.slice(0, 4) === "xprv", "Not an extended private key");
        var tmp = bs58check.decode(priv);
        assert3(tmp[45] === 0, "Invalid extended private key");
        return Wallet.fromPrivateKey(tmp.slice(46));
      };
      Wallet.fromV1 = function(input, password) {
        assert3(typeof password === "string");
        var json = (typeof input === "undefined" ? "undefined" : _typeof(input)) === "object" ? input : JSON.parse(input);
        if (json.Version !== "1") {
          throw new Error("Not a V1 wallet");
        }
        if (json.Crypto.KeyHeader.Kdf !== "scrypt") {
          throw new Error("Unsupported key derivation scheme");
        }
        var kdfparams = json.Crypto.KeyHeader.KdfParams;
        var derivedKey = scryptsy(Buffer4.from(password), Buffer4.from(json.Crypto.Salt, "hex"), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);
        var ciphertext = Buffer4.from(json.Crypto.CipherText, "hex");
        var mac = ethUtil.keccak256(Buffer4.concat([derivedKey.slice(16, 32), ciphertext]));
        if (mac.toString("hex") !== json.Crypto.MAC) {
          throw new Error("Key derivation failed - possibly wrong passphrase");
        }
        var decipher = crypto2.createDecipheriv("aes-128-cbc", ethUtil.keccak256(derivedKey.slice(0, 16)).slice(0, 16), Buffer4.from(json.Crypto.IV, "hex"));
        var seed = runCipherBuffer(decipher, ciphertext);
        return new Wallet(seed);
      };
      Wallet.fromV3 = function(input, password, nonStrict) {
        assert3(typeof password === "string");
        var json = (typeof input === "undefined" ? "undefined" : _typeof(input)) === "object" ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);
        if (json.version !== 3) {
          throw new Error("Not a V3 wallet");
        }
        var derivedKey;
        var kdfparams;
        if (json.crypto.kdf === "scrypt") {
          kdfparams = json.crypto.kdfparams;
          derivedKey = scryptsy(Buffer4.from(password), Buffer4.from(kdfparams.salt, "hex"), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else if (json.crypto.kdf === "pbkdf2") {
          kdfparams = json.crypto.kdfparams;
          if (kdfparams.prf !== "hmac-sha256") {
            throw new Error("Unsupported parameters to PBKDF2");
          }
          derivedKey = crypto2.pbkdf2Sync(Buffer4.from(password), Buffer4.from(kdfparams.salt, "hex"), kdfparams.c, kdfparams.dklen, "sha256");
        } else {
          throw new Error("Unsupported key derivation scheme");
        }
        var ciphertext = Buffer4.from(json.crypto.ciphertext, "hex");
        var mac = ethUtil.keccak256(Buffer4.concat([derivedKey.slice(16, 32), ciphertext]));
        if (mac.toString("hex") !== json.crypto.mac) {
          throw new Error("Key derivation failed - possibly wrong passphrase");
        }
        var decipher = crypto2.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer4.from(json.crypto.cipherparams.iv, "hex"));
        var seed = runCipherBuffer(decipher, ciphertext);
        return new Wallet(seed);
      };
      Wallet.fromEthSale = function(input, password) {
        assert3(typeof password === "string");
        var json = (typeof input === "undefined" ? "undefined" : _typeof(input)) === "object" ? input : JSON.parse(input);
        var encseed = Buffer4.from(json.encseed, "hex");
        var derivedKey = crypto2.pbkdf2Sync(password, password, 2e3, 32, "sha256").slice(0, 16);
        var decipher = crypto2.createDecipheriv("aes-128-cbc", derivedKey, encseed.slice(0, 16));
        var seed = runCipherBuffer(decipher, encseed.slice(16));
        var wallet = new Wallet(ethUtil.keccak256(seed));
        if (wallet.getAddress().toString("hex") !== json.ethaddr) {
          throw new Error("Decoded key mismatch - possibly wrong passphrase");
        }
        return wallet;
      };
      module.exports = Wallet;
    }
  });

  // node_modules/eth-sig-util/node_modules/bn.js/lib/bn.js
  var require_bn8 = __commonJS({
    "node_modules/eth-sig-util/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js
  var require_secp256k1_lib = __commonJS({
    "node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn8();
      var EC = require_elliptic().ec;
      var ec = new EC("secp256k1");
      var ecparams = ec.curve;
      exports.privateKeyExport = function(privateKey, compressed) {
        var d = new BN(privateKey);
        if (d.ucmp(ecparams.n) >= 0) {
          throw new Error("couldn't export to DER format");
        }
        var point = ec.g.mul(d);
        return toPublicKey(point.getX(), point.getY(), compressed);
      };
      exports.privateKeyModInverse = function(privateKey) {
        var bn = new BN(privateKey);
        if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
          throw new Error("private key range is invalid");
        }
        return bn.invm(ecparams.n).toArrayLike(Buffer2, "be", 32);
      };
      exports.signatureImport = function(sigObj) {
        var r = new BN(sigObj.r);
        if (r.ucmp(ecparams.n) >= 0) {
          r = new BN(0);
        }
        var s = new BN(sigObj.s);
        if (s.ucmp(ecparams.n) >= 0) {
          s = new BN(0);
        }
        return Buffer2.concat([r.toArrayLike(Buffer2, "be", 32), s.toArrayLike(Buffer2, "be", 32)]);
      };
      exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
        var point = ec.keyFromPublic(publicKey);
        var scalar = new BN(privateKey);
        if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
          throw new Error("scalar was invalid (zero or overflow)");
        }
        var shared = point.pub.mul(scalar);
        return toPublicKey(shared.getX(), shared.getY(), compressed);
      };
      var toPublicKey = function toPublicKey2(x, y, compressed) {
        var publicKey = void 0;
        if (compressed) {
          publicKey = Buffer2.alloc(33);
          publicKey[0] = y.isOdd() ? 3 : 2;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
        } else {
          publicKey = Buffer2.alloc(65);
          publicKey[0] = 4;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
          y.toArrayLike(Buffer2, "be", 32).copy(publicKey, 33);
        }
        return publicKey;
      };
    }
  });

  // node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js
  var require_der2 = __commonJS({
    "node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer2.from([
        // begin
        48,
        129,
        211,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        133,
        48,
        129,
        130,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        33,
        2,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        36,
        3,
        34,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer2.from([
        // begin
        48,
        130,
        1,
        19,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        165,
        48,
        129,
        162,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        65,
        4,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        72,
        58,
        218,
        119,
        38,
        163,
        196,
        101,
        93,
        164,
        251,
        252,
        14,
        17,
        8,
        168,
        253,
        23,
        180,
        72,
        166,
        133,
        84,
        25,
        156,
        71,
        208,
        143,
        251,
        16,
        212,
        184,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        68,
        3,
        66,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      exports.privateKeyExport = function(privateKey, publicKey, compressed) {
        var result = Buffer2.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
      };
      exports.privateKeyImport = function(privateKey) {
        var length = privateKey.length;
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 48) return null;
        index += 1;
        if (length < index + 1 || !(privateKey[index] & 128)) return null;
        var lenb = privateKey[index] & 127;
        index += 1;
        if (lenb < 1 || lenb > 2) return null;
        if (length < index + lenb) return null;
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len) return null;
        if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) {
          return null;
        }
        index += 3;
        if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) {
          return null;
        }
        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
      };
      exports.signatureImportLax = function(signature) {
        var r = Buffer2.alloc(32, 0);
        var s = Buffer2.alloc(32, 0);
        var length = signature.length;
        var index = 0;
        if (signature[index++] !== 48) {
          return null;
        }
        var lenbyte = signature[index++];
        if (lenbyte & 128) {
          index += lenbyte - 128;
          if (index > length) {
            return null;
          }
        }
        if (signature[index++] !== 2) {
          return null;
        }
        var rlen = signature[index++];
        if (rlen & 128) {
          lenbyte = rlen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1) {
          }
          for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
            rlen = (rlen << 8) + signature[index];
          }
        }
        if (rlen > length - index) {
          return null;
        }
        var rindex = index;
        index += rlen;
        if (signature[index++] !== 2) {
          return null;
        }
        var slen = signature[index++];
        if (slen & 128) {
          lenbyte = slen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1) {
          }
          for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
            slen = (slen << 8) + signature[index];
          }
        }
        if (slen > length - index) {
          return null;
        }
        var sindex = index;
        index += slen;
        for (; rlen > 0 && signature[rindex] === 0; rlen -= 1, rindex += 1) {
        }
        if (rlen > 32) {
          return null;
        }
        var rvalue = signature.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);
        for (; slen > 0 && signature[sindex] === 0; slen -= 1, sindex += 1) {
        }
        if (slen > 32) {
          return null;
        }
        var svalue = signature.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);
        return { r, s };
      };
    }
  });

  // node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-adapter.js
  var require_secp256k1_adapter = __commonJS({
    "node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-adapter.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var secp256k1 = require_secp256k12();
      var secp256k1v3 = require_secp256k1_lib();
      var der = require_der2();
      var privateKeyVerify = function privateKeyVerify2(privateKey) {
        if (privateKey.length !== 32) {
          return false;
        }
        return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
      };
      var privateKeyExport = function privateKeyExport2(privateKey, compressed) {
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
        return der.privateKeyExport(privateKey, publicKey, compressed);
      };
      var privateKeyImport = function privateKeyImport2(privateKey) {
        privateKey = der.privateKeyImport(privateKey);
        if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
          return privateKey;
        }
        throw new Error("couldn't import from DER format");
      };
      var privateKeyNegate = function privateKeyNegate2(privateKey) {
        return Buffer2.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
      };
      var privateKeyModInverse = function privateKeyModInverse2(privateKey) {
        if (privateKey.length !== 32) {
          throw new Error("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
      };
      var privateKeyTweakAdd = function privateKeyTweakAdd2(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
      };
      var privateKeyTweakMul = function privateKeyTweakMul2(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
      };
      var publicKeyCreate = function publicKeyCreate2(privateKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
      };
      var publicKeyConvert = function publicKeyConvert2(publicKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
      };
      var publicKeyVerify = function publicKeyVerify2(publicKey) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          return false;
        }
        return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
      };
      var publicKeyTweakAdd = function publicKeyTweakAdd2(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      var publicKeyTweakMul = function publicKeyTweakMul2(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      var publicKeyCombine = function publicKeyCombine2(publicKeys, compressed) {
        var keys2 = [];
        publicKeys.forEach(function(publicKey) {
          keys2.push(Uint8Array.from(publicKey));
        });
        return Buffer2.from(secp256k1.publicKeyCombine(keys2, compressed));
      };
      var signatureNormalize = function signatureNormalize2(signature) {
        return Buffer2.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
      };
      var signatureExport = function signatureExport2(signature) {
        return Buffer2.from(secp256k1.signatureExport(Uint8Array.from(signature)));
      };
      var signatureImport = function signatureImport2(signature) {
        return Buffer2.from(secp256k1.signatureImport(Uint8Array.from(signature)));
      };
      var signatureImportLax = function signatureImportLax2(signature) {
        if (signature.length === 0) {
          throw new RangeError("signature length is invalid");
        }
        var sigObj = der.signatureImportLax(signature);
        if (sigObj === null) {
          throw new Error("couldn't parse DER signature");
        }
        return secp256k1v3.signatureImport(sigObj);
      };
      var sign = function sign2(message, privateKey, options) {
        if (options === null) {
          throw new TypeError("options should be an Object");
        }
        var signOptions = void 0;
        if (options) {
          signOptions = {};
          if (options.data === null) {
            throw new TypeError("options.data should be a Buffer");
          }
          if (options.data) {
            if (options.data.length !== 32) {
              throw new RangeError("options.data length is invalid");
            }
            signOptions.data = new Uint8Array(options.data);
          }
          if (options.noncefn === null) {
            throw new TypeError("options.noncefn should be a Function");
          }
          if (options.noncefn) {
            signOptions.noncefn = function(message2, privateKey2, algo, data, attempt) {
              var bufferAlgo = algo != null ? Buffer2.from(algo) : null;
              var bufferData = data != null ? Buffer2.from(data) : null;
              var buffer = Buffer2.from("");
              if (options.noncefn) {
                buffer = options.noncefn(Buffer2.from(message2), Buffer2.from(privateKey2), bufferAlgo, bufferData, attempt);
              }
              return Uint8Array.from(buffer);
            };
          }
        }
        var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
        return {
          signature: Buffer2.from(sig.signature),
          recovery: sig.recid
        };
      };
      var verify = function verify2(message, signature, publicKey) {
        return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
      };
      var recover = function recover2(message, signature, recid, compressed) {
        return Buffer2.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
      };
      var ecdh = function ecdh2(publicKey, privateKey) {
        return Buffer2.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
      };
      var ecdhUnsafe = function ecdhUnsafe2(publicKey, privateKey, compressed) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          throw new RangeError("public key length is invalid");
        }
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
      };
      module.exports = {
        privateKeyVerify,
        privateKeyExport,
        privateKeyImport,
        privateKeyNegate,
        privateKeyModInverse,
        privateKeyTweakAdd,
        privateKeyTweakMul,
        publicKeyCreate,
        publicKeyConvert,
        publicKeyVerify,
        publicKeyTweakAdd,
        publicKeyTweakMul,
        publicKeyCombine,
        signatureNormalize,
        signatureExport,
        signatureImport,
        signatureImportLax,
        sign,
        verify,
        recover,
        ecdh,
        ecdhUnsafe
      };
    }
  });

  // node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/index.js
  var require_dist7 = __commonJS({
    "node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _require = require_keccak3();
      var keccak224 = _require.keccak224;
      var keccak384 = _require.keccak384;
      var k256 = _require.keccak256;
      var keccak512 = _require.keccak512;
      var secp256k1 = require_secp256k1_adapter();
      var assert3 = require_assert();
      var rlp = require_dist2();
      var BN = require_bn8();
      var createHash = require_browser3();
      var Buffer4 = require_safe_buffer().Buffer;
      Object.assign(exports, require_lib3());
      exports.MAX_INTEGER = new BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
      exports.TWO_POW256 = new BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
      exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
      exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
      exports.KECCAK256_NULL = Buffer4.from(exports.KECCAK256_NULL_S, "hex");
      exports.SHA3_NULL = exports.KECCAK256_NULL;
      exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
      exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
      exports.KECCAK256_RLP_ARRAY = Buffer4.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
      exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
      exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
      exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
      exports.KECCAK256_RLP = Buffer4.from(exports.KECCAK256_RLP_S, "hex");
      exports.SHA3_RLP = exports.KECCAK256_RLP;
      exports.BN = BN;
      exports.rlp = rlp;
      exports.secp256k1 = secp256k1;
      exports.zeros = function(bytes) {
        return Buffer4.allocUnsafe(bytes).fill(0);
      };
      exports.zeroAddress = function() {
        var addressLength = 20;
        var zeroAddress = exports.zeros(addressLength);
        return exports.bufferToHex(zeroAddress);
      };
      exports.setLengthLeft = exports.setLength = function(msg, length, right) {
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
          if (msg.length < length) {
            msg.copy(buf);
            return buf;
          }
          return msg.slice(0, length);
        } else {
          if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
          }
          return msg.slice(-length);
        }
      };
      exports.setLengthRight = function(msg, length) {
        return exports.setLength(msg, length, true);
      };
      exports.unpad = exports.stripZeros = function(a) {
        a = exports.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === "0") {
          a = a.slice(1);
          first = a[0];
        }
        return a;
      };
      exports.toBuffer = function(v) {
        if (!Buffer4.isBuffer(v)) {
          if (Array.isArray(v)) {
            v = Buffer4.from(v);
          } else if (typeof v === "string") {
            if (exports.isHexString(v)) {
              v = Buffer4.from(exports.padToEven(exports.stripHexPrefix(v)), "hex");
            } else {
              v = Buffer4.from(v);
            }
          } else if (typeof v === "number") {
            v = exports.intToBuffer(v);
          } else if (v === null || v === void 0) {
            v = Buffer4.allocUnsafe(0);
          } else if (BN.isBN(v)) {
            v = v.toArrayLike(Buffer4);
          } else if (v.toArray) {
            v = Buffer4.from(v.toArray());
          } else {
            throw new Error("invalid type");
          }
        }
        return v;
      };
      exports.bufferToInt = function(buf) {
        return new BN(exports.toBuffer(buf)).toNumber();
      };
      exports.bufferToHex = function(buf) {
        buf = exports.toBuffer(buf);
        return "0x" + buf.toString("hex");
      };
      exports.fromSigned = function(num) {
        return new BN(num).fromTwos(256);
      };
      exports.toUnsigned = function(num) {
        return Buffer4.from(num.toTwos(256).toArray());
      };
      exports.keccak = function(a, bits) {
        a = exports.toBuffer(a);
        if (!bits) bits = 256;
        switch (bits) {
          case 224: {
            return keccak224(a);
          }
          case 256: {
            return k256(a);
          }
          case 384: {
            return keccak384(a);
          }
          case 512: {
            return keccak512(a);
          }
          default: {
            throw new Error("Invald algorithm: keccak" + bits);
          }
        }
      };
      exports.keccak256 = function(a) {
        return exports.keccak(a);
      };
      exports.sha3 = exports.keccak;
      exports.sha256 = function(a) {
        a = exports.toBuffer(a);
        return createHash("sha256").update(a).digest();
      };
      exports.ripemd160 = function(a, padded) {
        a = exports.toBuffer(a);
        var hash = createHash("rmd160").update(a).digest();
        if (padded === true) {
          return exports.setLength(hash, 32);
        } else {
          return hash;
        }
      };
      exports.rlphash = function(a) {
        return exports.keccak(rlp.encode(a));
      };
      exports.isValidPrivate = function(privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
      };
      exports.isValidPublic = function(publicKey, sanitize) {
        if (publicKey.length === 64) {
          return secp256k1.publicKeyVerify(Buffer4.concat([Buffer4.from([4]), publicKey]));
        }
        if (!sanitize) {
          return false;
        }
        return secp256k1.publicKeyVerify(publicKey);
      };
      exports.pubToAddress = exports.publicToAddress = function(pubKey, sanitize) {
        pubKey = exports.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
        }
        assert3(pubKey.length === 64);
        return exports.keccak(pubKey).slice(-20);
      };
      var privateToPublic = exports.privateToPublic = function(privateKey) {
        privateKey = exports.toBuffer(privateKey);
        return secp256k1.publicKeyCreate(privateKey, false).slice(1);
      };
      exports.importPublic = function(publicKey) {
        publicKey = exports.toBuffer(publicKey);
        if (publicKey.length !== 64) {
          publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
      };
      exports.ecsign = function(msgHash, privateKey) {
        var sig = secp256k1.sign(msgHash, privateKey);
        var ret = {};
        ret.r = sig.signature.slice(0, 32);
        ret.s = sig.signature.slice(32, 64);
        ret.v = sig.recovery + 27;
        return ret;
      };
      exports.hashPersonalMessage = function(message) {
        var prefix = exports.toBuffer("Ethereum Signed Message:\n" + message.length.toString());
        return exports.keccak(Buffer4.concat([prefix, message]));
      };
      exports.ecrecover = function(msgHash, v, r, s) {
        var signature = Buffer4.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
        var recovery = v - 27;
        if (recovery !== 0 && recovery !== 1) {
          throw new Error("Invalid signature v value");
        }
        var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
        return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
      };
      exports.toRpcSig = function(v, r, s) {
        if (v !== 27 && v !== 28) {
          throw new Error("Invalid recovery id");
        }
        return exports.bufferToHex(Buffer4.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
      };
      exports.fromRpcSig = function(sig) {
        sig = exports.toBuffer(sig);
        if (sig.length !== 65) {
          throw new Error("Invalid signature length");
        }
        var v = sig[64];
        if (v < 27) {
          v += 27;
        }
        return {
          v,
          r: sig.slice(0, 32),
          s: sig.slice(32, 64)
        };
      };
      exports.privateToAddress = function(privateKey) {
        return exports.publicToAddress(privateToPublic(privateKey));
      };
      exports.isValidAddress = function(address) {
        return /^0x[0-9a-fA-F]{40}$/.test(address);
      };
      exports.isZeroAddress = function(address) {
        var zeroAddress = exports.zeroAddress();
        return zeroAddress === exports.addHexPrefix(address);
      };
      exports.toChecksumAddress = function(address) {
        address = exports.stripHexPrefix(address).toLowerCase();
        var hash = exports.keccak(address).toString("hex");
        var ret = "0x";
        for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
          } else {
            ret += address[i];
          }
        }
        return ret;
      };
      exports.isValidChecksumAddress = function(address) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
      };
      exports.generateAddress = function(from3, nonce) {
        from3 = exports.toBuffer(from3);
        nonce = new BN(nonce);
        if (nonce.isZero()) {
          nonce = null;
        } else {
          nonce = Buffer4.from(nonce.toArray());
        }
        return exports.rlphash([from3, nonce]).slice(-20);
      };
      exports.isPrecompiled = function(address) {
        var a = exports.unpad(address);
        return a.length === 1 && a[0] >= 1 && a[0] <= 8;
      };
      exports.addHexPrefix = function(str) {
        if (typeof str !== "string") {
          return str;
        }
        return exports.isHexPrefixed(str) ? str : "0x" + str;
      };
      exports.isValidSignature = function(v, r, s, homestead) {
        var SECP256K1_N_DIV_2 = new BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
        var SECP256K1_N = new BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
        if (r.length !== 32 || s.length !== 32) {
          return false;
        }
        if (v !== 27 && v !== 28) {
          return false;
        }
        r = new BN(r);
        s = new BN(s);
        if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
          return false;
        }
        if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
          return false;
        }
        return true;
      };
      exports.baToJSON = function(ba) {
        if (Buffer4.isBuffer(ba)) {
          return "0x" + ba.toString("hex");
        } else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
          }
          return array;
        }
      };
      exports.defineProperties = function(self2, fields, data) {
        self2.raw = [];
        self2._fields = [];
        self2.toJSON = function(label) {
          if (label) {
            var obj = {};
            self2._fields.forEach(function(field) {
              obj[field] = "0x" + self2[field].toString("hex");
            });
            return obj;
          }
          return exports.baToJSON(this.raw);
        };
        self2.serialize = function serialize() {
          return rlp.encode(self2.raw);
        };
        fields.forEach(function(field, i) {
          self2._fields.push(field.name);
          function getter() {
            return self2.raw[i];
          }
          function setter(v) {
            v = exports.toBuffer(v);
            if (v.toString("hex") === "00" && !field.allowZero) {
              v = Buffer4.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
              v = exports.stripZeros(v);
              assert3(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            } else if (!(field.allowZero && v.length === 0) && field.length) {
              assert3(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self2.raw[i] = v;
          }
          Object.defineProperty(self2, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
          });
          if (field.default) {
            self2[field.name] = field.default;
          }
          if (field.alias) {
            Object.defineProperty(self2, field.alias, {
              enumerable: false,
              configurable: true,
              set: setter,
              get: getter
            });
          }
        });
        if (data) {
          if (typeof data === "string") {
            data = Buffer4.from(exports.stripHexPrefix(data), "hex");
          }
          if (Buffer4.isBuffer(data)) {
            data = rlp.decode(data);
          }
          if (Array.isArray(data)) {
            if (data.length > self2._fields.length) {
              throw new Error("wrong number of fields in data");
            }
            data.forEach(function(d, i) {
              self2[self2._fields[i]] = exports.toBuffer(d);
            });
          } else if ((typeof data === "undefined" ? "undefined" : _typeof(data)) === "object") {
            var keys2 = Object.keys(data);
            fields.forEach(function(field) {
              if (keys2.indexOf(field.name) !== -1) self2[field.name] = data[field.name];
              if (keys2.indexOf(field.alias) !== -1) self2[field.alias] = data[field.alias];
            });
          } else {
            throw new Error("invalid data");
          }
        }
      };
    }
  });

  // node_modules/ethereumjs-abi/node_modules/bn.js/lib/bn.js
  var require_bn9 = __commonJS({
    "node_modules/ethereumjs-abi/node_modules/bn.js/lib/bn.js"(exports, module) {
      init_process();
      init_buffer();
      (function(module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base2, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer4;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN.prototype._init = function init3(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base2, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off3 = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off3 & 67108863;
              this.words[j + 1] = w >>> 26 - off3 & 67108863;
              off3 += 24;
              if (off3 >= 26) {
                off3 -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off3 = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off3;
              this.words[j] |= w & 67108863;
              if (off3 >= 18) {
                off3 -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off3 += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN.prototype.copy = function copy3(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString4(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off3 = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off3 | carry) & 16777215).toString(16);
              carry = w >>> 24 - off3 & 16777215;
              off3 += 2;
              if (off3 >= 26) {
                off3 -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON3() {
          return this.toString(16);
        };
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength3 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength3);
          assert3(byteLength3 <= reqLength, "byte array longer than desired length");
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength3; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off3 = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off3] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength3() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off3 = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off3 + 1);
          if (val) {
            this.words[off3] = this.words[off3] | 1 << wbit;
          } else {
            this.words[off3] = this.words[off3] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          this.length = num === 0 ? 1 : this.length;
          return this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert3(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert3(p.negative === 0);
          assert3(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert3(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert3(a.negative === 0, "red works only with positives");
          assert3(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert3((a.negative | b.negative) === 0, "red works only with positives");
          assert3(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert3(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js
  var require_secp256k1_lib2 = __commonJS({
    "node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var BN = require_bn9();
      var EC = require_elliptic().ec;
      var ec = new EC("secp256k1");
      var ecparams = ec.curve;
      exports.privateKeyExport = function(privateKey, compressed) {
        var d = new BN(privateKey);
        if (d.ucmp(ecparams.n) >= 0) {
          throw new Error("couldn't export to DER format");
        }
        var point = ec.g.mul(d);
        return toPublicKey(point.getX(), point.getY(), compressed);
      };
      exports.privateKeyModInverse = function(privateKey) {
        var bn = new BN(privateKey);
        if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
          throw new Error("private key range is invalid");
        }
        return bn.invm(ecparams.n).toArrayLike(Buffer2, "be", 32);
      };
      exports.signatureImport = function(sigObj) {
        var r = new BN(sigObj.r);
        if (r.ucmp(ecparams.n) >= 0) {
          r = new BN(0);
        }
        var s = new BN(sigObj.s);
        if (s.ucmp(ecparams.n) >= 0) {
          s = new BN(0);
        }
        return Buffer2.concat([r.toArrayLike(Buffer2, "be", 32), s.toArrayLike(Buffer2, "be", 32)]);
      };
      exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
        var point = ec.keyFromPublic(publicKey);
        var scalar = new BN(privateKey);
        if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
          throw new Error("scalar was invalid (zero or overflow)");
        }
        var shared = point.pub.mul(scalar);
        return toPublicKey(shared.getX(), shared.getY(), compressed);
      };
      var toPublicKey = function toPublicKey2(x, y, compressed) {
        var publicKey = void 0;
        if (compressed) {
          publicKey = Buffer2.alloc(33);
          publicKey[0] = y.isOdd() ? 3 : 2;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
        } else {
          publicKey = Buffer2.alloc(65);
          publicKey[0] = 4;
          x.toArrayLike(Buffer2, "be", 32).copy(publicKey, 1);
          y.toArrayLike(Buffer2, "be", 32).copy(publicKey, 33);
        }
        return publicKey;
      };
    }
  });

  // node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js
  var require_der3 = __commonJS({
    "node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer2.from([
        // begin
        48,
        129,
        211,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        133,
        48,
        129,
        130,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        33,
        2,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        36,
        3,
        34,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer2.from([
        // begin
        48,
        130,
        1,
        19,
        2,
        1,
        1,
        4,
        32,
        // private key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        // middle
        160,
        129,
        165,
        48,
        129,
        162,
        2,
        1,
        1,
        48,
        44,
        6,
        7,
        42,
        134,
        72,
        206,
        61,
        1,
        1,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        255,
        255,
        252,
        47,
        48,
        6,
        4,
        1,
        0,
        4,
        1,
        7,
        4,
        65,
        4,
        121,
        190,
        102,
        126,
        249,
        220,
        187,
        172,
        85,
        160,
        98,
        149,
        206,
        135,
        11,
        7,
        2,
        155,
        252,
        219,
        45,
        206,
        40,
        217,
        89,
        242,
        129,
        91,
        22,
        248,
        23,
        152,
        72,
        58,
        218,
        119,
        38,
        163,
        196,
        101,
        93,
        164,
        251,
        252,
        14,
        17,
        8,
        168,
        253,
        23,
        180,
        72,
        166,
        133,
        84,
        25,
        156,
        71,
        208,
        143,
        251,
        16,
        212,
        184,
        2,
        33,
        0,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        254,
        186,
        174,
        220,
        230,
        175,
        72,
        160,
        59,
        191,
        210,
        94,
        140,
        208,
        54,
        65,
        65,
        2,
        1,
        1,
        161,
        68,
        3,
        66,
        0,
        // public key
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      exports.privateKeyExport = function(privateKey, publicKey, compressed) {
        var result = Buffer2.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
      };
      exports.privateKeyImport = function(privateKey) {
        var length = privateKey.length;
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 48) return null;
        index += 1;
        if (length < index + 1 || !(privateKey[index] & 128)) return null;
        var lenb = privateKey[index] & 127;
        index += 1;
        if (lenb < 1 || lenb > 2) return null;
        if (length < index + lenb) return null;
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len) return null;
        if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) {
          return null;
        }
        index += 3;
        if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) {
          return null;
        }
        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
      };
      exports.signatureImportLax = function(signature) {
        var r = Buffer2.alloc(32, 0);
        var s = Buffer2.alloc(32, 0);
        var length = signature.length;
        var index = 0;
        if (signature[index++] !== 48) {
          return null;
        }
        var lenbyte = signature[index++];
        if (lenbyte & 128) {
          index += lenbyte - 128;
          if (index > length) {
            return null;
          }
        }
        if (signature[index++] !== 2) {
          return null;
        }
        var rlen = signature[index++];
        if (rlen & 128) {
          lenbyte = rlen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1) {
          }
          for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
            rlen = (rlen << 8) + signature[index];
          }
        }
        if (rlen > length - index) {
          return null;
        }
        var rindex = index;
        index += rlen;
        if (signature[index++] !== 2) {
          return null;
        }
        var slen = signature[index++];
        if (slen & 128) {
          lenbyte = slen - 128;
          if (index + lenbyte > length) {
            return null;
          }
          for (; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1) {
          }
          for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
            slen = (slen << 8) + signature[index];
          }
        }
        if (slen > length - index) {
          return null;
        }
        var sindex = index;
        index += slen;
        for (; rlen > 0 && signature[rindex] === 0; rlen -= 1, rindex += 1) {
        }
        if (rlen > 32) {
          return null;
        }
        var rvalue = signature.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);
        for (; slen > 0 && signature[sindex] === 0; slen -= 1, sindex += 1) {
        }
        if (slen > 32) {
          return null;
        }
        var svalue = signature.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);
        return { r, s };
      };
    }
  });

  // node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-adapter.js
  var require_secp256k1_adapter2 = __commonJS({
    "node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1-adapter.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var secp256k1 = require_secp256k12();
      var secp256k1v3 = require_secp256k1_lib2();
      var der = require_der3();
      var privateKeyVerify = function privateKeyVerify2(privateKey) {
        if (privateKey.length !== 32) {
          return false;
        }
        return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
      };
      var privateKeyExport = function privateKeyExport2(privateKey, compressed) {
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
        return der.privateKeyExport(privateKey, publicKey, compressed);
      };
      var privateKeyImport = function privateKeyImport2(privateKey) {
        privateKey = der.privateKeyImport(privateKey);
        if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
          return privateKey;
        }
        throw new Error("couldn't import from DER format");
      };
      var privateKeyNegate = function privateKeyNegate2(privateKey) {
        return Buffer2.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
      };
      var privateKeyModInverse = function privateKeyModInverse2(privateKey) {
        if (privateKey.length !== 32) {
          throw new Error("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
      };
      var privateKeyTweakAdd = function privateKeyTweakAdd2(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
      };
      var privateKeyTweakMul = function privateKeyTweakMul2(privateKey, tweak) {
        return Buffer2.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
      };
      var publicKeyCreate = function publicKeyCreate2(privateKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
      };
      var publicKeyConvert = function publicKeyConvert2(publicKey, compressed) {
        return Buffer2.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
      };
      var publicKeyVerify = function publicKeyVerify2(publicKey) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          return false;
        }
        return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
      };
      var publicKeyTweakAdd = function publicKeyTweakAdd2(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      var publicKeyTweakMul = function publicKeyTweakMul2(publicKey, tweak, compressed) {
        return Buffer2.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
      };
      var publicKeyCombine = function publicKeyCombine2(publicKeys, compressed) {
        var keys2 = [];
        publicKeys.forEach(function(publicKey) {
          keys2.push(Uint8Array.from(publicKey));
        });
        return Buffer2.from(secp256k1.publicKeyCombine(keys2, compressed));
      };
      var signatureNormalize = function signatureNormalize2(signature) {
        return Buffer2.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
      };
      var signatureExport = function signatureExport2(signature) {
        return Buffer2.from(secp256k1.signatureExport(Uint8Array.from(signature)));
      };
      var signatureImport = function signatureImport2(signature) {
        return Buffer2.from(secp256k1.signatureImport(Uint8Array.from(signature)));
      };
      var signatureImportLax = function signatureImportLax2(signature) {
        if (signature.length === 0) {
          throw new RangeError("signature length is invalid");
        }
        var sigObj = der.signatureImportLax(signature);
        if (sigObj === null) {
          throw new Error("couldn't parse DER signature");
        }
        return secp256k1v3.signatureImport(sigObj);
      };
      var sign = function sign2(message, privateKey, options) {
        if (options === null) {
          throw new TypeError("options should be an Object");
        }
        var signOptions = void 0;
        if (options) {
          signOptions = {};
          if (options.data === null) {
            throw new TypeError("options.data should be a Buffer");
          }
          if (options.data) {
            if (options.data.length !== 32) {
              throw new RangeError("options.data length is invalid");
            }
            signOptions.data = new Uint8Array(options.data);
          }
          if (options.noncefn === null) {
            throw new TypeError("options.noncefn should be a Function");
          }
          if (options.noncefn) {
            signOptions.noncefn = function(message2, privateKey2, algo, data, attempt) {
              var bufferAlgo = algo != null ? Buffer2.from(algo) : null;
              var bufferData = data != null ? Buffer2.from(data) : null;
              var buffer = Buffer2.from("");
              if (options.noncefn) {
                buffer = options.noncefn(Buffer2.from(message2), Buffer2.from(privateKey2), bufferAlgo, bufferData, attempt);
              }
              return Uint8Array.from(buffer);
            };
          }
        }
        var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
        return {
          signature: Buffer2.from(sig.signature),
          recovery: sig.recid
        };
      };
      var verify = function verify2(message, signature, publicKey) {
        return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
      };
      var recover = function recover2(message, signature, recid, compressed) {
        return Buffer2.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
      };
      var ecdh = function ecdh2(publicKey, privateKey) {
        return Buffer2.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
      };
      var ecdhUnsafe = function ecdhUnsafe2(publicKey, privateKey, compressed) {
        if (publicKey.length !== 33 && publicKey.length !== 65) {
          throw new RangeError("public key length is invalid");
        }
        if (privateKey.length !== 32) {
          throw new RangeError("private key length is invalid");
        }
        return Buffer2.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
      };
      module.exports = {
        privateKeyVerify,
        privateKeyExport,
        privateKeyImport,
        privateKeyNegate,
        privateKeyModInverse,
        privateKeyTweakAdd,
        privateKeyTweakMul,
        publicKeyCreate,
        publicKeyConvert,
        publicKeyVerify,
        publicKeyTweakAdd,
        publicKeyTweakMul,
        publicKeyCombine,
        signatureNormalize,
        signatureExport,
        signatureImport,
        signatureImportLax,
        sign,
        verify,
        recover,
        ecdh,
        ecdhUnsafe
      };
    }
  });

  // node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js
  var require_dist8 = __commonJS({
    "node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _require = require_keccak3();
      var keccak224 = _require.keccak224;
      var keccak384 = _require.keccak384;
      var k256 = _require.keccak256;
      var keccak512 = _require.keccak512;
      var secp256k1 = require_secp256k1_adapter2();
      var assert3 = require_assert();
      var rlp = require_dist2();
      var BN = require_bn9();
      var createHash = require_browser3();
      exports.MAX_INTEGER = new BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
      exports.TWO_POW256 = new BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
      exports.SHA3_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
      exports.SHA3_NULL = new Buffer2(exports.SHA3_NULL_S, "hex");
      exports.SHA3_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
      exports.SHA3_RLP_ARRAY = new Buffer2(exports.SHA3_RLP_ARRAY_S, "hex");
      exports.SHA3_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
      exports.SHA3_RLP = new Buffer2(exports.SHA3_RLP_S, "hex");
      exports.BN = BN;
      exports.rlp = rlp;
      exports.secp256k1 = secp256k1;
      exports.zeros = function(bytes) {
        var buf = new Buffer2(bytes);
        buf.fill(0);
        return buf;
      };
      exports.setLengthLeft = exports.setLength = function(msg, length, right) {
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
          if (msg.length < length) {
            msg.copy(buf);
            return buf;
          }
          return msg.slice(0, length);
        } else {
          if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
          }
          return msg.slice(-length);
        }
      };
      exports.setLengthRight = function(msg, length) {
        return exports.setLength(msg, length, true);
      };
      exports.unpad = exports.stripZeros = function(a) {
        a = exports.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === "0") {
          a = a.slice(1);
          first = a[0];
        }
        return a;
      };
      exports.toBuffer = function(v) {
        if (!Buffer2.isBuffer(v)) {
          if (Array.isArray(v)) {
            v = new Buffer2(v);
          } else if (typeof v === "string") {
            if (exports.isHexPrefixed(v)) {
              v = new Buffer2(exports.padToEven(exports.stripHexPrefix(v)), "hex");
            } else {
              v = new Buffer2(v);
            }
          } else if (typeof v === "number") {
            v = exports.intToBuffer(v);
          } else if (v === null || v === void 0) {
            v = new Buffer2([]);
          } else if (v.toArray) {
            v = new Buffer2(v.toArray());
          } else {
            throw new Error("invalid type");
          }
        }
        return v;
      };
      exports.intToHex = function(i) {
        assert3(i % 1 === 0, "number is not a integer");
        assert3(i >= 0, "number must be positive");
        var hex = i.toString(16);
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      };
      exports.intToBuffer = function(i) {
        var hex = exports.intToHex(i);
        return new Buffer2(hex.slice(2), "hex");
      };
      exports.bufferToInt = function(buf) {
        return parseInt(exports.bufferToHex(buf), 16);
      };
      exports.bufferToHex = function(buf) {
        buf = exports.toBuffer(buf);
        if (buf.length === 0) {
          return 0;
        }
        return "0x" + buf.toString("hex");
      };
      exports.fromSigned = function(num) {
        return new BN(num).fromTwos(256);
      };
      exports.toUnsigned = function(num) {
        return new Buffer2(num.toTwos(256).toArray());
      };
      exports.sha3 = function(a, bytes) {
        a = exports.toBuffer(a);
        if (!bytes) bytes = 256;
        switch (bytes) {
          case 224: {
            return keccak224(a);
          }
          case 256: {
            return k256(a);
          }
          case 384: {
            return keccak384(a);
          }
          case 512: {
            return keccak512(a);
          }
          default: {
            throw new Error("Invalid algorithm: keccak" + bytes);
          }
        }
      };
      exports.sha256 = function(a) {
        a = exports.toBuffer(a);
        return createHash("sha256").update(a).digest();
      };
      exports.ripemd160 = function(a, padded) {
        a = exports.toBuffer(a);
        var hash = createHash("rmd160").update(a).digest();
        if (padded === true) {
          return exports.setLength(hash, 32);
        } else {
          return hash;
        }
      };
      exports.rlphash = function(a) {
        return exports.sha3(rlp.encode(a));
      };
      exports.isValidPrivate = function(privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
      };
      exports.isValidPublic = function(publicKey, sanitize) {
        if (publicKey.length === 64) {
          return secp256k1.publicKeyVerify(Buffer2.concat([new Buffer2([4]), publicKey]));
        }
        if (!sanitize) {
          return false;
        }
        return secp256k1.publicKeyVerify(publicKey);
      };
      exports.pubToAddress = exports.publicToAddress = function(pubKey, sanitize) {
        pubKey = exports.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
        }
        assert3(pubKey.length === 64);
        return exports.sha3(pubKey).slice(-20);
      };
      var privateToPublic = exports.privateToPublic = function(privateKey) {
        privateKey = exports.toBuffer(privateKey);
        return secp256k1.publicKeyCreate(privateKey, false).slice(1);
      };
      exports.importPublic = function(publicKey) {
        publicKey = exports.toBuffer(publicKey);
        if (publicKey.length !== 64) {
          publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
      };
      exports.ecsign = function(msgHash, privateKey) {
        var sig = secp256k1.sign(msgHash, privateKey);
        var ret = {};
        ret.r = sig.signature.slice(0, 32);
        ret.s = sig.signature.slice(32, 64);
        ret.v = sig.recovery + 27;
        return ret;
      };
      exports.ecrecover = function(msgHash, v, r, s) {
        var signature = Buffer2.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
        var recovery = exports.bufferToInt(v) - 27;
        if (recovery !== 0 && recovery !== 1) {
          throw new Error("Invalid signature v value");
        }
        var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
        return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
      };
      exports.toRpcSig = function(v, r, s) {
        return exports.bufferToHex(Buffer2.concat([r, s, exports.toBuffer(v - 27)]));
      };
      exports.fromRpcSig = function(sig) {
        sig = exports.toBuffer(sig);
        var v = sig[64];
        if (v < 27) {
          v += 27;
        }
        return {
          v,
          r: sig.slice(0, 32),
          s: sig.slice(32, 64)
        };
      };
      exports.privateToAddress = function(privateKey) {
        return exports.publicToAddress(privateToPublic(privateKey));
      };
      exports.isValidAddress = function(address) {
        return /^0x[0-9a-fA-F]{40}$/i.test(address);
      };
      exports.toChecksumAddress = function(address) {
        address = exports.stripHexPrefix(address).toLowerCase();
        var hash = exports.sha3(address).toString("hex");
        var ret = "0x";
        for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
          } else {
            ret += address[i];
          }
        }
        return ret;
      };
      exports.isValidChecksumAddress = function(address) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
      };
      exports.generateAddress = function(from3, nonce) {
        from3 = exports.toBuffer(from3);
        nonce = new BN(nonce);
        if (nonce.isZero()) {
          nonce = null;
        } else {
          nonce = new Buffer2(nonce.toArray());
        }
        return exports.rlphash([from3, nonce]).slice(-20);
      };
      exports.isPrecompiled = function(address) {
        var a = exports.unpad(address);
        return a.length === 1 && a[0] > 0 && a[0] < 5;
      };
      exports.isHexPrefixed = function(str) {
        return str.slice(0, 2) === "0x";
      };
      exports.stripHexPrefix = function(str) {
        if (typeof str !== "string") {
          return str;
        }
        return exports.isHexPrefixed(str) ? str.slice(2) : str;
      };
      exports.addHexPrefix = function(str) {
        if (typeof str !== "string") {
          return str;
        }
        return exports.isHexPrefixed(str) ? str : "0x" + str;
      };
      exports.padToEven = function(a) {
        if (a.length % 2) a = "0" + a;
        return a;
      };
      exports.baToJSON = function(ba) {
        if (Buffer2.isBuffer(ba)) {
          return "0x" + ba.toString("hex");
        } else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
          }
          return array;
        }
      };
      exports.defineProperties = function(self2, fields, data) {
        self2.raw = [];
        self2._fields = [];
        self2.toJSON = function(label) {
          if (label) {
            var obj = {};
            self2._fields.forEach(function(field) {
              obj[field] = "0x" + self2[field].toString("hex");
            });
            return obj;
          }
          return exports.baToJSON(this.raw);
        };
        self2.serialize = function serialize() {
          return rlp.encode(self2.raw);
        };
        fields.forEach(function(field, i) {
          self2._fields.push(field.name);
          function getter() {
            return self2.raw[i];
          }
          function setter(v) {
            v = exports.toBuffer(v);
            if (v.toString("hex") === "00" && !field.allowZero) {
              v = new Buffer2([]);
            }
            if (field.allowLess && field.length) {
              v = exports.stripZeros(v);
              assert3(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            } else if (!(field.allowZero && v.length === 0) && field.length) {
              assert3(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self2.raw[i] = v;
          }
          Object.defineProperty(self2, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
          });
          if (field.default) {
            self2[field.name] = field.default;
          }
          if (field.alias) {
            Object.defineProperty(self2, field.alias, {
              enumerable: false,
              configurable: true,
              set: setter,
              get: getter
            });
          }
        });
        if (data) {
          if (typeof data === "string") {
            data = new Buffer2(exports.stripHexPrefix(data), "hex");
          }
          if (Buffer2.isBuffer(data)) {
            data = rlp.decode(data);
          }
          if (Array.isArray(data)) {
            if (data.length > self2._fields.length) {
              throw new Error("wrong number of fields in data");
            }
            data.forEach(function(d, i) {
              self2[self2._fields[i]] = exports.toBuffer(d);
            });
          } else if ((typeof data === "undefined" ? "undefined" : _typeof(data)) === "object") {
            for (var prop in data) {
              if (self2._fields.indexOf(prop) !== -1) {
                self2[prop] = data[prop];
              }
            }
          } else {
            throw new Error("invalid data");
          }
        }
      };
    }
  });

  // node_modules/ethereumjs-abi/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/ethereumjs-abi/lib/index.js"(exports, module) {
      init_process();
      init_buffer();
      var utils = require_dist8();
      var BN = require_bn9();
      var ABI = function() {
      };
      function elementaryName(name2) {
        if (name2.startsWith("int[")) {
          return "int256" + name2.slice(3);
        } else if (name2 === "int") {
          return "int256";
        } else if (name2.startsWith("uint[")) {
          return "uint256" + name2.slice(4);
        } else if (name2 === "uint") {
          return "uint256";
        } else if (name2.startsWith("fixed[")) {
          return "fixed128x128" + name2.slice(5);
        } else if (name2 === "fixed") {
          return "fixed128x128";
        } else if (name2.startsWith("ufixed[")) {
          return "ufixed128x128" + name2.slice(6);
        } else if (name2 === "ufixed") {
          return "ufixed128x128";
        }
        return name2;
      }
      ABI.eventID = function(name2, types) {
        var sig = name2 + "(" + types.map(elementaryName).join(",") + ")";
        return utils.sha3(new Buffer2(sig));
      };
      ABI.methodID = function(name2, types) {
        return ABI.eventID(name2, types).slice(0, 4);
      };
      function parseTypeN(type2) {
        return parseInt(/^\D+(\d+)$/.exec(type2)[1], 10);
      }
      function parseTypeNxM(type2) {
        var tmp = /^\D+(\d+)x(\d+)$/.exec(type2);
        return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];
      }
      function parseTypeArray(type2) {
        var tmp = type2.match(/(.*)\[(.*?)\]$/);
        if (tmp) {
          return tmp[2] === "" ? "dynamic" : parseInt(tmp[2], 10);
        }
        return null;
      }
      function parseNumber(arg) {
        var type2 = typeof arg;
        if (type2 === "string") {
          if (utils.isHexPrefixed(arg)) {
            return new BN(utils.stripHexPrefix(arg), 16);
          } else {
            return new BN(arg, 10);
          }
        } else if (type2 === "number") {
          return new BN(arg);
        } else if (arg.toArray) {
          return arg;
        } else {
          throw new Error("Argument is not a number");
        }
      }
      function parseSignature(sig) {
        var tmp = /^(\w+)\((.+)\)$/.exec(sig);
        if (tmp.length !== 3) {
          throw new Error("Invalid method signature");
        }
        var args = /^(.+)\):\((.+)$/.exec(tmp[2]);
        if (args !== null && args.length === 3) {
          return {
            method: tmp[1],
            args: args[1].split(","),
            retargs: args[2].split(",")
          };
        } else {
          return {
            method: tmp[1],
            args: tmp[2].split(",")
          };
        }
      }
      function encodeSingle(type2, arg) {
        var size, num, ret, i;
        if (type2 === "address") {
          return encodeSingle("uint160", parseNumber(arg));
        } else if (type2 === "bool") {
          return encodeSingle("uint8", arg ? 1 : 0);
        } else if (type2 === "string") {
          return encodeSingle("bytes", new Buffer2(arg, "utf8"));
        } else if (isArray4(type2)) {
          if (typeof arg.length === "undefined") {
            throw new Error("Not an array?");
          }
          size = parseTypeArray(type2);
          if (size !== "dynamic" && size !== 0 && arg.length > size) {
            throw new Error("Elements exceed array size: " + size);
          }
          ret = [];
          type2 = type2.slice(0, type2.lastIndexOf("["));
          if (typeof arg === "string") {
            arg = JSON.parse(arg);
          }
          for (i in arg) {
            ret.push(encodeSingle(type2, arg[i]));
          }
          if (size === "dynamic") {
            var length = encodeSingle("uint256", arg.length);
            ret.unshift(length);
          }
          return Buffer2.concat(ret);
        } else if (type2 === "bytes") {
          arg = new Buffer2(arg);
          ret = Buffer2.concat([encodeSingle("uint256", arg.length), arg]);
          if (arg.length % 32 !== 0) {
            ret = Buffer2.concat([ret, utils.zeros(32 - arg.length % 32)]);
          }
          return ret;
        } else if (type2.startsWith("bytes")) {
          size = parseTypeN(type2);
          if (size < 1 || size > 32) {
            throw new Error("Invalid bytes<N> width: " + size);
          }
          return utils.setLengthRight(arg, 32);
        } else if (type2.startsWith("uint")) {
          size = parseTypeN(type2);
          if (size % 8 || size < 8 || size > 256) {
            throw new Error("Invalid uint<N> width: " + size);
          }
          num = parseNumber(arg);
          if (num.bitLength() > size) {
            throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
          }
          if (num < 0) {
            throw new Error("Supplied uint is negative");
          }
          return num.toArrayLike(Buffer2, "be", 32);
        } else if (type2.startsWith("int")) {
          size = parseTypeN(type2);
          if (size % 8 || size < 8 || size > 256) {
            throw new Error("Invalid int<N> width: " + size);
          }
          num = parseNumber(arg);
          if (num.bitLength() > size) {
            throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
          }
          return num.toTwos(256).toArrayLike(Buffer2, "be", 32);
        } else if (type2.startsWith("ufixed")) {
          size = parseTypeNxM(type2);
          num = parseNumber(arg);
          if (num < 0) {
            throw new Error("Supplied ufixed is negative");
          }
          return encodeSingle("uint256", num.mul(new BN(2).pow(new BN(size[1]))));
        } else if (type2.startsWith("fixed")) {
          size = parseTypeNxM(type2);
          return encodeSingle("int256", parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));
        }
        throw new Error("Unsupported or invalid type: " + type2);
      }
      function decodeSingle(parsedType, data, offset) {
        if (typeof parsedType === "string") {
          parsedType = parseType(parsedType);
        }
        var size, num, ret, i;
        if (parsedType.name === "address") {
          return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer2, "be", 20).toString("hex");
        } else if (parsedType.name === "bool") {
          return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString();
        } else if (parsedType.name === "string") {
          var bytes = decodeSingle(parsedType.rawType, data, offset);
          return new Buffer2(bytes, "utf8").toString();
        } else if (parsedType.isArray) {
          ret = [];
          size = parsedType.size;
          if (parsedType.size === "dynamic") {
            offset = decodeSingle("uint256", data, offset).toNumber();
            size = decodeSingle("uint256", data, offset).toNumber();
            offset = offset + 32;
          }
          for (i = 0; i < size; i++) {
            var decoded = decodeSingle(parsedType.subArray, data, offset);
            ret.push(decoded);
            offset += parsedType.subArray.memoryUsage;
          }
          return ret;
        } else if (parsedType.name === "bytes") {
          offset = decodeSingle("uint256", data, offset).toNumber();
          size = decodeSingle("uint256", data, offset).toNumber();
          return data.slice(offset + 32, offset + 32 + size);
        } else if (parsedType.name.startsWith("bytes")) {
          return data.slice(offset, offset + parsedType.size);
        } else if (parsedType.name.startsWith("uint")) {
          num = new BN(data.slice(offset, offset + 32), 16, "be");
          if (num.bitLength() > parsedType.size) {
            throw new Error("Decoded int exceeds width: " + parsedType.size + " vs " + num.bitLength());
          }
          return num;
        } else if (parsedType.name.startsWith("int")) {
          num = new BN(data.slice(offset, offset + 32), 16, "be").fromTwos(256);
          if (num.bitLength() > parsedType.size) {
            throw new Error("Decoded uint exceeds width: " + parsedType.size + " vs " + num.bitLength());
          }
          return num;
        } else if (parsedType.name.startsWith("ufixed")) {
          size = new BN(2).pow(new BN(parsedType.size[1]));
          num = decodeSingle("uint256", data, offset);
          if (!num.mod(size).isZero()) {
            throw new Error("Decimals not supported yet");
          }
          return num.div(size);
        } else if (parsedType.name.startsWith("fixed")) {
          size = new BN(2).pow(new BN(parsedType.size[1]));
          num = decodeSingle("int256", data, offset);
          if (!num.mod(size).isZero()) {
            throw new Error("Decimals not supported yet");
          }
          return num.div(size);
        }
        throw new Error("Unsupported or invalid type: " + parsedType.name);
      }
      function parseType(type2) {
        var size;
        var ret;
        if (isArray4(type2)) {
          size = parseTypeArray(type2);
          var subArray = type2.slice(0, type2.lastIndexOf("["));
          subArray = parseType(subArray);
          ret = {
            isArray: true,
            name: type2,
            size,
            memoryUsage: size === "dynamic" ? 32 : subArray.memoryUsage * size,
            subArray
          };
          return ret;
        } else {
          var rawType;
          switch (type2) {
            case "address":
              rawType = "uint160";
              break;
            case "bool":
              rawType = "uint8";
              break;
            case "string":
              rawType = "bytes";
              break;
          }
          ret = {
            rawType,
            name: type2,
            memoryUsage: 32
          };
          if (type2.startsWith("bytes") && type2 !== "bytes" || type2.startsWith("uint") || type2.startsWith("int")) {
            ret.size = parseTypeN(type2);
          } else if (type2.startsWith("ufixed") || type2.startsWith("fixed")) {
            ret.size = parseTypeNxM(type2);
          }
          if (type2.startsWith("bytes") && type2 !== "bytes" && (ret.size < 1 || ret.size > 32)) {
            throw new Error("Invalid bytes<N> width: " + ret.size);
          }
          if ((type2.startsWith("uint") || type2.startsWith("int")) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
            throw new Error("Invalid int/uint<N> width: " + ret.size);
          }
          return ret;
        }
      }
      function isDynamic(type2) {
        return type2 === "string" || type2 === "bytes" || parseTypeArray(type2) === "dynamic";
      }
      function isArray4(type2) {
        return type2.lastIndexOf("]") === type2.length - 1;
      }
      ABI.rawEncode = function(types, values) {
        var output = [];
        var data = [];
        var headLength = 32 * types.length;
        for (var i in types) {
          var type2 = elementaryName(types[i]);
          var value = values[i];
          var cur = encodeSingle(type2, value);
          if (isDynamic(type2)) {
            output.push(encodeSingle("uint256", headLength));
            data.push(cur);
            headLength += cur.length;
          } else {
            output.push(cur);
          }
        }
        return Buffer2.concat(output.concat(data));
      };
      ABI.rawDecode = function(types, data) {
        var ret = [];
        data = new Buffer2(data);
        var offset = 0;
        for (var i in types) {
          var type2 = elementaryName(types[i]);
          var parsed = parseType(type2, data, offset);
          var decoded = decodeSingle(parsed, data, offset);
          offset += parsed.memoryUsage;
          ret.push(decoded);
        }
        return ret;
      };
      ABI.simpleEncode = function(method) {
        var args = Array.prototype.slice.call(arguments).slice(1);
        var sig = parseSignature(method);
        if (args.length !== sig.args.length) {
          throw new Error("Argument count mismatch");
        }
        return Buffer2.concat([ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args)]);
      };
      ABI.simpleDecode = function(method, data) {
        var sig = parseSignature(method);
        if (!sig.retargs) {
          throw new Error("No return values in method");
        }
        return ABI.rawDecode(sig.retargs, data);
      };
      function stringify2(type2, value) {
        if (type2.startsWith("address") || type2.startsWith("bytes")) {
          return "0x" + value.toString("hex");
        } else {
          return value.toString();
        }
      }
      ABI.stringify = function(types, values) {
        var ret = [];
        for (var i in types) {
          var type2 = types[i];
          var value = values[i];
          if (/^[^\[]+\[.*\]$/.test(type2)) {
            value = value.map(function(item) {
              return stringify2(type2, item);
            }).join(", ");
          } else {
            value = stringify2(type2, value);
          }
          ret.push(value);
        }
        return ret;
      };
      ABI.solidityPack = function(types, values) {
        if (types.length !== values.length) {
          throw new Error("Number of types are not matching the values");
        }
        var size, num;
        var ret = [];
        for (var i = 0; i < types.length; i++) {
          var type2 = elementaryName(types[i]);
          var value = values[i];
          if (type2 === "bytes") {
            ret.push(value);
          } else if (type2 === "string") {
            ret.push(new Buffer2(value, "utf8"));
          } else if (type2 === "bool") {
            ret.push(new Buffer2(value ? "01" : "00", "hex"));
          } else if (type2 === "address") {
            ret.push(utils.setLengthLeft(value, 20));
          } else if (type2.startsWith("bytes")) {
            size = parseTypeN(type2);
            if (size < 1 || size > 32) {
              throw new Error("Invalid bytes<N> width: " + size);
            }
            ret.push(utils.setLengthRight(value, size));
          } else if (type2.startsWith("uint")) {
            size = parseTypeN(type2);
            if (size % 8 || size < 8 || size > 256) {
              throw new Error("Invalid uint<N> width: " + size);
            }
            num = parseNumber(value);
            if (num.bitLength() > size) {
              throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
            }
            ret.push(num.toArrayLike(Buffer2, "be", size / 8));
          } else if (type2.startsWith("int")) {
            size = parseTypeN(type2);
            if (size % 8 || size < 8 || size > 256) {
              throw new Error("Invalid int<N> width: " + size);
            }
            num = parseNumber(value);
            if (num.bitLength() > size) {
              throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
            }
            ret.push(num.toTwos(size).toArrayLike(Buffer2, "be", size / 8));
          } else {
            throw new Error("Unsupported or invalid type: " + type2);
          }
        }
        return Buffer2.concat(ret);
      };
      ABI.soliditySHA3 = function(types, values) {
        return utils.sha3(ABI.solidityPack(types, values));
      };
      ABI.soliditySHA256 = function(types, values) {
        return utils.sha256(ABI.solidityPack(types, values));
      };
      ABI.solidityRIPEMD160 = function(types, values) {
        return utils.ripemd160(ABI.solidityPack(types, values), true);
      };
      function isNumeric(c) {
        return c >= "0" && c <= "9";
      }
      ABI.fromSerpent = function(sig) {
        var ret = [];
        for (var i = 0; i < sig.length; i++) {
          var type2 = sig[i];
          if (type2 === "s") {
            ret.push("bytes");
          } else if (type2 === "b") {
            var tmp = "bytes";
            var j = i + 1;
            while (j < sig.length && isNumeric(sig[j])) {
              tmp += sig[j] - "0";
              j++;
            }
            i = j - 1;
            ret.push(tmp);
          } else if (type2 === "i") {
            ret.push("int256");
          } else if (type2 === "a") {
            ret.push("int256[]");
          } else {
            throw new Error("Unsupported or invalid type: " + type2);
          }
        }
        return ret;
      };
      ABI.toSerpent = function(types) {
        var ret = [];
        for (var i = 0; i < types.length; i++) {
          var type2 = types[i];
          if (type2 === "bytes") {
            ret.push("s");
          } else if (type2.startsWith("bytes")) {
            ret.push("b" + parseTypeN(type2));
          } else if (type2 === "int256") {
            ret.push("i");
          } else if (type2 === "int256[]") {
            ret.push("a");
          } else {
            throw new Error("Unsupported or invalid type: " + type2);
          }
        }
        return ret.join("");
      };
      module.exports = ABI;
    }
  });

  // node_modules/ethereumjs-abi/index.js
  var require_ethereumjs_abi = __commonJS({
    "node_modules/ethereumjs-abi/index.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_lib4();
    }
  });

  // node_modules/tweetnacl/nacl-fast.js
  var require_nacl_fast = __commonJS({
    "node_modules/tweetnacl/nacl-fast.js"(exports, module) {
      init_process();
      init_buffer();
      (function(nacl) {
        "use strict";
        var gf = function(init3) {
          var i, r = new Float64Array(16);
          if (init3) for (i = 0; i < init3.length; i++) r[i] = init3[i];
          return r;
        };
        var randombytes = function() {
          throw new Error("no PRNG");
        };
        var _0 = new Uint8Array(16);
        var _9 = new Uint8Array(32);
        _9[0] = 9;
        var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D2 = gf([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X = gf([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y = gf([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = gf([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
        function ts64(x, i, h, l) {
          x[i] = h >> 24 & 255;
          x[i + 1] = h >> 16 & 255;
          x[i + 2] = h >> 8 & 255;
          x[i + 3] = h & 255;
          x[i + 4] = l >> 24 & 255;
          x[i + 5] = l >> 16 & 255;
          x[i + 6] = l >> 8 & 255;
          x[i + 7] = l & 255;
        }
        function vn(x, xi, y, yi, n) {
          var i, d = 0;
          for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
          return (1 & d - 1 >>> 8) - 1;
        }
        function crypto_verify_16(x, xi, y, yi) {
          return vn(x, xi, y, yi, 16);
        }
        function crypto_verify_32(x, xi, y, yi) {
          return vn(x, xi, y, yi, 32);
        }
        function core_salsa20(o, p, k, c) {
          var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
          var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
          for (var i = 0; i < 20; i += 2) {
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 32 - 7;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 32 - 13;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 32 - 7;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 32 - 13;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 32 - 7;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 32 - 13;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 32 - 7;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 32 - 13;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 32 - 7;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 32 - 13;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 32 - 7;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 32 - 13;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 32 - 7;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 32 - 13;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 32 - 7;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 32 - 13;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
          }
          x0 = x0 + j0 | 0;
          x1 = x1 + j1 | 0;
          x2 = x2 + j2 | 0;
          x3 = x3 + j3 | 0;
          x4 = x4 + j4 | 0;
          x5 = x5 + j5 | 0;
          x6 = x6 + j6 | 0;
          x7 = x7 + j7 | 0;
          x8 = x8 + j8 | 0;
          x9 = x9 + j9 | 0;
          x10 = x10 + j10 | 0;
          x11 = x11 + j11 | 0;
          x12 = x12 + j12 | 0;
          x13 = x13 + j13 | 0;
          x14 = x14 + j14 | 0;
          x15 = x15 + j15 | 0;
          o[0] = x0 >>> 0 & 255;
          o[1] = x0 >>> 8 & 255;
          o[2] = x0 >>> 16 & 255;
          o[3] = x0 >>> 24 & 255;
          o[4] = x1 >>> 0 & 255;
          o[5] = x1 >>> 8 & 255;
          o[6] = x1 >>> 16 & 255;
          o[7] = x1 >>> 24 & 255;
          o[8] = x2 >>> 0 & 255;
          o[9] = x2 >>> 8 & 255;
          o[10] = x2 >>> 16 & 255;
          o[11] = x2 >>> 24 & 255;
          o[12] = x3 >>> 0 & 255;
          o[13] = x3 >>> 8 & 255;
          o[14] = x3 >>> 16 & 255;
          o[15] = x3 >>> 24 & 255;
          o[16] = x4 >>> 0 & 255;
          o[17] = x4 >>> 8 & 255;
          o[18] = x4 >>> 16 & 255;
          o[19] = x4 >>> 24 & 255;
          o[20] = x5 >>> 0 & 255;
          o[21] = x5 >>> 8 & 255;
          o[22] = x5 >>> 16 & 255;
          o[23] = x5 >>> 24 & 255;
          o[24] = x6 >>> 0 & 255;
          o[25] = x6 >>> 8 & 255;
          o[26] = x6 >>> 16 & 255;
          o[27] = x6 >>> 24 & 255;
          o[28] = x7 >>> 0 & 255;
          o[29] = x7 >>> 8 & 255;
          o[30] = x7 >>> 16 & 255;
          o[31] = x7 >>> 24 & 255;
          o[32] = x8 >>> 0 & 255;
          o[33] = x8 >>> 8 & 255;
          o[34] = x8 >>> 16 & 255;
          o[35] = x8 >>> 24 & 255;
          o[36] = x9 >>> 0 & 255;
          o[37] = x9 >>> 8 & 255;
          o[38] = x9 >>> 16 & 255;
          o[39] = x9 >>> 24 & 255;
          o[40] = x10 >>> 0 & 255;
          o[41] = x10 >>> 8 & 255;
          o[42] = x10 >>> 16 & 255;
          o[43] = x10 >>> 24 & 255;
          o[44] = x11 >>> 0 & 255;
          o[45] = x11 >>> 8 & 255;
          o[46] = x11 >>> 16 & 255;
          o[47] = x11 >>> 24 & 255;
          o[48] = x12 >>> 0 & 255;
          o[49] = x12 >>> 8 & 255;
          o[50] = x12 >>> 16 & 255;
          o[51] = x12 >>> 24 & 255;
          o[52] = x13 >>> 0 & 255;
          o[53] = x13 >>> 8 & 255;
          o[54] = x13 >>> 16 & 255;
          o[55] = x13 >>> 24 & 255;
          o[56] = x14 >>> 0 & 255;
          o[57] = x14 >>> 8 & 255;
          o[58] = x14 >>> 16 & 255;
          o[59] = x14 >>> 24 & 255;
          o[60] = x15 >>> 0 & 255;
          o[61] = x15 >>> 8 & 255;
          o[62] = x15 >>> 16 & 255;
          o[63] = x15 >>> 24 & 255;
        }
        function core_hsalsa20(o, p, k, c) {
          var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
          var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
          for (var i = 0; i < 20; i += 2) {
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 32 - 7;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 32 - 13;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 32 - 7;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 32 - 13;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 32 - 7;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 32 - 13;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 32 - 7;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 32 - 13;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 32 - 7;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 32 - 13;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 32 - 7;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 32 - 13;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 32 - 7;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 32 - 13;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 32 - 7;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 32 - 13;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
          }
          o[0] = x0 >>> 0 & 255;
          o[1] = x0 >>> 8 & 255;
          o[2] = x0 >>> 16 & 255;
          o[3] = x0 >>> 24 & 255;
          o[4] = x5 >>> 0 & 255;
          o[5] = x5 >>> 8 & 255;
          o[6] = x5 >>> 16 & 255;
          o[7] = x5 >>> 24 & 255;
          o[8] = x10 >>> 0 & 255;
          o[9] = x10 >>> 8 & 255;
          o[10] = x10 >>> 16 & 255;
          o[11] = x10 >>> 24 & 255;
          o[12] = x15 >>> 0 & 255;
          o[13] = x15 >>> 8 & 255;
          o[14] = x15 >>> 16 & 255;
          o[15] = x15 >>> 24 & 255;
          o[16] = x6 >>> 0 & 255;
          o[17] = x6 >>> 8 & 255;
          o[18] = x6 >>> 16 & 255;
          o[19] = x6 >>> 24 & 255;
          o[20] = x7 >>> 0 & 255;
          o[21] = x7 >>> 8 & 255;
          o[22] = x7 >>> 16 & 255;
          o[23] = x7 >>> 24 & 255;
          o[24] = x8 >>> 0 & 255;
          o[25] = x8 >>> 8 & 255;
          o[26] = x8 >>> 16 & 255;
          o[27] = x8 >>> 24 & 255;
          o[28] = x9 >>> 0 & 255;
          o[29] = x9 >>> 8 & 255;
          o[30] = x9 >>> 16 & 255;
          o[31] = x9 >>> 24 & 255;
        }
        function crypto_core_salsa20(out, inp, k, c) {
          core_salsa20(out, inp, k, c);
        }
        function crypto_core_hsalsa20(out, inp, k, c) {
          core_hsalsa20(out, inp, k, c);
        }
        var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
        function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
          var z = new Uint8Array(16), x = new Uint8Array(64);
          var u, i;
          for (i = 0; i < 16; i++) z[i] = 0;
          for (i = 0; i < 8; i++) z[i] = n[i];
          while (b >= 64) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
            u = 1;
            for (i = 8; i < 16; i++) {
              u = u + (z[i] & 255) | 0;
              z[i] = u & 255;
              u >>>= 8;
            }
            b -= 64;
            cpos += 64;
            mpos += 64;
          }
          if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
          }
          return 0;
        }
        function crypto_stream_salsa20(c, cpos, b, n, k) {
          var z = new Uint8Array(16), x = new Uint8Array(64);
          var u, i;
          for (i = 0; i < 16; i++) z[i] = 0;
          for (i = 0; i < 8; i++) z[i] = n[i];
          while (b >= 64) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < 64; i++) c[cpos + i] = x[i];
            u = 1;
            for (i = 8; i < 16; i++) {
              u = u + (z[i] & 255) | 0;
              z[i] = u & 255;
              u >>>= 8;
            }
            b -= 64;
            cpos += 64;
          }
          if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < b; i++) c[cpos + i] = x[i];
          }
          return 0;
        }
        function crypto_stream(c, cpos, d, n, k) {
          var s = new Uint8Array(32);
          crypto_core_hsalsa20(s, n, k, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
          return crypto_stream_salsa20(c, cpos, d, sn, s);
        }
        function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
          var s = new Uint8Array(32);
          crypto_core_hsalsa20(s, n, k, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
          return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
        }
        var poly1305 = function(key) {
          this.buffer = new Uint8Array(16);
          this.r = new Uint16Array(10);
          this.h = new Uint16Array(10);
          this.pad = new Uint16Array(8);
          this.leftover = 0;
          this.fin = 0;
          var t0, t1, t2, t3, t4, t5, t6, t7;
          t0 = key[0] & 255 | (key[1] & 255) << 8;
          this.r[0] = t0 & 8191;
          t1 = key[2] & 255 | (key[3] & 255) << 8;
          this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
          t2 = key[4] & 255 | (key[5] & 255) << 8;
          this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
          t3 = key[6] & 255 | (key[7] & 255) << 8;
          this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
          t4 = key[8] & 255 | (key[9] & 255) << 8;
          this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
          this.r[5] = t4 >>> 1 & 8190;
          t5 = key[10] & 255 | (key[11] & 255) << 8;
          this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
          t6 = key[12] & 255 | (key[13] & 255) << 8;
          this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
          t7 = key[14] & 255 | (key[15] & 255) << 8;
          this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
          this.r[9] = t7 >>> 5 & 127;
          this.pad[0] = key[16] & 255 | (key[17] & 255) << 8;
          this.pad[1] = key[18] & 255 | (key[19] & 255) << 8;
          this.pad[2] = key[20] & 255 | (key[21] & 255) << 8;
          this.pad[3] = key[22] & 255 | (key[23] & 255) << 8;
          this.pad[4] = key[24] & 255 | (key[25] & 255) << 8;
          this.pad[5] = key[26] & 255 | (key[27] & 255) << 8;
          this.pad[6] = key[28] & 255 | (key[29] & 255) << 8;
          this.pad[7] = key[30] & 255 | (key[31] & 255) << 8;
        };
        poly1305.prototype.blocks = function(m, mpos, bytes) {
          var hibit = this.fin ? 0 : 1 << 11;
          var t0, t1, t2, t3, t4, t5, t6, t7, c;
          var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
          var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
          var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
          while (bytes >= 16) {
            t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
            h0 += t0 & 8191;
            t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 8191;
            t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 8191;
            t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 8191;
            t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 8191;
            h5 += t4 >>> 1 & 8191;
            t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 8191;
            t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 8191;
            t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 8191;
            h9 += t7 >>> 5 | hibit;
            c = 0;
            d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 8191;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 8191;
            d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 8191;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 8191;
            d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 8191;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 8191;
            d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 8191;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 8191;
            d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 8191;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 8191;
            d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 8191;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 8191;
            d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 8191;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 8191;
            d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 8191;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 8191;
            d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 8191;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 8191;
            d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 8191;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 8191;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 8191;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
          }
          this.h[0] = h0;
          this.h[1] = h1;
          this.h[2] = h2;
          this.h[3] = h3;
          this.h[4] = h4;
          this.h[5] = h5;
          this.h[6] = h6;
          this.h[7] = h7;
          this.h[8] = h8;
          this.h[9] = h9;
        };
        poly1305.prototype.finish = function(mac, macpos) {
          var g = new Uint16Array(10);
          var c, mask, f, i;
          if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for (; i < 16; i++) this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
          }
          c = this.h[1] >>> 13;
          this.h[1] &= 8191;
          for (i = 2; i < 10; i++) {
            this.h[i] += c;
            c = this.h[i] >>> 13;
            this.h[i] &= 8191;
          }
          this.h[0] += c * 5;
          c = this.h[0] >>> 13;
          this.h[0] &= 8191;
          this.h[1] += c;
          c = this.h[1] >>> 13;
          this.h[1] &= 8191;
          this.h[2] += c;
          g[0] = this.h[0] + 5;
          c = g[0] >>> 13;
          g[0] &= 8191;
          for (i = 1; i < 10; i++) {
            g[i] = this.h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 8191;
          }
          g[9] -= 1 << 13;
          mask = (c ^ 1) - 1;
          for (i = 0; i < 10; i++) g[i] &= mask;
          mask = ~mask;
          for (i = 0; i < 10; i++) this.h[i] = this.h[i] & mask | g[i];
          this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
          this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
          this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
          this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
          this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
          this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
          this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
          this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
          f = this.h[0] + this.pad[0];
          this.h[0] = f & 65535;
          for (i = 1; i < 8; i++) {
            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
            this.h[i] = f & 65535;
          }
          mac[macpos + 0] = this.h[0] >>> 0 & 255;
          mac[macpos + 1] = this.h[0] >>> 8 & 255;
          mac[macpos + 2] = this.h[1] >>> 0 & 255;
          mac[macpos + 3] = this.h[1] >>> 8 & 255;
          mac[macpos + 4] = this.h[2] >>> 0 & 255;
          mac[macpos + 5] = this.h[2] >>> 8 & 255;
          mac[macpos + 6] = this.h[3] >>> 0 & 255;
          mac[macpos + 7] = this.h[3] >>> 8 & 255;
          mac[macpos + 8] = this.h[4] >>> 0 & 255;
          mac[macpos + 9] = this.h[4] >>> 8 & 255;
          mac[macpos + 10] = this.h[5] >>> 0 & 255;
          mac[macpos + 11] = this.h[5] >>> 8 & 255;
          mac[macpos + 12] = this.h[6] >>> 0 & 255;
          mac[macpos + 13] = this.h[6] >>> 8 & 255;
          mac[macpos + 14] = this.h[7] >>> 0 & 255;
          mac[macpos + 15] = this.h[7] >>> 8 & 255;
        };
        poly1305.prototype.update = function(m, mpos, bytes) {
          var i, want;
          if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes)
              want = bytes;
            for (i = 0; i < want; i++)
              this.buffer[this.leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16)
              return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
          }
          if (bytes >= 16) {
            want = bytes - bytes % 16;
            this.blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
          }
          if (bytes) {
            for (i = 0; i < bytes; i++)
              this.buffer[this.leftover + i] = m[mpos + i];
            this.leftover += bytes;
          }
        };
        function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
          var s = new poly1305(k);
          s.update(m, mpos, n);
          s.finish(out, outpos);
          return 0;
        }
        function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
          var x = new Uint8Array(16);
          crypto_onetimeauth(x, 0, m, mpos, n, k);
          return crypto_verify_16(h, hpos, x, 0);
        }
        function crypto_secretbox(c, m, d, n, k) {
          var i;
          if (d < 32) return -1;
          crypto_stream_xor(c, 0, m, 0, d, n, k);
          crypto_onetimeauth(c, 16, c, 32, d - 32, c);
          for (i = 0; i < 16; i++) c[i] = 0;
          return 0;
        }
        function crypto_secretbox_open(m, c, d, n, k) {
          var i;
          var x = new Uint8Array(32);
          if (d < 32) return -1;
          crypto_stream(x, 0, 32, n, k);
          if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
          crypto_stream_xor(m, 0, c, 0, d, n, k);
          for (i = 0; i < 32; i++) m[i] = 0;
          return 0;
        }
        function set25519(r, a) {
          var i;
          for (i = 0; i < 16; i++) r[i] = a[i] | 0;
        }
        function car25519(o) {
          var i, v, c = 1;
          for (i = 0; i < 16; i++) {
            v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
          }
          o[0] += c - 1 + 37 * (c - 1);
        }
        function sel25519(p, q, b) {
          var t, c = ~(b - 1);
          for (var i = 0; i < 16; i++) {
            t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
          }
        }
        function pack25519(o, n) {
          var i, j, b;
          var m = gf(), t = gf();
          for (i = 0; i < 16; i++) t[i] = n[i];
          car25519(t);
          car25519(t);
          car25519(t);
          for (j = 0; j < 2; j++) {
            m[0] = t[0] - 65517;
            for (i = 1; i < 15; i++) {
              m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
              m[i - 1] &= 65535;
            }
            m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
            b = m[15] >> 16 & 1;
            m[14] &= 65535;
            sel25519(t, m, 1 - b);
          }
          for (i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 255;
            o[2 * i + 1] = t[i] >> 8;
          }
        }
        function neq25519(a, b) {
          var c = new Uint8Array(32), d = new Uint8Array(32);
          pack25519(c, a);
          pack25519(d, b);
          return crypto_verify_32(c, 0, d, 0);
        }
        function par25519(a) {
          var d = new Uint8Array(32);
          pack25519(d, a);
          return d[0] & 1;
        }
        function unpack25519(o, n) {
          var i;
          for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
          o[15] &= 32767;
        }
        function A(o, a, b) {
          for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
        }
        function Z(o, a, b) {
          for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
        }
        function M(o, a, b) {
          var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
          v = a[0];
          t0 += v * b0;
          t1 += v * b1;
          t2 += v * b2;
          t3 += v * b3;
          t4 += v * b4;
          t5 += v * b5;
          t6 += v * b6;
          t7 += v * b7;
          t8 += v * b8;
          t9 += v * b9;
          t10 += v * b10;
          t11 += v * b11;
          t12 += v * b12;
          t13 += v * b13;
          t14 += v * b14;
          t15 += v * b15;
          v = a[1];
          t1 += v * b0;
          t2 += v * b1;
          t3 += v * b2;
          t4 += v * b3;
          t5 += v * b4;
          t6 += v * b5;
          t7 += v * b6;
          t8 += v * b7;
          t9 += v * b8;
          t10 += v * b9;
          t11 += v * b10;
          t12 += v * b11;
          t13 += v * b12;
          t14 += v * b13;
          t15 += v * b14;
          t16 += v * b15;
          v = a[2];
          t2 += v * b0;
          t3 += v * b1;
          t4 += v * b2;
          t5 += v * b3;
          t6 += v * b4;
          t7 += v * b5;
          t8 += v * b6;
          t9 += v * b7;
          t10 += v * b8;
          t11 += v * b9;
          t12 += v * b10;
          t13 += v * b11;
          t14 += v * b12;
          t15 += v * b13;
          t16 += v * b14;
          t17 += v * b15;
          v = a[3];
          t3 += v * b0;
          t4 += v * b1;
          t5 += v * b2;
          t6 += v * b3;
          t7 += v * b4;
          t8 += v * b5;
          t9 += v * b6;
          t10 += v * b7;
          t11 += v * b8;
          t12 += v * b9;
          t13 += v * b10;
          t14 += v * b11;
          t15 += v * b12;
          t16 += v * b13;
          t17 += v * b14;
          t18 += v * b15;
          v = a[4];
          t4 += v * b0;
          t5 += v * b1;
          t6 += v * b2;
          t7 += v * b3;
          t8 += v * b4;
          t9 += v * b5;
          t10 += v * b6;
          t11 += v * b7;
          t12 += v * b8;
          t13 += v * b9;
          t14 += v * b10;
          t15 += v * b11;
          t16 += v * b12;
          t17 += v * b13;
          t18 += v * b14;
          t19 += v * b15;
          v = a[5];
          t5 += v * b0;
          t6 += v * b1;
          t7 += v * b2;
          t8 += v * b3;
          t9 += v * b4;
          t10 += v * b5;
          t11 += v * b6;
          t12 += v * b7;
          t13 += v * b8;
          t14 += v * b9;
          t15 += v * b10;
          t16 += v * b11;
          t17 += v * b12;
          t18 += v * b13;
          t19 += v * b14;
          t20 += v * b15;
          v = a[6];
          t6 += v * b0;
          t7 += v * b1;
          t8 += v * b2;
          t9 += v * b3;
          t10 += v * b4;
          t11 += v * b5;
          t12 += v * b6;
          t13 += v * b7;
          t14 += v * b8;
          t15 += v * b9;
          t16 += v * b10;
          t17 += v * b11;
          t18 += v * b12;
          t19 += v * b13;
          t20 += v * b14;
          t21 += v * b15;
          v = a[7];
          t7 += v * b0;
          t8 += v * b1;
          t9 += v * b2;
          t10 += v * b3;
          t11 += v * b4;
          t12 += v * b5;
          t13 += v * b6;
          t14 += v * b7;
          t15 += v * b8;
          t16 += v * b9;
          t17 += v * b10;
          t18 += v * b11;
          t19 += v * b12;
          t20 += v * b13;
          t21 += v * b14;
          t22 += v * b15;
          v = a[8];
          t8 += v * b0;
          t9 += v * b1;
          t10 += v * b2;
          t11 += v * b3;
          t12 += v * b4;
          t13 += v * b5;
          t14 += v * b6;
          t15 += v * b7;
          t16 += v * b8;
          t17 += v * b9;
          t18 += v * b10;
          t19 += v * b11;
          t20 += v * b12;
          t21 += v * b13;
          t22 += v * b14;
          t23 += v * b15;
          v = a[9];
          t9 += v * b0;
          t10 += v * b1;
          t11 += v * b2;
          t12 += v * b3;
          t13 += v * b4;
          t14 += v * b5;
          t15 += v * b6;
          t16 += v * b7;
          t17 += v * b8;
          t18 += v * b9;
          t19 += v * b10;
          t20 += v * b11;
          t21 += v * b12;
          t22 += v * b13;
          t23 += v * b14;
          t24 += v * b15;
          v = a[10];
          t10 += v * b0;
          t11 += v * b1;
          t12 += v * b2;
          t13 += v * b3;
          t14 += v * b4;
          t15 += v * b5;
          t16 += v * b6;
          t17 += v * b7;
          t18 += v * b8;
          t19 += v * b9;
          t20 += v * b10;
          t21 += v * b11;
          t22 += v * b12;
          t23 += v * b13;
          t24 += v * b14;
          t25 += v * b15;
          v = a[11];
          t11 += v * b0;
          t12 += v * b1;
          t13 += v * b2;
          t14 += v * b3;
          t15 += v * b4;
          t16 += v * b5;
          t17 += v * b6;
          t18 += v * b7;
          t19 += v * b8;
          t20 += v * b9;
          t21 += v * b10;
          t22 += v * b11;
          t23 += v * b12;
          t24 += v * b13;
          t25 += v * b14;
          t26 += v * b15;
          v = a[12];
          t12 += v * b0;
          t13 += v * b1;
          t14 += v * b2;
          t15 += v * b3;
          t16 += v * b4;
          t17 += v * b5;
          t18 += v * b6;
          t19 += v * b7;
          t20 += v * b8;
          t21 += v * b9;
          t22 += v * b10;
          t23 += v * b11;
          t24 += v * b12;
          t25 += v * b13;
          t26 += v * b14;
          t27 += v * b15;
          v = a[13];
          t13 += v * b0;
          t14 += v * b1;
          t15 += v * b2;
          t16 += v * b3;
          t17 += v * b4;
          t18 += v * b5;
          t19 += v * b6;
          t20 += v * b7;
          t21 += v * b8;
          t22 += v * b9;
          t23 += v * b10;
          t24 += v * b11;
          t25 += v * b12;
          t26 += v * b13;
          t27 += v * b14;
          t28 += v * b15;
          v = a[14];
          t14 += v * b0;
          t15 += v * b1;
          t16 += v * b2;
          t17 += v * b3;
          t18 += v * b4;
          t19 += v * b5;
          t20 += v * b6;
          t21 += v * b7;
          t22 += v * b8;
          t23 += v * b9;
          t24 += v * b10;
          t25 += v * b11;
          t26 += v * b12;
          t27 += v * b13;
          t28 += v * b14;
          t29 += v * b15;
          v = a[15];
          t15 += v * b0;
          t16 += v * b1;
          t17 += v * b2;
          t18 += v * b3;
          t19 += v * b4;
          t20 += v * b5;
          t21 += v * b6;
          t22 += v * b7;
          t23 += v * b8;
          t24 += v * b9;
          t25 += v * b10;
          t26 += v * b11;
          t27 += v * b12;
          t28 += v * b13;
          t29 += v * b14;
          t30 += v * b15;
          t0 += 38 * t16;
          t1 += 38 * t17;
          t2 += 38 * t18;
          t3 += 38 * t19;
          t4 += 38 * t20;
          t5 += 38 * t21;
          t6 += 38 * t22;
          t7 += 38 * t23;
          t8 += 38 * t24;
          t9 += 38 * t25;
          t10 += 38 * t26;
          t11 += 38 * t27;
          t12 += 38 * t28;
          t13 += 38 * t29;
          t14 += 38 * t30;
          c = 1;
          v = t0 + c + 65535;
          c = Math.floor(v / 65536);
          t0 = v - c * 65536;
          v = t1 + c + 65535;
          c = Math.floor(v / 65536);
          t1 = v - c * 65536;
          v = t2 + c + 65535;
          c = Math.floor(v / 65536);
          t2 = v - c * 65536;
          v = t3 + c + 65535;
          c = Math.floor(v / 65536);
          t3 = v - c * 65536;
          v = t4 + c + 65535;
          c = Math.floor(v / 65536);
          t4 = v - c * 65536;
          v = t5 + c + 65535;
          c = Math.floor(v / 65536);
          t5 = v - c * 65536;
          v = t6 + c + 65535;
          c = Math.floor(v / 65536);
          t6 = v - c * 65536;
          v = t7 + c + 65535;
          c = Math.floor(v / 65536);
          t7 = v - c * 65536;
          v = t8 + c + 65535;
          c = Math.floor(v / 65536);
          t8 = v - c * 65536;
          v = t9 + c + 65535;
          c = Math.floor(v / 65536);
          t9 = v - c * 65536;
          v = t10 + c + 65535;
          c = Math.floor(v / 65536);
          t10 = v - c * 65536;
          v = t11 + c + 65535;
          c = Math.floor(v / 65536);
          t11 = v - c * 65536;
          v = t12 + c + 65535;
          c = Math.floor(v / 65536);
          t12 = v - c * 65536;
          v = t13 + c + 65535;
          c = Math.floor(v / 65536);
          t13 = v - c * 65536;
          v = t14 + c + 65535;
          c = Math.floor(v / 65536);
          t14 = v - c * 65536;
          v = t15 + c + 65535;
          c = Math.floor(v / 65536);
          t15 = v - c * 65536;
          t0 += c - 1 + 37 * (c - 1);
          c = 1;
          v = t0 + c + 65535;
          c = Math.floor(v / 65536);
          t0 = v - c * 65536;
          v = t1 + c + 65535;
          c = Math.floor(v / 65536);
          t1 = v - c * 65536;
          v = t2 + c + 65535;
          c = Math.floor(v / 65536);
          t2 = v - c * 65536;
          v = t3 + c + 65535;
          c = Math.floor(v / 65536);
          t3 = v - c * 65536;
          v = t4 + c + 65535;
          c = Math.floor(v / 65536);
          t4 = v - c * 65536;
          v = t5 + c + 65535;
          c = Math.floor(v / 65536);
          t5 = v - c * 65536;
          v = t6 + c + 65535;
          c = Math.floor(v / 65536);
          t6 = v - c * 65536;
          v = t7 + c + 65535;
          c = Math.floor(v / 65536);
          t7 = v - c * 65536;
          v = t8 + c + 65535;
          c = Math.floor(v / 65536);
          t8 = v - c * 65536;
          v = t9 + c + 65535;
          c = Math.floor(v / 65536);
          t9 = v - c * 65536;
          v = t10 + c + 65535;
          c = Math.floor(v / 65536);
          t10 = v - c * 65536;
          v = t11 + c + 65535;
          c = Math.floor(v / 65536);
          t11 = v - c * 65536;
          v = t12 + c + 65535;
          c = Math.floor(v / 65536);
          t12 = v - c * 65536;
          v = t13 + c + 65535;
          c = Math.floor(v / 65536);
          t13 = v - c * 65536;
          v = t14 + c + 65535;
          c = Math.floor(v / 65536);
          t14 = v - c * 65536;
          v = t15 + c + 65535;
          c = Math.floor(v / 65536);
          t15 = v - c * 65536;
          t0 += c - 1 + 37 * (c - 1);
          o[0] = t0;
          o[1] = t1;
          o[2] = t2;
          o[3] = t3;
          o[4] = t4;
          o[5] = t5;
          o[6] = t6;
          o[7] = t7;
          o[8] = t8;
          o[9] = t9;
          o[10] = t10;
          o[11] = t11;
          o[12] = t12;
          o[13] = t13;
          o[14] = t14;
          o[15] = t15;
        }
        function S(o, a) {
          M(o, a, a);
        }
        function inv25519(o, i) {
          var c = gf();
          var a;
          for (a = 0; a < 16; a++) c[a] = i[a];
          for (a = 253; a >= 0; a--) {
            S(c, c);
            if (a !== 2 && a !== 4) M(c, c, i);
          }
          for (a = 0; a < 16; a++) o[a] = c[a];
        }
        function pow2523(o, i) {
          var c = gf();
          var a;
          for (a = 0; a < 16; a++) c[a] = i[a];
          for (a = 250; a >= 0; a--) {
            S(c, c);
            if (a !== 1) M(c, c, i);
          }
          for (a = 0; a < 16; a++) o[a] = c[a];
        }
        function crypto_scalarmult(q, n, p) {
          var z = new Uint8Array(32);
          var x = new Float64Array(80), r, i;
          var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
          for (i = 0; i < 31; i++) z[i] = n[i];
          z[31] = n[31] & 127 | 64;
          z[0] &= 248;
          unpack25519(x, p);
          for (i = 0; i < 16; i++) {
            b[i] = x[i];
            d[i] = a[i] = c[i] = 0;
          }
          a[0] = d[0] = 1;
          for (i = 254; i >= 0; --i) {
            r = z[i >>> 3] >>> (i & 7) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            A(e, a, c);
            Z(a, a, c);
            A(c, b, d);
            Z(b, b, d);
            S(d, e);
            S(f, a);
            M(a, c, a);
            M(c, b, e);
            A(e, a, c);
            Z(a, a, c);
            S(b, a);
            Z(c, d, f);
            M(a, c, _121665);
            A(a, a, d);
            M(c, c, a);
            M(a, d, f);
            M(d, b, x);
            S(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
          }
          for (i = 0; i < 16; i++) {
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
          }
          var x32 = x.subarray(32);
          var x16 = x.subarray(16);
          inv25519(x32, x32);
          M(x16, x16, x32);
          pack25519(q, x16);
          return 0;
        }
        function crypto_scalarmult_base(q, n) {
          return crypto_scalarmult(q, n, _9);
        }
        function crypto_box_keypair(y, x) {
          randombytes(x, 32);
          return crypto_scalarmult_base(y, x);
        }
        function crypto_box_beforenm(k, y, x) {
          var s = new Uint8Array(32);
          crypto_scalarmult(s, x, y);
          return crypto_core_hsalsa20(k, _0, s, sigma);
        }
        var crypto_box_afternm = crypto_secretbox;
        var crypto_box_open_afternm = crypto_secretbox_open;
        function crypto_box(c, m, d, n, y, x) {
          var k = new Uint8Array(32);
          crypto_box_beforenm(k, y, x);
          return crypto_box_afternm(c, m, d, n, k);
        }
        function crypto_box_open(m, c, d, n, y, x) {
          var k = new Uint8Array(32);
          crypto_box_beforenm(k, y, x);
          return crypto_box_open_afternm(m, c, d, n, k);
        }
        var K = [
          1116352408,
          3609767458,
          1899447441,
          602891725,
          3049323471,
          3964484399,
          3921009573,
          2173295548,
          961987163,
          4081628472,
          1508970993,
          3053834265,
          2453635748,
          2937671579,
          2870763221,
          3664609560,
          3624381080,
          2734883394,
          310598401,
          1164996542,
          607225278,
          1323610764,
          1426881987,
          3590304994,
          1925078388,
          4068182383,
          2162078206,
          991336113,
          2614888103,
          633803317,
          3248222580,
          3479774868,
          3835390401,
          2666613458,
          4022224774,
          944711139,
          264347078,
          2341262773,
          604807628,
          2007800933,
          770255983,
          1495990901,
          1249150122,
          1856431235,
          1555081692,
          3175218132,
          1996064986,
          2198950837,
          2554220882,
          3999719339,
          2821834349,
          766784016,
          2952996808,
          2566594879,
          3210313671,
          3203337956,
          3336571891,
          1034457026,
          3584528711,
          2466948901,
          113926993,
          3758326383,
          338241895,
          168717936,
          666307205,
          1188179964,
          773529912,
          1546045734,
          1294757372,
          1522805485,
          1396182291,
          2643833823,
          1695183700,
          2343527390,
          1986661051,
          1014477480,
          2177026350,
          1206759142,
          2456956037,
          344077627,
          2730485921,
          1290863460,
          2820302411,
          3158454273,
          3259730800,
          3505952657,
          3345764771,
          106217008,
          3516065817,
          3606008344,
          3600352804,
          1432725776,
          4094571909,
          1467031594,
          275423344,
          851169720,
          430227734,
          3100823752,
          506948616,
          1363258195,
          659060556,
          3750685593,
          883997877,
          3785050280,
          958139571,
          3318307427,
          1322822218,
          3812723403,
          1537002063,
          2003034995,
          1747873779,
          3602036899,
          1955562222,
          1575990012,
          2024104815,
          1125592928,
          2227730452,
          2716904306,
          2361852424,
          442776044,
          2428436474,
          593698344,
          2756734187,
          3733110249,
          3204031479,
          2999351573,
          3329325298,
          3815920427,
          3391569614,
          3928383900,
          3515267271,
          566280711,
          3940187606,
          3454069534,
          4118630271,
          4000239992,
          116418474,
          1914138554,
          174292421,
          2731055270,
          289380356,
          3203993006,
          460393269,
          320620315,
          685471733,
          587496836,
          852142971,
          1086792851,
          1017036298,
          365543100,
          1126000580,
          2618297676,
          1288033470,
          3409855158,
          1501505948,
          4234509866,
          1607167915,
          987167468,
          1816402316,
          1246189591
        ];
        function crypto_hashblocks_hl(hh, hl, m, n) {
          var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
          var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
          var pos = 0;
          while (n >= 128) {
            for (i = 0; i < 16; i++) {
              j = 8 * i + pos;
              wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
              wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
            }
            for (i = 0; i < 80; i++) {
              bh0 = ah0;
              bh1 = ah1;
              bh2 = ah2;
              bh3 = ah3;
              bh4 = ah4;
              bh5 = ah5;
              bh6 = ah6;
              bh7 = ah7;
              bl0 = al0;
              bl1 = al1;
              bl2 = al2;
              bl3 = al3;
              bl4 = al4;
              bl5 = al5;
              bl6 = al6;
              bl7 = al7;
              h = ah7;
              l = al7;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
              l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = ah4 & ah5 ^ ~ah4 & ah6;
              l = al4 & al5 ^ ~al4 & al6;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = K[i * 2];
              l = K[i * 2 + 1];
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = wh[i % 16];
              l = wl[i % 16];
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              th = c & 65535 | d << 16;
              tl = a & 65535 | b << 16;
              h = th;
              l = tl;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
              l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
              l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              bh7 = c & 65535 | d << 16;
              bl7 = a & 65535 | b << 16;
              h = bh3;
              l = bl3;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = th;
              l = tl;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              bh3 = c & 65535 | d << 16;
              bl3 = a & 65535 | b << 16;
              ah1 = bh0;
              ah2 = bh1;
              ah3 = bh2;
              ah4 = bh3;
              ah5 = bh4;
              ah6 = bh5;
              ah7 = bh6;
              ah0 = bh7;
              al1 = bl0;
              al2 = bl1;
              al3 = bl2;
              al4 = bl3;
              al5 = bl4;
              al6 = bl5;
              al7 = bl6;
              al0 = bl7;
              if (i % 16 === 15) {
                for (j = 0; j < 16; j++) {
                  h = wh[j];
                  l = wl[j];
                  a = l & 65535;
                  b = l >>> 16;
                  c = h & 65535;
                  d = h >>> 16;
                  h = wh[(j + 9) % 16];
                  l = wl[(j + 9) % 16];
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  th = wh[(j + 1) % 16];
                  tl = wl[(j + 1) % 16];
                  h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                  l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  th = wh[(j + 14) % 16];
                  tl = wl[(j + 14) % 16];
                  h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                  l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  b += a >>> 16;
                  c += b >>> 16;
                  d += c >>> 16;
                  wh[j] = c & 65535 | d << 16;
                  wl[j] = a & 65535 | b << 16;
                }
              }
            }
            h = ah0;
            l = al0;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = c & 65535 | d << 16;
            hl[0] = al0 = a & 65535 | b << 16;
            h = ah1;
            l = al1;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = c & 65535 | d << 16;
            hl[1] = al1 = a & 65535 | b << 16;
            h = ah2;
            l = al2;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = c & 65535 | d << 16;
            hl[2] = al2 = a & 65535 | b << 16;
            h = ah3;
            l = al3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = c & 65535 | d << 16;
            hl[3] = al3 = a & 65535 | b << 16;
            h = ah4;
            l = al4;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = c & 65535 | d << 16;
            hl[4] = al4 = a & 65535 | b << 16;
            h = ah5;
            l = al5;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = c & 65535 | d << 16;
            hl[5] = al5 = a & 65535 | b << 16;
            h = ah6;
            l = al6;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = c & 65535 | d << 16;
            hl[6] = al6 = a & 65535 | b << 16;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = c & 65535 | d << 16;
            hl[7] = al7 = a & 65535 | b << 16;
            pos += 128;
            n -= 128;
          }
          return n;
        }
        function crypto_hash(out, m, n) {
          var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
          hh[0] = 1779033703;
          hh[1] = 3144134277;
          hh[2] = 1013904242;
          hh[3] = 2773480762;
          hh[4] = 1359893119;
          hh[5] = 2600822924;
          hh[6] = 528734635;
          hh[7] = 1541459225;
          hl[0] = 4089235720;
          hl[1] = 2227873595;
          hl[2] = 4271175723;
          hl[3] = 1595750129;
          hl[4] = 2917565137;
          hl[5] = 725511199;
          hl[6] = 4215389547;
          hl[7] = 327033209;
          crypto_hashblocks_hl(hh, hl, m, n);
          n %= 128;
          for (i = 0; i < n; i++) x[i] = m[b - n + i];
          x[n] = 128;
          n = 256 - 128 * (n < 112 ? 1 : 0);
          x[n - 9] = 0;
          ts64(x, n - 8, b / 536870912 | 0, b << 3);
          crypto_hashblocks_hl(hh, hl, x, n);
          for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);
          return 0;
        }
        function add(p, q) {
          var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
          Z(a, p[1], p[0]);
          Z(t, q[1], q[0]);
          M(a, a, t);
          A(b, p[0], p[1]);
          A(t, q[0], q[1]);
          M(b, b, t);
          M(c, p[3], q[3]);
          M(c, c, D2);
          M(d, p[2], q[2]);
          A(d, d, d);
          Z(e, b, a);
          Z(f, d, c);
          A(g, d, c);
          A(h, b, a);
          M(p[0], e, f);
          M(p[1], h, g);
          M(p[2], g, f);
          M(p[3], e, h);
        }
        function cswap(p, q, b) {
          var i;
          for (i = 0; i < 4; i++) {
            sel25519(p[i], q[i], b);
          }
        }
        function pack(r, p) {
          var tx = gf(), ty = gf(), zi = gf();
          inv25519(zi, p[2]);
          M(tx, p[0], zi);
          M(ty, p[1], zi);
          pack25519(r, ty);
          r[31] ^= par25519(tx) << 7;
        }
        function scalarmult(p, q, s) {
          var b, i;
          set25519(p[0], gf0);
          set25519(p[1], gf1);
          set25519(p[2], gf1);
          set25519(p[3], gf0);
          for (i = 255; i >= 0; --i) {
            b = s[i / 8 | 0] >> (i & 7) & 1;
            cswap(p, q, b);
            add(q, p);
            add(p, p);
            cswap(p, q, b);
          }
        }
        function scalarbase(p, s) {
          var q = [gf(), gf(), gf(), gf()];
          set25519(q[0], X);
          set25519(q[1], Y);
          set25519(q[2], gf1);
          M(q[3], X, Y);
          scalarmult(p, q, s);
        }
        function crypto_sign_keypair(pk, sk, seeded) {
          var d = new Uint8Array(64);
          var p = [gf(), gf(), gf(), gf()];
          var i;
          if (!seeded) randombytes(sk, 32);
          crypto_hash(d, sk, 32);
          d[0] &= 248;
          d[31] &= 127;
          d[31] |= 64;
          scalarbase(p, d);
          pack(pk, p);
          for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
          return 0;
        }
        var L = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
        function modL(r, x) {
          var carry, i, j, k;
          for (i = 63; i >= 32; --i) {
            carry = 0;
            for (j = i - 32, k = i - 12; j < k; ++j) {
              x[j] += carry - 16 * x[i] * L[j - (i - 32)];
              carry = Math.floor((x[j] + 128) / 256);
              x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
          }
          carry = 0;
          for (j = 0; j < 32; j++) {
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
          }
          for (j = 0; j < 32; j++) x[j] -= carry * L[j];
          for (i = 0; i < 32; i++) {
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
          }
        }
        function reduce(r) {
          var x = new Float64Array(64), i;
          for (i = 0; i < 64; i++) x[i] = r[i];
          for (i = 0; i < 64; i++) r[i] = 0;
          modL(r, x);
        }
        function crypto_sign(sm, m, n, sk) {
          var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
          var i, j, x = new Float64Array(64);
          var p = [gf(), gf(), gf(), gf()];
          crypto_hash(d, sk, 32);
          d[0] &= 248;
          d[31] &= 127;
          d[31] |= 64;
          var smlen = n + 64;
          for (i = 0; i < n; i++) sm[64 + i] = m[i];
          for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
          crypto_hash(r, sm.subarray(32), n + 32);
          reduce(r);
          scalarbase(p, r);
          pack(sm, p);
          for (i = 32; i < 64; i++) sm[i] = sk[i];
          crypto_hash(h, sm, n + 64);
          reduce(h);
          for (i = 0; i < 64; i++) x[i] = 0;
          for (i = 0; i < 32; i++) x[i] = r[i];
          for (i = 0; i < 32; i++) {
            for (j = 0; j < 32; j++) {
              x[i + j] += h[i] * d[j];
            }
          }
          modL(sm.subarray(32), x);
          return smlen;
        }
        function unpackneg(r, p) {
          var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
          set25519(r[2], gf1);
          unpack25519(r[1], p);
          S(num, r[1]);
          M(den, num, D);
          Z(num, num, r[2]);
          A(den, r[2], den);
          S(den2, den);
          S(den4, den2);
          M(den6, den4, den2);
          M(t, den6, num);
          M(t, t, den);
          pow2523(t, t);
          M(t, t, num);
          M(t, t, den);
          M(t, t, den);
          M(r[0], t, den);
          S(chk, r[0]);
          M(chk, chk, den);
          if (neq25519(chk, num)) M(r[0], r[0], I);
          S(chk, r[0]);
          M(chk, chk, den);
          if (neq25519(chk, num)) return -1;
          if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
          M(r[3], r[0], r[1]);
          return 0;
        }
        function crypto_sign_open(m, sm, n, pk) {
          var i;
          var t = new Uint8Array(32), h = new Uint8Array(64);
          var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
          if (n < 64) return -1;
          if (unpackneg(q, pk)) return -1;
          for (i = 0; i < n; i++) m[i] = sm[i];
          for (i = 0; i < 32; i++) m[i + 32] = pk[i];
          crypto_hash(h, m, n);
          reduce(h);
          scalarmult(p, q, h);
          scalarbase(q, sm.subarray(32));
          add(p, q);
          pack(t, p);
          n -= 64;
          if (crypto_verify_32(sm, 0, t, 0)) {
            for (i = 0; i < n; i++) m[i] = 0;
            return -1;
          }
          for (i = 0; i < n; i++) m[i] = sm[i + 64];
          return n;
        }
        var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
        nacl.lowlevel = {
          crypto_core_hsalsa20,
          crypto_stream_xor,
          crypto_stream,
          crypto_stream_salsa20_xor,
          crypto_stream_salsa20,
          crypto_onetimeauth,
          crypto_onetimeauth_verify,
          crypto_verify_16,
          crypto_verify_32,
          crypto_secretbox,
          crypto_secretbox_open,
          crypto_scalarmult,
          crypto_scalarmult_base,
          crypto_box_beforenm,
          crypto_box_afternm,
          crypto_box,
          crypto_box_open,
          crypto_box_keypair,
          crypto_hash,
          crypto_sign,
          crypto_sign_keypair,
          crypto_sign_open,
          crypto_secretbox_KEYBYTES,
          crypto_secretbox_NONCEBYTES,
          crypto_secretbox_ZEROBYTES,
          crypto_secretbox_BOXZEROBYTES,
          crypto_scalarmult_BYTES,
          crypto_scalarmult_SCALARBYTES,
          crypto_box_PUBLICKEYBYTES,
          crypto_box_SECRETKEYBYTES,
          crypto_box_BEFORENMBYTES,
          crypto_box_NONCEBYTES,
          crypto_box_ZEROBYTES,
          crypto_box_BOXZEROBYTES,
          crypto_sign_BYTES,
          crypto_sign_PUBLICKEYBYTES,
          crypto_sign_SECRETKEYBYTES,
          crypto_sign_SEEDBYTES,
          crypto_hash_BYTES,
          gf,
          D,
          L,
          pack25519,
          unpack25519,
          M,
          A,
          S,
          Z,
          pow2523,
          add,
          set25519,
          modL,
          scalarmult,
          scalarbase
        };
        function checkLengths(k, n) {
          if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
          if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
        }
        function checkBoxLengths(pk, sk) {
          if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
          if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
        }
        function checkArrayTypes() {
          for (var i = 0; i < arguments.length; i++) {
            if (!(arguments[i] instanceof Uint8Array))
              throw new TypeError("unexpected type, use Uint8Array");
          }
        }
        function cleanup(arr) {
          for (var i = 0; i < arr.length; i++) arr[i] = 0;
        }
        nacl.randomBytes = function(n) {
          var b = new Uint8Array(n);
          randombytes(b, n);
          return b;
        };
        nacl.secretbox = function(msg, nonce, key) {
          checkArrayTypes(msg, nonce, key);
          checkLengths(key, nonce);
          var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
          var c = new Uint8Array(m.length);
          for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
          crypto_secretbox(c, m, m.length, nonce, key);
          return c.subarray(crypto_secretbox_BOXZEROBYTES);
        };
        nacl.secretbox.open = function(box, nonce, key) {
          checkArrayTypes(box, nonce, key);
          checkLengths(key, nonce);
          var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
          var m = new Uint8Array(c.length);
          for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
          if (c.length < 32) return null;
          if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
          return m.subarray(crypto_secretbox_ZEROBYTES);
        };
        nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
        nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
        nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
        nacl.scalarMult = function(n, p) {
          checkArrayTypes(n, p);
          if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
          if (p.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
          var q = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult(q, n, p);
          return q;
        };
        nacl.scalarMult.base = function(n) {
          checkArrayTypes(n);
          if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
          var q = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult_base(q, n);
          return q;
        };
        nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
        nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
        nacl.box = function(msg, nonce, publicKey, secretKey) {
          var k = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox(msg, nonce, k);
        };
        nacl.box.before = function(publicKey, secretKey) {
          checkArrayTypes(publicKey, secretKey);
          checkBoxLengths(publicKey, secretKey);
          var k = new Uint8Array(crypto_box_BEFORENMBYTES);
          crypto_box_beforenm(k, publicKey, secretKey);
          return k;
        };
        nacl.box.after = nacl.secretbox;
        nacl.box.open = function(msg, nonce, publicKey, secretKey) {
          var k = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox.open(msg, nonce, k);
        };
        nacl.box.open.after = nacl.secretbox.open;
        nacl.box.keyPair = function() {
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
          crypto_box_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.box.keyPair.fromSecretKey = function(secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_box_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          crypto_scalarmult_base(pk, secretKey);
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
        nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
        nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
        nacl.box.nonceLength = crypto_box_NONCEBYTES;
        nacl.box.overheadLength = nacl.secretbox.overheadLength;
        nacl.sign = function(msg, secretKey) {
          checkArrayTypes(msg, secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
          crypto_sign(signedMsg, msg, msg.length, secretKey);
          return signedMsg;
        };
        nacl.sign.open = function(signedMsg, publicKey) {
          checkArrayTypes(signedMsg, publicKey);
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var tmp = new Uint8Array(signedMsg.length);
          var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
          if (mlen < 0) return null;
          var m = new Uint8Array(mlen);
          for (var i = 0; i < m.length; i++) m[i] = tmp[i];
          return m;
        };
        nacl.sign.detached = function(msg, secretKey) {
          var signedMsg = nacl.sign(msg, secretKey);
          var sig = new Uint8Array(crypto_sign_BYTES);
          for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
          return sig;
        };
        nacl.sign.detached.verify = function(msg, sig, publicKey) {
          checkArrayTypes(msg, sig, publicKey);
          if (sig.length !== crypto_sign_BYTES)
            throw new Error("bad signature size");
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
          var m = new Uint8Array(crypto_sign_BYTES + msg.length);
          var i;
          for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
          for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
          return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
        };
        nacl.sign.keyPair = function() {
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          crypto_sign_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.keyPair.fromSecretKey = function(secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.sign.keyPair.fromSeed = function(seed) {
          checkArrayTypes(seed);
          if (seed.length !== crypto_sign_SEEDBYTES)
            throw new Error("bad seed size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          for (var i = 0; i < 32; i++) sk[i] = seed[i];
          crypto_sign_keypair(pk, sk, true);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
        nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
        nacl.sign.seedLength = crypto_sign_SEEDBYTES;
        nacl.sign.signatureLength = crypto_sign_BYTES;
        nacl.hash = function(msg) {
          checkArrayTypes(msg);
          var h = new Uint8Array(crypto_hash_BYTES);
          crypto_hash(h, msg, msg.length);
          return h;
        };
        nacl.hash.hashLength = crypto_hash_BYTES;
        nacl.verify = function(x, y) {
          checkArrayTypes(x, y);
          if (x.length === 0 || y.length === 0) return false;
          if (x.length !== y.length) return false;
          return vn(x, 0, y, 0, x.length) === 0 ? true : false;
        };
        nacl.setPRNG = function(fn) {
          randombytes = fn;
        };
        (function() {
          var crypto2 = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
          if (crypto2 && crypto2.getRandomValues) {
            var QUOTA = 65536;
            nacl.setPRNG(function(x, n) {
              var i, v = new Uint8Array(n);
              for (i = 0; i < n; i += QUOTA) {
                crypto2.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
              }
              for (i = 0; i < n; i++) x[i] = v[i];
              cleanup(v);
            });
          } else if (typeof __require !== "undefined") {
            crypto2 = require_crypto2();
            if (crypto2 && crypto2.randomBytes) {
              nacl.setPRNG(function(x, n) {
                var i, v = crypto2.randomBytes(n);
                for (i = 0; i < n; i++) x[i] = v[i];
                cleanup(v);
              });
            }
          }
        })();
      })(typeof module !== "undefined" && module.exports ? module.exports : self.nacl = self.nacl || {});
    }
  });

  // node_modules/tweetnacl-util/nacl-util.js
  var require_nacl_util = __commonJS({
    "node_modules/tweetnacl-util/nacl-util.js"(exports, module) {
      init_process();
      init_buffer();
      (function(root, f) {
        "use strict";
        if (typeof module !== "undefined" && module.exports) module.exports = f();
        else if (root.nacl) root.nacl.util = f();
        else {
          root.nacl = {};
          root.nacl.util = f();
        }
      })(exports, function() {
        "use strict";
        var util = {};
        function validateBase64(s) {
          if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s)) {
            throw new TypeError("invalid encoding");
          }
        }
        util.decodeUTF8 = function(s) {
          if (typeof s !== "string") throw new TypeError("expected string");
          var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
          for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
          return b;
        };
        util.encodeUTF8 = function(arr) {
          var i, s = [];
          for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));
          return decodeURIComponent(escape(s.join("")));
        };
        if (typeof atob === "undefined") {
          if (typeof Buffer2.from !== "undefined") {
            util.encodeBase64 = function(arr) {
              return Buffer2.from(arr).toString("base64");
            };
            util.decodeBase64 = function(s) {
              validateBase64(s);
              return new Uint8Array(Array.prototype.slice.call(Buffer2.from(s, "base64"), 0));
            };
          } else {
            util.encodeBase64 = function(arr) {
              return new Buffer2(arr).toString("base64");
            };
            util.decodeBase64 = function(s) {
              validateBase64(s);
              return new Uint8Array(Array.prototype.slice.call(new Buffer2(s, "base64"), 0));
            };
          }
        } else {
          util.encodeBase64 = function(arr) {
            var i, s = [], len = arr.length;
            for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));
            return btoa(s.join(""));
          };
          util.decodeBase64 = function(s) {
            validateBase64(s);
            var i, d = atob(s), b = new Uint8Array(d.length);
            for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
            return b;
          };
        }
        return util;
      });
    }
  });

  // node_modules/eth-sig-util/index.js
  var require_eth_sig_util = __commonJS({
    "node_modules/eth-sig-util/index.js"(exports, module) {
      init_process();
      init_buffer();
      var { Buffer: Buffer4 } = require_buffer();
      var ethUtil = require_dist7();
      var ethAbi = require_ethereumjs_abi();
      var nacl = require_nacl_fast();
      nacl.util = require_nacl_util();
      var TYPED_MESSAGE_SCHEMA = {
        type: "object",
        properties: {
          types: {
            type: "object",
            additionalProperties: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string" },
                  type: { type: "string" }
                },
                required: ["name", "type"]
              }
            }
          },
          primaryType: { type: "string" },
          domain: { type: "object" },
          message: { type: "object" }
        },
        required: ["types", "primaryType", "domain", "message"]
      };
      var TypedDataUtils = {
        /**
         * Encodes an object by encoding and concatenating each of its members
         *
         * @param {string} primaryType - Root type
         * @param {Object} data - Object to encode
         * @param {Object} types - Type definitions
         * @returns {string} - Encoded representation of an object
         */
        encodeData(primaryType, data, types, useV4 = true) {
          const encodedTypes = ["bytes32"];
          const encodedValues = [this.hashType(primaryType, types)];
          if (useV4) {
            const encodeField = (name2, type2, value) => {
              if (types[type2] !== void 0) {
                return ["bytes32", value == null ? "0x0000000000000000000000000000000000000000000000000000000000000000" : ethUtil.sha3(this.encodeData(type2, value, types, useV4))];
              }
              if (value === void 0)
                throw new Error(`missing value for field ${name2} of type ${type2}`);
              if (type2 === "bytes") {
                return ["bytes32", ethUtil.sha3(value)];
              }
              if (type2 === "string") {
                if (typeof value === "string") {
                  value = Buffer4.from(value, "utf8");
                }
                return ["bytes32", ethUtil.sha3(value)];
              }
              if (type2.lastIndexOf("]") === type2.length - 1) {
                const parsedType = type2.slice(0, type2.lastIndexOf("["));
                const typeValuePairs = value.map((item) => encodeField(name2, parsedType, item));
                return ["bytes32", ethUtil.sha3(ethAbi.rawEncode(
                  typeValuePairs.map(([type3]) => type3),
                  typeValuePairs.map(([, value2]) => value2)
                ))];
              }
              return [type2, value];
            };
            for (const field of types[primaryType]) {
              const [type2, value] = encodeField(field.name, field.type, data[field.name]);
              encodedTypes.push(type2);
              encodedValues.push(value);
            }
          } else {
            for (const field of types[primaryType]) {
              let value = data[field.name];
              if (value !== void 0) {
                if (field.type === "bytes") {
                  encodedTypes.push("bytes32");
                  value = ethUtil.sha3(value);
                  encodedValues.push(value);
                } else if (field.type === "string") {
                  encodedTypes.push("bytes32");
                  if (typeof value === "string") {
                    value = Buffer4.from(value, "utf8");
                  }
                  value = ethUtil.sha3(value);
                  encodedValues.push(value);
                } else if (types[field.type] !== void 0) {
                  encodedTypes.push("bytes32");
                  value = ethUtil.sha3(this.encodeData(field.type, value, types, useV4));
                  encodedValues.push(value);
                } else if (field.type.lastIndexOf("]") === field.type.length - 1) {
                  throw new Error("Arrays currently unimplemented in encodeData");
                } else {
                  encodedTypes.push(field.type);
                  encodedValues.push(value);
                }
              }
            }
          }
          return ethAbi.rawEncode(encodedTypes, encodedValues);
        },
        /**
         * Encodes the type of an object by encoding a comma delimited list of its members
         *
         * @param {string} primaryType - Root type to encode
         * @param {Object} types - Type definitions
         * @returns {string} - Encoded representation of the type of an object
         */
        encodeType(primaryType, types) {
          let result = "";
          let deps = this.findTypeDependencies(primaryType, types).filter((dep) => dep !== primaryType);
          deps = [primaryType].concat(deps.sort());
          for (const type2 of deps) {
            const children = types[type2];
            if (!children) {
              throw new Error("No type definition specified: " + type2);
            }
            result += type2 + "(" + types[type2].map(({ name: name2, type: type3 }) => type3 + " " + name2).join(",") + ")";
          }
          return result;
        },
        /**
         * Finds all types within a type defintion object
         *
         * @param {string} primaryType - Root type
         * @param {Object} types - Type definitions
         * @param {Array} results - current set of accumulated types
         * @returns {Array} - Set of all types found in the type definition
         */
        findTypeDependencies(primaryType, types, results = []) {
          primaryType = primaryType.match(/^\w*/)[0];
          if (results.includes(primaryType) || types[primaryType] === void 0) {
            return results;
          }
          results.push(primaryType);
          for (const field of types[primaryType]) {
            for (const dep of this.findTypeDependencies(field.type, types, results)) {
              !results.includes(dep) && results.push(dep);
            }
          }
          return results;
        },
        /**
         * Hashes an object
         *
         * @param {string} primaryType - Root type
         * @param {Object} data - Object to hash
         * @param {Object} types - Type definitions
         * @returns {string} - Hash of an object
         */
        hashStruct(primaryType, data, types, useV4 = true) {
          return ethUtil.sha3(this.encodeData(primaryType, data, types, useV4));
        },
        /**
         * Hashes the type of an object
         *
         * @param {string} primaryType - Root type to hash
         * @param {Object} types - Type definitions
         * @returns {string} - Hash of an object
         */
        hashType(primaryType, types) {
          return ethUtil.sha3(this.encodeType(primaryType, types));
        },
        /**
         * Removes properties from a message object that are not defined per EIP-712
         *
         * @param {Object} data - typed message object
         * @returns {Object} - typed message object with only allowed fields
         */
        sanitizeData(data) {
          const sanitizedData = {};
          for (const key in TYPED_MESSAGE_SCHEMA.properties) {
            data[key] && (sanitizedData[key] = data[key]);
          }
          if (sanitizedData.types) {
            sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);
          }
          return sanitizedData;
        },
        /**
         * Signs a typed message as per EIP-712 and returns its sha3 hash
         *
         * @param {Object} typedData - Types message data to sign
         * @returns {string} - sha3 hash of the resulting signed message
         */
        sign(typedData, useV4 = true) {
          const sanitizedData = this.sanitizeData(typedData);
          const parts = [Buffer4.from("1901", "hex")];
          parts.push(this.hashStruct("EIP712Domain", sanitizedData.domain, sanitizedData.types, useV4));
          if (sanitizedData.primaryType !== "EIP712Domain") {
            parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));
          }
          return ethUtil.sha3(Buffer4.concat(parts));
        }
      };
      module.exports = {
        TYPED_MESSAGE_SCHEMA,
        TypedDataUtils,
        concatSig: function(v, r, s) {
          const rSig = ethUtil.fromSigned(r);
          const sSig = ethUtil.fromSigned(s);
          const vSig = ethUtil.bufferToInt(v);
          const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString("hex"), 64);
          const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString("hex"), 64);
          const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));
          return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString("hex");
        },
        normalize: function(input) {
          if (!input) return;
          if (typeof input === "number") {
            const buffer = ethUtil.toBuffer(input);
            input = ethUtil.bufferToHex(buffer);
          }
          if (typeof input !== "string") {
            var msg = "eth-sig-util.normalize() requires hex string or integer input.";
            msg += " received " + typeof input + ": " + input;
            throw new Error(msg);
          }
          return ethUtil.addHexPrefix(input.toLowerCase());
        },
        personalSign: function(privateKey, msgParams) {
          var message = ethUtil.toBuffer(msgParams.data);
          var msgHash = ethUtil.hashPersonalMessage(message);
          var sig = ethUtil.ecsign(msgHash, privateKey);
          var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
          return serialized;
        },
        recoverPersonalSignature: function(msgParams) {
          const publicKey = getPublicKeyFor(msgParams);
          const sender = ethUtil.publicToAddress(publicKey);
          const senderHex = ethUtil.bufferToHex(sender);
          return senderHex;
        },
        extractPublicKey: function(msgParams) {
          const publicKey = getPublicKeyFor(msgParams);
          return "0x" + publicKey.toString("hex");
        },
        typedSignatureHash: function(typedData) {
          const hashBuffer = typedSignatureHash(typedData);
          return ethUtil.bufferToHex(hashBuffer);
        },
        signTypedDataLegacy: function(privateKey, msgParams) {
          const msgHash = typedSignatureHash(msgParams.data);
          const sig = ethUtil.ecsign(msgHash, privateKey);
          return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
        },
        recoverTypedSignatureLegacy: function(msgParams) {
          const msgHash = typedSignatureHash(msgParams.data);
          const publicKey = recoverPublicKey(msgHash, msgParams.sig);
          const sender = ethUtil.publicToAddress(publicKey);
          return ethUtil.bufferToHex(sender);
        },
        encrypt: function(receiverPublicKey, msgParams, version3) {
          switch (version3) {
            case "x25519-xsalsa20-poly1305":
              if (typeof msgParams.data == "undefined") {
                throw new Error('Cannot detect secret message, message params should be of the form {data: "secret message"} ');
              }
              var ephemeralKeyPair = nacl.box.keyPair();
              try {
                var pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey);
              } catch (err2) {
                throw new Error("Bad public key");
              }
              var msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data);
              var nonce = nacl.randomBytes(nacl.box.nonceLength);
              var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
              var output = {
                version: "x25519-xsalsa20-poly1305",
                nonce: nacl.util.encodeBase64(nonce),
                ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),
                ciphertext: nacl.util.encodeBase64(encryptedMessage)
              };
              return output;
            default:
              throw new Error("Encryption type/version not supported");
          }
        },
        encryptSafely: function(receiverPublicKey, msgParams, version3) {
          const DEFAULT_PADDING_LENGTH = 2 ** 11;
          const NACL_EXTRA_BYTES = 16;
          let data = msgParams.data;
          if (!data) {
            throw new Error("Cannot encrypt empty msg.data");
          }
          if (typeof data === "object" && data.toJSON) {
            throw new Error("Cannot encrypt with toJSON property.  Please remove toJSON property");
          }
          const dataWithPadding = {
            data,
            padding: ""
          };
          const dataLength = Buffer4.byteLength(JSON.stringify(dataWithPadding), "utf-8");
          const modVal = dataLength % DEFAULT_PADDING_LENGTH;
          let padLength = 0;
          if (modVal > 0) {
            padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES;
          }
          dataWithPadding.padding = "0".repeat(padLength);
          const paddedMsgParams = { data: JSON.stringify(dataWithPadding) };
          return this.encrypt(receiverPublicKey, paddedMsgParams, version3);
        },
        decrypt: function(encryptedData, receiverPrivateKey) {
          switch (encryptedData.version) {
            case "x25519-xsalsa20-poly1305":
              var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);
              var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;
              var nonce = nacl.util.decodeBase64(encryptedData.nonce);
              var ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext);
              var ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey);
              var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);
              try {
                var output = nacl.util.encodeUTF8(decryptedMessage);
              } catch (err2) {
                throw new Error("Decryption failed.");
              }
              if (output) {
                return output;
              } else {
                throw new Error("Decryption failed.");
              }
            default:
              throw new Error("Encryption type/version not supported.");
          }
        },
        decryptSafely: function(encryptedData, receiverPrivateKey) {
          const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey));
          return dataWithPadding.data;
        },
        getEncryptionPublicKey: function(privateKey) {
          var privateKeyUint8Array = nacl_decodeHex(privateKey);
          var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
          return nacl.util.encodeBase64(encryptionPublicKey);
        },
        /**
         * A generic entry point for all typed data methods to be passed, includes a version parameter.
         */
        signTypedMessage: function(privateKey, msgParams, version3 = "V4") {
          switch (version3) {
            case "V1":
              return this.signTypedDataLegacy(privateKey, msgParams);
            case "V3":
              return this.signTypedData(privateKey, msgParams);
            case "V4":
            default:
              return this.signTypedData_v4(privateKey, msgParams);
          }
        },
        recoverTypedMessage: function(msgParams, version3 = "V4") {
          switch (version3) {
            case "V1":
              return this.recoverTypedSignatureLegacy(msgParams);
            case "V3":
              return this.recoverTypedSignature(msgParams);
            case "V4":
            default:
              return this.recoverTypedSignature_v4(msgParams);
          }
        },
        signTypedData: function(privateKey, msgParams) {
          const message = TypedDataUtils.sign(msgParams.data, false);
          const sig = ethUtil.ecsign(message, privateKey);
          return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
        },
        signTypedData_v4: function(privateKey, msgParams) {
          const message = TypedDataUtils.sign(msgParams.data);
          const sig = ethUtil.ecsign(message, privateKey);
          return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
        },
        recoverTypedSignature: function(msgParams) {
          const message = TypedDataUtils.sign(msgParams.data, false);
          const publicKey = recoverPublicKey(message, msgParams.sig);
          const sender = ethUtil.publicToAddress(publicKey);
          return ethUtil.bufferToHex(sender);
        },
        recoverTypedSignature_v4: function(msgParams) {
          const message = TypedDataUtils.sign(msgParams.data);
          const publicKey = recoverPublicKey(message, msgParams.sig);
          const sender = ethUtil.publicToAddress(publicKey);
          return ethUtil.bufferToHex(sender);
        }
      };
      function typedSignatureHash(typedData) {
        const error2 = new Error("Expect argument to be non-empty array");
        if (typeof typedData !== "object" || !typedData.length) throw error2;
        const data = typedData.map(function(e) {
          return e.type === "bytes" ? ethUtil.toBuffer(e.value) : e.value;
        });
        const types = typedData.map(function(e) {
          return e.type;
        });
        const schema = typedData.map(function(e) {
          if (!e.name) throw error2;
          return e.type + " " + e.name;
        });
        return ethAbi.soliditySHA3(
          ["bytes32", "bytes32"],
          [
            ethAbi.soliditySHA3(new Array(typedData.length).fill("string"), schema),
            ethAbi.soliditySHA3(types, data)
          ]
        );
      }
      function recoverPublicKey(hash, sig) {
        const signature = ethUtil.toBuffer(sig);
        const sigParams = ethUtil.fromRpcSig(signature);
        return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);
      }
      function getPublicKeyFor(msgParams) {
        const message = ethUtil.toBuffer(msgParams.data);
        const msgHash = ethUtil.hashPersonalMessage(message);
        return recoverPublicKey(msgHash, msgParams.sig);
      }
      function padWithZeroes(number, length) {
        var myString = "" + number;
        while (myString.length < length) {
          myString = "0" + myString;
        }
        return myString;
      }
      function nacl_decodeHex(msgHex) {
        var msgBase64 = Buffer4.from(msgHex, "hex").toString("base64");
        return nacl.util.decodeBase64(msgBase64);
      }
    }
  });

  // node_modules/@opengsn/common/dist/EIP712/TypedRequestData.js
  var require_TypedRequestData = __commonJS({
    "node_modules/@opengsn/common/dist/EIP712/TypedRequestData.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var eth_sig_util_1 = require_eth_sig_util();
      var ethereumjs_util_1 = require_dist3();
      exports.EIP712DomainType = [
        { name: "name", type: "string" },
        { name: "version", type: "string" },
        { name: "chainId", type: "uint256" },
        { name: "verifyingContract", type: "address" }
      ];
      exports.EIP712DomainTypeWithoutVersion = [
        { name: "name", type: "string" },
        { name: "chainId", type: "uint256" },
        { name: "verifyingContract", type: "address" }
      ];
      var RelayDataType = [
        { name: "gasPrice", type: "uint256" },
        { name: "pctRelayFee", type: "uint256" },
        { name: "baseRelayFee", type: "uint256" },
        { name: "relayWorker", type: "address" },
        { name: "paymaster", type: "address" },
        { name: "forwarder", type: "address" },
        { name: "paymasterData", type: "bytes" },
        { name: "clientId", type: "uint256" }
      ];
      var ForwardRequestType = [
        { name: "from", type: "address" },
        { name: "to", type: "address" },
        { name: "value", type: "uint256" },
        { name: "gas", type: "uint256" },
        { name: "nonce", type: "uint256" },
        { name: "data", type: "bytes" },
        { name: "validUntil", type: "uint256" }
      ];
      var RelayRequestType = [
        ...ForwardRequestType,
        { name: "relayData", type: "RelayData" }
      ];
      exports.GsnDomainSeparatorType = {
        prefix: "string name,string version",
        name: "GSN Relayed Transaction",
        version: "2"
      };
      function getDomainSeparator(verifier, chainId) {
        return {
          name: exports.GsnDomainSeparatorType.name,
          version: exports.GsnDomainSeparatorType.version,
          chainId,
          verifyingContract: verifier
        };
      }
      exports.getDomainSeparator = getDomainSeparator;
      function getDomainSeparatorHash(verifier, chainId) {
        return ethereumjs_util_1.bufferToHex(eth_sig_util_1.TypedDataUtils.hashStruct("EIP712Domain", getDomainSeparator(verifier, chainId), { EIP712Domain: exports.EIP712DomainType }));
      }
      exports.getDomainSeparatorHash = getDomainSeparatorHash;
      var TypedRequestData = class {
        constructor(chainId, verifier, relayRequest) {
          this.types = {
            EIP712Domain: exports.EIP712DomainType,
            RelayRequest: RelayRequestType,
            RelayData: RelayDataType
          };
          this.domain = getDomainSeparator(verifier, chainId);
          this.primaryType = "RelayRequest";
          this.message = Object.assign(Object.assign({}, relayRequest.request), { relayData: relayRequest.relayData });
        }
      };
      exports.TypedRequestData = TypedRequestData;
      exports.GsnRequestType = {
        typeName: "RelayRequest",
        typeSuffix: "RelayData relayData)RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)"
      };
    }
  });

  // node_modules/@opengsn/provider/dist/AccountManager.js
  var require_AccountManager = __commonJS({
    "node_modules/@opengsn/provider/dist/AccountManager.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_wallet_1 = __importDefault(require_ethereumjs_wallet());
      var web3_1 = __importDefault((init_web3_global_shim(), __toCommonJS(web3_global_shim_exports)));
      var eth_sig_util_1 = __importDefault(require_eth_sig_util());
      var TypedRequestData_1 = require_TypedRequestData();
      var Utils_1 = require_Utils();
      function toAddress(privateKey) {
        const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer2.from(Utils_1.removeHexPrefix(privateKey), "hex"));
        return wallet.getChecksumAddressString();
      }
      var AccountManager = class {
        constructor(provider, chainId, config3) {
          this.accounts = [];
          this.web3 = new web3_1.default(provider);
          this.chainId = chainId;
          this.config = config3;
        }
        addAccount(privateKey) {
          if (privateKey.privateKey) {
            console.error("ERROR: addAccount accepts a private key as a prefixed hex string now!");
            privateKey = `0x${privateKey.privateKey.toString("hex")}`;
          }
          const address = toAddress(privateKey);
          const keypair = {
            privateKey,
            address
          };
          this.accounts.push(keypair);
        }
        newAccount() {
          const a = ethereumjs_wallet_1.default.generate();
          const privateKey = `0x${a.privKey.toString("hex")}`;
          this.addAccount(privateKey);
          const address = toAddress(privateKey);
          return {
            privateKey,
            address
          };
        }
        async sign(relayRequest) {
          let signature;
          const forwarder = relayRequest.relayData.forwarder;
          const cloneRequest = Object.assign({}, relayRequest);
          const signedData = new TypedRequestData_1.TypedRequestData(this.chainId, forwarder, cloneRequest);
          const keypair = this.accounts.find((account) => Utils_1.isSameAddress(account.address, relayRequest.request.from));
          let rec;
          try {
            if (keypair != null) {
              signature = this._signWithControlledKey(keypair.privateKey, signedData);
            } else {
              signature = await this._signWithProvider(signedData);
            }
            rec = eth_sig_util_1.default.recoverTypedSignature_v4({
              // @ts-ignore
              data: signedData,
              sig: signature
            });
          } catch (error2) {
            throw new Error(`Failed to sign relayed transaction for ${relayRequest.request.from}: ${error2}`);
          }
          if (!Utils_1.isSameAddress(relayRequest.request.from.toLowerCase(), rec)) {
            throw new Error(`Internal RelayClient exception: signature is not correct: sender=${relayRequest.request.from}, recovered=${rec}`);
          }
          return signature;
        }
        // These methods is extracted to
        // a) allow different implementations in the future, and
        // b) allow spying on Account Manager in tests
        async _signWithProvider(signedData) {
          return await Utils_1.getEip712Signature(this.web3, signedData, this.config.methodSuffix, this.config.jsonStringifyRequest);
        }
        _signWithControlledKey(privateKey, signedData) {
          return eth_sig_util_1.default.signTypedData_v4(Buffer2.from(Utils_1.removeHexPrefix(privateKey), "hex"), { data: signedData });
        }
        getAccounts() {
          return this.accounts.map((it) => it.address);
        }
      };
      exports.AccountManager = AccountManager;
    }
  });

  // node_modules/@opengsn/common/dist/HttpClient.js
  var require_HttpClient = __commonJS({
    "node_modules/@opengsn/common/dist/HttpClient.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var HttpClient = class {
        constructor(httpWrapper, logger) {
          this.httpWrapper = httpWrapper;
          this.logger = logger;
        }
        async getPingResponse(relayUrl, paymaster) {
          const paymasterSuffix = paymaster == null ? "" : "?paymaster=" + paymaster;
          const pingResponse = await this.httpWrapper.sendPromise(relayUrl + "/getaddr" + paymasterSuffix);
          this.logger.info(`pingResponse: ${JSON.stringify(pingResponse)}`);
          if (pingResponse == null) {
            throw new Error("Relay responded without a body");
          }
          return pingResponse;
        }
        async relayTransaction(relayUrl, request3) {
          const { signedTx, error: error2 } = await this.httpWrapper.sendPromise(relayUrl + "/relay", request3);
          this.logger.info(`relayTransaction response: ${signedTx}, error: ${error2}`);
          if (error2 != null) {
            throw new Error(`Got error response from relay: ${error2}`);
          }
          if (signedTx == null) {
            throw new Error("body.signedTx field missing.");
          }
          return signedTx;
        }
        async auditTransaction(relayUrl, signedTx) {
          const auditRequest = { signedTx };
          const auditResponse = await this.httpWrapper.sendPromise(relayUrl + "/audit", auditRequest);
          this.logger.info(`auditTransaction response: ${JSON.stringify(auditResponse)}`);
          return auditResponse;
        }
      };
      exports.HttpClient = HttpClient;
    }
  });

  // node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "node_modules/axios/lib/helpers/bind.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function bind(fn, thisArg) {
        return function wrap() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn.apply(thisArg, args);
        };
      };
    }
  });

  // node_modules/axios/lib/utils.js
  var require_utils7 = __commonJS({
    "node_modules/axios/lib/utils.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var bind = require_bind();
      var toString4 = Object.prototype.toString;
      function isArray4(val) {
        return toString4.call(val) === "[object Array]";
      }
      function isUndefined2(val) {
        return typeof val === "undefined";
      }
      function isBuffer4(val) {
        return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
      }
      function isArrayBuffer(val) {
        return toString4.call(val) === "[object ArrayBuffer]";
      }
      function isFormData(val) {
        return typeof FormData !== "undefined" && val instanceof FormData;
      }
      function isArrayBufferView(val) {
        var result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && val.buffer instanceof ArrayBuffer;
        }
        return result;
      }
      function isString2(val) {
        return typeof val === "string";
      }
      function isNumber2(val) {
        return typeof val === "number";
      }
      function isObject2(val) {
        return val !== null && typeof val === "object";
      }
      function isPlainObject(val) {
        if (toString4.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      function isDate2(val) {
        return toString4.call(val) === "[object Date]";
      }
      function isFile(val) {
        return toString4.call(val) === "[object File]";
      }
      function isBlob(val) {
        return toString4.call(val) === "[object Blob]";
      }
      function isFunction3(val) {
        return toString4.call(val) === "[object Function]";
      }
      function isStream(val) {
        return isObject2(val) && isFunction3(val.pipe);
      }
      function isURLSearchParams(val) {
        return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
      }
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      function isStandardBrowserEnv() {
        if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      function forEach2(obj, fn) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray4(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn.call(null, obj[key], key, obj);
            }
          }
        }
      }
      function merge() {
        var result = {};
        function assignValue(val, key) {
          if (isPlainObject(result[key]) && isPlainObject(val)) {
            result[key] = merge(result[key], val);
          } else if (isPlainObject(val)) {
            result[key] = merge({}, val);
          } else if (isArray4(val)) {
            result[key] = val.slice();
          } else {
            result[key] = val;
          }
        }
        for (var i = 0, l = arguments.length; i < l; i++) {
          forEach2(arguments[i], assignValue);
        }
        return result;
      }
      function extend(a, b, thisArg) {
        forEach2(b, function assignValue(val, key) {
          if (thisArg && typeof val === "function") {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        });
        return a;
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      module.exports = {
        isArray: isArray4,
        isArrayBuffer,
        isBuffer: isBuffer4,
        isFormData,
        isArrayBufferView,
        isString: isString2,
        isNumber: isNumber2,
        isObject: isObject2,
        isPlainObject,
        isUndefined: isUndefined2,
        isDate: isDate2,
        isFile,
        isBlob,
        isFunction: isFunction3,
        isStream,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach: forEach2,
        merge,
        extend,
        trim,
        stripBOM
      };
    }
  });

  // node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      function encode2(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      module.exports = function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key = key + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, function parseValue(v) {
              if (utils.isDate(v)) {
                v = v.toISOString();
              } else if (utils.isObject(v)) {
                v = JSON.stringify(v);
              }
              parts.push(encode2(key) + "=" + encode2(v));
            });
          });
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      };
    }
  });

  // node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      function InterceptorManager() {
        this.handlers = [];
      }
      InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      };
      InterceptorManager.prototype.eject = function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      };
      InterceptorManager.prototype.forEach = function forEach2(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      };
      module.exports = InterceptorManager;
    }
  });

  // node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      module.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name2) {
          if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name2];
          }
        });
      };
    }
  });

  // node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function enhanceError(error2, config3, code, request3, response) {
        error2.config = config3;
        if (code) {
          error2.code = code;
        }
        error2.request = request3;
        error2.response = response;
        error2.isAxiosError = true;
        error2.toJSON = function toJSON3() {
          return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code
          };
        };
        return error2;
      };
    }
  });

  // node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "node_modules/axios/lib/core/createError.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var enhanceError = require_enhanceError();
      module.exports = function createError(message, config3, code, request3, response) {
        var error2 = new Error(message);
        return enhanceError(error2, config3, code, request3, response);
      };
    }
  });

  // node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "node_modules/axios/lib/core/settle.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var createError = require_createError();
      module.exports = function settle(resolve2, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve2(response);
        } else {
          reject(createError(
            "Request failed with status code " + response.status,
            response.config,
            null,
            response.request,
            response
          ));
        }
      };
    }
  });

  // node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      module.exports = utils.isStandardBrowserEnv() ? (
        // Standard browser envs support document.cookie
        /* @__PURE__ */ (function standardBrowserEnv() {
          return {
            write: function write4(name2, value, expires, path, domain2, secure) {
              var cookie = [];
              cookie.push(name2 + "=" + encodeURIComponent(value));
              if (utils.isNumber(expires)) {
                cookie.push("expires=" + new Date(expires).toGMTString());
              }
              if (utils.isString(path)) {
                cookie.push("path=" + path);
              }
              if (utils.isString(domain2)) {
                cookie.push("domain=" + domain2);
              }
              if (secure === true) {
                cookie.push("secure");
              }
              document.cookie = cookie.join("; ");
            },
            read: function read2(name2) {
              var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
              return match ? decodeURIComponent(match[3]) : null;
            },
            remove: function remove(name2) {
              this.write(name2, "", Date.now() - 864e5);
            }
          };
        })()
      ) : (
        // Non standard browser env (web workers, react-native) lack needed support.
        /* @__PURE__ */ (function nonStandardBrowserEnv() {
          return {
            write: function write4() {
            },
            read: function read2() {
              return null;
            },
            remove: function remove() {
            }
          };
        })()
      );
    }
  });

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function isAbsoluteURL(url) {
        return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
      };
    }
  });

  // node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      };
    }
  });

  // node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module.exports = function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      };
    }
  });

  // node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ];
      module.exports = function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), function parser(line) {
          i = line.indexOf(":");
          key = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));
          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === "set-cookie") {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
          }
        });
        return parsed;
      };
    }
  });

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      module.exports = utils.isStandardBrowserEnv() ? (
        // Standard browser envs have full support of the APIs needed to test
        // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement("a");
          var originURL;
          function resolveURL(url) {
            var href = url;
            if (msie) {
              urlParsingNode.setAttribute("href", href);
              href = urlParsingNode.href;
            }
            urlParsingNode.setAttribute("href", href);
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
            };
          }
          originURL = resolveURL(window.location.href);
          return function isURLSameOrigin(requestURL) {
            var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
            return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
          };
        })()
      ) : (
        // Non standard browser envs (web workers, react-native) lack needed support.
        /* @__PURE__ */ (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
      );
    }
  });

  // node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      module.exports = function xhrAdapter(config3) {
        return new Promise(function dispatchXhrRequest(resolve2, reject) {
          var requestData = config3.data;
          var requestHeaders = config3.headers;
          var responseType = config3.responseType;
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request3 = new XMLHttpRequest();
          if (config3.auth) {
            var username = config3.auth.username || "";
            var password = config3.auth.password ? unescape(encodeURIComponent(config3.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
          }
          var fullPath = buildFullPath(config3.baseURL, config3.url);
          request3.open(config3.method.toUpperCase(), buildURL(fullPath, config3.params, config3.paramsSerializer), true);
          request3.timeout = config3.timeout;
          function onloadend() {
            if (!request3) {
              return;
            }
            var responseHeaders = "getAllResponseHeaders" in request3 ? parseHeaders(request3.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request3.responseText : request3.response;
            var response = {
              data: responseData,
              status: request3.status,
              statusText: request3.statusText,
              headers: responseHeaders,
              config: config3,
              request: request3
            };
            settle(resolve2, reject, response);
            request3 = null;
          }
          if ("onloadend" in request3) {
            request3.onloadend = onloadend;
          } else {
            request3.onreadystatechange = function handleLoad() {
              if (!request3 || request3.readyState !== 4) {
                return;
              }
              if (request3.status === 0 && !(request3.responseURL && request3.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request3.onabort = function handleAbort() {
            if (!request3) {
              return;
            }
            reject(createError("Request aborted", config3, "ECONNABORTED", request3));
            request3 = null;
          };
          request3.onerror = function handleError() {
            reject(createError("Network Error", config3, null, request3));
            request3 = null;
          };
          request3.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = "timeout of " + config3.timeout + "ms exceeded";
            if (config3.timeoutErrorMessage) {
              timeoutErrorMessage = config3.timeoutErrorMessage;
            }
            reject(createError(
              timeoutErrorMessage,
              config3,
              config3.transitional && config3.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              request3
            ));
            request3 = null;
          };
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue = (config3.withCredentials || isURLSameOrigin(fullPath)) && config3.xsrfCookieName ? cookies.read(config3.xsrfCookieName) : void 0;
            if (xsrfValue) {
              requestHeaders[config3.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request3) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
              if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
                delete requestHeaders[key];
              } else {
                request3.setRequestHeader(key, val);
              }
            });
          }
          if (!utils.isUndefined(config3.withCredentials)) {
            request3.withCredentials = !!config3.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request3.responseType = config3.responseType;
          }
          if (typeof config3.onDownloadProgress === "function") {
            request3.addEventListener("progress", config3.onDownloadProgress);
          }
          if (typeof config3.onUploadProgress === "function" && request3.upload) {
            request3.upload.addEventListener("progress", config3.onUploadProgress);
          }
          if (config3.cancelToken) {
            config3.cancelToken.promise.then(function onCanceled(cancel) {
              if (!request3) {
                return;
              }
              request3.abort();
              reject(cancel);
              request3 = null;
            });
          }
          if (!requestData) {
            requestData = null;
          }
          request3.send(requestData);
        });
      };
    }
  });

  // node_modules/axios/lib/defaults.js
  var require_defaults = __commonJS({
    "node_modules/axios/lib/defaults.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
          headers["Content-Type"] = value;
        }
      }
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
          adapter = require_xhr();
        }
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
          } catch (e) {
            if (e.name !== "SyntaxError") {
              throw e;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: getDefaultAdapter(),
        transformRequest: [function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          var transitional = this.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw enhanceError(e, this, "E_JSON_PARSE");
                }
                throw e;
              }
            }
          }
          return data;
        }],
        /**
         * A timeout in milliseconds to abort a request. If set to 0 (default) a
         * timeout is not created.
         */
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status2) {
          return status2 >= 200 && status2 < 300;
        }
      };
      defaults.headers = {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      };
      utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults;
    }
  });

  // node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "node_modules/axios/lib/core/transformData.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var defaults = require_defaults();
      module.exports = function transformData(data, headers, fns) {
        var context = this || defaults;
        utils.forEach(fns, function transform(fn) {
          data = fn.call(context, data, headers);
        });
        return data;
      };
    }
  });

  // node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };
    }
  });

  // node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults = require_defaults();
      function throwIfCancellationRequested(config3) {
        if (config3.cancelToken) {
          config3.cancelToken.throwIfRequested();
        }
      }
      module.exports = function dispatchRequest(config3) {
        throwIfCancellationRequested(config3);
        config3.headers = config3.headers || {};
        config3.data = transformData.call(
          config3,
          config3.data,
          config3.headers,
          config3.transformRequest
        );
        config3.headers = utils.merge(
          config3.headers.common || {},
          config3.headers[config3.method] || {},
          config3.headers
        );
        utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          function cleanHeaderConfig(method) {
            delete config3.headers[method];
          }
        );
        var adapter = config3.adapter || defaults.adapter;
        return adapter(config3).then(function onAdapterResolution(response) {
          throwIfCancellationRequested(config3);
          response.data = transformData.call(
            config3,
            response.data,
            response.headers,
            config3.transformResponse
          );
          return response;
        }, function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config3);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config3,
                reason.response.data,
                reason.response.headers,
                config3.transformResponse
              );
            }
          }
          return Promise.reject(reason);
        });
      };
    }
  });

  // node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      module.exports = function mergeConfig(config1, config22) {
        config22 = config22 || {};
        var config3 = {};
        var valueFromConfig2Keys = ["url", "method", "data"];
        var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
        var defaultToConfig2Keys = [
          "baseURL",
          "transformRequest",
          "transformResponse",
          "paramsSerializer",
          "timeout",
          "timeoutMessage",
          "withCredentials",
          "adapter",
          "responseType",
          "xsrfCookieName",
          "xsrfHeaderName",
          "onUploadProgress",
          "onDownloadProgress",
          "decompress",
          "maxContentLength",
          "maxBodyLength",
          "maxRedirects",
          "transport",
          "httpAgent",
          "httpsAgent",
          "cancelToken",
          "socketPath",
          "responseEncoding"
        ];
        var directMergeKeys = ["validateStatus"];
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config22[prop])) {
            config3[prop] = getMergedValue(config1[prop], config22[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config3[prop] = getMergedValue(void 0, config1[prop]);
          }
        }
        utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
          if (!utils.isUndefined(config22[prop])) {
            config3[prop] = getMergedValue(void 0, config22[prop]);
          }
        });
        utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
        utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
          if (!utils.isUndefined(config22[prop])) {
            config3[prop] = getMergedValue(void 0, config22[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            config3[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        utils.forEach(directMergeKeys, function merge(prop) {
          if (prop in config22) {
            config3[prop] = getMergedValue(config1[prop], config22[prop]);
          } else if (prop in config1) {
            config3[prop] = getMergedValue(void 0, config1[prop]);
          }
        });
        var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
        var otherKeys = Object.keys(config1).concat(Object.keys(config22)).filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });
        utils.forEach(otherKeys, mergeDeepProperties);
        return config3;
      };
    }
  });

  // node_modules/axios/package.json
  var require_package2 = __commonJS({
    "node_modules/axios/package.json"(exports, module) {
      module.exports = {
        name: "axios",
        version: "0.21.4",
        description: "Promise based HTTP client for the browser and node.js",
        main: "index.js",
        scripts: {
          test: "grunt test",
          start: "node ./sandbox/server.js",
          build: "NODE_ENV=production grunt build",
          preversion: "npm test",
          version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
          postversion: "git push && git push --tags",
          examples: "node ./examples/server.js",
          coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
          fix: "eslint --fix lib/**/*.js"
        },
        repository: {
          type: "git",
          url: "https://github.com/axios/axios.git"
        },
        keywords: [
          "xhr",
          "http",
          "ajax",
          "promise",
          "node"
        ],
        author: "Matt Zabriskie",
        license: "MIT",
        bugs: {
          url: "https://github.com/axios/axios/issues"
        },
        homepage: "https://axios-http.com",
        devDependencies: {
          coveralls: "^3.0.0",
          "es6-promise": "^4.2.4",
          grunt: "^1.3.0",
          "grunt-banner": "^0.6.0",
          "grunt-cli": "^1.2.0",
          "grunt-contrib-clean": "^1.1.0",
          "grunt-contrib-watch": "^1.0.0",
          "grunt-eslint": "^23.0.0",
          "grunt-karma": "^4.0.0",
          "grunt-mocha-test": "^0.13.3",
          "grunt-ts": "^6.0.0-beta.19",
          "grunt-webpack": "^4.0.2",
          "istanbul-instrumenter-loader": "^1.0.0",
          "jasmine-core": "^2.4.1",
          karma: "^6.3.2",
          "karma-chrome-launcher": "^3.1.0",
          "karma-firefox-launcher": "^2.1.0",
          "karma-jasmine": "^1.1.1",
          "karma-jasmine-ajax": "^0.1.13",
          "karma-safari-launcher": "^1.0.0",
          "karma-sauce-launcher": "^4.3.6",
          "karma-sinon": "^1.0.5",
          "karma-sourcemap-loader": "^0.3.8",
          "karma-webpack": "^4.0.2",
          "load-grunt-tasks": "^3.5.2",
          minimist: "^1.2.0",
          mocha: "^8.2.1",
          sinon: "^4.5.0",
          "terser-webpack-plugin": "^4.2.3",
          typescript: "^4.0.5",
          "url-search-params": "^0.10.0",
          webpack: "^4.44.2",
          "webpack-dev-server": "^3.11.0"
        },
        browser: {
          "./lib/adapters/http.js": "./lib/adapters/xhr.js"
        },
        jsdelivr: "dist/axios.min.js",
        unpkg: "dist/axios.min.js",
        typings: "./index.d.ts",
        dependencies: {
          "follow-redirects": "^1.14.0"
        },
        bundlesize: [
          {
            path: "./dist/axios.min.js",
            threshold: "5kB"
          }
        ]
      };
    }
  });

  // node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "node_modules/axios/lib/helpers/validator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var pkg = require_package2();
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type2, i) {
        validators[type2] = function validator(thing) {
          return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
        };
      });
      var deprecatedWarnings = {};
      var currentVerArr = pkg.version.split(".");
      function isOlderVersion(version3, thanVersion) {
        var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
        var destVer = version3.split(".");
        for (var i = 0; i < 3; i++) {
          if (pkgVersionArr[i] > destVer[i]) {
            return true;
          } else if (pkgVersionArr[i] < destVer[i]) {
            return false;
          }
        }
        return false;
      }
      validators.transitional = function transitional(validator, version3, message) {
        var isDeprecated = version3 && isOlderVersion(version3);
        function formatMessage(opt, desc) {
          return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return function(value, opt, opts) {
          if (validator === false) {
            throw new Error(formatMessage(opt, " has been removed in " + version3));
          }
          if (isDeprecated && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" + version3 + " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys2 = Object.keys(options);
        var i = keys2.length;
        while (i-- > 0) {
          var opt = keys2[i];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result = value === void 0 || validator(value, opt, options);
            if (result !== true) {
              throw new TypeError("option " + opt + " must be " + result);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      module.exports = {
        isOlderVersion,
        assertOptions,
        validators
      };
    }
  });

  // node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "node_modules/axios/lib/core/Axios.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      Axios.prototype.request = function request3(config3) {
        if (typeof config3 === "string") {
          config3 = arguments[1] || {};
          config3.url = arguments[0];
        } else {
          config3 = config3 || {};
        }
        config3 = mergeConfig(this.defaults, config3);
        if (config3.method) {
          config3.method = config3.method.toLowerCase();
        } else if (this.defaults.method) {
          config3.method = this.defaults.method.toLowerCase();
        } else {
          config3.method = "get";
        }
        var transitional = config3.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
            clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
          }, false);
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config3) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain = chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config3);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config3;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error2) {
            onRejected(error2);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error2) {
          return Promise.reject(error2);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
        }
        return promise;
      };
      Axios.prototype.getUri = function getUri(config3) {
        config3 = mergeConfig(this.defaults, config3);
        return buildURL(config3.url, config3.params, config3.paramsSerializer).replace(/^\?/, "");
      };
      utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config3) {
          return this.request(mergeConfig(config3 || {}, {
            method,
            url,
            data: (config3 || {}).data
          }));
        };
      });
      utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        Axios.prototype[method] = function(url, data, config3) {
          return this.request(mergeConfig(config3 || {}, {
            method,
            url,
            data
          }));
        };
      });
      module.exports = Axios;
    }
  });

  // node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function Cancel(message) {
        this.message = message;
      }
      Cancel.prototype.toString = function toString4() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      };
      Cancel.prototype.__CANCEL__ = true;
      module.exports = Cancel;
    }
  });

  // node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve2) {
          resolvePromise = resolve2;
        });
        var token = this;
        executor(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      };
      module.exports = CancelToken;
    }
  });

  // node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "node_modules/axios/lib/helpers/spread.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      };
    }
  });

  // node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function isAxiosError(payload) {
        return typeof payload === "object" && payload.isAxiosError === true;
      };
    }
  });

  // node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "node_modules/axios/lib/axios.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var utils = require_utils7();
      var bind = require_bind();
      var Axios = require_Axios();
      var mergeConfig = require_mergeConfig();
      var defaults = require_defaults();
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = bind(Axios.prototype.request, context);
        utils.extend(instance, Axios.prototype, context);
        utils.extend(instance, context);
        return instance;
      }
      var axios = createInstance(defaults);
      axios.Axios = Axios;
      axios.create = function create(instanceConfig) {
        return createInstance(mergeConfig(axios.defaults, instanceConfig));
      };
      axios.Cancel = require_Cancel();
      axios.CancelToken = require_CancelToken();
      axios.isCancel = require_isCancel();
      axios.all = function all(promises) {
        return Promise.all(promises);
      };
      axios.spread = require_spread();
      axios.isAxiosError = require_isAxiosError();
      module.exports = axios;
      module.exports.default = axios;
    }
  });

  // node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "node_modules/axios/index.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_axios();
    }
  });

  // node_modules/@opengsn/common/dist/HttpWrapper.js
  var require_HttpWrapper = __commonJS({
    "node_modules/@opengsn/common/dist/HttpWrapper.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var axios_1 = __importDefault(require_axios2());
      var LOGMAXLEN = 120;
      var DEFAULT_TIMEOUT = 15e3;
      var HttpWrapper = class {
        constructor(opts = {}, logreq = false) {
          this.provider = axios_1.default.create(Object.assign({
            timeout: DEFAULT_TIMEOUT,
            headers: { "Content-Type": "application/json" }
          }, opts));
          this.logreq = logreq;
          if (this.logreq) {
            this.provider.interceptors.response.use(function(response) {
              console.log("got response:", response.config.url, JSON.stringify(response.data).slice(0, LOGMAXLEN));
              return response;
            }, async function(error2) {
              const errData = error2.response != null ? error2.response.data : { error: error2.message };
              const errStr = (typeof errData === "string" ? errData : JSON.stringify(errData)).slice(0, LOGMAXLEN);
              const errUrl = error2.response != null ? error2.response.config.url : error2.address;
              console.log("got response:", errUrl, "err=", errStr);
              return await Promise.reject(error2);
            });
          }
        }
        async sendPromise(url, jsonRequestData) {
          if (this.logreq) {
            console.log("sending request:", url, JSON.stringify(jsonRequestData !== null && jsonRequestData !== void 0 ? jsonRequestData : {}).slice(0, LOGMAXLEN));
          }
          const response = await this.provider.request({
            url,
            method: jsonRequestData != null ? "POST" : "GET",
            data: jsonRequestData
          });
          return response.data;
        }
      };
      exports.HttpWrapper = HttpWrapper;
    }
  });

  // node_modules/@opengsn/provider/dist/RelaySelectionManager.js
  var require_RelaySelectionManager = __commonJS({
    "node_modules/@opengsn/provider/dist/RelaySelectionManager.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ErrorReplacerJSON_1 = require_ErrorReplacerJSON();
      var GSNContractsDataTypes_1 = require_GSNContractsDataTypes();
      var RelaySelectionManager = class {
        constructor(gsnTransactionDetails, knownRelaysManager, httpClient, pingFilter, logger, config3) {
          this.remainingRelays = [];
          this.isInitialized = false;
          this.errors = /* @__PURE__ */ new Map();
          this.gsnTransactionDetails = gsnTransactionDetails;
          this.knownRelaysManager = knownRelaysManager;
          this.httpClient = httpClient;
          this.pingFilter = pingFilter;
          this.config = config3;
          this.logger = logger;
        }
        /**
         * Ping those relays that were not pinged yet, and remove both the returned relay or relays re from {@link remainingRelays}
         * @returns the first relay to respond to a ping message. Note: will never return the same relay twice.
         */
        async selectNextRelay(paymaster) {
          while (true) {
            const slice3 = this._getNextSlice();
            let relayInfo;
            if (slice3.length > 0) {
              relayInfo = await this._nextRelayInternal(slice3, paymaster);
              if (relayInfo == null) {
                continue;
              }
            }
            return relayInfo;
          }
        }
        async _nextRelayInternal(relays, paymaster) {
          this.logger.info("nextRelay: find fastest relay from: " + JSON.stringify(relays));
          const raceResult = await this._raceToSuccess(relays, paymaster);
          this.logger.info(`race finished with a result: ${JSON.stringify(raceResult, ErrorReplacerJSON_1.replaceErrors)}`);
          this._handleRaceResults(raceResult);
          if (raceResult.winner != null) {
            if (GSNContractsDataTypes_1.isInfoFromEvent(raceResult.winner.relayInfo)) {
              return raceResult.winner;
            } else {
              const managerAddress = raceResult.winner.pingResponse.relayManagerAddress;
              this.logger.info(`finding relay register info for manager address: ${managerAddress}; known info: ${JSON.stringify(raceResult.winner.relayInfo)}`);
              const events = await this.knownRelaysManager.getRelayInfoForManagers(/* @__PURE__ */ new Set([managerAddress]));
              if (events.length === 1) {
                const relayInfo = events[0];
                relayInfo.relayUrl = raceResult.winner.relayInfo.relayUrl;
                return {
                  pingResponse: raceResult.winner.pingResponse,
                  relayInfo
                };
              } else {
                throw new Error("Could not find register event for the winning preferred relay");
              }
            }
          }
        }
        async init() {
          this.remainingRelays = await this.knownRelaysManager.getRelaysSortedForTransaction(this.gsnTransactionDetails);
          this.isInitialized = true;
          return this;
        }
        // relays left to try
        // (note that some edge-cases (like duplicate urls) are not filtered out)
        relaysLeft() {
          return this.remainingRelays.flatMap((list) => list);
        }
        _getNextSlice() {
          if (!this.isInitialized) {
            throw new Error("init() not called");
          }
          for (const relays of this.remainingRelays) {
            const bulkSize = Math.min(this.config.sliceSize, relays.length);
            const slice3 = relays.slice(0, bulkSize);
            if (slice3.length === 0) {
              continue;
            }
            return slice3;
          }
          return [];
        }
        /**
         * @returns JSON response from the relay server, but adds the requested URL to it :'-(
         */
        async _getRelayAddressPing(relayInfo, paymaster) {
          this.logger.info(`getRelayAddressPing URL: ${relayInfo.relayUrl}`);
          const pingResponse = await this.httpClient.getPingResponse(relayInfo.relayUrl, paymaster);
          if (!pingResponse.ready) {
            throw new Error(`Relay not ready ${JSON.stringify(pingResponse)}`);
          }
          this.pingFilter(pingResponse, this.gsnTransactionDetails);
          return {
            pingResponse,
            relayInfo
          };
        }
        /**
         * From https://stackoverflow.com/a/37235207 (added types, modified to catch exceptions)
         * Accepts an array of promises.
         * Resolves once any promise resolves, ignores the rest. Exceptions returned separately.
         */
        async _raceToSuccess(relays, paymaster) {
          const errors2 = /* @__PURE__ */ new Map();
          return await new Promise((resolve2) => {
            relays.forEach((relay) => {
              this._getRelayAddressPing(relay, paymaster).then((winner) => {
                resolve2({
                  winner,
                  errors: errors2
                });
              }).catch((err2) => {
                errors2.set(relay.relayUrl, err2);
                if (errors2.size === relays.length) {
                  resolve2({ errors: errors2 });
                }
              });
            });
          });
        }
        _handleRaceResults(raceResult) {
          if (!this.isInitialized) {
            throw new Error("init() not called");
          }
          this.errors = new Map([...this.errors, ...raceResult.errors]);
          this.remainingRelays = this.remainingRelays.map((relays) => relays.filter((eventInfo) => {
            var _a;
            return eventInfo.relayUrl !== ((_a = raceResult.winner) === null || _a === void 0 ? void 0 : _a.relayInfo.relayUrl);
          }).filter((eventInfo) => !Array.from(raceResult.errors.keys()).includes(eventInfo.relayUrl)));
        }
      };
      exports.RelaySelectionManager = RelaySelectionManager;
    }
  });

  // node_modules/@opengsn/provider/dist/RelayedTransactionValidator.js
  var require_RelayedTransactionValidator = __commonJS({
    "node_modules/@opengsn/provider/dist/RelayedTransactionValidator.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var tx_1 = require_dist5();
      var ethereumjs_util_1 = require_dist3();
      var Utils_1 = require_Utils();
      var RelayedTransactionValidator = class {
        constructor(contractInteractor, logger, config3) {
          this.contractInteractor = contractInteractor;
          this.config = config3;
          this.logger = logger;
        }
        /**
         * Decode the signed transaction returned from the Relay Server, compare it to the
         * requested transaction and validate its signature.
         * @returns a signed {@link Transaction} instance for broadcasting, or null if returned
         * transaction is not valid.
         */
        validateRelayResponse(request3, maxAcceptanceBudget, returnedTx) {
          const tx = tx_1.Transaction.fromSerializedTx(ethereumjs_util_1.toBuffer(returnedTx), this.contractInteractor.getRawTxOptions());
          const transaction = Object.assign({ signer: tx.getSenderAddress().toString() }, tx.toJSON());
          if (transaction.to == null) {
            throw new Error("transaction.to must be defined");
          }
          if (transaction.s == null || transaction.r == null || transaction.v == null) {
            throw new Error("tx signature must be defined");
          }
          this.logger.debug(`returnedTx: ${JSON.stringify(transaction, null, 2)}`);
          const signer = transaction.signer;
          const externalGasLimit = transaction.gasLimit;
          const relayRequestAbiEncode = this.contractInteractor.encodeABI(maxAcceptanceBudget, request3.relayRequest, request3.metadata.signature, request3.metadata.approvalData, externalGasLimit);
          const relayHubAddress = this.contractInteractor.getDeployment().relayHubAddress;
          if (relayHubAddress == null) {
            throw new Error("no hub address");
          }
          if (Utils_1.isSameAddress(transaction.to, relayHubAddress) && relayRequestAbiEncode === transaction.data && Utils_1.isSameAddress(request3.relayRequest.relayData.relayWorker, signer)) {
            this.logger.info("validateRelayResponse - valid transaction response");
            const receivedNonce = parseInt(transaction.nonce);
            if (receivedNonce > request3.metadata.relayMaxNonce) {
              throw new Error(`Relay used a tx nonce higher than requested. Requested ${request3.metadata.relayMaxNonce} got ${receivedNonce}`);
            }
            return true;
          } else {
            console.error("validateRelayResponse: req", relayRequestAbiEncode, relayHubAddress, request3.relayRequest.relayData.relayWorker);
            console.error("validateRelayResponse: rsp", transaction.data, transaction.to, signer);
            return false;
          }
        }
      };
      exports.RelayedTransactionValidator = RelayedTransactionValidator;
    }
  });

  // node_modules/@opengsn/provider/dist/KnownRelaysManager.js
  var require_KnownRelaysManager = __commonJS({
    "node_modules/@opengsn/provider/dist/KnownRelaysManager.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var Utils_1 = require_Utils();
      var GSNContractsDataTypes_1 = require_GSNContractsDataTypes();
      exports.EmptyFilter = () => {
        return true;
      };
      exports.DefaultRelayScore = async function(relay, txDetails, failures) {
        var _a, _b;
        const gasLimit = parseInt((_a = txDetails.gas) !== null && _a !== void 0 ? _a : "0");
        const gasPrice = parseInt((_b = txDetails.gasPrice) !== null && _b !== void 0 ? _b : "0");
        const pctFee = parseInt(relay.pctRelayFee);
        const baseFee = parseInt(relay.baseRelayFee);
        const transactionCost = baseFee + gasLimit * gasPrice * (100 + pctFee) / 100;
        let score = Math.max(Number.MAX_SAFE_INTEGER - transactionCost, 0);
        score = score * Math.pow(0.9, failures.length);
        return score;
      };
      var KnownRelaysManager = class {
        constructor(contractInteractor, logger, config3, relayFilter, scoreCalculator) {
          this.latestScannedBlock = 0;
          this.relayFailures = /* @__PURE__ */ new Map();
          this.preferredRelayers = [];
          this.allRelayers = [];
          this.config = config3;
          this.logger = logger;
          this.relayFilter = relayFilter !== null && relayFilter !== void 0 ? relayFilter : exports.EmptyFilter;
          this.scoreCalculator = scoreCalculator !== null && scoreCalculator !== void 0 ? scoreCalculator : exports.DefaultRelayScore;
          this.contractInteractor = contractInteractor;
        }
        async refresh() {
          this._refreshFailures();
          const recentlyActiveRelayManagers = await this._fetchRecentlyActiveRelayManagers();
          this.preferredRelayers = this.config.preferredRelays.map((relayUrl) => {
            return { relayUrl };
          });
          this.allRelayers = await this.getRelayInfoForManagers(recentlyActiveRelayManagers);
        }
        async getRelayInfoForManagers(relayManagers) {
          if (relayManagers.size === 0) {
            return [];
          }
          const toBlock = await this.contractInteractor.getBlockNumber();
          const fromBlock = Math.max(0, toBlock - this.config.relayRegistrationLookupBlocks);
          const topics = Utils_1.addresses2topics(Array.from(relayManagers));
          const relayServerRegisteredEvents = await this.contractInteractor.getPastEventsForHub(topics, { fromBlock }, [GSNContractsDataTypes_1.RelayServerRegistered]);
          const relayManagerExitEvents = await this.contractInteractor.getPastEventsForStakeManager([GSNContractsDataTypes_1.StakeUnlocked, GSNContractsDataTypes_1.HubUnauthorized, GSNContractsDataTypes_1.StakePenalized], topics, { fromBlock });
          this.logger.info(`== getRelayInfoForManagers: found ${relayServerRegisteredEvents.length} unique RelayServerRegistered events`);
          if (relayServerRegisteredEvents.length === 0) {
            this.logger.error(`Did not find any RelayServerRegistered Event for any of ${relayManagers.size} relay managers! {fromBlock: ${fromBlock}, toBlock: ${toBlock}}`);
          }
          const mergedEvents = [...relayManagerExitEvents, ...relayServerRegisteredEvents].sort((a, b) => {
            const blockNumberA = a.blockNumber;
            const blockNumberB = b.blockNumber;
            const transactionIndexA = a.transactionIndex;
            const transactionIndexB = b.transactionIndex;
            if (blockNumberA === blockNumberB) {
              return transactionIndexA - transactionIndexB;
            }
            return blockNumberA - blockNumberB;
          });
          const activeRelays = /* @__PURE__ */ new Map();
          mergedEvents.forEach((event) => {
            const args = event.returnValues;
            if (event.event === GSNContractsDataTypes_1.RelayServerRegistered) {
              activeRelays.set(args.relayManager, args);
            } else {
              activeRelays.delete(args.relayManager);
            }
          });
          const origRelays = Array.from(activeRelays.values());
          return origRelays.filter(this.relayFilter);
        }
        async _fetchRecentlyActiveRelayManagers() {
          const toBlock = await this.contractInteractor.getBlockNumber();
          const fromBlock = Math.max(0, toBlock - this.config.relayLookupWindowBlocks);
          const relayEvents = await this.contractInteractor.getPastEventsForHub([], {
            fromBlock,
            toBlock
          }, void 0);
          this.logger.info(`fetchRelaysAdded: found ${relayEvents.length} events`);
          const foundRelayManagers = /* @__PURE__ */ new Set();
          relayEvents.forEach((event) => {
            foundRelayManagers.add(event.returnValues.relayManager);
          });
          this.logger.info(`fetchRelaysAdded: found unique relays: ${JSON.stringify(Array.from(foundRelayManagers.values()))}`);
          this.latestScannedBlock = toBlock;
          return foundRelayManagers;
        }
        _refreshFailures() {
          const newMap = /* @__PURE__ */ new Map();
          this.relayFailures.forEach((value, key) => {
            newMap.set(key, value.filter((failure) => {
              const elapsed = ((/* @__PURE__ */ new Date()).getTime() - failure.lastErrorTime) / 1e3;
              return elapsed < this.config.relayTimeoutGrace;
            }));
          });
          this.relayFailures = newMap;
        }
        async getRelaysSortedForTransaction(gsnTransactionDetails) {
          const sortedRelays = [];
          sortedRelays[0] = Array.from(this.preferredRelayers);
          sortedRelays[1] = await this._sortRelaysInternal(gsnTransactionDetails, this.allRelayers);
          return sortedRelays;
        }
        getAuditors(excludeUrls) {
          const indexes = [];
          const auditors = [];
          const flatRelayers = [...this.preferredRelayers, ...this.allRelayers].map((it) => it.relayUrl).filter((it) => !excludeUrls.includes(it)).filter((value, index, self2) => {
            return self2.indexOf(value) === index;
          });
          if (flatRelayers.length <= this.config.auditorsCount) {
            if (flatRelayers.length < this.config.auditorsCount) {
              this.logger.warn(`Not enough auditors: request ${this.config.auditorsCount} but only have ${flatRelayers.length}`);
            }
            return flatRelayers;
          }
          do {
            const index = Math.floor(Math.random() * flatRelayers.length);
            if (!indexes.includes(index)) {
              auditors.push(flatRelayers[index]);
              indexes.push(index);
            }
          } while (auditors.length < this.config.auditorsCount);
          return auditors;
        }
        async _sortRelaysInternal(gsnTransactionDetails, activeRelays) {
          var _a;
          const scores = /* @__PURE__ */ new Map();
          for (const activeRelay of activeRelays) {
            let score = 0;
            if (GSNContractsDataTypes_1.isInfoFromEvent(activeRelay)) {
              const eventInfo = activeRelay;
              score = await this.scoreCalculator(eventInfo, gsnTransactionDetails, (_a = this.relayFailures.get(activeRelay.relayUrl)) !== null && _a !== void 0 ? _a : []);
              scores.set(eventInfo.relayManager, score);
            }
          }
          return Array.from(activeRelays.values()).filter(GSNContractsDataTypes_1.isInfoFromEvent).map((value) => value).sort((a, b) => {
            var _a2, _b;
            const aScore = (_a2 = scores.get(a.relayManager)) !== null && _a2 !== void 0 ? _a2 : 0;
            const bScore = (_b = scores.get(b.relayManager)) !== null && _b !== void 0 ? _b : 0;
            return bScore - aScore;
          });
        }
        saveRelayFailure(lastErrorTime, relayManager, relayUrl) {
          const relayFailures = this.relayFailures.get(relayUrl);
          const newFailureInfo = {
            lastErrorTime,
            relayManager,
            relayUrl
          };
          if (relayFailures == null) {
            this.relayFailures.set(relayUrl, [newFailureInfo]);
          } else {
            relayFailures.push(newFailureInfo);
          }
        }
      };
      exports.KnownRelaysManager = KnownRelaysManager;
    }
  });

  // node_modules/loglevel/lib/loglevel.js
  var require_loglevel = __commonJS({
    "node_modules/loglevel/lib/loglevel.js"(exports, module) {
      init_process();
      init_buffer();
      (function(root, definition) {
        "use strict";
        if (typeof define === "function" && define.amd) {
          define(definition);
        } else if (typeof module === "object" && module.exports) {
          module.exports = definition();
        } else {
          root.log = definition();
        }
      })(exports, function() {
        "use strict";
        var noop3 = function() {
        };
        var undefinedType = "undefined";
        var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
        var logMethods = [
          "trace",
          "debug",
          "info",
          "warn",
          "error"
        ];
        var _loggersByName = {};
        var defaultLogger = null;
        function bindMethod(obj, methodName) {
          var method = obj[methodName];
          if (typeof method.bind === "function") {
            return method.bind(obj);
          } else {
            try {
              return Function.prototype.bind.call(method, obj);
            } catch (e) {
              return function() {
                return Function.prototype.apply.apply(method, [obj, arguments]);
              };
            }
          }
        }
        function traceForIE() {
          if (console.log) {
            if (console.log.apply) {
              console.log.apply(console, arguments);
            } else {
              Function.prototype.apply.apply(console.log, [console, arguments]);
            }
          }
          if (console.trace) console.trace();
        }
        function realMethod(methodName) {
          if (methodName === "debug") {
            methodName = "log";
          }
          if (typeof console === undefinedType) {
            return false;
          } else if (methodName === "trace" && isIE) {
            return traceForIE;
          } else if (console[methodName] !== void 0) {
            return bindMethod(console, methodName);
          } else if (console.log !== void 0) {
            return bindMethod(console, "log");
          } else {
            return noop3;
          }
        }
        function replaceLoggingMethods() {
          var level = this.getLevel();
          for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = i < level ? noop3 : this.methodFactory(methodName, level, this.name);
          }
          this.log = this.debug;
          if (typeof console === undefinedType && level < this.levels.SILENT) {
            return "No console available for logging";
          }
        }
        function enableLoggingWhenConsoleArrives(methodName) {
          return function() {
            if (typeof console !== undefinedType) {
              replaceLoggingMethods.call(this);
              this[methodName].apply(this, arguments);
            }
          };
        }
        function defaultMethodFactory(methodName, _level, _loggerName) {
          return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
        }
        function Logger(name2, factory) {
          var self2 = this;
          var inheritedLevel;
          var defaultLevel;
          var userLevel;
          var storageKey = "loglevel";
          if (typeof name2 === "string") {
            storageKey += ":" + name2;
          } else if (typeof name2 === "symbol") {
            storageKey = void 0;
          }
          function persistLevelIfPossible(levelNum) {
            var levelName = (logMethods[levelNum] || "silent").toUpperCase();
            if (typeof window === undefinedType || !storageKey) return;
            try {
              window.localStorage[storageKey] = levelName;
              return;
            } catch (ignore) {
            }
            try {
              window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
            } catch (ignore) {
            }
          }
          function getPersistedLevel() {
            var storedLevel;
            if (typeof window === undefinedType || !storageKey) return;
            try {
              storedLevel = window.localStorage[storageKey];
            } catch (ignore) {
            }
            if (typeof storedLevel === undefinedType) {
              try {
                var cookie = window.document.cookie;
                var cookieName = encodeURIComponent(storageKey);
                var location = cookie.indexOf(cookieName + "=");
                if (location !== -1) {
                  storedLevel = /^([^;]+)/.exec(
                    cookie.slice(location + cookieName.length + 1)
                  )[1];
                }
              } catch (ignore) {
              }
            }
            if (self2.levels[storedLevel] === void 0) {
              storedLevel = void 0;
            }
            return storedLevel;
          }
          function clearPersistedLevel() {
            if (typeof window === undefinedType || !storageKey) return;
            try {
              window.localStorage.removeItem(storageKey);
            } catch (ignore) {
            }
            try {
              window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
            } catch (ignore) {
            }
          }
          function normalizeLevel(input) {
            var level = input;
            if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
              level = self2.levels[level.toUpperCase()];
            }
            if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
              return level;
            } else {
              throw new TypeError("log.setLevel() called with invalid level: " + input);
            }
          }
          self2.name = name2;
          self2.levels = {
            "TRACE": 0,
            "DEBUG": 1,
            "INFO": 2,
            "WARN": 3,
            "ERROR": 4,
            "SILENT": 5
          };
          self2.methodFactory = factory || defaultMethodFactory;
          self2.getLevel = function() {
            if (userLevel != null) {
              return userLevel;
            } else if (defaultLevel != null) {
              return defaultLevel;
            } else {
              return inheritedLevel;
            }
          };
          self2.setLevel = function(level, persist) {
            userLevel = normalizeLevel(level);
            if (persist !== false) {
              persistLevelIfPossible(userLevel);
            }
            return replaceLoggingMethods.call(self2);
          };
          self2.setDefaultLevel = function(level) {
            defaultLevel = normalizeLevel(level);
            if (!getPersistedLevel()) {
              self2.setLevel(level, false);
            }
          };
          self2.resetLevel = function() {
            userLevel = null;
            clearPersistedLevel();
            replaceLoggingMethods.call(self2);
          };
          self2.enableAll = function(persist) {
            self2.setLevel(self2.levels.TRACE, persist);
          };
          self2.disableAll = function(persist) {
            self2.setLevel(self2.levels.SILENT, persist);
          };
          self2.rebuild = function() {
            if (defaultLogger !== self2) {
              inheritedLevel = normalizeLevel(defaultLogger.getLevel());
            }
            replaceLoggingMethods.call(self2);
            if (defaultLogger === self2) {
              for (var childName in _loggersByName) {
                _loggersByName[childName].rebuild();
              }
            }
          };
          inheritedLevel = normalizeLevel(
            defaultLogger ? defaultLogger.getLevel() : "WARN"
          );
          var initialLevel = getPersistedLevel();
          if (initialLevel != null) {
            userLevel = normalizeLevel(initialLevel);
          }
          replaceLoggingMethods.call(self2);
        }
        defaultLogger = new Logger();
        defaultLogger.getLogger = function getLogger(name2) {
          if (typeof name2 !== "symbol" && typeof name2 !== "string" || name2 === "") {
            throw new TypeError("You must supply a name when creating a logger.");
          }
          var logger = _loggersByName[name2];
          if (!logger) {
            logger = _loggersByName[name2] = new Logger(
              name2,
              defaultLogger.methodFactory
            );
          }
          return logger;
        };
        var _log = typeof window !== undefinedType ? window.log : void 0;
        defaultLogger.noConflict = function() {
          if (typeof window !== undefinedType && window.log === defaultLogger) {
            window.log = _log;
          }
          return defaultLogger;
        };
        defaultLogger.getLoggers = function getLoggers() {
          return _loggersByName;
        };
        defaultLogger["default"] = defaultLogger;
        return defaultLogger;
      });
    }
  });

  // node_modules/logform/dist/format.js
  var require_format = __commonJS({
    "node_modules/logform/dist/format.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _wrapNativeSuper(t) {
        var r = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return _wrapNativeSuper = function _wrapNativeSuper2(t2) {
          if (null === t2 || !_isNativeFunction(t2)) return t2;
          if ("function" != typeof t2) throw new TypeError("Super expression must either be null or a function");
          if (void 0 !== r) {
            if (r.has(t2)) return r.get(t2);
            r.set(t2, Wrapper);
          }
          function Wrapper() {
            return _construct(t2, arguments, _getPrototypeOf(this).constructor);
          }
          return Wrapper.prototype = Object.create(t2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }), _setPrototypeOf(Wrapper, t2);
        }, _wrapNativeSuper(t);
      }
      function _construct(t, e, r) {
        if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
        var o = [null];
        o.push.apply(o, e);
        var p = new (t.bind.apply(t, o))();
        return r && _setPrototypeOf(p, r.prototype), p;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _isNativeFunction(t) {
        try {
          return -1 !== Function.toString.call(t).indexOf("[native code]");
        } catch (n) {
          return "function" == typeof t;
        }
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      var InvalidFormatError = /* @__PURE__ */ (function(_Error) {
        function InvalidFormatError2(formatFn) {
          var _this;
          _classCallCheck(this, InvalidFormatError2);
          _this = _callSuper(this, InvalidFormatError2, ["Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ".concat(formatFn.toString().split("\n")[0], "\n")]);
          Error.captureStackTrace(_this, InvalidFormatError2);
          return _this;
        }
        _inherits(InvalidFormatError2, _Error);
        return _createClass(InvalidFormatError2);
      })(/* @__PURE__ */ _wrapNativeSuper(Error));
      module.exports = function(formatFn) {
        if (formatFn.length > 2) {
          throw new InvalidFormatError(formatFn);
        }
        function Format() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          this.options = options;
        }
        Format.prototype.transform = formatFn;
        function createFormatWrap(opts) {
          return new Format(opts);
        }
        createFormatWrap.Format = Format;
        return createFormatWrap;
      };
    }
  });

  // node_modules/@colors/colors/lib/styles.js
  var require_styles = __commonJS({
    "node_modules/@colors/colors/lib/styles.js"(exports, module) {
      init_process();
      init_buffer();
      var styles = {};
      module["exports"] = styles;
      var codes2 = {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29],
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        grey: [90, 39],
        brightRed: [91, 39],
        brightGreen: [92, 39],
        brightYellow: [93, 39],
        brightBlue: [94, 39],
        brightMagenta: [95, 39],
        brightCyan: [96, 39],
        brightWhite: [97, 39],
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgGray: [100, 49],
        bgGrey: [100, 49],
        bgBrightRed: [101, 49],
        bgBrightGreen: [102, 49],
        bgBrightYellow: [103, 49],
        bgBrightBlue: [104, 49],
        bgBrightMagenta: [105, 49],
        bgBrightCyan: [106, 49],
        bgBrightWhite: [107, 49],
        // legacy styles for colors pre v1.0.0
        blackBG: [40, 49],
        redBG: [41, 49],
        greenBG: [42, 49],
        yellowBG: [43, 49],
        blueBG: [44, 49],
        magentaBG: [45, 49],
        cyanBG: [46, 49],
        whiteBG: [47, 49]
      };
      Object.keys(codes2).forEach(function(key) {
        var val = codes2[key];
        var style = styles[key] = [];
        style.open = "\x1B[" + val[0] + "m";
        style.close = "\x1B[" + val[1] + "m";
      });
    }
  });

  // node-modules-polyfills:os
  var os_exports = {};
  __export(os_exports, {
    EOL: () => EOL,
    arch: () => arch,
    cpus: () => cpus,
    default: () => os_default,
    endianness: () => endianness,
    freemem: () => freemem,
    getNetworkInterfaces: () => getNetworkInterfaces,
    hostname: () => hostname,
    loadavg: () => loadavg,
    networkInterfaces: () => networkInterfaces,
    platform: () => platform3,
    release: () => release3,
    tmpDir: () => tmpDir,
    tmpdir: () => tmpdir,
    totalmem: () => totalmem,
    type: () => type,
    uptime: () => uptime3
  });
  function endianness() {
    if (typeof _endianness === "undefined") {
      var a = new ArrayBuffer(2);
      var b = new Uint8Array(a);
      var c = new Uint16Array(a);
      b[0] = 1;
      b[1] = 2;
      if (c[0] === 258) {
        _endianness = "BE";
      } else if (c[0] === 513) {
        _endianness = "LE";
      } else {
        throw new Error("unable to figure out endianess");
      }
    }
    return _endianness;
  }
  function hostname() {
    if (typeof window.location !== "undefined") {
      return window.location.hostname;
    } else return "";
  }
  function loadavg() {
    return [];
  }
  function uptime3() {
    return 0;
  }
  function freemem() {
    return Number.MAX_VALUE;
  }
  function totalmem() {
    return Number.MAX_VALUE;
  }
  function cpus() {
    return [];
  }
  function type() {
    return "Browser";
  }
  function release3() {
    if (typeof window.navigator !== "undefined") {
      return window.navigator.appVersion;
    }
    return "";
  }
  function networkInterfaces() {
  }
  function getNetworkInterfaces() {
  }
  function arch() {
    return "javascript";
  }
  function platform3() {
    return "browser";
  }
  function tmpDir() {
    return "/tmp";
  }
  var _endianness, tmpdir, EOL, os_default;
  var init_os = __esm({
    "node-modules-polyfills:os"() {
      init_process();
      init_buffer();
      tmpdir = tmpDir;
      EOL = "\n";
      os_default = {
        EOL,
        tmpdir,
        tmpDir,
        networkInterfaces,
        getNetworkInterfaces,
        release: release3,
        type,
        cpus,
        totalmem,
        freemem,
        uptime: uptime3,
        loadavg,
        hostname,
        endianness
      };
    }
  });

  // node-modules-polyfills-commonjs:os
  var require_os = __commonJS({
    "node-modules-polyfills-commonjs:os"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_os(), __toCommonJS(os_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/@colors/colors/lib/system/has-flag.js
  var require_has_flag = __commonJS({
    "node_modules/@colors/colors/lib/system/has-flag.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = function(flag, argv3) {
        argv3 = argv3 || process.argv || [];
        var terminatorPos = argv3.indexOf("--");
        var prefix = /^-{1,2}/.test(flag) ? "" : "--";
        var pos = argv3.indexOf(prefix + flag);
        return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
      };
    }
  });

  // node_modules/@colors/colors/lib/system/supports-colors.js
  var require_supports_colors = __commonJS({
    "node_modules/@colors/colors/lib/system/supports-colors.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var os = require_os();
      var hasFlag = require_has_flag();
      var env3 = process.env;
      var forceColor = void 0;
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
        forceColor = false;
      } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
        forceColor = true;
      }
      if ("FORCE_COLOR" in env3) {
        forceColor = env3.FORCE_COLOR.length === 0 || parseInt(env3.FORCE_COLOR, 10) !== 0;
      }
      function translateLevel(level) {
        if (level === 0) {
          return false;
        }
        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        };
      }
      function supportsColor(stream) {
        if (forceColor === false) {
          return 0;
        }
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
        if (stream && !stream.isTTY && forceColor !== true) {
          return 0;
        }
        var min = forceColor ? 1 : 0;
        if (process.platform === "win32") {
          var osRelease = os.release().split(".");
          if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in env3) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(sign) {
            return sign in env3;
          }) || env3.CI_NAME === "codeship") {
            return 1;
          }
          return min;
        }
        if ("TEAMCITY_VERSION" in env3) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env3.TEAMCITY_VERSION) ? 1 : 0;
        }
        if ("TERM_PROGRAM" in env3) {
          var version3 = parseInt((env3.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env3.TERM_PROGRAM) {
            case "iTerm.app":
              return version3 >= 3 ? 3 : 2;
            case "Hyper":
              return 3;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(env3.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env3.TERM)) {
          return 1;
        }
        if ("COLORTERM" in env3) {
          return 1;
        }
        if (env3.TERM === "dumb") {
          return min;
        }
        return min;
      }
      function getSupportLevel(stream) {
        var level = supportsColor(stream);
        return translateLevel(level);
      }
      module.exports = {
        supportsColor: getSupportLevel,
        stdout: getSupportLevel(process.stdout),
        stderr: getSupportLevel(process.stderr)
      };
    }
  });

  // node_modules/@colors/colors/lib/custom/trap.js
  var require_trap = __commonJS({
    "node_modules/@colors/colors/lib/custom/trap.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function runTheTrap(text, options) {
        var result = "";
        text = text || "Run the trap, drop the bass";
        text = text.split("");
        var trap = {
          a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"],
          b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"],
          c: ["\xA9", "\u023B", "\u03FE"],
          d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"],
          e: [
            "\xCB",
            "\u0115",
            "\u018E",
            "\u0258",
            "\u03A3",
            "\u03BE",
            "\u04BC",
            "\u0A6C"
          ],
          f: ["\u04FA"],
          g: ["\u0262"],
          h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"],
          i: ["\u0F0F"],
          j: ["\u0134"],
          k: ["\u0138", "\u04A0", "\u04C3", "\u051E"],
          l: ["\u0139"],
          m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"],
          n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"],
          o: [
            "\xD8",
            "\xF5",
            "\xF8",
            "\u01FE",
            "\u0298",
            "\u047A",
            "\u05DD",
            "\u06DD",
            "\u0E4F"
          ],
          p: ["\u01F7", "\u048E"],
          q: ["\u09CD"],
          r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"],
          s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"],
          t: ["\u0141", "\u0166", "\u0373"],
          u: ["\u01B1", "\u054D"],
          v: ["\u05D8"],
          w: ["\u0428", "\u0460", "\u047C", "\u0D70"],
          x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"],
          y: ["\xA5", "\u04B0", "\u04CB"],
          z: ["\u01B5", "\u0240"]
        };
        text.forEach(function(c) {
          c = c.toLowerCase();
          var chars = trap[c] || [" "];
          var rand = Math.floor(Math.random() * chars.length);
          if (typeof trap[c] !== "undefined") {
            result += trap[c][rand];
          } else {
            result += c;
          }
        });
        return result;
      };
    }
  });

  // node_modules/@colors/colors/lib/custom/zalgo.js
  var require_zalgo = __commonJS({
    "node_modules/@colors/colors/lib/custom/zalgo.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function zalgo(text, options) {
        text = text || "   he is here   ";
        var soul = {
          "up": [
            "\u030D",
            "\u030E",
            "\u0304",
            "\u0305",
            "\u033F",
            "\u0311",
            "\u0306",
            "\u0310",
            "\u0352",
            "\u0357",
            "\u0351",
            "\u0307",
            "\u0308",
            "\u030A",
            "\u0342",
            "\u0313",
            "\u0308",
            "\u034A",
            "\u034B",
            "\u034C",
            "\u0303",
            "\u0302",
            "\u030C",
            "\u0350",
            "\u0300",
            "\u0301",
            "\u030B",
            "\u030F",
            "\u0312",
            "\u0313",
            "\u0314",
            "\u033D",
            "\u0309",
            "\u0363",
            "\u0364",
            "\u0365",
            "\u0366",
            "\u0367",
            "\u0368",
            "\u0369",
            "\u036A",
            "\u036B",
            "\u036C",
            "\u036D",
            "\u036E",
            "\u036F",
            "\u033E",
            "\u035B",
            "\u0346",
            "\u031A"
          ],
          "down": [
            "\u0316",
            "\u0317",
            "\u0318",
            "\u0319",
            "\u031C",
            "\u031D",
            "\u031E",
            "\u031F",
            "\u0320",
            "\u0324",
            "\u0325",
            "\u0326",
            "\u0329",
            "\u032A",
            "\u032B",
            "\u032C",
            "\u032D",
            "\u032E",
            "\u032F",
            "\u0330",
            "\u0331",
            "\u0332",
            "\u0333",
            "\u0339",
            "\u033A",
            "\u033B",
            "\u033C",
            "\u0345",
            "\u0347",
            "\u0348",
            "\u0349",
            "\u034D",
            "\u034E",
            "\u0353",
            "\u0354",
            "\u0355",
            "\u0356",
            "\u0359",
            "\u035A",
            "\u0323"
          ],
          "mid": [
            "\u0315",
            "\u031B",
            "\u0300",
            "\u0301",
            "\u0358",
            "\u0321",
            "\u0322",
            "\u0327",
            "\u0328",
            "\u0334",
            "\u0335",
            "\u0336",
            "\u035C",
            "\u035D",
            "\u035E",
            "\u035F",
            "\u0360",
            "\u0362",
            "\u0338",
            "\u0337",
            "\u0361",
            " \u0489"
          ]
        };
        var all = [].concat(soul.up, soul.down, soul.mid);
        function randomNumber(range) {
          var r = Math.floor(Math.random() * range);
          return r;
        }
        function isChar(character) {
          var bool = false;
          all.filter(function(i) {
            bool = i === character;
          });
          return bool;
        }
        function heComes(text2, options2) {
          var result = "";
          var counts;
          var l;
          options2 = options2 || {};
          options2["up"] = typeof options2["up"] !== "undefined" ? options2["up"] : true;
          options2["mid"] = typeof options2["mid"] !== "undefined" ? options2["mid"] : true;
          options2["down"] = typeof options2["down"] !== "undefined" ? options2["down"] : true;
          options2["size"] = typeof options2["size"] !== "undefined" ? options2["size"] : "maxi";
          text2 = text2.split("");
          for (l in text2) {
            if (isChar(l)) {
              continue;
            }
            result = result + text2[l];
            counts = { "up": 0, "down": 0, "mid": 0 };
            switch (options2.size) {
              case "mini":
                counts.up = randomNumber(8);
                counts.mid = randomNumber(2);
                counts.down = randomNumber(8);
                break;
              case "maxi":
                counts.up = randomNumber(16) + 3;
                counts.mid = randomNumber(4) + 1;
                counts.down = randomNumber(64) + 3;
                break;
              default:
                counts.up = randomNumber(8) + 1;
                counts.mid = randomNumber(6) / 2;
                counts.down = randomNumber(8) + 1;
                break;
            }
            var arr = ["up", "mid", "down"];
            for (var d in arr) {
              var index = arr[d];
              for (var i = 0; i <= counts[index]; i++) {
                if (options2[index]) {
                  result = result + soul[index][randomNumber(soul[index].length)];
                }
              }
            }
          }
          return result;
        }
        return heComes(text, options);
      };
    }
  });

  // node_modules/@colors/colors/lib/maps/america.js
  var require_america = __commonJS({
    "node_modules/@colors/colors/lib/maps/america.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function(colors) {
        return function(letter, i, exploded) {
          if (letter === " ") return letter;
          switch (i % 3) {
            case 0:
              return colors.red(letter);
            case 1:
              return colors.white(letter);
            case 2:
              return colors.blue(letter);
          }
        };
      };
    }
  });

  // node_modules/@colors/colors/lib/maps/zebra.js
  var require_zebra = __commonJS({
    "node_modules/@colors/colors/lib/maps/zebra.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function(colors) {
        return function(letter, i, exploded) {
          return i % 2 === 0 ? letter : colors.inverse(letter);
        };
      };
    }
  });

  // node_modules/@colors/colors/lib/maps/rainbow.js
  var require_rainbow = __commonJS({
    "node_modules/@colors/colors/lib/maps/rainbow.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function(colors) {
        var rainbowColors = ["red", "yellow", "green", "blue", "magenta"];
        return function(letter, i, exploded) {
          if (letter === " ") {
            return letter;
          } else {
            return colors[rainbowColors[i++ % rainbowColors.length]](letter);
          }
        };
      };
    }
  });

  // node_modules/@colors/colors/lib/maps/random.js
  var require_random2 = __commonJS({
    "node_modules/@colors/colors/lib/maps/random.js"(exports, module) {
      init_process();
      init_buffer();
      module["exports"] = function(colors) {
        var available = [
          "underline",
          "inverse",
          "grey",
          "yellow",
          "red",
          "green",
          "blue",
          "white",
          "cyan",
          "magenta",
          "brightYellow",
          "brightRed",
          "brightGreen",
          "brightBlue",
          "brightWhite",
          "brightCyan",
          "brightMagenta"
        ];
        return function(letter, i, exploded) {
          return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 2))]](letter);
        };
      };
    }
  });

  // node_modules/@colors/colors/lib/colors.js
  var require_colors = __commonJS({
    "node_modules/@colors/colors/lib/colors.js"(exports, module) {
      init_process();
      init_buffer();
      var colors = {};
      module["exports"] = colors;
      colors.themes = {};
      var util = require_util();
      var ansiStyles = colors.styles = require_styles();
      var defineProps = Object.defineProperties;
      var newLineRegex = new RegExp(/[\r\n]+/g);
      colors.supportsColor = require_supports_colors().supportsColor;
      if (typeof colors.enabled === "undefined") {
        colors.enabled = colors.supportsColor() !== false;
      }
      colors.enable = function() {
        colors.enabled = true;
      };
      colors.disable = function() {
        colors.enabled = false;
      };
      colors.stripColors = colors.strip = function(str) {
        return ("" + str).replace(/\x1B\[\d+m/g, "");
      };
      var stylize = colors.stylize = function stylize2(str, style) {
        if (!colors.enabled) {
          return str + "";
        }
        var styleMap = ansiStyles[style];
        if (!styleMap && style in colors) {
          return colors[style](str);
        }
        return styleMap.open + str + styleMap.close;
      };
      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
      var escapeStringRegexp = function(str) {
        if (typeof str !== "string") {
          throw new TypeError("Expected a string");
        }
        return str.replace(matchOperatorsRe, "\\$&");
      };
      function build(_styles) {
        var builder = function builder2() {
          return applyStyle.apply(builder2, arguments);
        };
        builder._styles = _styles;
        builder.__proto__ = proto;
        return builder;
      }
      var styles = (function() {
        var ret = {};
        ansiStyles.grey = ansiStyles.gray;
        Object.keys(ansiStyles).forEach(function(key) {
          ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
          ret[key] = {
            get: function() {
              return build(this._styles.concat(key));
            }
          };
        });
        return ret;
      })();
      var proto = defineProps(function colors2() {
      }, styles);
      function applyStyle() {
        var args = Array.prototype.slice.call(arguments);
        var str = args.map(function(arg) {
          if (arg != null && arg.constructor === String) {
            return arg;
          } else {
            return util.inspect(arg);
          }
        }).join(" ");
        if (!colors.enabled || !str) {
          return str;
        }
        var newLinesPresent = str.indexOf("\n") != -1;
        var nestedStyles = this._styles;
        var i = nestedStyles.length;
        while (i--) {
          var code = ansiStyles[nestedStyles[i]];
          str = code.open + str.replace(code.closeRe, code.open) + code.close;
          if (newLinesPresent) {
            str = str.replace(newLineRegex, function(match) {
              return code.close + match + code.open;
            });
          }
        }
        return str;
      }
      colors.setTheme = function(theme) {
        if (typeof theme === "string") {
          console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
          return;
        }
        for (var style in theme) {
          (function(style2) {
            colors[style2] = function(str) {
              if (typeof theme[style2] === "object") {
                var out = str;
                for (var i in theme[style2]) {
                  out = colors[theme[style2][i]](out);
                }
                return out;
              }
              return colors[theme[style2]](str);
            };
          })(style);
        }
      };
      function init3() {
        var ret = {};
        Object.keys(styles).forEach(function(name2) {
          ret[name2] = {
            get: function() {
              return build([name2]);
            }
          };
        });
        return ret;
      }
      var sequencer = function sequencer2(map4, str) {
        var exploded = str.split("");
        exploded = exploded.map(map4);
        return exploded.join("");
      };
      colors.trap = require_trap();
      colors.zalgo = require_zalgo();
      colors.maps = {};
      colors.maps.america = require_america()(colors);
      colors.maps.zebra = require_zebra()(colors);
      colors.maps.rainbow = require_rainbow()(colors);
      colors.maps.random = require_random2()(colors);
      for (map3 in colors.maps) {
        (function(map4) {
          colors[map4] = function(str) {
            return sequencer(colors.maps[map4], str);
          };
        })(map3);
      }
      var map3;
      defineProps(colors, init3());
    }
  });

  // node_modules/@colors/colors/safe.js
  var require_safe = __commonJS({
    "node_modules/@colors/colors/safe.js"(exports, module) {
      init_process();
      init_buffer();
      var colors = require_colors();
      module["exports"] = colors;
    }
  });

  // node_modules/triple-beam/config/cli.js
  var require_cli = __commonJS({
    "node_modules/triple-beam/config/cli.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      exports.levels = {
        error: 0,
        warn: 1,
        help: 2,
        data: 3,
        info: 4,
        debug: 5,
        prompt: 6,
        verbose: 7,
        input: 8,
        silly: 9
      };
      exports.colors = {
        error: "red",
        warn: "yellow",
        help: "cyan",
        data: "grey",
        info: "green",
        debug: "blue",
        prompt: "grey",
        verbose: "cyan",
        input: "grey",
        silly: "magenta"
      };
    }
  });

  // node_modules/triple-beam/config/npm.js
  var require_npm = __commonJS({
    "node_modules/triple-beam/config/npm.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      exports.levels = {
        error: 0,
        warn: 1,
        info: 2,
        http: 3,
        verbose: 4,
        debug: 5,
        silly: 6
      };
      exports.colors = {
        error: "red",
        warn: "yellow",
        info: "green",
        http: "green",
        verbose: "cyan",
        debug: "blue",
        silly: "magenta"
      };
    }
  });

  // node_modules/triple-beam/config/syslog.js
  var require_syslog = __commonJS({
    "node_modules/triple-beam/config/syslog.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      exports.levels = {
        emerg: 0,
        alert: 1,
        crit: 2,
        error: 3,
        warning: 4,
        notice: 5,
        info: 6,
        debug: 7
      };
      exports.colors = {
        emerg: "red",
        alert: "yellow",
        crit: "red",
        error: "red",
        warning: "red",
        notice: "yellow",
        info: "green",
        debug: "blue"
      };
    }
  });

  // node_modules/triple-beam/config/index.js
  var require_config = __commonJS({
    "node_modules/triple-beam/config/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "cli", {
        value: require_cli()
      });
      Object.defineProperty(exports, "npm", {
        value: require_npm()
      });
      Object.defineProperty(exports, "syslog", {
        value: require_syslog()
      });
    }
  });

  // node_modules/triple-beam/index.js
  var require_triple_beam = __commonJS({
    "node_modules/triple-beam/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "LEVEL", {
        value: Symbol.for("level")
      });
      Object.defineProperty(exports, "MESSAGE", {
        value: Symbol.for("message")
      });
      Object.defineProperty(exports, "SPLAT", {
        value: Symbol.for("splat")
      });
      Object.defineProperty(exports, "configs", {
        value: require_config()
      });
    }
  });

  // node_modules/logform/dist/colorize.js
  var require_colorize = __commonJS({
    "node_modules/logform/dist/colorize.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var colors = require_safe();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var MESSAGE = _require.MESSAGE;
      colors.enabled = true;
      var hasSpace = /\s+/;
      var Colorizer = /* @__PURE__ */ (function() {
        function Colorizer2() {
          var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Colorizer2);
          if (opts.colors) {
            this.addColors(opts.colors);
          }
          this.options = opts;
        }
        return _createClass(Colorizer2, [{
          key: "addColors",
          value: (
            /*
             * Adds the colors Object to the set of allColors
             * known by the Colorizer
             *
             * @param {Object} colors Set of color mappings to add.
             */
            function addColors(clrs) {
              return Colorizer2.addColors(clrs);
            }
          )
          /*
           * function colorize (lookup, level, message)
           * Performs multi-step colorization using @colors/colors/safe
           */
        }, {
          key: "colorize",
          value: function colorize(lookup3, level, message) {
            if (typeof message === "undefined") {
              message = level;
            }
            if (!Array.isArray(Colorizer2.allColors[lookup3])) {
              return colors[Colorizer2.allColors[lookup3]](message);
            }
            for (var i = 0, len = Colorizer2.allColors[lookup3].length; i < len; i++) {
              message = colors[Colorizer2.allColors[lookup3][i]](message);
            }
            return message;
          }
          /*
           * function transform (info, opts)
           * Attempts to colorize the { level, message } of the given
           * `logform` info object.
           */
        }, {
          key: "transform",
          value: function transform(info, opts) {
            if (opts.all && typeof info[MESSAGE] === "string") {
              info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
            }
            if (opts.level || opts.all || !opts.message) {
              info.level = this.colorize(info[LEVEL], info.level);
            }
            if (opts.all || opts.message) {
              info.message = this.colorize(info[LEVEL], info.level, info.message);
            }
            return info;
          }
        }], [{
          key: "addColors",
          value: function addColors(clrs) {
            var nextColors = Object.keys(clrs).reduce(function(acc, level) {
              acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
              return acc;
            }, {});
            Colorizer2.allColors = Object.assign({}, Colorizer2.allColors || {}, nextColors);
            return Colorizer2.allColors;
          }
        }]);
      })();
      module.exports = function(opts) {
        return new Colorizer(opts);
      };
      module.exports.Colorizer = module.exports.Format = Colorizer;
    }
  });

  // node_modules/logform/dist/levels.js
  var require_levels = __commonJS({
    "node_modules/logform/dist/levels.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _require = require_colorize();
      var Colorizer = _require.Colorizer;
      module.exports = function(config3) {
        Colorizer.addColors(config3.colors || config3);
        return config3;
      };
    }
  });

  // node_modules/logform/dist/align.js
  var require_align = __commonJS({
    "node_modules/logform/dist/align.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      module.exports = format3(function(info) {
        info.message = "	".concat(info.message);
        return info;
      });
    }
  });

  // node_modules/logform/dist/pad-levels.js
  var require_pad_levels = __commonJS({
    "node_modules/logform/dist/pad-levels.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _toConsumableArray(r) {
        return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(r, a) {
        if (r) {
          if ("string" == typeof r) return _arrayLikeToArray(r, a);
          var t = {}.toString.call(r).slice(8, -1);
          return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
        }
      }
      function _iterableToArray(r) {
        if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
        if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
        return n;
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var _require = require_triple_beam();
      var configs = _require.configs;
      var LEVEL = _require.LEVEL;
      var MESSAGE = _require.MESSAGE;
      var Padder = /* @__PURE__ */ (function() {
        function Padder2() {
          var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
            levels: configs.npm.levels
          };
          _classCallCheck(this, Padder2);
          this.paddings = Padder2.paddingForLevels(opts.levels, opts.filler);
          this.options = opts;
        }
        return _createClass(Padder2, [{
          key: "transform",
          value: (
            /**
             * Prepends the padding onto the `message` based on the `LEVEL` of
             * the `info`. This is based on the behavior of `winston@2` which also
             * prepended the level onto the message.
             *
             * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201
             *
             * @param  {Info} info Logform info object
             * @param  {Object} opts Options passed along to this instance.
             * @returns {Info} Modified logform info object.
             */
            function transform(info, opts) {
              info.message = "".concat(this.paddings[info[LEVEL]]).concat(info.message);
              if (info[MESSAGE]) {
                info[MESSAGE] = "".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);
              }
              return info;
            }
          )
        }], [{
          key: "getLongestLevel",
          value: function getLongestLevel(levels) {
            var lvls = Object.keys(levels).map(function(level) {
              return level.length;
            });
            return Math.max.apply(Math, _toConsumableArray(lvls));
          }
          /**
           * Returns the padding for the specified `level` assuming that the
           * maximum length of all levels it's associated with is `maxLength`.
           * @param  {String} level Level to calculate padding for.
           * @param  {String} filler Repeatable text to use for padding.
           * @param  {Number} maxLength Length of the longest level
           * @returns {String} Padding string for the `level`
           */
        }, {
          key: "paddingForLevel",
          value: function paddingForLevel(level, filler, maxLength) {
            var targetLen = maxLength + 1 - level.length;
            var rep = Math.floor(targetLen / filler.length);
            var padding = "".concat(filler).concat(filler.repeat(rep));
            return padding.slice(0, targetLen);
          }
          /**
           * Returns an object with the string paddings for the given `levels`
           * using the specified `filler`.
           * @param  {Object} levels Set of all levels to calculate padding for.
           * @param  {String} filler Repeatable text to use for padding.
           * @returns {Object} Mapping of level to desired padding.
           */
        }, {
          key: "paddingForLevels",
          value: function paddingForLevels(levels) {
            var filler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
            var maxLength = Padder2.getLongestLevel(levels);
            return Object.keys(levels).reduce(function(acc, level) {
              acc[level] = Padder2.paddingForLevel(level, filler, maxLength);
              return acc;
            }, {});
          }
        }]);
      })();
      module.exports = function(opts) {
        return new Padder(opts);
      };
      module.exports.Padder = module.exports.Format = Padder;
    }
  });

  // node_modules/logform/dist/cli.js
  var require_cli2 = __commonJS({
    "node_modules/logform/dist/cli.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var _require = require_colorize();
      var Colorizer = _require.Colorizer;
      var _require2 = require_pad_levels();
      var Padder = _require2.Padder;
      var _require3 = require_triple_beam();
      var configs = _require3.configs;
      var MESSAGE = _require3.MESSAGE;
      var CliFormat = /* @__PURE__ */ (function() {
        function CliFormat2() {
          var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, CliFormat2);
          if (!opts.levels) {
            opts.levels = configs.cli.levels;
          }
          this.colorizer = new Colorizer(opts);
          this.padder = new Padder(opts);
          this.options = opts;
        }
        return _createClass(CliFormat2, [{
          key: "transform",
          value: function transform(info, opts) {
            this.colorizer.transform(this.padder.transform(info, opts), opts);
            info[MESSAGE] = "".concat(info.level, ":").concat(info.message);
            return info;
          }
        }]);
      })();
      module.exports = function(opts) {
        return new CliFormat(opts);
      };
      module.exports.Format = CliFormat;
    }
  });

  // node_modules/logform/dist/combine.js
  var require_combine = __commonJS({
    "node_modules/logform/dist/combine.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      function cascade(formats) {
        if (!formats.every(isValidFormat)) {
          return;
        }
        return function(info) {
          var obj = info;
          for (var i = 0; i < formats.length; i++) {
            obj = formats[i].transform(obj, formats[i].options);
            if (!obj) {
              return false;
            }
          }
          return obj;
        };
      }
      function isValidFormat(fmt) {
        if (typeof fmt.transform !== "function") {
          throw new Error(["No transform function found on format. Did you create a format instance?", "const myFormat = format(formatFn);", "const instance = myFormat();"].join("\n"));
        }
        return true;
      }
      module.exports = function() {
        for (var _len = arguments.length, formats = new Array(_len), _key = 0; _key < _len; _key++) {
          formats[_key] = arguments[_key];
        }
        var combinedFormat = format3(cascade(formats));
        var instance = combinedFormat();
        instance.Format = combinedFormat.Format;
        return instance;
      };
      module.exports.cascade = cascade;
    }
  });

  // node_modules/logform/dist/errors.js
  var require_errors2 = __commonJS({
    "node_modules/logform/dist/errors.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperty(e, r, t) {
        return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var format3 = require_format();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var MESSAGE = _require.MESSAGE;
      module.exports = format3(function(einfo, _ref) {
        var stack = _ref.stack, cause = _ref.cause;
        if (einfo instanceof Error) {
          var info = Object.assign({}, einfo, _defineProperty(_defineProperty(_defineProperty({
            level: einfo.level
          }, LEVEL, einfo[LEVEL] || einfo.level), "message", einfo.message), MESSAGE, einfo[MESSAGE] || einfo.message));
          if (stack) info.stack = einfo.stack;
          if (cause) info.cause = einfo.cause;
          return info;
        }
        if (!(einfo.message instanceof Error)) return einfo;
        var err2 = einfo.message;
        Object.assign(einfo, err2);
        einfo.message = err2.message;
        einfo[MESSAGE] = err2.message;
        if (stack) einfo.stack = err2.stack;
        if (cause) einfo.cause = err2.cause;
        return einfo;
      });
    }
  });

  // node_modules/safe-stable-stringify/index.js
  var require_safe_stable_stringify = __commonJS({
    "node_modules/safe-stable-stringify/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var { hasOwnProperty: hasOwnProperty3 } = Object.prototype;
      var stringify2 = configure();
      stringify2.configure = configure;
      stringify2.stringify = stringify2;
      stringify2.default = stringify2;
      exports.stringify = stringify2;
      exports.configure = configure;
      module.exports = stringify2;
      var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
      function strEscape(str) {
        if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
          return `"${str}"`;
        }
        return JSON.stringify(str);
      }
      function sort(array, comparator) {
        if (array.length > 200 || comparator) {
          return array.sort(comparator);
        }
        for (let i = 1; i < array.length; i++) {
          const currentValue = array[i];
          let position = i;
          while (position !== 0 && array[position - 1] > currentValue) {
            array[position] = array[position - 1];
            position--;
          }
          array[position] = currentValue;
        }
        return array;
      }
      var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(
        Object.getPrototypeOf(
          Object.getPrototypeOf(
            new Int8Array()
          )
        ),
        Symbol.toStringTag
      ).get;
      function isTypedArrayWithEntries(value) {
        return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
      }
      function stringifyTypedArray(array, separator, maximumBreadth) {
        if (array.length < maximumBreadth) {
          maximumBreadth = array.length;
        }
        const whitespace = separator === "," ? "" : " ";
        let res = `"0":${whitespace}${array[0]}`;
        for (let i = 1; i < maximumBreadth; i++) {
          res += `${separator}"${i}":${whitespace}${array[i]}`;
        }
        return res;
      }
      function getCircularValueOption(options) {
        if (hasOwnProperty3.call(options, "circularValue")) {
          const circularValue = options.circularValue;
          if (typeof circularValue === "string") {
            return `"${circularValue}"`;
          }
          if (circularValue == null) {
            return circularValue;
          }
          if (circularValue === Error || circularValue === TypeError) {
            return {
              toString() {
                throw new TypeError("Converting circular structure to JSON");
              }
            };
          }
          throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
        }
        return '"[Circular]"';
      }
      function getDeterministicOption(options) {
        let value;
        if (hasOwnProperty3.call(options, "deterministic")) {
          value = options.deterministic;
          if (typeof value !== "boolean" && typeof value !== "function") {
            throw new TypeError('The "deterministic" argument must be of type boolean or comparator function');
          }
        }
        return value === void 0 ? true : value;
      }
      function getBooleanOption(options, key) {
        let value;
        if (hasOwnProperty3.call(options, key)) {
          value = options[key];
          if (typeof value !== "boolean") {
            throw new TypeError(`The "${key}" argument must be of type boolean`);
          }
        }
        return value === void 0 ? true : value;
      }
      function getPositiveIntegerOption(options, key) {
        let value;
        if (hasOwnProperty3.call(options, key)) {
          value = options[key];
          if (typeof value !== "number") {
            throw new TypeError(`The "${key}" argument must be of type number`);
          }
          if (!Number.isInteger(value)) {
            throw new TypeError(`The "${key}" argument must be an integer`);
          }
          if (value < 1) {
            throw new RangeError(`The "${key}" argument must be >= 1`);
          }
        }
        return value === void 0 ? Infinity : value;
      }
      function getItemCount(number) {
        if (number === 1) {
          return "1 item";
        }
        return `${number} items`;
      }
      function getUniqueReplacerSet(replacerArray) {
        const replacerSet = /* @__PURE__ */ new Set();
        for (const value of replacerArray) {
          if (typeof value === "string" || typeof value === "number") {
            replacerSet.add(String(value));
          }
        }
        return replacerSet;
      }
      function getStrictOption(options) {
        if (hasOwnProperty3.call(options, "strict")) {
          const value = options.strict;
          if (typeof value !== "boolean") {
            throw new TypeError('The "strict" argument must be of type boolean');
          }
          if (value) {
            return (value2) => {
              let message = `Object can not safely be stringified. Received type ${typeof value2}`;
              if (typeof value2 !== "function") message += ` (${value2.toString()})`;
              throw new Error(message);
            };
          }
        }
      }
      function configure(options) {
        options = { ...options };
        const fail2 = getStrictOption(options);
        if (fail2) {
          if (options.bigint === void 0) {
            options.bigint = false;
          }
          if (!("circularValue" in options)) {
            options.circularValue = Error;
          }
        }
        const circularValue = getCircularValueOption(options);
        const bigint = getBooleanOption(options, "bigint");
        const deterministic = getDeterministicOption(options);
        const comparator = typeof deterministic === "function" ? deterministic : void 0;
        const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
        const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
        function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
          let value = parent[key];
          if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
            value = value.toJSON(key);
          }
          value = replacer.call(parent, key, value);
          switch (typeof value) {
            case "string":
              return strEscape(value);
            case "object": {
              if (value === null) {
                return "null";
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              let res = "";
              let join2 = ",";
              const originalIndentation = indentation;
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                if (maximumDepth < stack.length + 1) {
                  return '"[Array]"';
                }
                stack.push(value);
                if (spacer !== "") {
                  indentation += spacer;
                  res += `
${indentation}`;
                  join2 = `,
${indentation}`;
                }
                const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
                let i = 0;
                for (; i < maximumValuesToStringify - 1; i++) {
                  const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += join2;
                }
                const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
                res += tmp !== void 0 ? tmp : "null";
                if (value.length - 1 > maximumBreadth) {
                  const removedKeys = value.length - maximumBreadth - 1;
                  res += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
                }
                if (spacer !== "") {
                  res += `
${originalIndentation}`;
                }
                stack.pop();
                return `[${res}]`;
              }
              let keys2 = Object.keys(value);
              const keyLength = keys2.length;
              if (keyLength === 0) {
                return "{}";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Object]"';
              }
              let whitespace = "";
              let separator = "";
              if (spacer !== "") {
                indentation += spacer;
                join2 = `,
${indentation}`;
                whitespace = " ";
              }
              const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
              if (deterministic && !isTypedArrayWithEntries(value)) {
                keys2 = sort(keys2, comparator);
              }
              stack.push(value);
              for (let i = 0; i < maximumPropertiesToStringify; i++) {
                const key2 = keys2[i];
                const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
                if (tmp !== void 0) {
                  res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                  separator = join2;
                }
              }
              if (keyLength > maximumBreadth) {
                const removedKeys = keyLength - maximumBreadth;
                res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
                separator = join2;
              }
              if (spacer !== "" && separator.length > 1) {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : fail2 ? fail2(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "undefined":
              return void 0;
            case "bigint":
              if (bigint) {
                return String(value);
              }
            // fallthrough
            default:
              return fail2 ? fail2(value) : void 0;
          }
        }
        function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
          if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
            value = value.toJSON(key);
          }
          switch (typeof value) {
            case "string":
              return strEscape(value);
            case "object": {
              if (value === null) {
                return "null";
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              const originalIndentation = indentation;
              let res = "";
              let join2 = ",";
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                if (maximumDepth < stack.length + 1) {
                  return '"[Array]"';
                }
                stack.push(value);
                if (spacer !== "") {
                  indentation += spacer;
                  res += `
${indentation}`;
                  join2 = `,
${indentation}`;
                }
                const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
                let i = 0;
                for (; i < maximumValuesToStringify - 1; i++) {
                  const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += join2;
                }
                const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
                res += tmp !== void 0 ? tmp : "null";
                if (value.length - 1 > maximumBreadth) {
                  const removedKeys = value.length - maximumBreadth - 1;
                  res += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
                }
                if (spacer !== "") {
                  res += `
${originalIndentation}`;
                }
                stack.pop();
                return `[${res}]`;
              }
              stack.push(value);
              let whitespace = "";
              if (spacer !== "") {
                indentation += spacer;
                join2 = `,
${indentation}`;
                whitespace = " ";
              }
              let separator = "";
              for (const key2 of replacer) {
                const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
                if (tmp !== void 0) {
                  res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                  separator = join2;
                }
              }
              if (spacer !== "" && separator.length > 1) {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : fail2 ? fail2(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "undefined":
              return void 0;
            case "bigint":
              if (bigint) {
                return String(value);
              }
            // fallthrough
            default:
              return fail2 ? fail2(value) : void 0;
          }
        }
        function stringifyIndent(key, value, stack, spacer, indentation) {
          switch (typeof value) {
            case "string":
              return strEscape(value);
            case "object": {
              if (value === null) {
                return "null";
              }
              if (typeof value.toJSON === "function") {
                value = value.toJSON(key);
                if (typeof value !== "object") {
                  return stringifyIndent(key, value, stack, spacer, indentation);
                }
                if (value === null) {
                  return "null";
                }
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              const originalIndentation = indentation;
              if (Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                if (maximumDepth < stack.length + 1) {
                  return '"[Array]"';
                }
                stack.push(value);
                indentation += spacer;
                let res2 = `
${indentation}`;
                const join3 = `,
${indentation}`;
                const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
                let i = 0;
                for (; i < maximumValuesToStringify - 1; i++) {
                  const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
                  res2 += tmp2 !== void 0 ? tmp2 : "null";
                  res2 += join3;
                }
                const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
                res2 += tmp !== void 0 ? tmp : "null";
                if (value.length - 1 > maximumBreadth) {
                  const removedKeys = value.length - maximumBreadth - 1;
                  res2 += `${join3}"... ${getItemCount(removedKeys)} not stringified"`;
                }
                res2 += `
${originalIndentation}`;
                stack.pop();
                return `[${res2}]`;
              }
              let keys2 = Object.keys(value);
              const keyLength = keys2.length;
              if (keyLength === 0) {
                return "{}";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Object]"';
              }
              indentation += spacer;
              const join2 = `,
${indentation}`;
              let res = "";
              let separator = "";
              let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
              if (isTypedArrayWithEntries(value)) {
                res += stringifyTypedArray(value, join2, maximumBreadth);
                keys2 = keys2.slice(value.length);
                maximumPropertiesToStringify -= value.length;
                separator = join2;
              }
              if (deterministic) {
                keys2 = sort(keys2, comparator);
              }
              stack.push(value);
              for (let i = 0; i < maximumPropertiesToStringify; i++) {
                const key2 = keys2[i];
                const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
                if (tmp !== void 0) {
                  res += `${separator}${strEscape(key2)}: ${tmp}`;
                  separator = join2;
                }
              }
              if (keyLength > maximumBreadth) {
                const removedKeys = keyLength - maximumBreadth;
                res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
                separator = join2;
              }
              if (separator !== "") {
                res = `
${indentation}${res}
${originalIndentation}`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : fail2 ? fail2(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "undefined":
              return void 0;
            case "bigint":
              if (bigint) {
                return String(value);
              }
            // fallthrough
            default:
              return fail2 ? fail2(value) : void 0;
          }
        }
        function stringifySimple(key, value, stack) {
          switch (typeof value) {
            case "string":
              return strEscape(value);
            case "object": {
              if (value === null) {
                return "null";
              }
              if (typeof value.toJSON === "function") {
                value = value.toJSON(key);
                if (typeof value !== "object") {
                  return stringifySimple(key, value, stack);
                }
                if (value === null) {
                  return "null";
                }
              }
              if (stack.indexOf(value) !== -1) {
                return circularValue;
              }
              let res = "";
              const hasLength = value.length !== void 0;
              if (hasLength && Array.isArray(value)) {
                if (value.length === 0) {
                  return "[]";
                }
                if (maximumDepth < stack.length + 1) {
                  return '"[Array]"';
                }
                stack.push(value);
                const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
                let i = 0;
                for (; i < maximumValuesToStringify - 1; i++) {
                  const tmp2 = stringifySimple(String(i), value[i], stack);
                  res += tmp2 !== void 0 ? tmp2 : "null";
                  res += ",";
                }
                const tmp = stringifySimple(String(i), value[i], stack);
                res += tmp !== void 0 ? tmp : "null";
                if (value.length - 1 > maximumBreadth) {
                  const removedKeys = value.length - maximumBreadth - 1;
                  res += `,"... ${getItemCount(removedKeys)} not stringified"`;
                }
                stack.pop();
                return `[${res}]`;
              }
              let keys2 = Object.keys(value);
              const keyLength = keys2.length;
              if (keyLength === 0) {
                return "{}";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Object]"';
              }
              let separator = "";
              let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
              if (hasLength && isTypedArrayWithEntries(value)) {
                res += stringifyTypedArray(value, ",", maximumBreadth);
                keys2 = keys2.slice(value.length);
                maximumPropertiesToStringify -= value.length;
                separator = ",";
              }
              if (deterministic) {
                keys2 = sort(keys2, comparator);
              }
              stack.push(value);
              for (let i = 0; i < maximumPropertiesToStringify; i++) {
                const key2 = keys2[i];
                const tmp = stringifySimple(key2, value[key2], stack);
                if (tmp !== void 0) {
                  res += `${separator}${strEscape(key2)}:${tmp}`;
                  separator = ",";
                }
              }
              if (keyLength > maximumBreadth) {
                const removedKeys = keyLength - maximumBreadth;
                res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
              }
              stack.pop();
              return `{${res}}`;
            }
            case "number":
              return isFinite(value) ? String(value) : fail2 ? fail2(value) : "null";
            case "boolean":
              return value === true ? "true" : "false";
            case "undefined":
              return void 0;
            case "bigint":
              if (bigint) {
                return String(value);
              }
            // fallthrough
            default:
              return fail2 ? fail2(value) : void 0;
          }
        }
        function stringify3(value, replacer, space) {
          if (arguments.length > 1) {
            let spacer = "";
            if (typeof space === "number") {
              spacer = " ".repeat(Math.min(space, 10));
            } else if (typeof space === "string") {
              spacer = space.slice(0, 10);
            }
            if (replacer != null) {
              if (typeof replacer === "function") {
                return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
              }
              if (Array.isArray(replacer)) {
                return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
              }
            }
            if (spacer.length !== 0) {
              return stringifyIndent("", value, [], spacer, "");
            }
          }
          return stringifySimple("", value, []);
        }
        return stringify3;
      }
    }
  });

  // node_modules/logform/dist/json.js
  var require_json = __commonJS({
    "node_modules/logform/dist/json.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var stringify2 = require_safe_stable_stringify();
      function replacer(key, value) {
        if (typeof value === "bigint") return value.toString();
        return value;
      }
      module.exports = format3(function(info, opts) {
        var jsonStringify = stringify2.configure(opts);
        info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
        return info;
      });
    }
  });

  // node_modules/logform/dist/label.js
  var require_label = __commonJS({
    "node_modules/logform/dist/label.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      module.exports = format3(function(info, opts) {
        if (opts.message) {
          info.message = "[".concat(opts.label, "] ").concat(info.message);
          return info;
        }
        info.label = opts.label;
        return info;
      });
    }
  });

  // node_modules/logform/dist/logstash.js
  var require_logstash = __commonJS({
    "node_modules/logform/dist/logstash.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var jsonStringify = require_safe_stable_stringify();
      module.exports = format3(function(info) {
        var logstash = {};
        if (info.message) {
          logstash["@message"] = info.message;
          delete info.message;
        }
        if (info.timestamp) {
          logstash["@timestamp"] = info.timestamp;
          delete info.timestamp;
        }
        logstash["@fields"] = info;
        info[MESSAGE] = jsonStringify(logstash);
        return info;
      });
    }
  });

  // node_modules/logform/dist/metadata.js
  var require_metadata = __commonJS({
    "node_modules/logform/dist/metadata.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperty(e, r, t) {
        return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var format3 = require_format();
      function fillExcept(info, fillExceptKeys, metadataKey) {
        var savedKeys = fillExceptKeys.reduce(function(acc, key) {
          acc[key] = info[key];
          delete info[key];
          return acc;
        }, {});
        var metadata = Object.keys(info).reduce(function(acc, key) {
          acc[key] = info[key];
          delete info[key];
          return acc;
        }, {});
        Object.assign(info, savedKeys, _defineProperty({}, metadataKey, metadata));
        return info;
      }
      function fillWith(info, fillWithKeys, metadataKey) {
        info[metadataKey] = fillWithKeys.reduce(function(acc, key) {
          acc[key] = info[key];
          delete info[key];
          return acc;
        }, {});
        return info;
      }
      module.exports = format3(function(info) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var metadataKey = "metadata";
        if (opts.key) {
          metadataKey = opts.key;
        }
        var fillExceptKeys = [];
        if (!opts.fillExcept && !opts.fillWith) {
          fillExceptKeys.push("level");
          fillExceptKeys.push("message");
        }
        if (opts.fillExcept) {
          fillExceptKeys = opts.fillExcept;
        }
        if (fillExceptKeys.length > 0) {
          return fillExcept(info, fillExceptKeys, metadataKey);
        }
        if (opts.fillWith) {
          return fillWith(info, opts.fillWith, metadataKey);
        }
        return info;
      });
    }
  });

  // node_modules/logform/node_modules/ms/index.js
  var require_ms = __commonJS({
    "node_modules/logform/node_modules/ms/index.js"(exports, module) {
      init_process();
      init_buffer();
      var s = 1e3;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      module.exports = function(val, options) {
        options = options || {};
        var type2 = typeof val;
        if (type2 === "string" && val.length > 0) {
          return parse3(val);
        } else if (type2 === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error(
          "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
        );
      };
      function parse3(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type2 = (match[2] || "ms").toLowerCase();
        switch (type2) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y;
          case "weeks":
          case "week":
          case "w":
            return n * w;
          case "days":
          case "day":
          case "d":
            return n * d;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return Math.round(ms / d) + "d";
        }
        if (msAbs >= h) {
          return Math.round(ms / h) + "h";
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + "m";
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return plural(ms, msAbs, d, "day");
        }
        if (msAbs >= h) {
          return plural(ms, msAbs, h, "hour");
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, "minute");
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name2) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name2 + (isPlural ? "s" : "");
      }
    }
  });

  // node_modules/logform/dist/ms.js
  var require_ms2 = __commonJS({
    "node_modules/logform/dist/ms.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _this = void 0;
      var format3 = require_format();
      var ms = require_ms();
      module.exports = format3(function(info) {
        var curr = +/* @__PURE__ */ new Date();
        _this.diff = curr - (_this.prevTime || curr);
        _this.prevTime = curr;
        info.ms = "+".concat(ms(_this.diff));
        return info;
      });
    }
  });

  // node_modules/logform/dist/pretty-print.js
  var require_pretty_print = __commonJS({
    "node_modules/logform/dist/pretty-print.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var inspect4 = require_util().inspect;
      var format3 = require_format();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var MESSAGE = _require.MESSAGE;
      var SPLAT = _require.SPLAT;
      module.exports = format3(function(info) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var stripped = Object.assign({}, info);
        delete stripped[LEVEL];
        delete stripped[MESSAGE];
        delete stripped[SPLAT];
        info[MESSAGE] = inspect4(stripped, false, opts.depth || null, opts.colorize);
        return info;
      });
    }
  });

  // node_modules/logform/dist/printf.js
  var require_printf = __commonJS({
    "node_modules/logform/dist/printf.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var Printf = /* @__PURE__ */ (function() {
        function Printf2(templateFn) {
          _classCallCheck(this, Printf2);
          this.template = templateFn;
        }
        return _createClass(Printf2, [{
          key: "transform",
          value: function transform(info) {
            info[MESSAGE] = this.template(info);
            return info;
          }
        }]);
      })();
      module.exports = function(opts) {
        return new Printf(opts);
      };
      module.exports.Printf = module.exports.Format = Printf;
    }
  });

  // node_modules/logform/dist/simple.js
  var require_simple = __commonJS({
    "node_modules/logform/dist/simple.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var jsonStringify = require_safe_stable_stringify();
      module.exports = format3(function(info) {
        var stringifiedRest = jsonStringify(Object.assign({}, info, {
          level: void 0,
          message: void 0,
          splat: void 0
        }));
        var padding = info.padding && info.padding[info.level] || "";
        if (stringifiedRest !== "{}") {
          info[MESSAGE] = "".concat(info.level, ":").concat(padding, " ").concat(info.message, " ").concat(stringifiedRest);
        } else {
          info[MESSAGE] = "".concat(info.level, ":").concat(padding, " ").concat(info.message);
        }
        return info;
      });
    }
  });

  // node_modules/logform/dist/splat.js
  var require_splat = __commonJS({
    "node_modules/logform/dist/splat.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _toConsumableArray(r) {
        return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(r, a) {
        if (r) {
          if ("string" == typeof r) return _arrayLikeToArray(r, a);
          var t = {}.toString.call(r).slice(8, -1);
          return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
        }
      }
      function _iterableToArray(r) {
        if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
        if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
        return n;
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var util = require_util();
      var _require = require_triple_beam();
      var SPLAT = _require.SPLAT;
      var formatRegExp2 = /%[scdjifoO%]/g;
      var escapedPercent = /%%/g;
      var Splatter = /* @__PURE__ */ (function() {
        function Splatter2(opts) {
          _classCallCheck(this, Splatter2);
          this.options = opts;
        }
        return _createClass(Splatter2, [{
          key: "_splat",
          value: function _splat(info, tokens) {
            var msg = info.message;
            var splat = info[SPLAT] || info.splat || [];
            var percents = msg.match(escapedPercent);
            var escapes = percents && percents.length || 0;
            var expectedSplat = tokens.length - escapes;
            var extraSplat = expectedSplat - splat.length;
            var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
            var metalen = metas.length;
            if (metalen) {
              for (var i = 0; i < metalen; i++) {
                Object.assign(info, metas[i]);
              }
            }
            info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));
            return info;
          }
          /**
            * Transforms the `info` message by using `util.format` to complete
            * any `info.message` provided it has string interpolation tokens.
            * If no tokens exist then `info` is immutable.
            *
            * @param  {Info} info Logform info message.
            * @param  {Object} opts Options for this instance.
            * @returns {Info} Modified info message
            */
        }, {
          key: "transform",
          value: function transform(info) {
            var msg = info.message;
            var splat = info[SPLAT] || info.splat;
            if (!splat || !splat.length) {
              return info;
            }
            var tokens = msg && msg.match && msg.match(formatRegExp2);
            if (!tokens && (splat || splat.length)) {
              var metas = splat.length > 1 ? splat.splice(0) : splat;
              var metalen = metas.length;
              if (metalen) {
                for (var i = 0; i < metalen; i++) {
                  Object.assign(info, metas[i]);
                }
              }
              return info;
            }
            if (tokens) {
              return this._splat(info, tokens);
            }
            return info;
          }
        }]);
      })();
      module.exports = function(opts) {
        return new Splatter(opts);
      };
    }
  });

  // node_modules/fecha/lib/fecha.umd.js
  var require_fecha_umd = __commonJS({
    "node_modules/fecha/lib/fecha.umd.js"(exports, module) {
      init_process();
      init_buffer();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.fecha = {});
      })(exports, (function(exports2) {
        "use strict";
        var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
        var twoDigitsOptional = "\\d\\d?";
        var twoDigits = "\\d\\d";
        var threeDigits = "\\d{3}";
        var fourDigits = "\\d{4}";
        var word = "[^\\s]+";
        var literal = /\[([^]*?)\]/gm;
        function shorten(arr, sLen) {
          var newArr = [];
          for (var i = 0, len = arr.length; i < len; i++) {
            newArr.push(arr[i].substr(0, sLen));
          }
          return newArr;
        }
        var monthUpdate = function(arrName) {
          return function(v, i18n) {
            var lowerCaseArr = i18n[arrName].map(function(v2) {
              return v2.toLowerCase();
            });
            var index = lowerCaseArr.indexOf(v.toLowerCase());
            if (index > -1) {
              return index;
            }
            return null;
          };
        };
        function assign(origObj) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var obj = args_1[_a];
            for (var key in obj) {
              origObj[key] = obj[key];
            }
          }
          return origObj;
        }
        var dayNames = [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ];
        var monthNames = [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ];
        var monthNamesShort = shorten(monthNames, 3);
        var dayNamesShort = shorten(dayNames, 3);
        var defaultI18n = {
          dayNamesShort,
          dayNames,
          monthNamesShort,
          monthNames,
          amPm: ["am", "pm"],
          DoFn: function(dayOfMonth) {
            return dayOfMonth + ["th", "st", "nd", "rd"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];
          }
        };
        var globalI18n = assign({}, defaultI18n);
        var setGlobalDateI18n = function(i18n) {
          return globalI18n = assign(globalI18n, i18n);
        };
        var regexEscape = function(str) {
          return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
        };
        var pad2 = function(val, len) {
          if (len === void 0) {
            len = 2;
          }
          val = String(val);
          while (val.length < len) {
            val = "0" + val;
          }
          return val;
        };
        var formatFlags = {
          D: function(dateObj) {
            return String(dateObj.getDate());
          },
          DD: function(dateObj) {
            return pad2(dateObj.getDate());
          },
          Do: function(dateObj, i18n) {
            return i18n.DoFn(dateObj.getDate());
          },
          d: function(dateObj) {
            return String(dateObj.getDay());
          },
          dd: function(dateObj) {
            return pad2(dateObj.getDay());
          },
          ddd: function(dateObj, i18n) {
            return i18n.dayNamesShort[dateObj.getDay()];
          },
          dddd: function(dateObj, i18n) {
            return i18n.dayNames[dateObj.getDay()];
          },
          M: function(dateObj) {
            return String(dateObj.getMonth() + 1);
          },
          MM: function(dateObj) {
            return pad2(dateObj.getMonth() + 1);
          },
          MMM: function(dateObj, i18n) {
            return i18n.monthNamesShort[dateObj.getMonth()];
          },
          MMMM: function(dateObj, i18n) {
            return i18n.monthNames[dateObj.getMonth()];
          },
          YY: function(dateObj) {
            return pad2(String(dateObj.getFullYear()), 4).substr(2);
          },
          YYYY: function(dateObj) {
            return pad2(dateObj.getFullYear(), 4);
          },
          h: function(dateObj) {
            return String(dateObj.getHours() % 12 || 12);
          },
          hh: function(dateObj) {
            return pad2(dateObj.getHours() % 12 || 12);
          },
          H: function(dateObj) {
            return String(dateObj.getHours());
          },
          HH: function(dateObj) {
            return pad2(dateObj.getHours());
          },
          m: function(dateObj) {
            return String(dateObj.getMinutes());
          },
          mm: function(dateObj) {
            return pad2(dateObj.getMinutes());
          },
          s: function(dateObj) {
            return String(dateObj.getSeconds());
          },
          ss: function(dateObj) {
            return pad2(dateObj.getSeconds());
          },
          S: function(dateObj) {
            return String(Math.round(dateObj.getMilliseconds() / 100));
          },
          SS: function(dateObj) {
            return pad2(Math.round(dateObj.getMilliseconds() / 10), 2);
          },
          SSS: function(dateObj) {
            return pad2(dateObj.getMilliseconds(), 3);
          },
          a: function(dateObj, i18n) {
            return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
          },
          A: function(dateObj, i18n) {
            return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
          },
          ZZ: function(dateObj) {
            var offset = dateObj.getTimezoneOffset();
            return (offset > 0 ? "-" : "+") + pad2(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);
          },
          Z: function(dateObj) {
            var offset = dateObj.getTimezoneOffset();
            return (offset > 0 ? "-" : "+") + pad2(Math.floor(Math.abs(offset) / 60), 2) + ":" + pad2(Math.abs(offset) % 60, 2);
          }
        };
        var monthParse = function(v) {
          return +v - 1;
        };
        var emptyDigits = [null, twoDigitsOptional];
        var emptyWord = [null, word];
        var amPm = [
          "isPm",
          word,
          function(v, i18n) {
            var val = v.toLowerCase();
            if (val === i18n.amPm[0]) {
              return 0;
            } else if (val === i18n.amPm[1]) {
              return 1;
            }
            return null;
          }
        ];
        var timezoneOffset = [
          "timezoneOffset",
          "[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",
          function(v) {
            var parts = (v + "").match(/([+-]|\d\d)/gi);
            if (parts) {
              var minutes = +parts[1] * 60 + parseInt(parts[2], 10);
              return parts[0] === "+" ? minutes : -minutes;
            }
            return 0;
          }
        ];
        var parseFlags = {
          D: ["day", twoDigitsOptional],
          DD: ["day", twoDigits],
          Do: ["day", twoDigitsOptional + word, function(v) {
            return parseInt(v, 10);
          }],
          M: ["month", twoDigitsOptional, monthParse],
          MM: ["month", twoDigits, monthParse],
          YY: [
            "year",
            twoDigits,
            function(v) {
              var now = /* @__PURE__ */ new Date();
              var cent = +("" + now.getFullYear()).substr(0, 2);
              return +("" + (+v > 68 ? cent - 1 : cent) + v);
            }
          ],
          h: ["hour", twoDigitsOptional, void 0, "isPm"],
          hh: ["hour", twoDigits, void 0, "isPm"],
          H: ["hour", twoDigitsOptional],
          HH: ["hour", twoDigits],
          m: ["minute", twoDigitsOptional],
          mm: ["minute", twoDigits],
          s: ["second", twoDigitsOptional],
          ss: ["second", twoDigits],
          YYYY: ["year", fourDigits],
          S: ["millisecond", "\\d", function(v) {
            return +v * 100;
          }],
          SS: ["millisecond", twoDigits, function(v) {
            return +v * 10;
          }],
          SSS: ["millisecond", threeDigits],
          d: emptyDigits,
          dd: emptyDigits,
          ddd: emptyWord,
          dddd: emptyWord,
          MMM: ["month", word, monthUpdate("monthNamesShort")],
          MMMM: ["month", word, monthUpdate("monthNames")],
          a: amPm,
          A: amPm,
          ZZ: timezoneOffset,
          Z: timezoneOffset
        };
        var globalMasks = {
          default: "ddd MMM DD YYYY HH:mm:ss",
          shortDate: "M/D/YY",
          mediumDate: "MMM D, YYYY",
          longDate: "MMMM D, YYYY",
          fullDate: "dddd, MMMM D, YYYY",
          isoDate: "YYYY-MM-DD",
          isoDateTime: "YYYY-MM-DDTHH:mm:ssZ",
          shortTime: "HH:mm",
          mediumTime: "HH:mm:ss",
          longTime: "HH:mm:ss.SSS"
        };
        var setGlobalDateMasks = function(masks) {
          return assign(globalMasks, masks);
        };
        var format3 = function(dateObj, mask, i18n) {
          if (mask === void 0) {
            mask = globalMasks["default"];
          }
          if (i18n === void 0) {
            i18n = {};
          }
          if (typeof dateObj === "number") {
            dateObj = new Date(dateObj);
          }
          if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
            throw new Error("Invalid Date pass to format");
          }
          mask = globalMasks[mask] || mask;
          var literals = [];
          mask = mask.replace(literal, function($0, $1) {
            literals.push($1);
            return "@@@";
          });
          var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
          mask = mask.replace(token, function($0) {
            return formatFlags[$0](dateObj, combinedI18nSettings);
          });
          return mask.replace(/@@@/g, function() {
            return literals.shift();
          });
        };
        function parse3(dateStr, format4, i18n) {
          if (i18n === void 0) {
            i18n = {};
          }
          if (typeof format4 !== "string") {
            throw new Error("Invalid format in fecha parse");
          }
          format4 = globalMasks[format4] || format4;
          if (dateStr.length > 1e3) {
            return null;
          }
          var today = /* @__PURE__ */ new Date();
          var dateInfo = {
            year: today.getFullYear(),
            month: 0,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0,
            isPm: null,
            timezoneOffset: null
          };
          var parseInfo = [];
          var literals = [];
          var newFormat = format4.replace(literal, function($0, $1) {
            literals.push(regexEscape($1));
            return "@@@";
          });
          var specifiedFields = {};
          var requiredFields = {};
          newFormat = regexEscape(newFormat).replace(token, function($0) {
            var info = parseFlags[$0];
            var field2 = info[0], regex2 = info[1], requiredField = info[3];
            if (specifiedFields[field2]) {
              throw new Error("Invalid format. " + field2 + " specified twice in format");
            }
            specifiedFields[field2] = true;
            if (requiredField) {
              requiredFields[requiredField] = true;
            }
            parseInfo.push(info);
            return "(" + regex2 + ")";
          });
          Object.keys(requiredFields).forEach(function(field2) {
            if (!specifiedFields[field2]) {
              throw new Error("Invalid format. " + field2 + " is required in specified format");
            }
          });
          newFormat = newFormat.replace(/@@@/g, function() {
            return literals.shift();
          });
          var matches = dateStr.match(new RegExp(newFormat, "i"));
          if (!matches) {
            return null;
          }
          var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
          for (var i = 1; i < matches.length; i++) {
            var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];
            var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i];
            if (value == null) {
              return null;
            }
            dateInfo[field] = value;
          }
          if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {
            dateInfo.hour = +dateInfo.hour + 12;
          } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {
            dateInfo.hour = 0;
          }
          var dateTZ;
          if (dateInfo.timezoneOffset == null) {
            dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);
            var validateFields = [
              ["month", "getMonth"],
              ["day", "getDate"],
              ["hour", "getHours"],
              ["minute", "getMinutes"],
              ["second", "getSeconds"]
            ];
            for (var i = 0, len = validateFields.length; i < len; i++) {
              if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) {
                return null;
              }
            }
          } else {
            dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));
            if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) {
              return null;
            }
          }
          return dateTZ;
        }
        var fecha = {
          format: format3,
          parse: parse3,
          defaultI18n,
          setGlobalDateI18n,
          setGlobalDateMasks
        };
        exports2.assign = assign;
        exports2.default = fecha;
        exports2.format = format3;
        exports2.parse = parse3;
        exports2.defaultI18n = defaultI18n;
        exports2.setGlobalDateI18n = setGlobalDateI18n;
        exports2.setGlobalDateMasks = setGlobalDateMasks;
        Object.defineProperty(exports2, "__esModule", { value: true });
      }));
    }
  });

  // node_modules/logform/dist/timestamp.js
  var require_timestamp = __commonJS({
    "node_modules/logform/dist/timestamp.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var fecha = require_fecha_umd();
      var format3 = require_format();
      module.exports = format3(function(info) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (opts.format) {
          info.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(/* @__PURE__ */ new Date(), opts.format);
        }
        if (!info.timestamp) {
          info.timestamp = (/* @__PURE__ */ new Date()).toISOString();
        }
        if (opts.alias) {
          info[opts.alias] = info.timestamp;
        }
        return info;
      });
    }
  });

  // node_modules/logform/dist/uncolorize.js
  var require_uncolorize = __commonJS({
    "node_modules/logform/dist/uncolorize.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var colors = require_safe();
      var format3 = require_format();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      module.exports = format3(function(info, opts) {
        if (opts.level !== false) {
          info.level = colors.strip(info.level);
        }
        if (opts.message !== false) {
          info.message = colors.strip(String(info.message));
        }
        if (opts.raw !== false && info[MESSAGE]) {
          info[MESSAGE] = colors.strip(String(info[MESSAGE]));
        }
        return info;
      });
    }
  });

  // node_modules/logform/dist/browser.js
  var require_browser6 = __commonJS({
    "node_modules/logform/dist/browser.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = exports.format = require_format();
      exports.levels = require_levels();
      Object.defineProperty(format3, "align", {
        value: require_align()
      });
      Object.defineProperty(format3, "cli", {
        value: require_cli2()
      });
      Object.defineProperty(format3, "colorize", {
        value: require_colorize()
      });
      Object.defineProperty(format3, "combine", {
        value: require_combine()
      });
      Object.defineProperty(format3, "errors", {
        value: require_errors2()
      });
      Object.defineProperty(format3, "json", {
        value: require_json()
      });
      Object.defineProperty(format3, "label", {
        value: require_label()
      });
      Object.defineProperty(format3, "logstash", {
        value: require_logstash()
      });
      Object.defineProperty(format3, "metadata", {
        value: require_metadata()
      });
      Object.defineProperty(format3, "ms", {
        value: require_ms2()
      });
      Object.defineProperty(format3, "padLevels", {
        value: require_pad_levels()
      });
      Object.defineProperty(format3, "prettyPrint", {
        value: require_pretty_print()
      });
      Object.defineProperty(format3, "printf", {
        value: require_printf()
      });
      Object.defineProperty(format3, "simple", {
        value: require_simple()
      });
      Object.defineProperty(format3, "splat", {
        value: require_splat()
      });
      Object.defineProperty(format3, "timestamp", {
        value: require_timestamp()
      });
      Object.defineProperty(format3, "uncolorize", {
        value: require_uncolorize()
      });
    }
  });

  // node_modules/winston/dist/winston/common.js
  var require_common3 = __commonJS({
    "node_modules/winston/dist/winston/common.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var _require = require_util();
      var format3 = _require.format;
      exports.warn = {
        deprecated: function deprecated(prop) {
          return function() {
            throw new Error(format3("{ %s } was removed in winston@3.0.0.", prop));
          };
        },
        useFormat: function useFormat(prop) {
          return function() {
            throw new Error([format3("{ %s } was removed in winston@3.0.0.", prop), "Use a custom winston.format = winston.format(function) instead."].join("\n"));
          };
        },
        forFunctions: function forFunctions(obj, type2, props) {
          props.forEach(function(prop) {
            obj[prop] = exports.warn[type2](prop);
          });
        },
        forProperties: function forProperties(obj, type2, props) {
          props.forEach(function(prop) {
            var notice = exports.warn[type2](prop);
            Object.defineProperty(obj, prop, {
              get: notice,
              set: notice
            });
          });
        }
      };
    }
  });

  // node_modules/winston/package.json
  var require_package3 = __commonJS({
    "node_modules/winston/package.json"(exports, module) {
      module.exports = {
        name: "winston",
        description: "A logger for just about everything.",
        version: "3.18.3",
        author: "Charlie Robbins <charlie.robbins@gmail.com>",
        maintainers: [
          "David Hyde <dabh@alumni.stanford.edu>"
        ],
        repository: {
          type: "git",
          url: "https://github.com/winstonjs/winston.git"
        },
        keywords: [
          "winston",
          "logger",
          "logging",
          "logs",
          "sysadmin",
          "bunyan",
          "pino",
          "loglevel",
          "tools",
          "json",
          "stream"
        ],
        dependencies: {
          "@dabh/diagnostics": "^2.0.8",
          "@colors/colors": "^1.6.0",
          async: "^3.2.3",
          "is-stream": "^2.0.0",
          logform: "^2.7.0",
          "one-time": "^1.0.0",
          "readable-stream": "^3.4.0",
          "safe-stable-stringify": "^2.3.1",
          "stack-trace": "0.0.x",
          "triple-beam": "^1.3.0",
          "winston-transport": "^4.9.0"
        },
        devDependencies: {
          "@babel/cli": "^7.23.9",
          "@babel/core": "^7.24.0",
          "@babel/preset-env": "^7.24.0",
          "@dabh/eslint-config-populist": "^4.4.0",
          "@types/node": "^20.11.24",
          "abstract-winston-transport": "^0.5.1",
          assume: "^2.2.0",
          "cross-spawn-async": "^2.2.5",
          eslint: "^8.57.0",
          hock: "^1.4.1",
          mocha: "^10.3.0",
          nyc: "^17.1.0",
          rimraf: "5.0.1",
          split2: "^4.1.0",
          "std-mocks": "^2.0.0",
          through2: "^4.0.2",
          "winston-compat": "^0.1.5"
        },
        main: "./lib/winston.js",
        browser: "./dist/winston",
        types: "./index.d.ts",
        scripts: {
          lint: "eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist",
          test: "rimraf test/fixtures/logs/* && mocha",
          "test:coverage": "nyc npm run test:unit",
          "test:unit": "mocha test/unit",
          "test:integration": "mocha test/integration",
          build: "rimraf dist && babel lib -d dist",
          prepublishOnly: "npm run build"
        },
        engines: {
          node: ">= 12.0.0"
        },
        license: "MIT"
      };
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser3 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_events().EventEmitter;
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy3 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function destroy(err2, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err2);
          } else if (err2) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err2);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err2);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err2 || null, function(err3) {
          if (!cb && err3) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err3);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err2) {
        emitErrorNT(self2, err2);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose) return;
        if (self2._readableState && !self2._readableState.emitClose) return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err2) {
        self2.emit("error", err2);
      }
      function errorOrDestroy(stream, err2) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err2);
        else stream.emit("error", err2);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/errors-browser.js
  var require_errors_browser2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/errors-browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var codes2 = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage2(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        var NodeError = /* @__PURE__ */ (function(_Base) {
          _inheritsLoose(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage2(arg1, arg2, arg3)) || this;
          }
          return NodeError2;
        })(Base);
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes2[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes3(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
        return 'The value "' + value + '" is invalid for option "' + name2 + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name2, " argument")) {
          msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type2 = includes3(name2, ".") ? "property" : "argument";
          msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(typeof actual);
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
        return "The " + name2 + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name2) {
        return "Cannot call " + name2 + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes2;
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/state.js
  var require_state2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_INVALID_OPT_VALUE = require_errors_browser2().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name2 = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name2, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var _require = require_buffer();
      var Buffer4 = _require.Buffer;
      var _require2 = require_util();
      var inspect4 = _require2.inspect;
      var custom = inspect4 && inspect4.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer4.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ (function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList2, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join2(s) {
            if (this.length === 0) return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next) ret += s + p.data;
            return ret;
          }
        }, {
          key: "concat",
          value: function concat3(n) {
            if (this.length === 0) return Buffer4.alloc(0);
            var ret = Buffer4.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
          // Consumes a specified amount of bytes or characters from the buffered data.
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
          // Consumes a specified amount of characters from the buffered data.
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str;
              else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Consumes a specified amount of bytes from the buffered data.
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer4.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Make sure the linked list only shows the minimal necessary information.
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect4(this, _objectSpread(_objectSpread({}, options), {}, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }
        }]);
        return BufferList2;
      })();
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser2().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once4(callback) {
        var called = false;
        return function() {
          if (called) return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop3() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts);
        if (!opts) opts = {};
        callback = once4(callback || noop3);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable) onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable) callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend2 = function onend3() {
          readable = false;
          readableEnded = true;
          if (!writable) callback.call(stream);
        };
        var onerror = function onerror2(err2) {
          callback.call(stream, err2);
        };
        var onclose = function onclose2() {
          var err2;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req) onrequest();
          else stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend2);
        stream.on("finish", onfinish);
        if (opts.error !== false) stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend2);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var finished = require_end_of_stream2();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done2) {
        return {
          value,
          done: done2
        };
      }
      function readAndResolve(iter) {
        var resolve2 = iter[kLastResolve];
        if (resolve2 !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve2(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve2, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve2(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve2, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error2 = this[kError];
          if (error2 !== null) {
            return Promise.reject(error2);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve2, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve2(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve2, reject) {
          _this2[kStream].destroy(null, function(err2) {
            if (err2) {
              reject(err2);
              return;
            }
            resolve2(createIterResult(void 0, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve2, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve2(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve2;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err2) {
          if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err2);
            }
            iterator[kError] = err2;
            return;
          }
          var resolve2 = iterator[kLastResolve];
          if (resolve2 !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve2(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/from-browser.js
  var require_from_browser2 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = function() {
        throw new Error("Readable.from is not available in the browser");
      };
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable3 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Readable2;
      var Duplex2;
      Readable2.ReadableState = ReadableState2;
      var EE = require_events().EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type2) {
        return emitter.listeners(type2).length;
      };
      var Stream2 = require_stream_browser3();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = require_util();
      var debug2;
      if (debugUtil && debugUtil.debuglog) {
        debug2 = debugUtil.debuglog("stream");
      } else {
        debug2 = function debug3() {
        };
      }
      var BufferList2 = require_buffer_list2();
      var destroyImpl = require_destroy3();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser2().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder2;
      var createReadableStreamAsyncIterator;
      var from3;
      require_inherits_browser()(Readable2, Stream2);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener3(emitter, event, fn) {
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex3();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList2();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder2(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex3();
        if (!(this instanceof Readable2)) return new Readable2(options);
        var isDuplex = this instanceof Duplex2;
        this._readableState = new ReadableState2(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
        }
        Stream2.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable2.prototype.destroy = destroyImpl.destroy;
      Readable2.prototype._undestroy = destroyImpl.undestroy;
      Readable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
      Readable2.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer4.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk2(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable2.prototype.unshift = function(chunk) {
        return readableAddChunk2(this, chunk, null, true, false);
      };
      function readableAddChunk2(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug2("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk2(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid2(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer4.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                else maybeReadMore2(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore2(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable2(stream);
        }
        maybeReadMore2(stream, state);
      }
      function chunkInvalid2(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable2.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function(enc) {
        if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder2(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "") this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM2 = 1073741824;
      function computeNewHighWaterMark2(n) {
        if (n >= MAX_HWM2) {
          n = MAX_HWM2;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead2(n, state) {
        if (n <= 0 || state.length === 0 && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          if (state.flowing && state.length) return state.buffer.head.data.length;
          else return state.length;
        }
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark2(n);
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable2.prototype.read = function(n) {
        debug2("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug2("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable2(this);
          else emitReadable2(this);
          return null;
        }
        n = howMuchToRead2(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable2(this);
          return null;
        }
        var doRead = state.needReadable;
        debug2("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug2("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug2("reading or ended", doRead);
        } else if (doRead) {
          debug2("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead2(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList2(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable2(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      function onEofChunk2(stream, state) {
        debug2("onEofChunk");
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable2(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_2(stream);
          }
        }
      }
      function emitReadable2(stream) {
        var state = stream._readableState;
        debug2("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug2("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_2, stream);
        }
      }
      function emitReadable_2(stream) {
        var state = stream._readableState;
        debug2("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow2(stream);
      }
      function maybeReadMore2(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_2, stream, state);
        }
      }
      function maybeReadMore_2(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug2("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable2.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable2.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug2("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend2 : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug2("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend2() {
          debug2("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain2(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug2("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend2);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug2("ondata");
          var ret = dest.write(chunk);
          debug2("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf4(state.pipes, dest) !== -1) && !cleanedUp) {
              debug2("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug2("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
        }
        prependListener3(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug2("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug2("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug2("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain2(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug2("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow2(src);
          }
        };
      }
      Readable2.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
          return this;
        }
        var index = indexOf4(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable2.prototype.on = function(ev, fn) {
        var res = Stream2.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug2("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable2(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick2, this);
            }
          }
        }
        return res;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      Readable2.prototype.removeListener = function(ev, fn) {
        var res = Stream2.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable2.prototype.removeAllListeners = function(ev) {
        var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick2(self2) {
        debug2("readable nexttick read 0");
        self2.read(0);
      }
      Readable2.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug2("resume");
          state.flowing = !state.readableListening;
          resume2(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume2(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_2, stream, state);
        }
      }
      function resume_2(stream, state) {
        debug2("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow2(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable2.prototype.pause = function() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug2("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow2(stream) {
        var state = stream._readableState;
        debug2("flow", state.flowing);
        while (state.flowing && stream.read() !== null) ;
      }
      Readable2.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug2("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug2("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug2("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable2.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator2();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable2._fromList = fromList2;
      Object.defineProperty(Readable2.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.length;
        }
      });
      function fromList2(n, state) {
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable2(stream) {
        var state = stream._readableState;
        debug2("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT2, state, stream);
        }
      }
      function endReadableNT2(state, stream) {
        debug2("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable2.from = function(iterable, opts) {
          if (from3 === void 0) {
            from3 = require_from_browser2();
          }
          return from3(Readable2, iterable, opts);
        };
      }
      function indexOf4(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }
        return -1;
      }
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex3 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var objectKeys3 = Object.keys || function(obj) {
        var keys3 = [];
        for (var key in obj) keys3.push(key);
        return keys3;
      };
      module.exports = Duplex2;
      var Readable2 = require_stream_readable3();
      var Writable2 = require_stream_writable3();
      require_inherits_browser()(Duplex2, Readable2);
      {
        keys2 = objectKeys3(Writable2.prototype);
        for (v = 0; v < keys2.length; v++) {
          method = keys2[v];
          if (!Duplex2.prototype[method]) Duplex2.prototype[method] = Writable2.prototype[method];
        }
      }
      var keys2;
      var method;
      var v;
      function Duplex2(options) {
        if (!(this instanceof Duplex2)) return new Duplex2(options);
        Readable2.call(this, options);
        Writable2.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false) this.readable = false;
          if (options.writable === false) this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend2);
          }
        }
      }
      Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function onend2() {
        if (this._writableState.ended) return;
        process.nextTick(onEndNT2, this);
      }
      function onEndNT2(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });

  // node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable3 = __commonJS({
    "node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Writable2;
      function CorkedRequest2(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex2;
      Writable2.WritableState = WritableState2;
      var internalUtil = {
        deprecate: require_browser2()
      };
      var Stream2 = require_stream_browser3();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy3();
      var _require = require_state2();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser2().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits_browser()(Writable2, Stream2);
      function nop2() {
      }
      function WritableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex3();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite2(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest2(this);
      }
      WritableState2.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState2.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable2, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable2) return false;
            return object && object._writableState instanceof WritableState2;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex3();
        var isDuplex = this instanceof Duplex2;
        if (!isDuplex && !realHasInstance.call(Writable2, this)) return new Writable2(options);
        this._writableState = new WritableState2(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function") this._writev = options.writev;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }
        Stream2.call(this);
      }
      Writable2.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd2(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk2(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable2.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer4.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop2;
        if (state.ending) writeAfterEnd2(this, cb);
        else if (isBuf || validChunk2(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer2(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable2.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable2.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer2(this, state);
        }
      };
      Writable2.prototype.setDefaultEncoding = function setDefaultEncoding2(encoding) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk2(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer4.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer2(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk2(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite2(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite2(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError2(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe2, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe2(stream, state);
        }
      }
      function onwriteStateUpdate2(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite2(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate2(state);
        if (er) onwriteError2(stream, state, sync, er, cb);
        else {
          var finished = needFinish2(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer2(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite2, stream, state, finished, cb);
          } else {
            afterWrite2(stream, state, finished, cb);
          }
        }
      }
      function afterWrite2(stream, state, finished, cb) {
        if (!finished) onwriteDrain2(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe2(stream, state);
      }
      function onwriteDrain2(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer2(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite2(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest2(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite2(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable2.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable2.prototype._writev = null;
      Writable2.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending) endWritable2(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function needFinish2(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err2) {
          state.pendingcb--;
          if (err2) {
            errorOrDestroy(stream, err2);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe2(stream, state);
        });
      }
      function prefinish2(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe2(stream, state) {
        var need = needFinish2(state);
        if (need) {
          prefinish2(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable2(stream, state, cb) {
        state.ending = true;
        finishMaybe2(stream, state);
        if (cb) {
          if (state.finished) process.nextTick(cb);
          else stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err2) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err2);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable2.prototype.destroy = destroyImpl.destroy;
      Writable2.prototype._undestroy = destroyImpl.undestroy;
      Writable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
    }
  });

  // node_modules/winston-transport/dist/modern.js
  var require_modern = __commonJS({
    "node_modules/winston-transport/dist/modern.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var util = require_util();
      var Writable2 = require_stream_writable3();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var TransportStream = module.exports = function TransportStream2() {
        var _this = this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        Writable2.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
        this.format = options.format;
        this.level = options.level;
        this.handleExceptions = options.handleExceptions;
        this.handleRejections = options.handleRejections;
        this.silent = options.silent;
        if (options.log) this.log = options.log;
        if (options.logv) this.logv = options.logv;
        if (options.close) this.close = options.close;
        this.once("pipe", function(logger) {
          _this.levels = logger.levels;
          _this.parent = logger;
        });
        this.once("unpipe", function(src) {
          if (src === _this.parent) {
            _this.parent = null;
            if (_this.close) {
              _this.close();
            }
          }
        });
      };
      util.inherits(TransportStream, Writable2);
      TransportStream.prototype._write = function _write(info, enc, callback) {
        if (this.silent || info.exception === true && !this.handleExceptions) {
          return callback(null);
        }
        var level = this.level || this.parent && this.parent.level;
        if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
          if (info && !this.format) {
            return this.log(info, callback);
          }
          var errState = void 0;
          var transformed = void 0;
          try {
            transformed = this.format.transform(Object.assign({}, info), this.format.options);
          } catch (err2) {
            errState = err2;
          }
          if (errState || !transformed) {
            callback();
            if (errState) throw errState;
            return;
          }
          return this.log(transformed, callback);
        }
        this._writableState.sync = false;
        return callback(null);
      };
      TransportStream.prototype._writev = function _writev(chunks, callback) {
        if (this.logv) {
          var infos = chunks.filter(this._accept, this);
          if (!infos.length) {
            return callback(null);
          }
          return this.logv(infos, callback);
        }
        for (var i = 0; i < chunks.length; i++) {
          if (!this._accept(chunks[i])) continue;
          if (chunks[i].chunk && !this.format) {
            this.log(chunks[i].chunk, chunks[i].callback);
            continue;
          }
          var errState = void 0;
          var transformed = void 0;
          try {
            transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);
          } catch (err2) {
            errState = err2;
          }
          if (errState || !transformed) {
            chunks[i].callback();
            if (errState) {
              callback(null);
              throw errState;
            }
          } else {
            this.log(transformed, chunks[i].callback);
          }
        }
        return callback(null);
      };
      TransportStream.prototype._accept = function _accept(write4) {
        var info = write4.chunk;
        if (this.silent) {
          return false;
        }
        var level = this.level || this.parent && this.parent.level;
        if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
          if (this.handleExceptions || info.exception !== true) {
            return true;
          }
        }
        return false;
      };
      TransportStream.prototype._nop = function _nop() {
        return void 0;
      };
    }
  });

  // node_modules/winston-transport/dist/legacy.js
  var require_legacy = __commonJS({
    "node_modules/winston-transport/dist/legacy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var util = require_util();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var TransportStream = require_modern();
      var LegacyTransportStream = module.exports = function LegacyTransportStream2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        TransportStream.call(this, options);
        if (!options.transport || typeof options.transport.log !== "function") {
          throw new Error("Invalid transport, must be an object with a log method.");
        }
        this.transport = options.transport;
        this.level = this.level || options.transport.level;
        this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
        this._deprecated();
        function transportError(err2) {
          this.emit("error", err2, this.transport);
        }
        if (!this.transport.__winstonError) {
          this.transport.__winstonError = transportError.bind(this);
          this.transport.on("error", this.transport.__winstonError);
        }
      };
      util.inherits(LegacyTransportStream, TransportStream);
      LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
        if (this.silent || info.exception === true && !this.handleExceptions) {
          return callback(null);
        }
        if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
          this.transport.log(info[LEVEL], info.message, info, this._nop);
        }
        callback(null);
      };
      LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
        for (var i = 0; i < chunks.length; i++) {
          if (this._accept(chunks[i])) {
            this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);
            chunks[i].callback();
          }
        }
        return callback(null);
      };
      LegacyTransportStream.prototype._deprecated = function _deprecated() {
        console.error([this.transport.name + " is a legacy winston transport. Consider upgrading: ", "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"));
      };
      LegacyTransportStream.prototype.close = function close() {
        if (this.transport.close) {
          this.transport.close();
        }
        if (this.transport.__winstonError) {
          this.transport.removeListener("error", this.transport.__winstonError);
          this.transport.__winstonError = null;
        }
      };
    }
  });

  // node_modules/winston-transport/dist/index.js
  var require_dist9 = __commonJS({
    "node_modules/winston-transport/dist/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = require_modern();
      module.exports.LegacyTransportStream = require_legacy();
    }
  });

  // node_modules/winston/dist/winston/transports/console.js
  var require_console = __commonJS({
    "node_modules/winston/dist/winston/transports/console.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var os = require_os();
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var MESSAGE = _require.MESSAGE;
      var TransportStream = require_dist9();
      module.exports = /* @__PURE__ */ (function(_TransportStream) {
        function Console() {
          var _this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Console);
          _this = _callSuper(this, Console, [options]);
          _this.name = options.name || "console";
          _this.stderrLevels = _this._stringArrayToSet(options.stderrLevels);
          _this.consoleWarnLevels = _this._stringArrayToSet(options.consoleWarnLevels);
          _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
          _this.forceConsole = options.forceConsole || false;
          _this._consoleLog = console.log.bind(console);
          _this._consoleWarn = console.warn.bind(console);
          _this._consoleError = console.error.bind(console);
          _this.setMaxListeners(30);
          return _this;
        }
        _inherits(Console, _TransportStream);
        return _createClass(Console, [{
          key: "log",
          value: function log2(info, callback) {
            var _this2 = this;
            setImmediate(function() {
              return _this2.emit("logged", info);
            });
            if (this.stderrLevels[info[LEVEL]]) {
              if (console._stderr && !this.forceConsole) {
                console._stderr.write("".concat(info[MESSAGE]).concat(this.eol));
              } else {
                this._consoleError(info[MESSAGE]);
              }
              if (callback) {
                callback();
              }
              return;
            } else if (this.consoleWarnLevels[info[LEVEL]]) {
              if (console._stderr && !this.forceConsole) {
                console._stderr.write("".concat(info[MESSAGE]).concat(this.eol));
              } else {
                this._consoleWarn(info[MESSAGE]);
              }
              if (callback) {
                callback();
              }
              return;
            }
            if (console._stdout && !this.forceConsole) {
              console._stdout.write("".concat(info[MESSAGE]).concat(this.eol));
            } else {
              this._consoleLog(info[MESSAGE]);
            }
            if (callback) {
              callback();
            }
          }
          /**
           * Returns a Set-like object with strArray's elements as keys (each with the
           * value true).
           * @param {Array} strArray - Array of Set-elements as strings.
           * @param {?string} [errMsg] - Custom error message thrown on invalid input.
           * @returns {Object} - TODO: add return description.
           * @private
           */
        }, {
          key: "_stringArrayToSet",
          value: function _stringArrayToSet(strArray, errMsg) {
            if (!strArray) return {};
            errMsg = errMsg || "Cannot make set from type other than Array of string elements";
            if (!Array.isArray(strArray)) {
              throw new Error(errMsg);
            }
            return strArray.reduce(function(set, el) {
              if (typeof el !== "string") {
                throw new Error(errMsg);
              }
              set[el] = true;
              return set;
            }, {});
          }
        }]);
      })(TransportStream);
    }
  });

  // node-modules-polyfills:fs
  var fs_exports = {};
  __export(fs_exports, {
    default: () => fs_default
  });
  var fs_default;
  var init_fs = __esm({
    "node-modules-polyfills:fs"() {
      init_process();
      init_buffer();
      fs_default = {};
    }
  });

  // node-modules-polyfills-commonjs:fs
  var require_fs = __commonJS({
    "node-modules-polyfills-commonjs:fs"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_fs(), __toCommonJS(fs_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node-modules-polyfills:path
  var path_exports = {};
  __export(path_exports, {
    basename: () => basename,
    default: () => path_default,
    delimiter: () => delimiter,
    dirname: () => dirname,
    extname: () => extname,
    isAbsolute: () => isAbsolute,
    join: () => join,
    normalize: () => normalize,
    relative: () => relative,
    resolve: () => resolve,
    sep: () => sep
  });
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  function resolve() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = i >= 0 ? arguments[i] : "/";
      if (typeof path !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        continue;
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = path.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
      return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  function normalize(path) {
    var isPathAbsolute = isAbsolute(path), trailingSlash = substr(path, -1) === "/";
    path = normalizeArray(filter(path.split("/"), function(p) {
      return !!p;
    }), !isPathAbsolute).join("/");
    if (!path && !isPathAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isPathAbsolute ? "/" : "") + path;
  }
  function isAbsolute(path) {
    return path.charAt(0) === "/";
  }
  function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize(filter(paths, function(p, index) {
      if (typeof p !== "string") {
        throw new TypeError("Arguments to path.join must be strings");
      }
      return p;
    }).join("/"));
  }
  function relative(from3, to) {
    from3 = resolve(from3).substr(1);
    to = resolve(to).substr(1);
    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from3.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
  function dirname(path) {
    var result = splitPath(path), root = result[0], dir = result[1];
    if (!root && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  }
  function basename(path, ext) {
    var f = splitPath(path)[2];
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }
  function extname(path) {
    return splitPath(path)[3];
  }
  function filter(xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
  }
  var splitPathRe, splitPath, sep, delimiter, path_default, substr;
  var init_path = __esm({
    "node-modules-polyfills:path"() {
      init_process();
      init_buffer();
      splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
      splitPath = function(filename) {
        return splitPathRe.exec(filename).slice(1);
      };
      sep = "/";
      delimiter = ":";
      path_default = {
        extname,
        basename,
        dirname,
        sep,
        delimiter,
        relative,
        join,
        isAbsolute,
        normalize,
        resolve
      };
      substr = "ab".substr(-1) === "b" ? function(str, start, len) {
        return str.substr(start, len);
      } : function(str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
      };
    }
  });

  // node-modules-polyfills-commonjs:path
  var require_path = __commonJS({
    "node-modules-polyfills-commonjs:path"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_path(), __toCommonJS(path_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/async/internal/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/async/internal/isArrayLike.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isArrayLike;
      function isArrayLike(value) {
        return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/initialParams.js
  var require_initialParams = __commonJS({
    "node_modules/async/internal/initialParams.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = function(fn) {
        return function(...args) {
          var callback = args.pop();
          return fn.call(this, args, callback);
        };
      };
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/setImmediate.js
  var require_setImmediate = __commonJS({
    "node_modules/async/internal/setImmediate.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.fallback = fallback;
      exports.wrap = wrap;
      var hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
      var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
      var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
      function fallback(fn) {
        setTimeout(fn, 0);
      }
      function wrap(defer) {
        return (fn, ...args) => defer(() => fn(...args));
      }
      var _defer;
      if (hasQueueMicrotask) {
        _defer = queueMicrotask;
      } else if (hasSetImmediate) {
        _defer = setImmediate;
      } else if (hasNextTick) {
        _defer = process.nextTick;
      } else {
        _defer = fallback;
      }
      exports.default = wrap(_defer);
    }
  });

  // node_modules/async/asyncify.js
  var require_asyncify = __commonJS({
    "node_modules/async/asyncify.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = asyncify;
      var _initialParams = require_initialParams();
      var _initialParams2 = _interopRequireDefault(_initialParams);
      var _setImmediate = require_setImmediate();
      var _setImmediate2 = _interopRequireDefault(_setImmediate);
      var _wrapAsync = require_wrapAsync();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function asyncify(func) {
        if ((0, _wrapAsync.isAsync)(func)) {
          return function(...args) {
            const callback = args.pop();
            const promise = func.apply(this, args);
            return handlePromise(promise, callback);
          };
        }
        return (0, _initialParams2.default)(function(args, callback) {
          var result;
          try {
            result = func.apply(this, args);
          } catch (e) {
            return callback(e);
          }
          if (result && typeof result.then === "function") {
            return handlePromise(result, callback);
          } else {
            callback(null, result);
          }
        });
      }
      function handlePromise(promise, callback) {
        return promise.then((value) => {
          invokeCallback(callback, null, value);
        }, (err2) => {
          invokeCallback(callback, err2 && (err2 instanceof Error || err2.message) ? err2 : new Error(err2));
        });
      }
      function invokeCallback(callback, error2, value) {
        try {
          callback(error2, value);
        } catch (err2) {
          (0, _setImmediate2.default)((e) => {
            throw e;
          }, err2);
        }
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/wrapAsync.js
  var require_wrapAsync = __commonJS({
    "node_modules/async/internal/wrapAsync.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = void 0;
      var _asyncify = require_asyncify();
      var _asyncify2 = _interopRequireDefault(_asyncify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function isAsync(fn) {
        return fn[Symbol.toStringTag] === "AsyncFunction";
      }
      function isAsyncGenerator(fn) {
        return fn[Symbol.toStringTag] === "AsyncGenerator";
      }
      function isAsyncIterable(obj) {
        return typeof obj[Symbol.asyncIterator] === "function";
      }
      function wrapAsync(asyncFn) {
        if (typeof asyncFn !== "function") throw new Error("expected a function");
        return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
      }
      exports.default = wrapAsync;
      exports.isAsync = isAsync;
      exports.isAsyncGenerator = isAsyncGenerator;
      exports.isAsyncIterable = isAsyncIterable;
    }
  });

  // node_modules/async/internal/awaitify.js
  var require_awaitify = __commonJS({
    "node_modules/async/internal/awaitify.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = awaitify;
      function awaitify(asyncFn, arity) {
        if (!arity) arity = asyncFn.length;
        if (!arity) throw new Error("arity is undefined");
        function awaitable(...args) {
          if (typeof args[arity - 1] === "function") {
            return asyncFn.apply(this, args);
          }
          return new Promise((resolve2, reject) => {
            args[arity - 1] = (err2, ...cbArgs) => {
              if (err2) return reject(err2);
              resolve2(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
          });
        }
        return awaitable;
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/parallel.js
  var require_parallel = __commonJS({
    "node_modules/async/internal/parallel.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _isArrayLike = require_isArrayLike();
      var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
      var _wrapAsync = require_wrapAsync();
      var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
      var _awaitify = require_awaitify();
      var _awaitify2 = _interopRequireDefault(_awaitify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {
        var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
        eachfn(tasks, (task, key, taskCb) => {
          (0, _wrapAsync2.default)(task)((err2, ...result) => {
            if (result.length < 2) {
              [result] = result;
            }
            results[key] = result;
            taskCb(err2);
          });
        }, (err2) => callback(err2, results));
      }, 3);
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/once.js
  var require_once = __commonJS({
    "node_modules/async/internal/once.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = once4;
      function once4(fn) {
        function wrapper(...args) {
          if (fn === null) return;
          var callFn = fn;
          fn = null;
          callFn.apply(this, args);
        }
        Object.assign(wrapper, fn);
        return wrapper;
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/getIterator.js
  var require_getIterator = __commonJS({
    "node_modules/async/internal/getIterator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = function(coll) {
        return coll[Symbol.iterator] && coll[Symbol.iterator]();
      };
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/iterator.js
  var require_iterator = __commonJS({
    "node_modules/async/internal/iterator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createIterator;
      var _isArrayLike = require_isArrayLike();
      var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
      var _getIterator = require_getIterator();
      var _getIterator2 = _interopRequireDefault(_getIterator);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function createArrayIterator(coll) {
        var i = -1;
        var len = coll.length;
        return function next() {
          return ++i < len ? { value: coll[i], key: i } : null;
        };
      }
      function createES2015Iterator(iterator) {
        var i = -1;
        return function next() {
          var item = iterator.next();
          if (item.done) return null;
          i++;
          return { value: item.value, key: i };
        };
      }
      function createObjectIterator(obj) {
        var okeys = obj ? Object.keys(obj) : [];
        var i = -1;
        var len = okeys.length;
        return function next() {
          var key = okeys[++i];
          if (key === "__proto__") {
            return next();
          }
          return i < len ? { value: obj[key], key } : null;
        };
      }
      function createIterator(coll) {
        if ((0, _isArrayLike2.default)(coll)) {
          return createArrayIterator(coll);
        }
        var iterator = (0, _getIterator2.default)(coll);
        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/onlyOnce.js
  var require_onlyOnce = __commonJS({
    "node_modules/async/internal/onlyOnce.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = onlyOnce;
      function onlyOnce(fn) {
        return function(...args) {
          if (fn === null) throw new Error("Callback was already called.");
          var callFn = fn;
          fn = null;
          callFn.apply(this, args);
        };
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/breakLoop.js
  var require_breakLoop = __commonJS({
    "node_modules/async/internal/breakLoop.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var breakLoop = {};
      exports.default = breakLoop;
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/asyncEachOfLimit.js
  var require_asyncEachOfLimit = __commonJS({
    "node_modules/async/internal/asyncEachOfLimit.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = asyncEachOfLimit;
      var _breakLoop = require_breakLoop();
      var _breakLoop2 = _interopRequireDefault(_breakLoop);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function asyncEachOfLimit(generator, limit, iteratee, callback) {
        let done2 = false;
        let canceled = false;
        let awaiting = false;
        let running = 0;
        let idx = 0;
        function replenish() {
          if (running >= limit || awaiting || done2) return;
          awaiting = true;
          generator.next().then(({ value, done: iterDone }) => {
            if (canceled || done2) return;
            awaiting = false;
            if (iterDone) {
              done2 = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
          }).catch(handleError);
        }
        function iterateeCallback(err2, result) {
          running -= 1;
          if (canceled) return;
          if (err2) return handleError(err2);
          if (err2 === false) {
            done2 = true;
            canceled = true;
            return;
          }
          if (result === _breakLoop2.default || done2 && running <= 0) {
            done2 = true;
            return callback(null);
          }
          replenish();
        }
        function handleError(err2) {
          if (canceled) return;
          awaiting = false;
          done2 = true;
          callback(err2);
        }
        replenish();
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/eachOfLimit.js
  var require_eachOfLimit = __commonJS({
    "node_modules/async/internal/eachOfLimit.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _once = require_once();
      var _once2 = _interopRequireDefault(_once);
      var _iterator = require_iterator();
      var _iterator2 = _interopRequireDefault(_iterator);
      var _onlyOnce = require_onlyOnce();
      var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
      var _wrapAsync = require_wrapAsync();
      var _asyncEachOfLimit = require_asyncEachOfLimit();
      var _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);
      var _breakLoop = require_breakLoop();
      var _breakLoop2 = _interopRequireDefault(_breakLoop);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = (limit) => {
        return (obj, iteratee, callback) => {
          callback = (0, _once2.default)(callback);
          if (limit <= 0) {
            throw new RangeError("concurrency limit cannot be less than 1");
          }
          if (!obj) {
            return callback(null);
          }
          if ((0, _wrapAsync.isAsyncGenerator)(obj)) {
            return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
          }
          if ((0, _wrapAsync.isAsyncIterable)(obj)) {
            return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
          }
          var nextElem = (0, _iterator2.default)(obj);
          var done2 = false;
          var canceled = false;
          var running = 0;
          var looping = false;
          function iterateeCallback(err2, value) {
            if (canceled) return;
            running -= 1;
            if (err2) {
              done2 = true;
              callback(err2);
            } else if (err2 === false) {
              done2 = true;
              canceled = true;
            } else if (value === _breakLoop2.default || done2 && running <= 0) {
              done2 = true;
              return callback(null);
            } else if (!looping) {
              replenish();
            }
          }
          function replenish() {
            looping = true;
            while (running < limit && !done2) {
              var elem = nextElem();
              if (elem === null) {
                done2 = true;
                if (running <= 0) {
                  callback(null);
                }
                return;
              }
              running += 1;
              iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
            }
            looping = false;
          }
          replenish();
        };
      };
      module.exports = exports.default;
    }
  });

  // node_modules/async/eachOfLimit.js
  var require_eachOfLimit2 = __commonJS({
    "node_modules/async/eachOfLimit.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _eachOfLimit2 = require_eachOfLimit();
      var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
      var _wrapAsync = require_wrapAsync();
      var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
      var _awaitify = require_awaitify();
      var _awaitify2 = _interopRequireDefault(_awaitify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function eachOfLimit(coll, limit, iteratee, callback) {
        return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
      }
      exports.default = (0, _awaitify2.default)(eachOfLimit, 4);
      module.exports = exports.default;
    }
  });

  // node_modules/async/eachOfSeries.js
  var require_eachOfSeries = __commonJS({
    "node_modules/async/eachOfSeries.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _eachOfLimit = require_eachOfLimit2();
      var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
      var _awaitify = require_awaitify();
      var _awaitify2 = _interopRequireDefault(_awaitify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function eachOfSeries(coll, iteratee, callback) {
        return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);
      }
      exports.default = (0, _awaitify2.default)(eachOfSeries, 3);
      module.exports = exports.default;
    }
  });

  // node_modules/async/series.js
  var require_series = __commonJS({
    "node_modules/async/series.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = series;
      var _parallel2 = require_parallel();
      var _parallel3 = _interopRequireDefault(_parallel2);
      var _eachOfSeries = require_eachOfSeries();
      var _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function series(tasks, callback) {
        return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
      }
      module.exports = exports.default;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/messages.js
  var messages_default;
  var init_messages = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/messages.js"() {
      init_process();
      init_buffer();
      messages_default = {
        2: "need dictionary",
        /* Z_NEED_DICT       2  */
        1: "stream end",
        /* Z_STREAM_END      1  */
        0: "",
        /* Z_OK              0  */
        "-1": "file error",
        /* Z_ERRNO         (-1) */
        "-2": "stream error",
        /* Z_STREAM_ERROR  (-2) */
        "-3": "data error",
        /* Z_DATA_ERROR    (-3) */
        "-4": "insufficient memory",
        /* Z_MEM_ERROR     (-4) */
        "-5": "buffer error",
        /* Z_BUF_ERROR     (-5) */
        "-6": "incompatible version"
        /* Z_VERSION_ERROR (-6) */
      };
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/zstream.js
  function ZStream() {
    this.input = null;
    this.next_in = 0;
    this.avail_in = 0;
    this.total_in = 0;
    this.output = null;
    this.next_out = 0;
    this.avail_out = 0;
    this.total_out = 0;
    this.msg = "";
    this.state = null;
    this.data_type = 2;
    this.adler = 0;
  }
  var zstream_default;
  var init_zstream = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/zstream.js"() {
      init_process();
      init_buffer();
      zstream_default = ZStream;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/utils.js
  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }
  var Buf8, Buf16, Buf32;
  var init_utils = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/utils.js"() {
      "use strict";
      init_process();
      init_buffer();
      Buf8 = Uint8Array;
      Buf16 = Uint16Array;
      Buf32 = Int32Array;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/trees.js
  function zero(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }
  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree;
    this.extra_bits = extra_bits;
    this.extra_base = extra_base;
    this.elems = elems;
    this.max_length = max_length;
    this.has_stree = static_tree && static_tree.length;
  }
  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;
    this.max_code = 0;
    this.stat_desc = stat_desc;
  }
  function d_code(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }
  function put_short(s, w) {
    s.pending_buf[s.pending++] = w & 255;
    s.pending_buf[s.pending++] = w >>> 8 & 255;
  }
  function send_bits(s, value, length) {
    if (s.bi_valid > Buf_size - length) {
      s.bi_buf |= value << s.bi_valid & 65535;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> Buf_size - s.bi_valid;
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= value << s.bi_valid & 65535;
      s.bi_valid += length;
    }
  }
  function send_code(s, c, tree) {
    send_bits(
      s,
      tree[c * 2],
      tree[c * 2 + 1]
      /*.Len*/
    );
  }
  function bi_reverse(code, len) {
    var res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  }
  function bi_flush(s) {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 255;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  }
  function gen_bitlen(s, desc) {
    var tree = desc.dyn_tree;
    var max_code = desc.max_code;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var extra = desc.stat_desc.extra_bits;
    var base2 = desc.stat_desc.extra_base;
    var max_length = desc.stat_desc.max_length;
    var h;
    var n, m;
    var bits;
    var xbits;
    var f;
    var overflow = 0;
    for (bits = 0; bits <= MAX_BITS; bits++) {
      s.bl_count[bits] = 0;
    }
    tree[s.heap[s.heap_max] * 2 + 1] = 0;
    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1] = bits;
      if (n > max_code) {
        continue;
      }
      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base2) {
        xbits = extra[n - base2];
      }
      f = tree[n * 2];
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1] + xbits);
      }
    }
    if (overflow === 0) {
      return;
    }
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) {
        bits--;
      }
      s.bl_count[bits]--;
      s.bl_count[bits + 1] += 2;
      s.bl_count[max_length]--;
      overflow -= 2;
    } while (overflow > 0);
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) {
          continue;
        }
        if (tree[m * 2 + 1] !== bits) {
          s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
          tree[m * 2 + 1] = bits;
        }
        n--;
      }
    }
  }
  function gen_codes(tree, max_code, bl_count) {
    var next_code = new Array(MAX_BITS + 1);
    var code = 0;
    var bits;
    var n;
    for (bits = 1; bits <= MAX_BITS; bits++) {
      next_code[bits] = code = code + bl_count[bits - 1] << 1;
    }
    for (n = 0; n <= max_code; n++) {
      var len = tree[n * 2 + 1];
      if (len === 0) {
        continue;
      }
      tree[n * 2] = bi_reverse(next_code[len]++, len);
    }
  }
  function tr_static_init() {
    var n;
    var bits;
    var length;
    var code;
    var dist;
    var bl_count = new Array(MAX_BITS + 1);
    length = 0;
    for (code = 0; code < LENGTH_CODES - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < 1 << extra_lbits[code]; n++) {
        _length_code[length++] = code;
      }
    }
    _length_code[length - 1] = code;
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < 1 << extra_dbits[code]; n++) {
        _dist_code[dist++] = code;
      }
    }
    dist >>= 7;
    for (; code < D_CODES; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    for (bits = 0; bits <= MAX_BITS; bits++) {
      bl_count[bits] = 0;
    }
    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1] = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1] = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1] = 8;
      n++;
      bl_count[8]++;
    }
    gen_codes(static_ltree, L_CODES + 1, bl_count);
    for (n = 0; n < D_CODES; n++) {
      static_dtree[n * 2 + 1] = 5;
      static_dtree[n * 2] = bi_reverse(n, 5);
    }
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
  }
  function init_block(s) {
    var n;
    for (n = 0; n < L_CODES; n++) {
      s.dyn_ltree[n * 2] = 0;
    }
    for (n = 0; n < D_CODES; n++) {
      s.dyn_dtree[n * 2] = 0;
    }
    for (n = 0; n < BL_CODES; n++) {
      s.bl_tree[n * 2] = 0;
    }
    s.dyn_ltree[END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  }
  function bi_windup(s) {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  }
  function copy_block(s, buf, len, header) {
    bi_windup(s);
    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
    arraySet(s.pending_buf, s.window, buf, len, s.pending);
    s.pending += len;
  }
  function smaller(tree, n, m, depth) {
    var _n2 = n * 2;
    var _m2 = m * 2;
    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
  }
  function pqdownheap(s, tree, k) {
    var v = s.heap[k];
    var j = k << 1;
    while (j <= s.heap_len) {
      if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      if (smaller(tree, v, s.heap[j], s.depth)) {
        break;
      }
      s.heap[k] = s.heap[j];
      k = j;
      j <<= 1;
    }
    s.heap[k] = v;
  }
  function compress_block(s, ltree, dtree) {
    var dist;
    var lc;
    var lx = 0;
    var code;
    var extra;
    if (s.last_lit !== 0) {
      do {
        dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
        lc = s.pending_buf[s.l_buf + lx];
        lx++;
        if (dist === 0) {
          send_code(s, lc, ltree);
        } else {
          code = _length_code[lc];
          send_code(s, code + LITERALS + 1, ltree);
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);
          }
          dist--;
          code = d_code(dist);
          send_code(s, code, dtree);
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);
          }
        }
      } while (lx < s.last_lit);
    }
    send_code(s, END_BLOCK, ltree);
  }
  function build_tree(s, desc) {
    var tree = desc.dyn_tree;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var elems = desc.stat_desc.elems;
    var n, m;
    var max_code = -1;
    var node;
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE;
    for (n = 0; n < elems; n++) {
      if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
      } else {
        tree[n * 2 + 1] = 0;
      }
    }
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
      tree[node * 2] = 1;
      s.depth[node] = 0;
      s.opt_len--;
      if (has_stree) {
        s.static_len -= stree[node * 2 + 1];
      }
    }
    desc.max_code = max_code;
    for (n = s.heap_len >> 1; n >= 1; n--) {
      pqdownheap(s, tree, n);
    }
    node = elems;
    do {
      n = s.heap[
        1
        /*SMALLEST*/
      ];
      s.heap[
        1
        /*SMALLEST*/
      ] = s.heap[s.heap_len--];
      pqdownheap(
        s,
        tree,
        1
        /*SMALLEST*/
      );
      m = s.heap[
        1
        /*SMALLEST*/
      ];
      s.heap[--s.heap_max] = n;
      s.heap[--s.heap_max] = m;
      tree[node * 2] = tree[n * 2] + tree[m * 2];
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1] = tree[m * 2 + 1] = node;
      s.heap[
        1
        /*SMALLEST*/
      ] = node++;
      pqdownheap(
        s,
        tree,
        1
        /*SMALLEST*/
      );
    } while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[
      1
      /*SMALLEST*/
    ];
    gen_bitlen(s, desc);
    gen_codes(tree, max_code, s.bl_count);
  }
  function scan_tree(s, tree, max_code) {
    var n;
    var prevlen = -1;
    var curlen;
    var nextlen = tree[0 * 2 + 1];
    var count = 0;
    var max_count = 7;
    var min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 65535;
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        s.bl_tree[curlen * 2] += count;
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          s.bl_tree[curlen * 2]++;
        }
        s.bl_tree[REP_3_6 * 2]++;
      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2]++;
      } else {
        s.bl_tree[REPZ_11_138 * 2]++;
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }
  function send_tree(s, tree, max_code) {
    var n;
    var prevlen = -1;
    var curlen;
    var nextlen = tree[0 * 2 + 1];
    var count = 0;
    var max_count = 7;
    var min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1];
      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        do {
          send_code(s, curlen, s.bl_tree);
        } while (--count !== 0);
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);
      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);
      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }
      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }
  function build_bl_tree(s) {
    var max_blindex;
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    build_tree(s, s.bl_desc);
    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
        break;
      }
    }
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    return max_blindex;
  }
  function send_all_trees(s, lcodes, dcodes, blcodes) {
    var rank2;
    send_bits(s, lcodes - 257, 5);
    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4);
    for (rank2 = 0; rank2 < blcodes; rank2++) {
      send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
    }
    send_tree(s, s.dyn_ltree, lcodes - 1);
    send_tree(s, s.dyn_dtree, dcodes - 1);
  }
  function detect_data_type(s) {
    var black_mask = 4093624447;
    var n;
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
        return Z_BINARY;
      }
    }
    if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS; n++) {
      if (s.dyn_ltree[n * 2] !== 0) {
        return Z_TEXT;
      }
    }
    return Z_BINARY;
  }
  function _tr_init(s) {
    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }
    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    init_block(s);
  }
  function _tr_stored_block(s, buf, stored_len, last) {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
    copy_block(s, buf, stored_len, true);
  }
  function _tr_align(s) {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  }
  function _tr_flush_block(s, buf, stored_len, last) {
    var opt_lenb, static_lenb;
    var max_blindex = 0;
    if (s.level > 0) {
      if (s.strm.data_type === Z_UNKNOWN) {
        s.strm.data_type = detect_data_type(s);
      }
      build_tree(s, s.l_desc);
      build_tree(s, s.d_desc);
      max_blindex = build_bl_tree(s);
      opt_lenb = s.opt_len + 3 + 7 >>> 3;
      static_lenb = s.static_len + 3 + 7 >>> 3;
      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }
    } else {
      opt_lenb = static_lenb = stored_len + 5;
    }
    if (stored_len + 4 <= opt_lenb && buf !== -1) {
      _tr_stored_block(s, buf, stored_len, last);
    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);
    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    init_block(s);
    if (last) {
      bi_windup(s);
    }
  }
  function _tr_tally(s, dist, lc) {
    s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
    s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
    s.last_lit++;
    if (dist === 0) {
      s.dyn_ltree[lc * 2]++;
    } else {
      s.matches++;
      dist--;
      s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
      s.dyn_dtree[d_code(dist) * 2]++;
    }
    return s.last_lit === s.lit_bufsize - 1;
  }
  var Z_FIXED, Z_BINARY, Z_TEXT, Z_UNKNOWN, STORED_BLOCK, STATIC_TREES, DYN_TREES, MIN_MATCH, MAX_MATCH, LENGTH_CODES, LITERALS, L_CODES, D_CODES, BL_CODES, HEAP_SIZE, MAX_BITS, Buf_size, MAX_BL_BITS, END_BLOCK, REP_3_6, REPZ_3_10, REPZ_11_138, extra_lbits, extra_dbits, extra_blbits, bl_order, DIST_CODE_LEN, static_ltree, static_dtree, _dist_code, _length_code, base_length, base_dist, static_l_desc, static_d_desc, static_bl_desc, static_init_done;
  var init_trees = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/trees.js"() {
      "use strict";
      init_process();
      init_buffer();
      init_utils();
      Z_FIXED = 4;
      Z_BINARY = 0;
      Z_TEXT = 1;
      Z_UNKNOWN = 2;
      STORED_BLOCK = 0;
      STATIC_TREES = 1;
      DYN_TREES = 2;
      MIN_MATCH = 3;
      MAX_MATCH = 258;
      LENGTH_CODES = 29;
      LITERALS = 256;
      L_CODES = LITERALS + 1 + LENGTH_CODES;
      D_CODES = 30;
      BL_CODES = 19;
      HEAP_SIZE = 2 * L_CODES + 1;
      MAX_BITS = 15;
      Buf_size = 16;
      MAX_BL_BITS = 7;
      END_BLOCK = 256;
      REP_3_6 = 16;
      REPZ_3_10 = 17;
      REPZ_11_138 = 18;
      extra_lbits = /* extra bits for each length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      extra_dbits = /* extra bits for each distance code */
      [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      extra_blbits = /* extra bits for each bit length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      DIST_CODE_LEN = 512;
      static_ltree = new Array((L_CODES + 2) * 2);
      zero(static_ltree);
      static_dtree = new Array(D_CODES * 2);
      zero(static_dtree);
      _dist_code = new Array(DIST_CODE_LEN);
      zero(_dist_code);
      _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
      zero(_length_code);
      base_length = new Array(LENGTH_CODES);
      zero(base_length);
      base_dist = new Array(D_CODES);
      zero(base_dist);
      static_init_done = false;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/adler32.js
  function adler32(adler, buf, len, pos) {
    var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
    while (len !== 0) {
      n = len > 2e3 ? 2e3 : len;
      len -= n;
      do {
        s1 = s1 + buf[pos++] | 0;
        s2 = s2 + s1 | 0;
      } while (--n);
      s1 %= 65521;
      s2 %= 65521;
    }
    return s1 | s2 << 16 | 0;
  }
  var adler32_default;
  var init_adler32 = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/adler32.js"() {
      init_process();
      init_buffer();
      adler32_default = adler32;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/crc32.js
  function makeTable() {
    var c, table = [];
    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
      }
      table[n] = c;
    }
    return table;
  }
  function crc32(crc, buf, len, pos) {
    var t = crcTable, end = pos + len;
    crc ^= -1;
    for (var i = pos; i < end; i++) {
      crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
    }
    return crc ^ -1;
  }
  var crcTable, crc32_default;
  var init_crc32 = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/crc32.js"() {
      init_process();
      init_buffer();
      crcTable = makeTable();
      crc32_default = crc32;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/deflate.js
  function err(strm, errorCode) {
    strm.msg = messages_default[errorCode];
    return errorCode;
  }
  function rank(f) {
    return (f << 1) - (f > 4 ? 9 : 0);
  }
  function zero2(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }
  function flush_pending(strm) {
    var s = strm.state;
    var len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) {
      return;
    }
    arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  }
  function flush_block_only(s, last) {
    _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  }
  function put_byte(s, b) {
    s.pending_buf[s.pending++] = b;
  }
  function putShortMSB(s, b) {
    s.pending_buf[s.pending++] = b >>> 8 & 255;
    s.pending_buf[s.pending++] = b & 255;
  }
  function read_buf(strm, buf, start, size) {
    var len = strm.avail_in;
    if (len > size) {
      len = size;
    }
    if (len === 0) {
      return 0;
    }
    strm.avail_in -= len;
    arraySet(buf, strm.input, strm.next_in, len, start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32_default(strm.adler, buf, len, start);
    } else if (strm.state.wrap === 2) {
      strm.adler = crc32_default(strm.adler, buf, len, start);
    }
    strm.next_in += len;
    strm.total_in += len;
    return len;
  }
  function longest_match(s, cur_match) {
    var chain_length = s.max_chain_length;
    var scan = s.strstart;
    var match;
    var len;
    var best_len = s.prev_length;
    var nice_match = s.nice_match;
    var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
    var _win = s.window;
    var wmask = s.w_mask;
    var prev = s.prev;
    var strend = s.strstart + MAX_MATCH2;
    var scan_end1 = _win[scan + best_len - 1];
    var scan_end = _win[scan + best_len];
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    if (nice_match > s.lookahead) {
      nice_match = s.lookahead;
    }
    do {
      match = cur_match;
      if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
        continue;
      }
      scan += 2;
      match++;
      do {
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
      len = MAX_MATCH2 - (strend - scan);
      scan = strend - MAX_MATCH2;
      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1 = _win[scan + best_len - 1];
        scan_end = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  }
  function fill_window(s) {
    var _w_size = s.w_size;
    var p, n, m, more, str;
    do {
      more = s.window_size - s.lookahead - s.strstart;
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
        arraySet(s.window, s.window, _w_size, _w_size, 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        s.block_start -= _w_size;
        n = s.hash_size;
        p = n;
        do {
          m = s.head[--p];
          s.head[p] = m >= _w_size ? m - _w_size : 0;
        } while (--n);
        n = _w_size;
        p = n;
        do {
          m = s.prev[--p];
          s.prev[p] = m >= _w_size ? m - _w_size : 0;
        } while (--n);
        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;
      if (s.lookahead + s.insert >= MIN_MATCH2) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
        while (s.insert) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH2 - 1]) & s.hash_mask;
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH2) {
            break;
          }
        }
      }
    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
  }
  function deflate_stored(s, flush) {
    var max_block_size = 65535;
    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }
    for (; ; ) {
      if (s.lookahead <= 1) {
        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      s.strstart += s.lookahead;
      s.lookahead = 0;
      var max_start = s.block_start + max_block_size;
      if (s.strstart === 0 || s.strstart >= max_start) {
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.strstart > s.block_start) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_NEED_MORE;
  }
  function deflate_fast(s, flush) {
    var hash_head;
    var bflush;
    for (; ; ) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH2) {
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
        s.match_length = longest_match(s, hash_head);
      }
      if (s.match_length >= MIN_MATCH2) {
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH2);
        s.lookahead -= s.match_length;
        if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH2) {
          s.match_length--;
          do {
            s.strstart++;
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          } while (--s.match_length !== 0);
          s.strstart++;
        } else {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
        }
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = s.strstart < MIN_MATCH2 - 1 ? s.strstart : MIN_MATCH2 - 1;
    if (flush === Z_FINISH) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  }
  function deflate_slow(s, flush) {
    var hash_head;
    var bflush;
    var max_insert;
    for (; ; ) {
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      hash_head = 0;
      if (s.lookahead >= MIN_MATCH2) {
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
      }
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH2 - 1;
      if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
        s.match_length = longest_match(s, hash_head);
        if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH2 && s.strstart - s.match_start > 4096)) {
          s.match_length = MIN_MATCH2 - 1;
        }
      }
      if (s.prev_length >= MIN_MATCH2 && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH2;
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH2);
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH2 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH2 - 1;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      } else if (s.match_available) {
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        if (bflush) {
          flush_block_only(s, false);
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH2 - 1 ? s.strstart : MIN_MATCH2 - 1;
    if (flush === Z_FINISH) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  }
  function deflate_rle(s, flush) {
    var bflush;
    var prev;
    var scan, strend;
    var _win = s.window;
    for (; ; ) {
      if (s.lookahead <= MAX_MATCH2) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH2 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        }
      }
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH2 && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH2;
          do {
          } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
          s.match_length = MAX_MATCH2 - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
      }
      if (s.match_length >= MIN_MATCH2) {
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH2);
        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  }
  function deflate_huff(s, flush) {
    var bflush;
    for (; ; ) {
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          break;
        }
      }
      s.match_length = 0;
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH) {
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    return BS_BLOCK_DONE;
  }
  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }
  function lm_init(s) {
    s.window_size = 2 * s.w_size;
    zero2(s.head);
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH2 - 1;
    s.match_available = 0;
    s.ins_h = 0;
  }
  function DeflateState() {
    this.strm = null;
    this.status = 0;
    this.pending_buf = null;
    this.pending_buf_size = 0;
    this.pending_out = 0;
    this.pending = 0;
    this.wrap = 0;
    this.gzhead = null;
    this.gzindex = 0;
    this.method = Z_DEFLATED;
    this.last_flush = -1;
    this.w_size = 0;
    this.w_bits = 0;
    this.w_mask = 0;
    this.window = null;
    this.window_size = 0;
    this.prev = null;
    this.head = null;
    this.ins_h = 0;
    this.hash_size = 0;
    this.hash_bits = 0;
    this.hash_mask = 0;
    this.hash_shift = 0;
    this.block_start = 0;
    this.match_length = 0;
    this.prev_match = 0;
    this.match_available = 0;
    this.strstart = 0;
    this.match_start = 0;
    this.lookahead = 0;
    this.prev_length = 0;
    this.max_chain_length = 0;
    this.max_lazy_match = 0;
    this.level = 0;
    this.strategy = 0;
    this.good_match = 0;
    this.nice_match = 0;
    this.dyn_ltree = new Buf16(HEAP_SIZE2 * 2);
    this.dyn_dtree = new Buf16((2 * D_CODES2 + 1) * 2);
    this.bl_tree = new Buf16((2 * BL_CODES2 + 1) * 2);
    zero2(this.dyn_ltree);
    zero2(this.dyn_dtree);
    zero2(this.bl_tree);
    this.l_desc = null;
    this.d_desc = null;
    this.bl_desc = null;
    this.bl_count = new Buf16(MAX_BITS2 + 1);
    this.heap = new Buf16(2 * L_CODES2 + 1);
    zero2(this.heap);
    this.heap_len = 0;
    this.heap_max = 0;
    this.depth = new Buf16(2 * L_CODES2 + 1);
    zero2(this.depth);
    this.l_buf = 0;
    this.lit_bufsize = 0;
    this.last_lit = 0;
    this.d_buf = 0;
    this.opt_len = 0;
    this.static_len = 0;
    this.matches = 0;
    this.insert = 0;
    this.bi_buf = 0;
    this.bi_valid = 0;
  }
  function deflateResetKeep(strm) {
    var s;
    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR);
    }
    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN2;
    s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) {
      s.wrap = -s.wrap;
    }
    s.status = s.wrap ? INIT_STATE : BUSY_STATE;
    strm.adler = s.wrap === 2 ? 0 : 1;
    s.last_flush = Z_NO_FLUSH;
    _tr_init(s);
    return Z_OK;
  }
  function deflateReset(strm) {
    var ret = deflateResetKeep(strm);
    if (ret === Z_OK) {
      lm_init(strm.state);
    }
    return ret;
  }
  function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
    if (!strm) {
      return Z_STREAM_ERROR;
    }
    var wrap = 1;
    if (level === Z_DEFAULT_COMPRESSION) {
      level = 6;
    }
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else if (windowBits > 15) {
      wrap = 2;
      windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED2) {
      return err(strm, Z_STREAM_ERROR);
    }
    if (windowBits === 8) {
      windowBits = 9;
    }
    var s = new DeflateState();
    strm.state = s;
    s.strm = strm;
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH2 - 1) / MIN_MATCH2);
    s.window = new Buf8(s.w_size * 2);
    s.head = new Buf16(s.hash_size);
    s.prev = new Buf16(s.w_size);
    s.lit_bufsize = 1 << memLevel + 6;
    s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Buf8(s.pending_buf_size);
    s.d_buf = 1 * s.lit_bufsize;
    s.l_buf = (1 + 2) * s.lit_bufsize;
    s.level = level;
    s.strategy = strategy;
    s.method = method;
    return deflateReset(strm);
  }
  function deflate(strm, flush) {
    var old_flush, s;
    var beg, val;
    if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
    }
    s = strm.state;
    if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
      return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
    }
    s.strm = strm;
    old_flush = s.last_flush;
    s.last_flush = flush;
    if (s.status === INIT_STATE) {
      if (s.wrap === 2) {
        strm.adler = 0;
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) {
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        } else {
          put_byte(
            s,
            (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 255);
          put_byte(s, s.gzhead.time >> 8 & 255);
          put_byte(s, s.gzhead.time >> 16 & 255);
          put_byte(s, s.gzhead.time >> 24 & 255);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, s.gzhead.os & 255);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 255);
            put_byte(s, s.gzhead.extra.length >> 8 & 255);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      } else {
        var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - header % 31;
        s.status = BUSY_STATE;
        putShortMSB(s, header);
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 65535);
        }
        strm.adler = 1;
      }
    }
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra) {
        beg = s.pending;
        while (s.gzindex < (s.gzhead.extra.length & 65535)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 255);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment) {
        beg = s.pending;
        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_default(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      } else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 255);
          put_byte(s, strm.adler >> 8 & 255);
          strm.adler = 0;
          s.status = BUSY_STATE;
        }
      } else {
        s.status = BUSY_STATE;
      }
    }
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
      return err(strm, Z_BUF_ERROR);
    }
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR);
    }
    if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
      var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
        }
        return Z_OK;
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        } else if (flush !== Z_BLOCK) {
          _tr_stored_block(s, 0, 0, false);
          if (flush === Z_FULL_FLUSH) {
            zero2(s.head);
            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
    }
    if (flush !== Z_FINISH) {
      return Z_OK;
    }
    if (s.wrap <= 0) {
      return Z_STREAM_END;
    }
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 255);
      put_byte(s, strm.adler >> 8 & 255);
      put_byte(s, strm.adler >> 16 & 255);
      put_byte(s, strm.adler >> 24 & 255);
      put_byte(s, strm.total_in & 255);
      put_byte(s, strm.total_in >> 8 & 255);
      put_byte(s, strm.total_in >> 16 & 255);
      put_byte(s, strm.total_in >> 24 & 255);
    } else {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 65535);
    }
    flush_pending(strm);
    if (s.wrap > 0) {
      s.wrap = -s.wrap;
    }
    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
  }
  function deflateEnd(strm) {
    var status2;
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR;
    }
    status2 = strm.state.status;
    if (status2 !== INIT_STATE && status2 !== EXTRA_STATE && status2 !== NAME_STATE && status2 !== COMMENT_STATE && status2 !== HCRC_STATE && status2 !== BUSY_STATE && status2 !== FINISH_STATE) {
      return err(strm, Z_STREAM_ERROR);
    }
    strm.state = null;
    return status2 === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
  }
  var Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK, Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR, Z_DEFAULT_COMPRESSION, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED2, Z_UNKNOWN2, Z_DEFLATED, MAX_MEM_LEVEL, LENGTH_CODES2, LITERALS2, L_CODES2, D_CODES2, BL_CODES2, HEAP_SIZE2, MAX_BITS2, MIN_MATCH2, MAX_MATCH2, MIN_LOOKAHEAD, PRESET_DICT, INIT_STATE, EXTRA_STATE, NAME_STATE, COMMENT_STATE, HCRC_STATE, BUSY_STATE, FINISH_STATE, BS_NEED_MORE, BS_BLOCK_DONE, BS_FINISH_STARTED, BS_FINISH_DONE, OS_CODE, configuration_table;
  var init_deflate = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/deflate.js"() {
      init_process();
      init_buffer();
      init_utils();
      init_trees();
      init_adler32();
      init_crc32();
      init_messages();
      Z_NO_FLUSH = 0;
      Z_PARTIAL_FLUSH = 1;
      Z_FULL_FLUSH = 3;
      Z_FINISH = 4;
      Z_BLOCK = 5;
      Z_OK = 0;
      Z_STREAM_END = 1;
      Z_STREAM_ERROR = -2;
      Z_DATA_ERROR = -3;
      Z_BUF_ERROR = -5;
      Z_DEFAULT_COMPRESSION = -1;
      Z_FILTERED = 1;
      Z_HUFFMAN_ONLY = 2;
      Z_RLE = 3;
      Z_FIXED2 = 4;
      Z_UNKNOWN2 = 2;
      Z_DEFLATED = 8;
      MAX_MEM_LEVEL = 9;
      LENGTH_CODES2 = 29;
      LITERALS2 = 256;
      L_CODES2 = LITERALS2 + 1 + LENGTH_CODES2;
      D_CODES2 = 30;
      BL_CODES2 = 19;
      HEAP_SIZE2 = 2 * L_CODES2 + 1;
      MAX_BITS2 = 15;
      MIN_MATCH2 = 3;
      MAX_MATCH2 = 258;
      MIN_LOOKAHEAD = MAX_MATCH2 + MIN_MATCH2 + 1;
      PRESET_DICT = 32;
      INIT_STATE = 42;
      EXTRA_STATE = 69;
      NAME_STATE = 73;
      COMMENT_STATE = 91;
      HCRC_STATE = 103;
      BUSY_STATE = 113;
      FINISH_STATE = 666;
      BS_NEED_MORE = 1;
      BS_BLOCK_DONE = 2;
      BS_FINISH_STARTED = 3;
      BS_FINISH_DONE = 4;
      OS_CODE = 3;
      configuration_table = [
        /*      good lazy nice chain */
        new Config(0, 0, 0, 0, deflate_stored),
        /* 0 store only */
        new Config(4, 4, 8, 4, deflate_fast),
        /* 1 max speed, no lazy matches */
        new Config(4, 5, 16, 8, deflate_fast),
        /* 2 */
        new Config(4, 6, 32, 32, deflate_fast),
        /* 3 */
        new Config(4, 4, 16, 16, deflate_slow),
        /* 4 lazy matches */
        new Config(8, 16, 32, 32, deflate_slow),
        /* 5 */
        new Config(8, 16, 128, 128, deflate_slow),
        /* 6 */
        new Config(8, 32, 128, 256, deflate_slow),
        /* 7 */
        new Config(32, 128, 258, 1024, deflate_slow),
        /* 8 */
        new Config(32, 258, 258, 4096, deflate_slow)
        /* 9 max compression */
      ];
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inffast.js
  function inflate_fast(strm, start) {
    var state;
    var _in;
    var last;
    var _out;
    var beg;
    var end;
    var dmax;
    var wsize;
    var whave;
    var wnext;
    var s_window;
    var hold;
    var bits;
    var lcode;
    var dcode;
    var lmask;
    var dmask;
    var here;
    var op;
    var len;
    var dist;
    var from3;
    var from_source;
    var input, output;
    state = strm.state;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    dmax = state.dmax;
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = lcode[hold & lmask];
        dolen:
          for (; ; ) {
            op = here >>> 24;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 255;
            if (op === 0) {
              output[_out++] = here & 65535;
            } else if (op & 16) {
              len = here & 65535;
              op &= 15;
              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              }
              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }
              here = dcode[hold & dmask];
              dodist:
                for (; ; ) {
                  op = here >>> 24;
                  hold >>>= op;
                  bits -= op;
                  op = here >>> 16 & 255;
                  if (op & 16) {
                    dist = here & 65535;
                    op &= 15;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                      }
                    }
                    dist += hold & (1 << op) - 1;
                    if (dist > dmax) {
                      strm.msg = "invalid distance too far back";
                      state.mode = BAD;
                      break top;
                    }
                    hold >>>= op;
                    bits -= op;
                    op = _out - beg;
                    if (dist > op) {
                      op = dist - op;
                      if (op > whave) {
                        if (state.sane) {
                          strm.msg = "invalid distance too far back";
                          state.mode = BAD;
                          break top;
                        }
                      }
                      from3 = 0;
                      from_source = s_window;
                      if (wnext === 0) {
                        from3 += wsize - op;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from3++];
                          } while (--op);
                          from3 = _out - dist;
                          from_source = output;
                        }
                      } else if (wnext < op) {
                        from3 += wsize + wnext - op;
                        op -= wnext;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from3++];
                          } while (--op);
                          from3 = 0;
                          if (wnext < len) {
                            op = wnext;
                            len -= op;
                            do {
                              output[_out++] = s_window[from3++];
                            } while (--op);
                            from3 = _out - dist;
                            from_source = output;
                          }
                        }
                      } else {
                        from3 += wnext - op;
                        if (op < len) {
                          len -= op;
                          do {
                            output[_out++] = s_window[from3++];
                          } while (--op);
                          from3 = _out - dist;
                          from_source = output;
                        }
                      }
                      while (len > 2) {
                        output[_out++] = from_source[from3++];
                        output[_out++] = from_source[from3++];
                        output[_out++] = from_source[from3++];
                        len -= 3;
                      }
                      if (len) {
                        output[_out++] = from_source[from3++];
                        if (len > 1) {
                          output[_out++] = from_source[from3++];
                        }
                      }
                    } else {
                      from3 = _out - dist;
                      do {
                        output[_out++] = output[from3++];
                        output[_out++] = output[from3++];
                        output[_out++] = output[from3++];
                        len -= 3;
                      } while (len > 2);
                      if (len) {
                        output[_out++] = output[from3++];
                        if (len > 1) {
                          output[_out++] = output[from3++];
                        }
                      }
                    }
                  } else if ((op & 64) === 0) {
                    here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                    continue dodist;
                  } else {
                    strm.msg = "invalid distance code";
                    state.mode = BAD;
                    break top;
                  }
                  break;
                }
            } else if ((op & 64) === 0) {
              here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              state.mode = TYPE;
              break top;
            } else {
              strm.msg = "invalid literal/length code";
              state.mode = BAD;
              break top;
            }
            break;
          }
      } while (_in < last && _out < end);
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
  }
  var BAD, TYPE;
  var init_inffast = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inffast.js"() {
      init_process();
      init_buffer();
      BAD = 30;
      TYPE = 12;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inftrees.js
  function inflate_table(type2, lens, lens_index, codes2, table, table_index, work, opts) {
    var bits = opts.bits;
    var len = 0;
    var sym = 0;
    var min = 0, max = 0;
    var root = 0;
    var curr = 0;
    var drop = 0;
    var left = 0;
    var used = 0;
    var huff = 0;
    var incr;
    var fill3;
    var low;
    var mask;
    var next;
    var base2 = null;
    var base_index = 0;
    var end;
    var count = new Buf16(MAXBITS + 1);
    var offs = new Buf16(MAXBITS + 1);
    var extra = null;
    var extra_index = 0;
    var here_bits, here_op, here_val;
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes2; sym++) {
      count[lens[lens_index + sym]]++;
    }
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) {
        break;
      }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {
      table[table_index++] = 1 << 24 | 64 << 16 | 0;
      table[table_index++] = 1 << 24 | 64 << 16 | 0;
      opts.bits = 1;
      return 0;
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) {
        break;
      }
    }
    if (root < min) {
      root = min;
    }
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }
    }
    if (left > 0 && (type2 === CODES || max !== 1)) {
      return -1;
    }
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }
    for (sym = 0; sym < codes2; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }
    if (type2 === CODES) {
      base2 = extra = work;
      end = 19;
    } else if (type2 === LENS) {
      base2 = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;
    } else {
      base2 = dbase;
      extra = dext;
      end = -1;
    }
    huff = 0;
    sym = 0;
    len = min;
    next = table_index;
    curr = root;
    drop = 0;
    low = -1;
    used = 1 << root;
    mask = used - 1;
    if (type2 === LENS && used > ENOUGH_LENS || type2 === DISTS && used > ENOUGH_DISTS) {
      return 1;
    }
    var i = 0;
    for (; ; ) {
      i++;
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      } else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base2[base_index + work[sym]];
      } else {
        here_op = 32 + 64;
        here_val = 0;
      }
      incr = 1 << len - drop;
      fill3 = 1 << curr;
      min = fill3;
      do {
        fill3 -= incr;
        table[next + (huff >> drop) + fill3] = here_bits << 24 | here_op << 16 | here_val | 0;
      } while (fill3 !== 0);
      incr = 1 << len - 1;
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }
      sym++;
      if (--count[len] === 0) {
        if (len === max) {
          break;
        }
        len = lens[lens_index + work[sym]];
      }
      if (len > root && (huff & mask) !== low) {
        if (drop === 0) {
          drop = root;
        }
        next += min;
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) {
            break;
          }
          curr++;
          left <<= 1;
        }
        used += 1 << curr;
        if (type2 === LENS && used > ENOUGH_LENS || type2 === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        low = huff & mask;
        table[low] = root << 24 | curr << 16 | next - table_index | 0;
      }
    }
    if (huff !== 0) {
      table[next + huff] = len - drop << 24 | 64 << 16 | 0;
    }
    opts.bits = root;
    return 0;
  }
  var MAXBITS, ENOUGH_LENS, ENOUGH_DISTS, CODES, LENS, DISTS, lbase, lext, dbase, dext;
  var init_inftrees = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inftrees.js"() {
      init_process();
      init_buffer();
      init_utils();
      MAXBITS = 15;
      ENOUGH_LENS = 852;
      ENOUGH_DISTS = 592;
      CODES = 0;
      LENS = 1;
      DISTS = 2;
      lbase = [
        /* Length codes 257..285 base */
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258,
        0,
        0
      ];
      lext = [
        /* Length codes 257..285 extra */
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        16,
        17,
        17,
        17,
        17,
        18,
        18,
        18,
        18,
        19,
        19,
        19,
        19,
        20,
        20,
        20,
        20,
        21,
        21,
        21,
        21,
        16,
        72,
        78
      ];
      dbase = [
        /* Distance codes 0..29 base */
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577,
        0,
        0
      ];
      dext = [
        /* Distance codes 0..29 extra */
        16,
        16,
        16,
        16,
        17,
        17,
        18,
        18,
        19,
        19,
        20,
        20,
        21,
        21,
        22,
        22,
        23,
        23,
        24,
        24,
        25,
        25,
        26,
        26,
        27,
        27,
        28,
        28,
        29,
        29,
        64,
        64
      ];
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inflate.js
  function zswap32(q) {
    return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
  }
  function InflateState() {
    this.mode = 0;
    this.last = false;
    this.wrap = 0;
    this.havedict = false;
    this.flags = 0;
    this.dmax = 0;
    this.check = 0;
    this.total = 0;
    this.head = null;
    this.wbits = 0;
    this.wsize = 0;
    this.whave = 0;
    this.wnext = 0;
    this.window = null;
    this.hold = 0;
    this.bits = 0;
    this.length = 0;
    this.offset = 0;
    this.extra = 0;
    this.lencode = null;
    this.distcode = null;
    this.lenbits = 0;
    this.distbits = 0;
    this.ncode = 0;
    this.nlen = 0;
    this.ndist = 0;
    this.have = 0;
    this.next = null;
    this.lens = new Buf16(320);
    this.work = new Buf16(288);
    this.lendyn = null;
    this.distdyn = null;
    this.sane = 0;
    this.back = 0;
    this.was = 0;
  }
  function inflateResetKeep(strm) {
    var state;
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR2;
    }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = "";
    if (state.wrap) {
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null;
    state.hold = 0;
    state.bits = 0;
    state.lencode = state.lendyn = new Buf32(ENOUGH_LENS2);
    state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS2);
    state.sane = 1;
    state.back = -1;
    return Z_OK2;
  }
  function inflateReset(strm) {
    var state;
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR2;
    }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);
  }
  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR2;
    }
    state = strm.state;
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR2;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }
  function inflateInit2(strm, windowBits) {
    var ret;
    var state;
    if (!strm) {
      return Z_STREAM_ERROR2;
    }
    state = new InflateState();
    strm.state = state;
    state.window = null;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK2) {
      strm.state = null;
    }
    return ret;
  }
  function fixedtables(state) {
    if (virgin) {
      var sym;
      lenfix = new Buf32(512);
      distfix = new Buf32(32);
      sym = 0;
      while (sym < 144) {
        state.lens[sym++] = 8;
      }
      while (sym < 256) {
        state.lens[sym++] = 9;
      }
      while (sym < 280) {
        state.lens[sym++] = 7;
      }
      while (sym < 288) {
        state.lens[sym++] = 8;
      }
      inflate_table(LENS2, state.lens, 0, 288, lenfix, 0, state.work, {
        bits: 9
      });
      sym = 0;
      while (sym < 32) {
        state.lens[sym++] = 5;
      }
      inflate_table(DISTS2, state.lens, 0, 32, distfix, 0, state.work, {
        bits: 5
      });
      virgin = false;
    }
    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }
  function updatewindow(strm, src, end, copy3) {
    var dist;
    var state = strm.state;
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;
      state.window = new Buf8(state.wsize);
    }
    if (copy3 >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    } else {
      dist = state.wsize - state.wnext;
      if (dist > copy3) {
        dist = copy3;
      }
      arraySet(state.window, src, end - copy3, dist, state.wnext);
      copy3 -= dist;
      if (copy3) {
        arraySet(state.window, src, end - copy3, copy3, 0);
        state.wnext = copy3;
        state.whave = state.wsize;
      } else {
        state.wnext += dist;
        if (state.wnext === state.wsize) {
          state.wnext = 0;
        }
        if (state.whave < state.wsize) {
          state.whave += dist;
        }
      }
    }
    return 0;
  }
  function inflate(strm, flush) {
    var state;
    var input, output;
    var next;
    var put;
    var have, left;
    var hold;
    var bits;
    var _in, _out;
    var copy3;
    var from3;
    var from_source;
    var here = 0;
    var here_bits, here_op, here_val;
    var last_bits, last_op, last_val;
    var len;
    var ret;
    var hbuf = new Buf8(4);
    var opts;
    var n;
    var order = (
      /* permutation of code lengths */
      [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
    );
    if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
      return Z_STREAM_ERROR2;
    }
    state = strm.state;
    if (state.mode === TYPE2) {
      state.mode = TYPEDO;
    }
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    _in = have;
    _out = left;
    ret = Z_OK2;
    inf_leave:
      for (; ; ) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 2 && hold === 35615) {
              state.check = 0;
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_default(state.check, hbuf, 2, 0);
              hold = 0;
              bits = 0;
              state.mode = FLAGS;
              break;
            }
            state.flags = 0;
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) || /* check if zlib header allowed */
            (((hold & 255) << 8) + (hold >> 8)) % 31) {
              strm.msg = "incorrect header check";
              state.mode = BAD2;
              break;
            }
            if ((hold & 15) !== Z_DEFLATED2) {
              strm.msg = "unknown compression method";
              state.mode = BAD2;
              break;
            }
            hold >>>= 4;
            bits -= 4;
            len = (hold & 15) + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            } else if (len > state.wbits) {
              strm.msg = "invalid window size";
              state.mode = BAD2;
              break;
            }
            state.dmax = 1 << len;
            strm.adler = state.check = 1;
            state.mode = hold & 512 ? DICTID : TYPE2;
            hold = 0;
            bits = 0;
            break;
          case FLAGS:
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.flags = hold;
            if ((state.flags & 255) !== Z_DEFLATED2) {
              strm.msg = "unknown compression method";
              state.mode = BAD2;
              break;
            }
            if (state.flags & 57344) {
              strm.msg = "unknown header flags set";
              state.mode = BAD2;
              break;
            }
            if (state.head) {
              state.head.text = hold >> 8 & 1;
            }
            if (state.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_default(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = TIME;
          /* falls through */
          case TIME:
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              hbuf[2] = hold >>> 16 & 255;
              hbuf[3] = hold >>> 24 & 255;
              state.check = crc32_default(state.check, hbuf, 4, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = OS;
          /* falls through */
          case OS:
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.head) {
              state.head.xflags = hold & 255;
              state.head.os = hold >> 8;
            }
            if (state.flags & 512) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_default(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
            state.mode = EXLEN;
          /* falls through */
          case EXLEN:
            if (state.flags & 1024) {
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32_default(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
            } else if (state.head) {
              state.head.extra = null;
            }
            state.mode = EXTRA;
          /* falls through */
          case EXTRA:
            if (state.flags & 1024) {
              copy3 = state.length;
              if (copy3 > have) {
                copy3 = have;
              }
              if (copy3) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    state.head.extra = new Array(state.head.extra_len);
                  }
                  arraySet(
                    state.head.extra,
                    input,
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy3,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                }
                if (state.flags & 512) {
                  state.check = crc32_default(state.check, input, copy3, next);
                }
                have -= copy3;
                next += copy3;
                state.length -= copy3;
              }
              if (state.length) {
                break inf_leave;
              }
            }
            state.length = 0;
            state.mode = NAME;
          /* falls through */
          case NAME:
            if (state.flags & 2048) {
              if (have === 0) {
                break inf_leave;
              }
              copy3 = 0;
              do {
                len = input[next + copy3++];
                if (state.head && len && state.length < 65536) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy3 < have);
              if (state.flags & 512) {
                state.check = crc32_default(state.check, input, copy3, next);
              }
              have -= copy3;
              next += copy3;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
          /* falls through */
          case COMMENT:
            if (state.flags & 4096) {
              if (have === 0) {
                break inf_leave;
              }
              copy3 = 0;
              do {
                len = input[next + copy3++];
                if (state.head && len && state.length < 65536) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy3 < have);
              if (state.flags & 512) {
                state.check = crc32_default(state.check, input, copy3, next);
              }
              have -= copy3;
              next += copy3;
              if (len) {
                break inf_leave;
              }
            } else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
          /* falls through */
          case HCRC:
            if (state.flags & 512) {
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (hold !== (state.check & 65535)) {
                strm.msg = "header crc mismatch";
                state.mode = BAD2;
                break;
              }
              hold = 0;
              bits = 0;
            }
            if (state.head) {
              state.head.hcrc = state.flags >> 9 & 1;
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE2;
            break;
          case DICTID:
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            strm.adler = state.check = zswap32(hold);
            hold = 0;
            bits = 0;
            state.mode = DICT;
          /* falls through */
          case DICT:
            if (state.havedict === 0) {
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              return Z_NEED_DICT;
            }
            strm.adler = state.check = 1;
            state.mode = TYPE2;
          /* falls through */
          case TYPE2:
            if (flush === Z_BLOCK2 || flush === Z_TREES) {
              break inf_leave;
            }
          /* falls through */
          case TYPEDO:
            if (state.last) {
              hold >>>= bits & 7;
              bits -= bits & 7;
              state.mode = CHECK;
              break;
            }
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.last = hold & 1;
            hold >>>= 1;
            bits -= 1;
            switch (hold & 3) {
              case 0:
                state.mode = STORED;
                break;
              case 1:
                fixedtables(state);
                state.mode = LEN_;
                if (flush === Z_TREES) {
                  hold >>>= 2;
                  bits -= 2;
                  break inf_leave;
                }
                break;
              case 2:
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = "invalid block type";
                state.mode = BAD2;
            }
            hold >>>= 2;
            bits -= 2;
            break;
          case STORED:
            hold >>>= bits & 7;
            bits -= bits & 7;
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
              strm.msg = "invalid stored block lengths";
              state.mode = BAD2;
              break;
            }
            state.length = hold & 65535;
            hold = 0;
            bits = 0;
            state.mode = COPY_;
            if (flush === Z_TREES) {
              break inf_leave;
            }
          /* falls through */
          case COPY_:
            state.mode = COPY;
          /* falls through */
          case COPY:
            copy3 = state.length;
            if (copy3) {
              if (copy3 > have) {
                copy3 = have;
              }
              if (copy3 > left) {
                copy3 = left;
              }
              if (copy3 === 0) {
                break inf_leave;
              }
              arraySet(output, input, next, copy3, put);
              have -= copy3;
              next += copy3;
              left -= copy3;
              put += copy3;
              state.length -= copy3;
              break;
            }
            state.mode = TYPE2;
            break;
          case TABLE:
            while (bits < 14) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.nlen = (hold & 31) + 257;
            hold >>>= 5;
            bits -= 5;
            state.ndist = (hold & 31) + 1;
            hold >>>= 5;
            bits -= 5;
            state.ncode = (hold & 15) + 4;
            hold >>>= 4;
            bits -= 4;
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = "too many length or distance symbols";
              state.mode = BAD2;
              break;
            }
            state.have = 0;
            state.mode = LENLENS;
          /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.lens[order[state.have++]] = hold & 7;
              hold >>>= 3;
              bits -= 3;
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            state.lencode = state.lendyn;
            state.lenbits = 7;
            opts = {
              bits: state.lenbits
            };
            ret = inflate_table(CODES2, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
              strm.msg = "invalid code lengths set";
              state.mode = BAD2;
              break;
            }
            state.have = 0;
            state.mode = CODELENS;
          /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (; ; ) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_val < 16) {
                hold >>>= here_bits;
                bits -= here_bits;
                state.lens[state.have++] = here_val;
              } else {
                if (here_val === 16) {
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  if (state.have === 0) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD2;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy3 = 3 + (hold & 3);
                  hold >>>= 2;
                  bits -= 2;
                } else if (here_val === 17) {
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  len = 0;
                  copy3 = 3 + (hold & 7);
                  hold >>>= 3;
                  bits -= 3;
                } else {
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) {
                      break inf_leave;
                    }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  hold >>>= here_bits;
                  bits -= here_bits;
                  len = 0;
                  copy3 = 11 + (hold & 127);
                  hold >>>= 7;
                  bits -= 7;
                }
                if (state.have + copy3 > state.nlen + state.ndist) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD2;
                  break;
                }
                while (copy3--) {
                  state.lens[state.have++] = len;
                }
              }
            }
            if (state.mode === BAD2) {
              break;
            }
            if (state.lens[256] === 0) {
              strm.msg = "invalid code -- missing end-of-block";
              state.mode = BAD2;
              break;
            }
            state.lenbits = 9;
            opts = {
              bits: state.lenbits
            };
            ret = inflate_table(LENS2, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
              strm.msg = "invalid literal/lengths set";
              state.mode = BAD2;
              break;
            }
            state.distbits = 6;
            state.distcode = state.distdyn;
            opts = {
              bits: state.distbits
            };
            ret = inflate_table(DISTS2, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            state.distbits = opts.bits;
            if (ret) {
              strm.msg = "invalid distances set";
              state.mode = BAD2;
              break;
            }
            state.mode = LEN_;
            if (flush === Z_TREES) {
              break inf_leave;
            }
          /* falls through */
          case LEN_:
            state.mode = LEN;
          /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              inflate_fast(strm, _out);
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              if (state.mode === TYPE2) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_op && (here_op & 240) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ; ) {
                here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (last_bits + here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= last_bits;
              bits -= last_bits;
              state.back += last_bits;
            }
            hold >>>= here_bits;
            bits -= here_bits;
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              state.back = -1;
              state.mode = TYPE2;
              break;
            }
            if (here_op & 64) {
              strm.msg = "invalid literal/length code";
              state.mode = BAD2;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
          /* falls through */
          case LENEXT:
            if (state.extra) {
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.length += hold & (1 << state.extra) - 1;
              hold >>>= state.extra;
              bits -= state.extra;
              state.back += state.extra;
            }
            state.was = state.length;
            state.mode = DIST;
          /* falls through */
          case DIST:
            for (; ; ) {
              here = state.distcode[hold & (1 << state.distbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if ((here_op & 240) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ; ) {
                here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (last_bits + here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= last_bits;
              bits -= last_bits;
              state.back += last_bits;
            }
            hold >>>= here_bits;
            bits -= here_bits;
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = "invalid distance code";
              state.mode = BAD2;
              break;
            }
            state.offset = here_val;
            state.extra = here_op & 15;
            state.mode = DISTEXT;
          /* falls through */
          case DISTEXT:
            if (state.extra) {
              n = state.extra;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.offset += hold & (1 << state.extra) - 1;
              hold >>>= state.extra;
              bits -= state.extra;
              state.back += state.extra;
            }
            if (state.offset > state.dmax) {
              strm.msg = "invalid distance too far back";
              state.mode = BAD2;
              break;
            }
            state.mode = MATCH;
          /* falls through */
          case MATCH:
            if (left === 0) {
              break inf_leave;
            }
            copy3 = _out - left;
            if (state.offset > copy3) {
              copy3 = state.offset - copy3;
              if (copy3 > state.whave) {
                if (state.sane) {
                  strm.msg = "invalid distance too far back";
                  state.mode = BAD2;
                  break;
                }
              }
              if (copy3 > state.wnext) {
                copy3 -= state.wnext;
                from3 = state.wsize - copy3;
              } else {
                from3 = state.wnext - copy3;
              }
              if (copy3 > state.length) {
                copy3 = state.length;
              }
              from_source = state.window;
            } else {
              from_source = output;
              from3 = put - state.offset;
              copy3 = state.length;
            }
            if (copy3 > left) {
              copy3 = left;
            }
            left -= copy3;
            state.length -= copy3;
            do {
              output[put++] = from_source[from3++];
            } while (--copy3);
            if (state.length === 0) {
              state.mode = LEN;
            }
            break;
          case LIT:
            if (left === 0) {
              break inf_leave;
            }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold |= input[next++] << bits;
                bits += 8;
              }
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (_out) {
                strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/
                state.flags ? crc32_default(state.check, output, _out, put - _out) : adler32_default(state.check, output, _out, put - _out);
              }
              _out = left;
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = "incorrect data check";
                state.mode = BAD2;
                break;
              }
              hold = 0;
              bits = 0;
            }
            state.mode = LENGTH;
          /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (hold !== (state.total & 4294967295)) {
                strm.msg = "incorrect length check";
                state.mode = BAD2;
                break;
              }
              hold = 0;
              bits = 0;
            }
            state.mode = DONE;
          /* falls through */
          case DONE:
            ret = Z_STREAM_END2;
            break inf_leave;
          case BAD2:
            ret = Z_DATA_ERROR2;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR;
          case SYNC:
          /* falls through */
          default:
            return Z_STREAM_ERROR2;
        }
      }
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    if (state.wsize || _out !== strm.avail_out && state.mode < BAD2 && (state.mode < CHECK || flush !== Z_FINISH2)) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      state.flags ? crc32_default(state.check, output, _out, strm.next_out - _out) : adler32_default(state.check, output, _out, strm.next_out - _out);
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE2 ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if ((_in === 0 && _out === 0 || flush === Z_FINISH2) && ret === Z_OK2) {
      ret = Z_BUF_ERROR2;
    }
    return ret;
  }
  function inflateEnd(strm) {
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR2;
    }
    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK2;
  }
  var CODES2, LENS2, DISTS2, Z_FINISH2, Z_BLOCK2, Z_TREES, Z_OK2, Z_STREAM_END2, Z_NEED_DICT, Z_STREAM_ERROR2, Z_DATA_ERROR2, Z_MEM_ERROR, Z_BUF_ERROR2, Z_DEFLATED2, HEAD, FLAGS, TIME, OS, EXLEN, EXTRA, NAME, COMMENT, HCRC, DICTID, DICT, TYPE2, TYPEDO, STORED, COPY_, COPY, TABLE, LENLENS, CODELENS, LEN_, LEN, LENEXT, DIST, DISTEXT, MATCH, LIT, CHECK, LENGTH, DONE, BAD2, MEM, SYNC, ENOUGH_LENS2, ENOUGH_DISTS2, virgin, lenfix, distfix;
  var init_inflate = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/inflate.js"() {
      "use strict";
      init_process();
      init_buffer();
      init_utils();
      init_adler32();
      init_crc32();
      init_inffast();
      init_inftrees();
      CODES2 = 0;
      LENS2 = 1;
      DISTS2 = 2;
      Z_FINISH2 = 4;
      Z_BLOCK2 = 5;
      Z_TREES = 6;
      Z_OK2 = 0;
      Z_STREAM_END2 = 1;
      Z_NEED_DICT = 2;
      Z_STREAM_ERROR2 = -2;
      Z_DATA_ERROR2 = -3;
      Z_MEM_ERROR = -4;
      Z_BUF_ERROR2 = -5;
      Z_DEFLATED2 = 8;
      HEAD = 1;
      FLAGS = 2;
      TIME = 3;
      OS = 4;
      EXLEN = 5;
      EXTRA = 6;
      NAME = 7;
      COMMENT = 8;
      HCRC = 9;
      DICTID = 10;
      DICT = 11;
      TYPE2 = 12;
      TYPEDO = 13;
      STORED = 14;
      COPY_ = 15;
      COPY = 16;
      TABLE = 17;
      LENLENS = 18;
      CODELENS = 19;
      LEN_ = 20;
      LEN = 21;
      LENEXT = 22;
      DIST = 23;
      DISTEXT = 24;
      MATCH = 25;
      LIT = 26;
      CHECK = 27;
      LENGTH = 28;
      DONE = 29;
      BAD2 = 30;
      MEM = 31;
      SYNC = 32;
      ENOUGH_LENS2 = 852;
      ENOUGH_DISTS2 = 592;
      virgin = true;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/binding.js
  var binding_exports = {};
  __export(binding_exports, {
    DEFLATE: () => DEFLATE,
    DEFLATERAW: () => DEFLATERAW,
    GUNZIP: () => GUNZIP,
    GZIP: () => GZIP,
    INFLATE: () => INFLATE,
    INFLATERAW: () => INFLATERAW,
    NONE: () => NONE,
    UNZIP: () => UNZIP,
    Z_BEST_COMPRESSION: () => Z_BEST_COMPRESSION,
    Z_BEST_SPEED: () => Z_BEST_SPEED,
    Z_BINARY: () => Z_BINARY2,
    Z_BLOCK: () => Z_BLOCK3,
    Z_BUF_ERROR: () => Z_BUF_ERROR3,
    Z_DATA_ERROR: () => Z_DATA_ERROR3,
    Z_DEFAULT_COMPRESSION: () => Z_DEFAULT_COMPRESSION2,
    Z_DEFAULT_STRATEGY: () => Z_DEFAULT_STRATEGY,
    Z_DEFLATED: () => Z_DEFLATED3,
    Z_ERRNO: () => Z_ERRNO,
    Z_FILTERED: () => Z_FILTERED2,
    Z_FINISH: () => Z_FINISH3,
    Z_FIXED: () => Z_FIXED3,
    Z_FULL_FLUSH: () => Z_FULL_FLUSH2,
    Z_HUFFMAN_ONLY: () => Z_HUFFMAN_ONLY2,
    Z_NEED_DICT: () => Z_NEED_DICT2,
    Z_NO_COMPRESSION: () => Z_NO_COMPRESSION,
    Z_NO_FLUSH: () => Z_NO_FLUSH2,
    Z_OK: () => Z_OK3,
    Z_PARTIAL_FLUSH: () => Z_PARTIAL_FLUSH2,
    Z_RLE: () => Z_RLE2,
    Z_STREAM_END: () => Z_STREAM_END3,
    Z_STREAM_ERROR: () => Z_STREAM_ERROR3,
    Z_SYNC_FLUSH: () => Z_SYNC_FLUSH,
    Z_TEXT: () => Z_TEXT2,
    Z_TREES: () => Z_TREES2,
    Z_UNKNOWN: () => Z_UNKNOWN3,
    Zlib: () => Zlib
  });
  function Zlib(mode) {
    if (mode < DEFLATE || mode > UNZIP)
      throw new TypeError("Bad argument");
    this.mode = mode;
    this.init_done = false;
    this.write_in_progress = false;
    this.pending_close = false;
    this.windowBits = 0;
    this.level = 0;
    this.memLevel = 0;
    this.strategy = 0;
    this.dictionary = null;
  }
  function bufferSet(data, offset) {
    for (var i = 0; i < data.length; i++) {
      this[offset + i] = data[i];
    }
  }
  var NONE, DEFLATE, INFLATE, GZIP, GUNZIP, DEFLATERAW, INFLATERAW, UNZIP, Z_NO_FLUSH2, Z_PARTIAL_FLUSH2, Z_SYNC_FLUSH, Z_FULL_FLUSH2, Z_FINISH3, Z_BLOCK3, Z_TREES2, Z_OK3, Z_STREAM_END3, Z_NEED_DICT2, Z_ERRNO, Z_STREAM_ERROR3, Z_DATA_ERROR3, Z_BUF_ERROR3, Z_NO_COMPRESSION, Z_BEST_SPEED, Z_BEST_COMPRESSION, Z_DEFAULT_COMPRESSION2, Z_FILTERED2, Z_HUFFMAN_ONLY2, Z_RLE2, Z_FIXED3, Z_DEFAULT_STRATEGY, Z_BINARY2, Z_TEXT2, Z_UNKNOWN3, Z_DEFLATED3, status;
  var init_binding = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/zlib-lib/binding.js"() {
      init_process();
      init_buffer();
      init_messages();
      init_zstream();
      init_deflate();
      init_inflate();
      NONE = 0;
      DEFLATE = 1;
      INFLATE = 2;
      GZIP = 3;
      GUNZIP = 4;
      DEFLATERAW = 5;
      INFLATERAW = 6;
      UNZIP = 7;
      Z_NO_FLUSH2 = 0;
      Z_PARTIAL_FLUSH2 = 1;
      Z_SYNC_FLUSH = 2;
      Z_FULL_FLUSH2 = 3;
      Z_FINISH3 = 4;
      Z_BLOCK3 = 5;
      Z_TREES2 = 6;
      Z_OK3 = 0;
      Z_STREAM_END3 = 1;
      Z_NEED_DICT2 = 2;
      Z_ERRNO = -1;
      Z_STREAM_ERROR3 = -2;
      Z_DATA_ERROR3 = -3;
      Z_BUF_ERROR3 = -5;
      Z_NO_COMPRESSION = 0;
      Z_BEST_SPEED = 1;
      Z_BEST_COMPRESSION = 9;
      Z_DEFAULT_COMPRESSION2 = -1;
      Z_FILTERED2 = 1;
      Z_HUFFMAN_ONLY2 = 2;
      Z_RLE2 = 3;
      Z_FIXED3 = 4;
      Z_DEFAULT_STRATEGY = 0;
      Z_BINARY2 = 0;
      Z_TEXT2 = 1;
      Z_UNKNOWN3 = 2;
      Z_DEFLATED3 = 8;
      Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
        this.windowBits = windowBits;
        this.level = level;
        this.memLevel = memLevel;
        this.strategy = strategy;
        if (this.mode === GZIP || this.mode === GUNZIP)
          this.windowBits += 16;
        if (this.mode === UNZIP)
          this.windowBits += 32;
        if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
          this.windowBits = -this.windowBits;
        this.strm = new zstream_default();
        var status2;
        switch (this.mode) {
          case DEFLATE:
          case GZIP:
          case DEFLATERAW:
            status2 = deflateInit2(
              this.strm,
              this.level,
              Z_DEFLATED3,
              this.windowBits,
              this.memLevel,
              this.strategy
            );
            break;
          case INFLATE:
          case GUNZIP:
          case INFLATERAW:
          case UNZIP:
            status2 = inflateInit2(
              this.strm,
              this.windowBits
            );
            break;
          default:
            throw new Error("Unknown mode " + this.mode);
        }
        if (status2 !== Z_OK3) {
          this._error(status2);
          return;
        }
        this.write_in_progress = false;
        this.init_done = true;
      };
      Zlib.prototype.params = function() {
        throw new Error("deflateParams Not supported");
      };
      Zlib.prototype._writeCheck = function() {
        if (!this.init_done)
          throw new Error("write before init");
        if (this.mode === NONE)
          throw new Error("already finalized");
        if (this.write_in_progress)
          throw new Error("write already in progress");
        if (this.pending_close)
          throw new Error("close is pending");
      };
      Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
        this._writeCheck();
        this.write_in_progress = true;
        var self2 = this;
        process.nextTick(function() {
          self2.write_in_progress = false;
          var res = self2._write(flush, input, in_off, in_len, out, out_off, out_len);
          self2.callback(res[0], res[1]);
          if (self2.pending_close)
            self2.close();
        });
        return this;
      };
      Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
        this._writeCheck();
        return this._write(flush, input, in_off, in_len, out, out_off, out_len);
      };
      Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
        this.write_in_progress = true;
        if (flush !== Z_NO_FLUSH2 && flush !== Z_PARTIAL_FLUSH2 && flush !== Z_SYNC_FLUSH && flush !== Z_FULL_FLUSH2 && flush !== Z_FINISH3 && flush !== Z_BLOCK3) {
          throw new Error("Invalid flush value");
        }
        if (input == null) {
          input = new Buffer2(0);
          in_len = 0;
          in_off = 0;
        }
        if (out._set)
          out.set = out._set;
        else
          out.set = bufferSet;
        var strm = this.strm;
        strm.avail_in = in_len;
        strm.input = input;
        strm.next_in = in_off;
        strm.avail_out = out_len;
        strm.output = out;
        strm.next_out = out_off;
        var status2;
        switch (this.mode) {
          case DEFLATE:
          case GZIP:
          case DEFLATERAW:
            status2 = deflate(strm, flush);
            break;
          case UNZIP:
          case INFLATE:
          case GUNZIP:
          case INFLATERAW:
            status2 = inflate(strm, flush);
            break;
          default:
            throw new Error("Unknown mode " + this.mode);
        }
        if (status2 !== Z_STREAM_END3 && status2 !== Z_OK3) {
          this._error(status2);
        }
        this.write_in_progress = false;
        return [strm.avail_in, strm.avail_out];
      };
      Zlib.prototype.close = function() {
        if (this.write_in_progress) {
          this.pending_close = true;
          return;
        }
        this.pending_close = false;
        if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
          deflateEnd(this.strm);
        } else {
          inflateEnd(this.strm);
        }
        this.mode = NONE;
      };
      Zlib.prototype.reset = function() {
        switch (this.mode) {
          case DEFLATE:
          case DEFLATERAW:
            status = deflateReset(this.strm);
            break;
          case INFLATE:
          case INFLATERAW:
            status = inflateReset(this.strm);
            break;
        }
        if (status !== Z_OK3) {
          this._error(status);
        }
      };
      Zlib.prototype._error = function(status2) {
        this.onerror(messages_default[status2] + ": " + this.strm.msg, status2);
        this.write_in_progress = false;
        if (this.pending_close)
          this.close();
      };
    }
  });

  // node-modules-polyfills:zlib
  var zlib_exports = {};
  __export(zlib_exports, {
    Deflate: () => Deflate,
    DeflateRaw: () => DeflateRaw,
    Gunzip: () => Gunzip,
    Gzip: () => Gzip,
    Inflate: () => Inflate,
    InflateRaw: () => InflateRaw,
    Unzip: () => Unzip,
    Zlib: () => Zlib2,
    codes: () => codes,
    createDeflate: () => createDeflate,
    createDeflateRaw: () => createDeflateRaw,
    createGunzip: () => createGunzip,
    createGzip: () => createGzip,
    createInflate: () => createInflate,
    createInflateRaw: () => createInflateRaw,
    createUnzip: () => createUnzip,
    default: () => zlib_default,
    deflate: () => deflate2,
    deflateRaw: () => deflateRaw,
    deflateRawSync: () => deflateRawSync,
    deflateSync: () => deflateSync,
    gunzip: () => gunzip,
    gunzipSync: () => gunzipSync,
    gzip: () => gzip,
    gzipSync: () => gzipSync,
    inflate: () => inflate2,
    inflateRaw: () => inflateRaw,
    inflateRawSync: () => inflateRawSync,
    inflateSync: () => inflateSync,
    unzip: () => unzip,
    unzipSync: () => unzipSync
  });
  function assert2(a, msg) {
    if (!a) {
      throw new Error(msg);
    }
  }
  function createDeflate(o) {
    return new Deflate(o);
  }
  function createInflate(o) {
    return new Inflate(o);
  }
  function createDeflateRaw(o) {
    return new DeflateRaw(o);
  }
  function createInflateRaw(o) {
    return new InflateRaw(o);
  }
  function createGzip(o) {
    return new Gzip(o);
  }
  function createGunzip(o) {
    return new Gunzip(o);
  }
  function createUnzip(o) {
    return new Unzip(o);
  }
  function deflate2(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  }
  function deflateSync(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  }
  function gzip(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  }
  function gzipSync(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  }
  function deflateRaw(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  }
  function deflateRawSync(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  }
  function unzip(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  }
  function unzipSync(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  }
  function inflate2(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  }
  function inflateSync(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  }
  function gunzip(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  }
  function gunzipSync(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  }
  function inflateRaw(buffer, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  }
  function inflateRawSync(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  }
  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;
    engine.on("error", onError);
    engine.on("end", onEnd);
    engine.end(buffer);
    flow2();
    function flow2() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once("readable", flow2);
    }
    function onError(err2) {
      engine.removeListener("end", onEnd);
      engine.removeListener("readable", flow2);
      callback(err2);
    }
    function onEnd() {
      var buf = Buffer2.concat(buffers, nread);
      buffers = [];
      callback(null, buf);
      engine.close();
    }
  }
  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === "string")
      buffer = new Buffer2(buffer);
    if (!Buffer2.isBuffer(buffer))
      throw new TypeError("Not a string or buffer");
    var flushFlag = binding3.Z_FINISH;
    return engine._processChunk(buffer, flushFlag);
  }
  function Deflate(opts) {
    if (!(this instanceof Deflate)) return new Deflate(opts);
    Zlib2.call(this, opts, binding3.DEFLATE);
  }
  function Inflate(opts) {
    if (!(this instanceof Inflate)) return new Inflate(opts);
    Zlib2.call(this, opts, binding3.INFLATE);
  }
  function Gzip(opts) {
    if (!(this instanceof Gzip)) return new Gzip(opts);
    Zlib2.call(this, opts, binding3.GZIP);
  }
  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) return new Gunzip(opts);
    Zlib2.call(this, opts, binding3.GUNZIP);
  }
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
    Zlib2.call(this, opts, binding3.DEFLATERAW);
  }
  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
    Zlib2.call(this, opts, binding3.INFLATERAW);
  }
  function Unzip(opts) {
    if (!(this instanceof Unzip)) return new Unzip(opts);
    Zlib2.call(this, opts, binding3.UNZIP);
  }
  function Zlib2(opts, mode) {
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || binding3.Z_DEFAULT_CHUNK;
    Transform.call(this, opts);
    if (opts.flush) {
      if (opts.flush !== binding3.Z_NO_FLUSH && opts.flush !== binding3.Z_PARTIAL_FLUSH && opts.flush !== binding3.Z_SYNC_FLUSH && opts.flush !== binding3.Z_FULL_FLUSH && opts.flush !== binding3.Z_FINISH && opts.flush !== binding3.Z_BLOCK) {
        throw new Error("Invalid flush flag: " + opts.flush);
      }
    }
    this._flushFlag = opts.flush || binding3.Z_NO_FLUSH;
    if (opts.chunkSize) {
      if (opts.chunkSize < binding3.Z_MIN_CHUNK || opts.chunkSize > binding3.Z_MAX_CHUNK) {
        throw new Error("Invalid chunk size: " + opts.chunkSize);
      }
    }
    if (opts.windowBits) {
      if (opts.windowBits < binding3.Z_MIN_WINDOWBITS || opts.windowBits > binding3.Z_MAX_WINDOWBITS) {
        throw new Error("Invalid windowBits: " + opts.windowBits);
      }
    }
    if (opts.level) {
      if (opts.level < binding3.Z_MIN_LEVEL || opts.level > binding3.Z_MAX_LEVEL) {
        throw new Error("Invalid compression level: " + opts.level);
      }
    }
    if (opts.memLevel) {
      if (opts.memLevel < binding3.Z_MIN_MEMLEVEL || opts.memLevel > binding3.Z_MAX_MEMLEVEL) {
        throw new Error("Invalid memLevel: " + opts.memLevel);
      }
    }
    if (opts.strategy) {
      if (opts.strategy != binding3.Z_FILTERED && opts.strategy != binding3.Z_HUFFMAN_ONLY && opts.strategy != binding3.Z_RLE && opts.strategy != binding3.Z_FIXED && opts.strategy != binding3.Z_DEFAULT_STRATEGY) {
        throw new Error("Invalid strategy: " + opts.strategy);
      }
    }
    if (opts.dictionary) {
      if (!Buffer2.isBuffer(opts.dictionary)) {
        throw new Error("Invalid dictionary: it should be a Buffer instance");
      }
    }
    this._binding = new binding3.Zlib(mode);
    var self2 = this;
    this._hadError = false;
    this._binding.onerror = function(message, errno) {
      self2._binding = null;
      self2._hadError = true;
      var error2 = new Error(message);
      error2.errno = errno;
      error2.code = binding3.codes[errno];
      self2.emit("error", error2);
    };
    var level = binding3.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === "number") level = opts.level;
    var strategy = binding3.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === "number") strategy = opts.strategy;
    this._binding.init(
      opts.windowBits || binding3.Z_DEFAULT_WINDOWBITS,
      level,
      opts.memLevel || binding3.Z_DEFAULT_MEMLEVEL,
      strategy,
      opts.dictionary
    );
    this._buffer = new Buffer2(this._chunkSize);
    this._offset = 0;
    this._closed = false;
    this._level = level;
    this._strategy = strategy;
    this.once("end", this.close);
  }
  var binding3, codes, zlib_default;
  var init_zlib = __esm({
    "node-modules-polyfills:zlib"() {
      init_process();
      init_buffer();
      init_stream();
      init_binding();
      init_util();
      binding3 = {};
      Object.keys(binding_exports).forEach(function(key) {
        binding3[key] = binding_exports[key];
      });
      binding3.Z_MIN_WINDOWBITS = 8;
      binding3.Z_MAX_WINDOWBITS = 15;
      binding3.Z_DEFAULT_WINDOWBITS = 15;
      binding3.Z_MIN_CHUNK = 64;
      binding3.Z_MAX_CHUNK = Infinity;
      binding3.Z_DEFAULT_CHUNK = 16 * 1024;
      binding3.Z_MIN_MEMLEVEL = 1;
      binding3.Z_MAX_MEMLEVEL = 9;
      binding3.Z_DEFAULT_MEMLEVEL = 8;
      binding3.Z_MIN_LEVEL = -1;
      binding3.Z_MAX_LEVEL = 9;
      binding3.Z_DEFAULT_LEVEL = binding3.Z_DEFAULT_COMPRESSION;
      codes = {
        Z_OK: binding3.Z_OK,
        Z_STREAM_END: binding3.Z_STREAM_END,
        Z_NEED_DICT: binding3.Z_NEED_DICT,
        Z_ERRNO: binding3.Z_ERRNO,
        Z_STREAM_ERROR: binding3.Z_STREAM_ERROR,
        Z_DATA_ERROR: binding3.Z_DATA_ERROR,
        Z_MEM_ERROR: binding3.Z_MEM_ERROR,
        Z_BUF_ERROR: binding3.Z_BUF_ERROR,
        Z_VERSION_ERROR: binding3.Z_VERSION_ERROR
      };
      Object.keys(codes).forEach(function(k) {
        codes[codes[k]] = k;
      });
      inherits_default(Zlib2, Transform);
      Zlib2.prototype.params = function(level, strategy, callback) {
        if (level < binding3.Z_MIN_LEVEL || level > binding3.Z_MAX_LEVEL) {
          throw new RangeError("Invalid compression level: " + level);
        }
        if (strategy != binding3.Z_FILTERED && strategy != binding3.Z_HUFFMAN_ONLY && strategy != binding3.Z_RLE && strategy != binding3.Z_FIXED && strategy != binding3.Z_DEFAULT_STRATEGY) {
          throw new TypeError("Invalid strategy: " + strategy);
        }
        if (this._level !== level || this._strategy !== strategy) {
          var self2 = this;
          this.flush(binding3.Z_SYNC_FLUSH, function() {
            self2._binding.params(level, strategy);
            if (!self2._hadError) {
              self2._level = level;
              self2._strategy = strategy;
              if (callback) callback();
            }
          });
        } else {
          process.nextTick(callback);
        }
      };
      Zlib2.prototype.reset = function() {
        return this._binding.reset();
      };
      Zlib2.prototype._flush = function(callback) {
        this._transform(new Buffer2(0), "", callback);
      };
      Zlib2.prototype.flush = function(kind, callback) {
        var ws = this._writableState;
        if (typeof kind === "function" || kind === void 0 && !callback) {
          callback = kind;
          kind = binding3.Z_FULL_FLUSH;
        }
        if (ws.ended) {
          if (callback)
            process.nextTick(callback);
        } else if (ws.ending) {
          if (callback)
            this.once("end", callback);
        } else if (ws.needDrain) {
          var self2 = this;
          this.once("drain", function() {
            self2.flush(callback);
          });
        } else {
          this._flushFlag = kind;
          this.write(new Buffer2(0), "", callback);
        }
      };
      Zlib2.prototype.close = function(callback) {
        if (callback)
          process.nextTick(callback);
        if (this._closed)
          return;
        this._closed = true;
        this._binding.close();
        var self2 = this;
        process.nextTick(function() {
          self2.emit("close");
        });
      };
      Zlib2.prototype._transform = function(chunk, encoding, cb) {
        var flushFlag;
        var ws = this._writableState;
        var ending = ws.ending || ws.ended;
        var last = ending && (!chunk || ws.length === chunk.length);
        if (!chunk === null && !Buffer2.isBuffer(chunk))
          return cb(new Error("invalid input"));
        if (last)
          flushFlag = binding3.Z_FINISH;
        else {
          flushFlag = this._flushFlag;
          if (chunk.length >= ws.length) {
            this._flushFlag = this._opts.flush || binding3.Z_NO_FLUSH;
          }
        }
        this._processChunk(chunk, flushFlag, cb);
      };
      Zlib2.prototype._processChunk = function(chunk, flushFlag, cb) {
        var availInBefore = chunk && chunk.length;
        var availOutBefore = this._chunkSize - this._offset;
        var inOff = 0;
        var self2 = this;
        var async = typeof cb === "function";
        if (!async) {
          var buffers = [];
          var nread = 0;
          var error2;
          this.on("error", function(er) {
            error2 = er;
          });
          do {
            var res = this._binding.writeSync(
              flushFlag,
              chunk,
              // in
              inOff,
              // in_off
              availInBefore,
              // in_len
              this._buffer,
              // out
              this._offset,
              //out_off
              availOutBefore
            );
          } while (!this._hadError && callback(res[0], res[1]));
          if (this._hadError) {
            throw error2;
          }
          var buf = Buffer2.concat(buffers, nread);
          this.close();
          return buf;
        }
        var req = this._binding.write(
          flushFlag,
          chunk,
          // in
          inOff,
          // in_off
          availInBefore,
          // in_len
          this._buffer,
          // out
          this._offset,
          //out_off
          availOutBefore
        );
        req.buffer = chunk;
        req.callback = callback;
        function callback(availInAfter, availOutAfter) {
          if (self2._hadError)
            return;
          var have = availOutBefore - availOutAfter;
          assert2(have >= 0, "have should not go down");
          if (have > 0) {
            var out = self2._buffer.slice(self2._offset, self2._offset + have);
            self2._offset += have;
            if (async) {
              self2.push(out);
            } else {
              buffers.push(out);
              nread += out.length;
            }
          }
          if (availOutAfter === 0 || self2._offset >= self2._chunkSize) {
            availOutBefore = self2._chunkSize;
            self2._offset = 0;
            self2._buffer = new Buffer2(self2._chunkSize);
          }
          if (availOutAfter === 0) {
            inOff += availInBefore - availInAfter;
            availInBefore = availInAfter;
            if (!async)
              return true;
            var newReq = self2._binding.write(
              flushFlag,
              chunk,
              inOff,
              availInBefore,
              self2._buffer,
              self2._offset,
              self2._chunkSize
            );
            newReq.callback = callback;
            newReq.buffer = chunk;
            return;
          }
          if (!async)
            return false;
          cb();
        }
      };
      inherits_default(Deflate, Zlib2);
      inherits_default(Inflate, Zlib2);
      inherits_default(Gzip, Zlib2);
      inherits_default(Gunzip, Zlib2);
      inherits_default(DeflateRaw, Zlib2);
      inherits_default(InflateRaw, Zlib2);
      inherits_default(Unzip, Zlib2);
      zlib_default = {
        codes,
        createDeflate,
        createInflate,
        createDeflateRaw,
        createInflateRaw,
        createGzip,
        createGunzip,
        createUnzip,
        deflate: deflate2,
        deflateSync,
        gzip,
        gzipSync,
        deflateRaw,
        deflateRawSync,
        unzip,
        unzipSync,
        inflate: inflate2,
        inflateSync,
        gunzip,
        gunzipSync,
        inflateRaw,
        inflateRawSync,
        Deflate,
        Inflate,
        Gzip,
        Gunzip,
        DeflateRaw,
        InflateRaw,
        Unzip,
        Zlib: Zlib2
      };
    }
  });

  // node-modules-polyfills-commonjs:zlib
  var require_zlib = __commonJS({
    "node-modules-polyfills-commonjs:zlib"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_zlib(), __toCommonJS(zlib_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser4 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = require_events().EventEmitter;
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var _require = require_buffer();
      var Buffer4 = _require.Buffer;
      var _require2 = require_util();
      var inspect4 = _require2.inspect;
      var custom = inspect4 && inspect4.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer4.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ (function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass(BufferList2, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join2(s) {
            if (this.length === 0) return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next) ret += s + p.data;
            return ret;
          }
        }, {
          key: "concat",
          value: function concat3(n) {
            if (this.length === 0) return Buffer4.alloc(0);
            var ret = Buffer4.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }
          // Consumes a specified amount of bytes or characters from the buffered data.
        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          }
          // Consumes a specified amount of characters from the buffered data.
        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str;
              else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Consumes a specified amount of bytes from the buffered data.
        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer4.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) this.head = p.next;
                  else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }
          // Make sure the linked list only shows the minimal necessary information.
        }, {
          key: custom,
          value: function value(_, options) {
            return inspect4(this, _objectSpread(_objectSpread({}, options), {}, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }
        }]);
        return BufferList2;
      })();
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy4 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function destroy(err2, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err2);
          } else if (err2) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err2);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err2);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err2 || null, function(err3) {
          if (!cb && err3) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err3);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err3);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err2) {
        emitErrorNT(self2, err2);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose) return;
        if (self2._readableState && !self2._readableState.emitClose) return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err2) {
        self2.emit("error", err2);
      }
      function errorOrDestroy(stream, err2) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err2);
        else stream.emit("error", err2);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // node_modules/winston/node_modules/readable-stream/errors-browser.js
  var require_errors_browser3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/errors-browser.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var codes2 = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage2(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        var NodeError = /* @__PURE__ */ (function(_Base) {
          _inheritsLoose(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage2(arg1, arg2, arg3)) || this;
          }
          return NodeError2;
        })(Base);
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes2[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes3(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
        return 'The value "' + value + '" is invalid for option "' + name2 + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name2, " argument")) {
          msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type2 = includes3(name2, ".") ? "property" : "argument";
          msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(typeof actual);
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
        return "The " + name2 + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name2) {
        return "Cannot call " + name2 + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes2;
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/state.js
  var require_state3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_INVALID_OPT_VALUE = require_errors_browser3().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name2 = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name2, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable4 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Writable2;
      function CorkedRequest2(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex2;
      Writable2.WritableState = WritableState2;
      var internalUtil = {
        deprecate: require_browser2()
      };
      var Stream2 = require_stream_browser4();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy4();
      var _require = require_state3();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser3().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits_browser()(Writable2, Stream2);
      function nop2() {
      }
      function WritableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex4();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er) {
          onwrite2(stream, er);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest2(this);
      }
      WritableState2.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function() {
        try {
          Object.defineProperty(WritableState2.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable2, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable2) return false;
            return object && object._writableState instanceof WritableState2;
          }
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex4();
        var isDuplex = this instanceof Duplex2;
        if (!isDuplex && !realHasInstance.call(Writable2, this)) return new Writable2(options);
        this._writableState = new WritableState2(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function") this._writev = options.writev;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }
        Stream2.call(this);
      }
      Writable2.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd2(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      }
      function validChunk2(stream, state, chunk, cb) {
        var er;
        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }
        return true;
      }
      Writable2.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer4.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop2;
        if (state.ending) writeAfterEnd2(this, cb);
        else if (isBuf || validChunk2(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer2(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable2.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable2.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer2(this, state);
        }
      };
      Writable2.prototype.setDefaultEncoding = function setDefaultEncoding2(encoding) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      function decodeChunk2(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer4.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      function writeOrBuffer2(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk2(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite2(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite2(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError2(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er);
          process.nextTick(finishMaybe2, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
          finishMaybe2(stream, state);
        }
      }
      function onwriteStateUpdate2(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite2(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate2(state);
        if (er) onwriteError2(stream, state, sync, er, cb);
        else {
          var finished = needFinish2(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer2(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite2, stream, state, finished, cb);
          } else {
            afterWrite2(stream, state, finished, cb);
          }
        }
      }
      function afterWrite2(stream, state, finished, cb) {
        if (!finished) onwriteDrain2(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe2(stream, state);
      }
      function onwriteDrain2(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer2(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite2(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest2(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite2(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable2.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable2.prototype._writev = null;
      Writable2.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending) endWritable2(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function needFinish2(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      function callFinal(stream, state) {
        stream._final(function(err2) {
          state.pendingcb--;
          if (err2) {
            errorOrDestroy(stream, err2);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe2(stream, state);
        });
      }
      function prefinish2(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe2(stream, state) {
        var need = needFinish2(state);
        if (need) {
          prefinish2(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable2(stream, state, cb) {
        state.ending = true;
        finishMaybe2(stream, state);
        if (cb) {
          if (state.finished) process.nextTick(cb);
          else stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err2) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err2);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }
      });
      Writable2.prototype.destroy = destroyImpl.destroy;
      Writable2.prototype._undestroy = destroyImpl.undestroy;
      Writable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex4 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var objectKeys3 = Object.keys || function(obj) {
        var keys3 = [];
        for (var key in obj) keys3.push(key);
        return keys3;
      };
      module.exports = Duplex2;
      var Readable2 = require_stream_readable4();
      var Writable2 = require_stream_writable4();
      require_inherits_browser()(Duplex2, Readable2);
      {
        keys2 = objectKeys3(Writable2.prototype);
        for (v = 0; v < keys2.length; v++) {
          method = keys2[v];
          if (!Duplex2.prototype[method]) Duplex2.prototype[method] = Writable2.prototype[method];
        }
      }
      var keys2;
      var method;
      var v;
      function Duplex2(options) {
        if (!(this instanceof Duplex2)) return new Duplex2(options);
        Readable2.call(this, options);
        Writable2.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false) this.readable = false;
          if (options.writable === false) this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend2);
          }
        }
      }
      Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState && this._writableState.getBuffer();
        }
      });
      Object.defineProperty(Duplex2.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._writableState.length;
        }
      });
      function onend2() {
        if (this._writableState.ended) return;
        process.nextTick(onEndNT2, this);
      }
      function onEndNT2(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }
      });
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser3().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once4(callback) {
        var called = false;
        return function() {
          if (called) return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop3() {
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts);
        if (!opts) opts = {};
        callback = once4(callback || noop3);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable) onfinish();
        };
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable) callback.call(stream);
        };
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend2 = function onend3() {
          readable = false;
          readableEnded = true;
          if (!writable) callback.call(stream);
        };
        var onerror = function onerror2(err2) {
          callback.call(stream, err2);
        };
        var onclose = function onclose2() {
          var err2;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err2 = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err2);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req) onrequest();
          else stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend2);
        stream.on("finish", onfinish);
        if (opts.error !== false) stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend2);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null) return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object") return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var finished = require_end_of_stream3();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done2) {
        return {
          value,
          done: done2
        };
      }
      function readAndResolve(iter) {
        var resolve2 = iter[kLastResolve];
        if (resolve2 !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve2(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function(resolve2, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve2(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve2, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: function next() {
          var _this = this;
          var error2 = this[kError];
          if (error2 !== null) {
            return Promise.reject(error2);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve2, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve2(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
        var _this2 = this;
        return new Promise(function(resolve2, reject) {
          _this2[kStream].destroy(null, function(err2) {
            if (err2) {
              reject(err2);
              return;
            }
            resolve2(createIterResult(void 0, true));
          });
        });
      }), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: function value(resolve2, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve2(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve2;
              iterator[kLastReject] = reject;
            }
          },
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err2) {
          if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err2);
            }
            iterator[kError] = err2;
            return;
          }
          var resolve2 = iterator[kLastResolve];
          if (resolve2 !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve2(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/from-browser.js
  var require_from_browser3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
      init_process();
      init_buffer();
      module.exports = function() {
        throw new Error("Readable.from is not available in the browser");
      };
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable4 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Readable2;
      var Duplex2;
      Readable2.ReadableState = ReadableState2;
      var EE = require_events().EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type2) {
        return emitter.listeners(type2).length;
      };
      var Stream2 = require_stream_browser4();
      var Buffer4 = require_buffer().Buffer;
      var OurUint8Array = (typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = require_util();
      var debug2;
      if (debugUtil && debugUtil.debuglog) {
        debug2 = debugUtil.debuglog("stream");
      } else {
        debug2 = function debug3() {
        };
      }
      var BufferList2 = require_buffer_list3();
      var destroyImpl = require_destroy4();
      var _require = require_state3();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser3().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder2;
      var createReadableStreamAsyncIterator;
      var from3;
      require_inherits_browser()(Readable2, Stream2);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener3(emitter, event, fn) {
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState2(options, stream, isDuplex) {
        Duplex2 = Duplex2 || require_stream_duplex4();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex2;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList2();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder2(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable2(options) {
        Duplex2 = Duplex2 || require_stream_duplex4();
        if (!(this instanceof Readable2)) return new Readable2(options);
        var isDuplex = this instanceof Duplex2;
        this._readableState = new ReadableState2(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
        }
        Stream2.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      });
      Readable2.prototype.destroy = destroyImpl.destroy;
      Readable2.prototype._undestroy = destroyImpl.undestroy;
      Readable2.prototype._destroy = function(err2, cb) {
        cb(err2);
      };
      Readable2.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer4.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk2(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable2.prototype.unshift = function(chunk) {
        return readableAddChunk2(this, chunk, null, true, false);
      };
      function readableAddChunk2(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug2("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk2(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid2(state, chunk);
          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer4.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                else maybeReadMore2(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore2(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable2(stream);
        }
        maybeReadMore2(stream, state);
      }
      function chunkInvalid2(state, chunk) {
        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er;
      }
      Readable2.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function(enc) {
        if (!StringDecoder2) StringDecoder2 = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder2(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "") this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM2 = 1073741824;
      function computeNewHighWaterMark2(n) {
        if (n >= MAX_HWM2) {
          n = MAX_HWM2;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead2(n, state) {
        if (n <= 0 || state.length === 0 && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          if (state.flowing && state.length) return state.buffer.head.data.length;
          else return state.length;
        }
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark2(n);
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable2.prototype.read = function(n) {
        debug2("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug2("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable2(this);
          else emitReadable2(this);
          return null;
        }
        n = howMuchToRead2(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable2(this);
          return null;
        }
        var doRead = state.needReadable;
        debug2("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug2("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug2("reading or ended", doRead);
        } else if (doRead) {
          debug2("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead2(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList2(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable2(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      function onEofChunk2(stream, state) {
        debug2("onEofChunk");
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable2(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_2(stream);
          }
        }
      }
      function emitReadable2(stream) {
        var state = stream._readableState;
        debug2("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug2("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_2, stream);
        }
      }
      function emitReadable_2(stream) {
        var state = stream._readableState;
        debug2("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow2(stream);
      }
      function maybeReadMore2(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_2, stream, state);
        }
      }
      function maybeReadMore_2(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug2("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      Readable2.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable2.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug2("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend2 : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug2("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend2() {
          debug2("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain2(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug2("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend2);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug2("ondata");
          var ret = dest.write(chunk);
          debug2("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf4(state.pipes, dest) !== -1) && !cleanedUp) {
              debug2("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er) {
          debug2("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
        }
        prependListener3(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug2("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug2("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug2("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain2(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug2("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow2(src);
          }
        };
      }
      Readable2.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
          return this;
        }
        var index = indexOf4(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable2.prototype.on = function(ev, fn) {
        var res = Stream2.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug2("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable2(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick2, this);
            }
          }
        }
        return res;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      Readable2.prototype.removeListener = function(ev, fn) {
        var res = Stream2.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable2.prototype.removeAllListeners = function(ev) {
        var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick2(self2) {
        debug2("readable nexttick read 0");
        self2.read(0);
      }
      Readable2.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug2("resume");
          state.flowing = !state.readableListening;
          resume2(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume2(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_2, stream, state);
        }
      }
      function resume_2(stream, state) {
        debug2("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow2(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable2.prototype.pause = function() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug2("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow2(stream) {
        var state = stream._readableState;
        debug2("flow", state.flowing);
        while (state.flowing && stream.read() !== null) ;
      }
      Readable2.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug2("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug2("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = /* @__PURE__ */ (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug2("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable2.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator3();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.highWaterMark;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState && this._readableState.buffer;
        }
      });
      Object.defineProperty(Readable2.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      });
      Readable2._fromList = fromList2;
      Object.defineProperty(Readable2.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get3() {
          return this._readableState.length;
        }
      });
      function fromList2(n, state) {
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable2(stream) {
        var state = stream._readableState;
        debug2("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT2, state, stream);
        }
      }
      function endReadableNT2(state, stream) {
        debug2("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable2.from = function(iterable, opts) {
          if (from3 === void 0) {
            from3 = require_from_browser3();
          }
          return from3(Readable2, iterable, opts);
        };
      }
      function indexOf4(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }
        return -1;
      }
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = Transform2;
      var _require$codes = require_errors_browser3().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex2 = require_stream_duplex4();
      require_inherits_browser()(Transform2, Duplex2);
      function afterTransform2(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform2(options) {
        if (!(this instanceof Transform2)) return new Transform2(options);
        Duplex2.call(this, options);
        this._transformState = {
          afterTransform: afterTransform2.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function") this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        }
        this.on("prefinish", prefinish2);
      }
      function prefinish2() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er, data) {
            done2(_this, er, data);
          });
        } else {
          done2(this, null, null);
        }
      }
      Transform2.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex2.prototype.push.call(this, chunk, encoding);
      };
      Transform2.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform2.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      };
      Transform2.prototype._read = function(n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform2.prototype._destroy = function(err2, cb) {
        Duplex2.prototype._destroy.call(this, err2, function(err22) {
          cb(err22);
        });
      };
      function done2(stream, er, data) {
        if (er) return stream.emit("error", er);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      module.exports = PassThrough2;
      var Transform2 = require_stream_transform3();
      require_inherits_browser()(PassThrough2, Transform2);
      function PassThrough2(options) {
        if (!(this instanceof PassThrough2)) return new PassThrough2(options);
        Transform2.call(this, options);
      }
      PassThrough2.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node_modules/winston/node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline2 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var eos;
      function once4(callback) {
        var called = false;
        return function() {
          if (called) return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      var _require$codes = require_errors_browser3().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop3(err2) {
        if (err2) throw err2;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once4(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === void 0) eos = require_end_of_stream3();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err2) {
          if (err2) return callback(err2);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err2) {
          if (closed) return;
          if (destroyed) return;
          destroyed = true;
          if (isRequest(stream)) return stream.abort();
          if (typeof stream.destroy === "function") return stream.destroy();
          callback(err2 || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from3, to) {
        return from3.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length) return noop3;
        if (typeof streams[streams.length - 1] !== "function") return noop3;
        return streams.pop();
      }
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0])) streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error2;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err2) {
            if (!error2) error2 = err2;
            if (err2) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error2);
          });
        });
        return streams.reduce(pipe);
      }
      module.exports = pipeline;
    }
  });

  // node_modules/winston/node_modules/readable-stream/readable-browser.js
  var require_readable_browser3 = __commonJS({
    "node_modules/winston/node_modules/readable-stream/readable-browser.js"(exports, module) {
      init_process();
      init_buffer();
      exports = module.exports = require_stream_readable4();
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable4();
      exports.Duplex = require_stream_duplex4();
      exports.Transform = require_stream_transform3();
      exports.PassThrough = require_stream_passthrough3();
      exports.finished = require_end_of_stream3();
      exports.pipeline = require_pipeline2();
    }
  });

  // node_modules/@dabh/diagnostics/diagnostics.js
  var require_diagnostics = __commonJS({
    "node_modules/@dabh/diagnostics/diagnostics.js"(exports, module) {
      init_process();
      init_buffer();
      var adapters = [];
      var modifiers = [];
      var logger = function devnull() {
      };
      function use(adapter) {
        if (~adapters.indexOf(adapter)) return false;
        adapters.push(adapter);
        return true;
      }
      function set(custom) {
        logger = custom;
      }
      function enabled(namespace) {
        var async = [];
        for (var i = 0; i < adapters.length; i++) {
          if (adapters[i].async) {
            async.push(adapters[i]);
            continue;
          }
          if (adapters[i](namespace)) return true;
        }
        if (!async.length) return false;
        return new Promise(function pinky(resolve2) {
          Promise.all(
            async.map(function prebind(fn) {
              return fn(namespace);
            })
          ).then(function resolved(values) {
            resolve2(values.some(Boolean));
          });
        });
      }
      function modify(fn) {
        if (~modifiers.indexOf(fn)) return false;
        modifiers.push(fn);
        return true;
      }
      function write4() {
        logger.apply(logger, arguments);
      }
      function process2(message) {
        for (var i = 0; i < modifiers.length; i++) {
          message = modifiers[i].apply(modifiers[i], arguments);
        }
        return message;
      }
      function introduce(fn, options) {
        var has = Object.prototype.hasOwnProperty;
        for (var key in options) {
          if (has.call(options, key)) {
            fn[key] = options[key];
          }
        }
        return fn;
      }
      function nope(options) {
        options.enabled = false;
        options.modify = modify;
        options.set = set;
        options.use = use;
        return introduce(function diagnopes() {
          return false;
        }, options);
      }
      function yep(options) {
        function diagnostics() {
          var args = Array.prototype.slice.call(arguments, 0);
          write4.call(write4, options, process2(args, options));
          return true;
        }
        options.enabled = true;
        options.modify = modify;
        options.set = set;
        options.use = use;
        return introduce(diagnostics, options);
      }
      module.exports = function create(diagnostics) {
        diagnostics.introduce = introduce;
        diagnostics.enabled = enabled;
        diagnostics.process = process2;
        diagnostics.modify = modify;
        diagnostics.write = write4;
        diagnostics.nope = nope;
        diagnostics.yep = yep;
        diagnostics.set = set;
        diagnostics.use = use;
        return diagnostics;
      };
    }
  });

  // node_modules/@dabh/diagnostics/browser/production.js
  var require_production = __commonJS({
    "node_modules/@dabh/diagnostics/browser/production.js"(exports, module) {
      init_process();
      init_buffer();
      var create = require_diagnostics();
      var diagnostics = create(function prod(namespace, options) {
        options = options || {};
        options.namespace = namespace;
        options.prod = true;
        options.dev = false;
        if (!(options.force || prod.force)) return prod.nope(options);
        return prod.yep(options);
      });
      module.exports = diagnostics;
    }
  });

  // node_modules/@dabh/diagnostics/browser/index.js
  var require_browser7 = __commonJS({
    "node_modules/@dabh/diagnostics/browser/index.js"(exports, module) {
      init_process();
      init_buffer();
      if (true) {
        module.exports = require_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/winston/dist/winston/tail-file.js
  var require_tail_file = __commonJS({
    "node_modules/winston/dist/winston/tail-file.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var fs = require_fs();
      var _require = require_string_decoder2();
      var StringDecoder2 = _require.StringDecoder;
      var _require2 = require_readable_browser3();
      var Stream2 = _require2.Stream;
      function noop3() {
      }
      module.exports = function(options, iter) {
        var buffer = Buffer2.alloc(64 * 1024);
        var decode = new StringDecoder2("utf8");
        var stream = new Stream2();
        var buff = "";
        var pos = 0;
        var row = 0;
        if (options.start === -1) {
          delete options.start;
        }
        stream.readable = true;
        stream.destroy = function() {
          stream.destroyed = true;
          stream.emit("end");
          stream.emit("close");
        };
        fs.open(options.file, "a+", "0644", function(err2, fd) {
          if (err2) {
            if (!iter) {
              stream.emit("error", err2);
            } else {
              iter(err2);
            }
            stream.destroy();
            return;
          }
          (function read2() {
            if (stream.destroyed) {
              fs.close(fd, noop3);
              return;
            }
            return fs.read(fd, buffer, 0, buffer.length, pos, function(error2, bytes) {
              if (error2) {
                if (!iter) {
                  stream.emit("error", error2);
                } else {
                  iter(error2);
                }
                stream.destroy();
                return;
              }
              if (!bytes) {
                if (buff) {
                  if (options.start == null || row > options.start) {
                    if (!iter) {
                      stream.emit("line", buff);
                    } else {
                      iter(null, buff);
                    }
                  }
                  row++;
                  buff = "";
                }
                return setTimeout(read2, 1e3);
              }
              var data = decode.write(buffer.slice(0, bytes));
              if (!iter) {
                stream.emit("data", data);
              }
              data = (buff + data).split(/\n+/);
              var l = data.length - 1;
              var i = 0;
              for (; i < l; i++) {
                if (options.start == null || row > options.start) {
                  if (!iter) {
                    stream.emit("line", data[i]);
                  } else {
                    iter(null, data[i]);
                  }
                }
                row++;
              }
              buff = data[l];
              pos += bytes;
              return read2();
            });
          })();
        });
        if (!iter) {
          return stream;
        }
        return stream.destroy;
      };
    }
  });

  // node_modules/winston/dist/winston/transports/file.js
  var require_file = __commonJS({
    "node_modules/winston/dist/winston/transports/file.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var fs = require_fs();
      var path = require_path();
      var asyncSeries = require_series();
      var zlib = require_zlib();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var _require2 = require_readable_browser3();
      var Stream2 = _require2.Stream;
      var PassThrough2 = _require2.PassThrough;
      var TransportStream = require_dist9();
      var debug2 = require_browser7()("winston:file");
      var os = require_os();
      var tailFile = require_tail_file();
      module.exports = /* @__PURE__ */ (function(_TransportStream) {
        function File() {
          var _this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, File);
          _this = _callSuper(this, File, [options]);
          _this.name = options.name || "file";
          function throwIf(target) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            args.slice(1).forEach(function(name2) {
              if (options[name2]) {
                throw new Error("Cannot set ".concat(name2, " and ").concat(target, " together"));
              }
            });
          }
          _this._stream = new PassThrough2();
          _this._stream.setMaxListeners(30);
          _this._onError = _this._onError.bind(_this);
          if (options.filename || options.dirname) {
            throwIf("filename or dirname", "stream");
            _this._basename = _this.filename = options.filename ? path.basename(options.filename) : "winston.log";
            _this.dirname = options.dirname || path.dirname(options.filename);
            _this.options = options.options || {
              flags: "a"
            };
          } else if (options.stream) {
            console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream");
            throwIf("stream", "filename", "maxsize");
            _this._dest = _this._stream.pipe(_this._setupStream(options.stream));
            _this.dirname = path.dirname(_this._dest.path);
          } else {
            throw new Error("Cannot log to file without filename or stream.");
          }
          _this.maxsize = options.maxsize || null;
          _this.rotationFormat = options.rotationFormat || false;
          _this.zippedArchive = options.zippedArchive || false;
          _this.maxFiles = options.maxFiles || null;
          _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
          _this.tailable = options.tailable || false;
          _this.lazy = options.lazy || false;
          _this._size = 0;
          _this._pendingSize = 0;
          _this._created = 0;
          _this._drain = false;
          _this._opening = false;
          _this._ending = false;
          _this._fileExist = false;
          if (_this.dirname) _this._createLogDirIfNotExist(_this.dirname);
          if (!_this.lazy) _this.open();
          return _this;
        }
        _inherits(File, _TransportStream);
        return _createClass(File, [{
          key: "finishIfEnding",
          value: function finishIfEnding() {
            var _this2 = this;
            if (this._ending) {
              if (this._opening) {
                this.once("open", function() {
                  _this2._stream.once("finish", function() {
                    return _this2.emit("finish");
                  });
                  setImmediate(function() {
                    return _this2._stream.end();
                  });
                });
              } else {
                this._stream.once("finish", function() {
                  return _this2.emit("finish");
                });
                setImmediate(function() {
                  return _this2._stream.end();
                });
              }
            }
          }
          /**
           * Core logging method exposed to Winston. Metadata is optional.
           * @param {Object} info - TODO: add param description.
           * @param {Function} callback - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "log",
          value: function log2(info) {
            var _this3 = this;
            var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
            };
            if (this.silent) {
              callback();
              return true;
            }
            if (this._drain) {
              this._stream.once("drain", function() {
                _this3._drain = false;
                _this3.log(info, callback);
              });
              return;
            }
            if (this._rotate) {
              this._stream.once("rotate", function() {
                _this3._rotate = false;
                _this3.log(info, callback);
              });
              return;
            }
            if (this.lazy) {
              if (!this._fileExist) {
                if (!this._opening) {
                  this.open();
                }
                this.once("open", function() {
                  _this3._fileExist = true;
                  _this3.log(info, callback);
                  return;
                });
                return;
              }
              if (this._needsNewFile(this._pendingSize)) {
                this._dest.once("close", function() {
                  if (!_this3._opening) {
                    _this3.open();
                  }
                  _this3.once("open", function() {
                    _this3.log(info, callback);
                    return;
                  });
                  return;
                });
                return;
              }
            }
            var output = "".concat(info[MESSAGE]).concat(this.eol);
            var bytes = Buffer2.byteLength(output);
            function logged() {
              var _this4 = this;
              this._size += bytes;
              this._pendingSize -= bytes;
              debug2("logged %s %s", this._size, output);
              this.emit("logged", info);
              if (this._rotate) {
                return;
              }
              if (this._opening) {
                return;
              }
              if (!this._needsNewFile()) {
                return;
              }
              if (this.lazy) {
                this._endStream(function() {
                  _this4.emit("fileclosed");
                });
                return;
              }
              this._rotate = true;
              this._endStream(function() {
                return _this4._rotateFile();
              });
            }
            this._pendingSize += bytes;
            if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {
              this.rotatedWhileOpening = true;
            }
            var written = this._stream.write(output, logged.bind(this));
            if (!written) {
              this._drain = true;
              this._stream.once("drain", function() {
                _this3._drain = false;
                callback();
              });
            } else {
              callback();
            }
            debug2("written", written, this._drain);
            this.finishIfEnding();
            return written;
          }
          /**
           * Query the transport. Options object is optional.
           * @param {Object} options - Loggly-like query options for this instance.
           * @param {function} callback - Continuation to respond to when complete.
           * TODO: Refactor me.
           */
        }, {
          key: "query",
          value: function query(options, callback) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            options = normalizeQuery(options);
            var file = path.join(this.dirname, this.filename);
            var buff = "";
            var results = [];
            var row = 0;
            var stream = fs.createReadStream(file, {
              encoding: "utf8"
            });
            stream.on("error", function(err2) {
              if (stream.readable) {
                stream.destroy();
              }
              if (!callback) {
                return;
              }
              return err2.code !== "ENOENT" ? callback(err2) : callback(null, results);
            });
            stream.on("data", function(data) {
              data = (buff + data).split(/\n+/);
              var l = data.length - 1;
              var i = 0;
              for (; i < l; i++) {
                if (!options.start || row >= options.start) {
                  add(data[i]);
                }
                row++;
              }
              buff = data[l];
            });
            stream.on("close", function() {
              if (buff) {
                add(buff, true);
              }
              if (options.order === "desc") {
                results = results.reverse();
              }
              if (callback) callback(null, results);
            });
            function add(buff2, attempt) {
              try {
                var log2 = JSON.parse(buff2);
                if (check(log2)) {
                  push(log2);
                }
              } catch (e) {
                if (!attempt) {
                  stream.emit("error", e);
                }
              }
            }
            function push(log2) {
              if (options.rows && results.length >= options.rows && options.order !== "desc") {
                if (stream.readable) {
                  stream.destroy();
                }
                return;
              }
              if (options.fields) {
                log2 = options.fields.reduce(function(obj, key) {
                  obj[key] = log2[key];
                  return obj;
                }, {});
              }
              if (options.order === "desc") {
                if (results.length >= options.rows) {
                  results.shift();
                }
              }
              results.push(log2);
            }
            function check(log2) {
              if (!log2) {
                return;
              }
              if (_typeof(log2) !== "object") {
                return;
              }
              var time = new Date(log2.timestamp);
              if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log2.level) {
                return;
              }
              return true;
            }
            function normalizeQuery(options2) {
              options2 = options2 || {};
              options2.rows = options2.rows || options2.limit || 10;
              options2.start = options2.start || 0;
              options2.until = options2.until || /* @__PURE__ */ new Date();
              if (_typeof(options2.until) !== "object") {
                options2.until = new Date(options2.until);
              }
              options2.from = options2.from || options2.until - 24 * 60 * 60 * 1e3;
              if (_typeof(options2.from) !== "object") {
                options2.from = new Date(options2.from);
              }
              options2.order = options2.order || "desc";
              return options2;
            }
          }
          /**
           * Returns a log stream for this transport. Options object is optional.
           * @param {Object} options - Stream options for this instance.
           * @returns {Stream} - TODO: add return description.
           * TODO: Refactor me.
           */
        }, {
          key: "stream",
          value: function stream() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var file = path.join(this.dirname, this.filename);
            var stream2 = new Stream2();
            var tail = {
              file,
              start: options.start
            };
            stream2.destroy = tailFile(tail, function(err2, line) {
              if (err2) {
                return stream2.emit("error", err2);
              }
              try {
                stream2.emit("data", line);
                line = JSON.parse(line);
                stream2.emit("log", line);
              } catch (e) {
                stream2.emit("error", e);
              }
            });
            return stream2;
          }
          /**
           * Checks to see the filesize of.
           * @returns {undefined}
           */
        }, {
          key: "open",
          value: function open() {
            var _this5 = this;
            if (!this.filename) return;
            if (this._opening) return;
            this._opening = true;
            this.stat(function(err2, size) {
              if (err2) {
                return _this5.emit("error", err2);
              }
              debug2("stat done: %s { size: %s }", _this5.filename, size);
              _this5._size = size;
              _this5._dest = _this5._createStream(_this5._stream);
              _this5._opening = false;
              _this5.once("open", function() {
                if (!_this5._stream.emit("rotate")) {
                  _this5._rotate = false;
                }
              });
            });
          }
          /**
           * Stat the file and assess information in order to create the proper stream.
           * @param {function} callback - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "stat",
          value: function stat(callback) {
            var _this6 = this;
            var target = this._getFile();
            var fullpath = path.join(this.dirname, target);
            fs.stat(fullpath, function(err2, stat2) {
              if (err2 && err2.code === "ENOENT") {
                debug2("ENOENT\xA0ok", fullpath);
                _this6.filename = target;
                return callback(null, 0);
              }
              if (err2) {
                debug2("err ".concat(err2.code, " ").concat(fullpath));
                return callback(err2);
              }
              if (!stat2 || _this6._needsNewFile(stat2.size)) {
                return _this6._incFile(function() {
                  return _this6.stat(callback);
                });
              }
              _this6.filename = target;
              callback(null, stat2.size);
            });
          }
          /**
           * Closes the stream associated with this instance.
           * @param {function} cb - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "close",
          value: function close(cb) {
            var _this7 = this;
            if (!this._stream) {
              return;
            }
            this._stream.end(function() {
              if (cb) {
                cb();
              }
              _this7.emit("flush");
              _this7.emit("closed");
            });
          }
          /**
           * TODO: add method description.
           * @param {number} size - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "_needsNewFile",
          value: function _needsNewFile(size) {
            size = size || this._size;
            return this.maxsize && size >= this.maxsize;
          }
          /**
           * TODO: add method description.
           * @param {Error} err - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "_onError",
          value: function _onError(err2) {
            this.emit("error", err2);
          }
          /**
           * TODO: add method description.
           * @param {Stream} stream - TODO: add param description.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "_setupStream",
          value: function _setupStream(stream) {
            stream.on("error", this._onError);
            return stream;
          }
          /**
           * TODO: add method description.
           * @param {Stream} stream - TODO: add param description.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "_cleanupStream",
          value: function _cleanupStream(stream) {
            stream.removeListener("error", this._onError);
            stream.destroy();
            return stream;
          }
          /**
           * TODO: add method description.
           */
        }, {
          key: "_rotateFile",
          value: function _rotateFile() {
            var _this8 = this;
            this._incFile(function() {
              return _this8.open();
            });
          }
          /**
           * Unpipe from the stream that has been marked as full and end it so it
           * flushes to disk.
           *
           * @param {function} callback - Callback for when the current file has closed.
           * @private
           */
        }, {
          key: "_endStream",
          value: function _endStream() {
            var _this9 = this;
            var callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
            };
            if (this._dest) {
              this._stream.unpipe(this._dest);
              this._dest.end(function() {
                _this9._cleanupStream(_this9._dest);
                callback();
              });
            } else {
              callback();
            }
          }
          /**
           * Returns the WritableStream for the active file on this instance. If we
           * should gzip the file then a zlib stream is returned.
           *
           * @param {ReadableStream} source –PassThrough to pipe to the file when open.
           * @returns {WritableStream} Stream that writes to disk for the active file.
           */
        }, {
          key: "_createStream",
          value: function _createStream(source) {
            var _this10 = this;
            var fullpath = path.join(this.dirname, this.filename);
            debug2("create stream start", fullpath, this.options);
            var dest = fs.createWriteStream(fullpath, this.options).on("error", function(err2) {
              return debug2(err2);
            }).on("close", function() {
              return debug2("close", dest.path, dest.bytesWritten);
            }).on("open", function() {
              debug2("file open ok", fullpath);
              _this10.emit("open", fullpath);
              source.pipe(dest);
              if (_this10.rotatedWhileOpening) {
                _this10._stream = new PassThrough2();
                _this10._stream.setMaxListeners(30);
                _this10._rotateFile();
                _this10.rotatedWhileOpening = false;
                _this10._cleanupStream(dest);
                source.end();
              }
            });
            debug2("create stream ok", fullpath);
            return dest;
          }
          /**
           * TODO: add method description.
           * @param {function} callback - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "_incFile",
          value: function _incFile(callback) {
            debug2("_incFile", this.filename);
            var ext = path.extname(this._basename);
            var basename2 = path.basename(this._basename, ext);
            var tasks = [];
            if (this.zippedArchive) {
              tasks.push(function(cb) {
                var num = this._created > 0 && !this.tailable ? this._created : "";
                this._compressFile(path.join(this.dirname, "".concat(basename2).concat(num).concat(ext)), path.join(this.dirname, "".concat(basename2).concat(num).concat(ext, ".gz")), cb);
              }.bind(this));
            }
            tasks.push(function(cb) {
              if (!this.tailable) {
                this._created += 1;
                this._checkMaxFilesIncrementing(ext, basename2, cb);
              } else {
                this._checkMaxFilesTailable(ext, basename2, cb);
              }
            }.bind(this));
            asyncSeries(tasks, callback);
          }
          /**
           * Gets the next filename to use for this instance in the case that log
           * filesizes are being capped.
           * @returns {string} - TODO: add return description.
           * @private
           */
        }, {
          key: "_getFile",
          value: function _getFile() {
            var ext = path.extname(this._basename);
            var basename2 = path.basename(this._basename, ext);
            var isRotation = this.rotationFormat ? this.rotationFormat() : this._created;
            return !this.tailable && this._created ? "".concat(basename2).concat(isRotation).concat(ext) : "".concat(basename2).concat(ext);
          }
          /**
           * Increment the number of files created or checked by this instance.
           * @param {mixed} ext - TODO: add param description.
           * @param {mixed} basename - TODO: add param description.
           * @param {mixed} callback - TODO: add param description.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_checkMaxFilesIncrementing",
          value: function _checkMaxFilesIncrementing(ext, basename2, callback) {
            if (!this.maxFiles || this._created < this.maxFiles) {
              return setImmediate(callback);
            }
            var oldest = this._created - this.maxFiles;
            var isOldest = oldest !== 0 ? oldest : "";
            var isZipped = this.zippedArchive ? ".gz" : "";
            var filePath = "".concat(basename2).concat(isOldest).concat(ext).concat(isZipped);
            var target = path.join(this.dirname, filePath);
            fs.unlink(target, callback);
          }
          /**
           * Roll files forward based on integer, up to maxFiles. e.g. if base if
           * file.log and it becomes oversized, roll to file1.log, and allow file.log
           * to be re-used. If file is oversized again, roll file1.log to file2.log,
           * roll file.log to file1.log, and so on.
           * @param {mixed} ext - TODO: add param description.
           * @param {mixed} basename - TODO: add param description.
           * @param {mixed} callback - TODO: add param description.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_checkMaxFilesTailable",
          value: function _checkMaxFilesTailable(ext, basename2, callback) {
            var _this12 = this;
            var tasks = [];
            if (!this.maxFiles) {
              return;
            }
            var isZipped = this.zippedArchive ? ".gz" : "";
            for (var x = this.maxFiles - 1; x > 1; x--) {
              tasks.push(function(i, cb) {
                var _this11 = this;
                var fileName = "".concat(basename2).concat(i - 1).concat(ext).concat(isZipped);
                var tmppath = path.join(this.dirname, fileName);
                fs.exists(tmppath, function(exists) {
                  if (!exists) {
                    return cb(null);
                  }
                  fileName = "".concat(basename2).concat(i).concat(ext).concat(isZipped);
                  fs.rename(tmppath, path.join(_this11.dirname, fileName), cb);
                });
              }.bind(this, x));
            }
            asyncSeries(tasks, function() {
              fs.rename(path.join(_this12.dirname, "".concat(basename2).concat(ext).concat(isZipped)), path.join(_this12.dirname, "".concat(basename2, "1").concat(ext).concat(isZipped)), callback);
            });
          }
          /**
           * Compresses src to dest with gzip and unlinks src
           * @param {string} src - path to source file.
           * @param {string} dest - path to zipped destination file.
           * @param {Function} callback - callback called after file has been compressed.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_compressFile",
          value: function _compressFile(src, dest, callback) {
            fs.access(src, fs.F_OK, function(err2) {
              if (err2) {
                return callback();
              }
              var gzip2 = zlib.createGzip();
              var inp = fs.createReadStream(src);
              var out = fs.createWriteStream(dest);
              out.on("finish", function() {
                fs.unlink(src, callback);
              });
              inp.pipe(gzip2).pipe(out);
            });
          }
        }, {
          key: "_createLogDirIfNotExist",
          value: function _createLogDirIfNotExist(dirPath) {
            if (!fs.existsSync(dirPath)) {
              fs.mkdirSync(dirPath, {
                recursive: true
              });
            }
          }
        }]);
      })(TransportStream);
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/capability.js
  function blobConstructor() {
    if (typeof _blobConstructor !== "undefined") {
      return _blobConstructor;
    }
    try {
      new window.Blob([new ArrayBuffer(1)]);
      _blobConstructor = true;
    } catch (e) {
      _blobConstructor = false;
    }
    return _blobConstructor;
  }
  function checkTypeSupport(type2) {
    if (!xhr) {
      xhr = new window.XMLHttpRequest();
      xhr.open("GET", window.location.host ? "/" : "https://example.com");
    }
    try {
      xhr.responseType = type2;
      return xhr.responseType === type2;
    } catch (e) {
      return false;
    }
  }
  function isFunction2(value) {
    return typeof value === "function";
  }
  var hasFetch, _blobConstructor, xhr, haveArrayBuffer, haveSlice, arraybuffer, msstream, mozchunkedarraybuffer, overrideMimeType, vbArray;
  var init_capability = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/capability.js"() {
      init_process();
      init_buffer();
      hasFetch = isFunction2(window.fetch) && isFunction2(window.ReadableStream);
      haveArrayBuffer = typeof window.ArrayBuffer !== "undefined";
      haveSlice = haveArrayBuffer && isFunction2(window.ArrayBuffer.prototype.slice);
      arraybuffer = haveArrayBuffer && checkTypeSupport("arraybuffer");
      msstream = !hasFetch && haveSlice && checkTypeSupport("ms-stream");
      mozchunkedarraybuffer = !hasFetch && haveArrayBuffer && checkTypeSupport("moz-chunked-arraybuffer");
      overrideMimeType = isFunction2(xhr.overrideMimeType);
      vbArray = isFunction2(window.VBArray);
      xhr = null;
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/response.js
  function IncomingMessage(xhr2, response, mode) {
    var self2 = this;
    Readable.call(self2);
    self2._mode = mode;
    self2.headers = {};
    self2.rawHeaders = [];
    self2.trailers = {};
    self2.rawTrailers = [];
    self2.on("end", function() {
      process.nextTick(function() {
        self2.emit("close");
      });
    });
    var read2;
    if (mode === "fetch") {
      self2._fetchResponse = response;
      self2.url = response.url;
      self2.statusCode = response.status;
      self2.statusMessage = response.statusText;
      for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done; ) {
        self2.headers[header[0].toLowerCase()] = header[1];
        self2.rawHeaders.push(header[0], header[1]);
      }
      var reader = response.body.getReader();
      read2 = function() {
        reader.read().then(function(result) {
          if (self2._destroyed)
            return;
          if (result.done) {
            self2.push(null);
            return;
          }
          self2.push(new Buffer2(result.value));
          read2();
        });
      };
      read2();
    } else {
      self2._xhr = xhr2;
      self2._pos = 0;
      self2.url = xhr2.responseURL;
      self2.statusCode = xhr2.status;
      self2.statusMessage = xhr2.statusText;
      var headers = xhr2.getAllResponseHeaders().split(/\r?\n/);
      headers.forEach(function(header2) {
        var matches = header2.match(/^([^:]+):\s*(.*)/);
        if (matches) {
          var key = matches[1].toLowerCase();
          if (key === "set-cookie") {
            if (self2.headers[key] === void 0) {
              self2.headers[key] = [];
            }
            self2.headers[key].push(matches[2]);
          } else if (self2.headers[key] !== void 0) {
            self2.headers[key] += ", " + matches[2];
          } else {
            self2.headers[key] = matches[2];
          }
          self2.rawHeaders.push(matches[1], matches[2]);
        }
      });
      self2._charset = "x-user-defined";
      if (!overrideMimeType) {
        var mimeType = self2.rawHeaders["mime-type"];
        if (mimeType) {
          var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
          if (charsetMatch) {
            self2._charset = charsetMatch[1].toLowerCase();
          }
        }
        if (!self2._charset)
          self2._charset = "utf-8";
      }
    }
  }
  var rStates;
  var init_response = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/response.js"() {
      init_process();
      init_buffer();
      init_capability();
      init_util();
      init_stream();
      rStates = {
        UNSENT: 0,
        OPENED: 1,
        HEADERS_RECEIVED: 2,
        LOADING: 3,
        DONE: 4
      };
      inherits_default(IncomingMessage, Readable);
      IncomingMessage.prototype._read = function() {
      };
      IncomingMessage.prototype._onXHRProgress = function() {
        var self2 = this;
        var xhr2 = self2._xhr;
        var response = null;
        switch (self2._mode) {
          case "text:vbarray":
            if (xhr2.readyState !== rStates.DONE)
              break;
            try {
              response = new window.VBArray(xhr2.responseBody).toArray();
            } catch (e) {
            }
            if (response !== null) {
              self2.push(new Buffer2(response));
              break;
            }
          // Falls through in IE8
          case "text":
            try {
              response = xhr2.responseText;
            } catch (e) {
              self2._mode = "text:vbarray";
              break;
            }
            if (response.length > self2._pos) {
              var newData = response.substr(self2._pos);
              if (self2._charset === "x-user-defined") {
                var buffer = new Buffer2(newData.length);
                for (var i = 0; i < newData.length; i++)
                  buffer[i] = newData.charCodeAt(i) & 255;
                self2.push(buffer);
              } else {
                self2.push(newData, self2._charset);
              }
              self2._pos = response.length;
            }
            break;
          case "arraybuffer":
            if (xhr2.readyState !== rStates.DONE || !xhr2.response)
              break;
            response = xhr2.response;
            self2.push(new Buffer2(new Uint8Array(response)));
            break;
          case "moz-chunked-arraybuffer":
            response = xhr2.response;
            if (xhr2.readyState !== rStates.LOADING || !response)
              break;
            self2.push(new Buffer2(new Uint8Array(response)));
            break;
          case "ms-stream":
            response = xhr2.response;
            if (xhr2.readyState !== rStates.LOADING)
              break;
            var reader = new window.MSStreamReader();
            reader.onprogress = function() {
              if (reader.result.byteLength > self2._pos) {
                self2.push(new Buffer2(new Uint8Array(reader.result.slice(self2._pos))));
                self2._pos = reader.result.byteLength;
              }
            };
            reader.onload = function() {
              self2.push(null);
            };
            reader.readAsArrayBuffer(response);
            break;
        }
        if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
          self2.push(null);
        }
      };
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/to-arraybuffer.js
  function to_arraybuffer_default(buf) {
    if (buf instanceof Uint8Array) {
      if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer;
      } else if (typeof buf.buffer.slice === "function") {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      }
    }
    if (isBuffer2(buf)) {
      var arrayCopy = new Uint8Array(buf.length);
      var len = buf.length;
      for (var i = 0; i < len; i++) {
        arrayCopy[i] = buf[i];
      }
      return arrayCopy.buffer;
    } else {
      throw new Error("Argument must be a Buffer");
    }
  }
  var init_to_arraybuffer = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/to-arraybuffer.js"() {
      init_process();
      init_buffer();
      init_buffer2();
    }
  });

  // node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/request.js
  function decideMode(preferBinary, useFetch) {
    if (hasFetch && useFetch) {
      return "fetch";
    } else if (mozchunkedarraybuffer) {
      return "moz-chunked-arraybuffer";
    } else if (msstream) {
      return "ms-stream";
    } else if (arraybuffer && preferBinary) {
      return "arraybuffer";
    } else if (vbArray && preferBinary) {
      return "text:vbarray";
    } else {
      return "text";
    }
  }
  function ClientRequest(opts) {
    var self2 = this;
    Writable.call(self2);
    self2._opts = opts;
    self2._body = [];
    self2._headers = {};
    if (opts.auth)
      self2.setHeader("Authorization", "Basic " + new Buffer2(opts.auth).toString("base64"));
    Object.keys(opts.headers).forEach(function(name2) {
      self2.setHeader(name2, opts.headers[name2]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === "disable-fetch") {
      useFetch = false;
      preferBinary = true;
    } else if (opts.mode === "prefer-streaming") {
      preferBinary = false;
    } else if (opts.mode === "allow-wrong-content-type") {
      preferBinary = !overrideMimeType;
    } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
      preferBinary = true;
    } else {
      throw new Error("Invalid value for opts.mode");
    }
    self2._mode = decideMode(preferBinary, useFetch);
    self2.on("finish", function() {
      self2._onFinish();
    });
  }
  function statusValid(xhr2) {
    try {
      var status2 = xhr2.status;
      return status2 !== null && status2 !== 0;
    } catch (e) {
      return false;
    }
  }
  var request_default, unsafeHeaders;
  var init_request = __esm({
    "node_modules/rollup-plugin-node-polyfills/polyfills/http-lib/request.js"() {
      init_process();
      init_buffer();
      init_capability();
      init_util();
      init_response();
      init_stream();
      init_to_arraybuffer();
      request_default = ClientRequest;
      inherits_default(ClientRequest, Writable);
      unsafeHeaders = [
        "accept-charset",
        "accept-encoding",
        "access-control-request-headers",
        "access-control-request-method",
        "connection",
        "content-length",
        "cookie",
        "cookie2",
        "date",
        "dnt",
        "expect",
        "host",
        "keep-alive",
        "origin",
        "referer",
        "te",
        "trailer",
        "transfer-encoding",
        "upgrade",
        "user-agent",
        "via"
      ];
      ClientRequest.prototype.setHeader = function(name2, value) {
        var self2 = this;
        var lowerName = name2.toLowerCase();
        if (unsafeHeaders.indexOf(lowerName) !== -1)
          return;
        self2._headers[lowerName] = {
          name: name2,
          value
        };
      };
      ClientRequest.prototype.getHeader = function(name2) {
        var self2 = this;
        return self2._headers[name2.toLowerCase()].value;
      };
      ClientRequest.prototype.removeHeader = function(name2) {
        var self2 = this;
        delete self2._headers[name2.toLowerCase()];
      };
      ClientRequest.prototype._onFinish = function() {
        var self2 = this;
        if (self2._destroyed)
          return;
        var opts = self2._opts;
        var headersObj = self2._headers;
        var body;
        if (opts.method === "POST" || opts.method === "PUT" || opts.method === "PATCH") {
          if (blobConstructor()) {
            body = new window.Blob(self2._body.map(function(buffer) {
              return to_arraybuffer_default(buffer);
            }), {
              type: (headersObj["content-type"] || {}).value || ""
            });
          } else {
            body = Buffer2.concat(self2._body).toString();
          }
        }
        if (self2._mode === "fetch") {
          var headers = Object.keys(headersObj).map(function(name2) {
            return [headersObj[name2].name, headersObj[name2].value];
          });
          window.fetch(self2._opts.url, {
            method: self2._opts.method,
            headers,
            body,
            mode: "cors",
            credentials: opts.withCredentials ? "include" : "same-origin"
          }).then(function(response) {
            self2._fetchResponse = response;
            self2._connect();
          }, function(reason) {
            self2.emit("error", reason);
          });
        } else {
          var xhr2 = self2._xhr = new window.XMLHttpRequest();
          try {
            xhr2.open(self2._opts.method, self2._opts.url, true);
          } catch (err2) {
            process.nextTick(function() {
              self2.emit("error", err2);
            });
            return;
          }
          if ("responseType" in xhr2)
            xhr2.responseType = self2._mode.split(":")[0];
          if ("withCredentials" in xhr2)
            xhr2.withCredentials = !!opts.withCredentials;
          if (self2._mode === "text" && "overrideMimeType" in xhr2)
            xhr2.overrideMimeType("text/plain; charset=x-user-defined");
          Object.keys(headersObj).forEach(function(name2) {
            xhr2.setRequestHeader(headersObj[name2].name, headersObj[name2].value);
          });
          self2._response = null;
          xhr2.onreadystatechange = function() {
            switch (xhr2.readyState) {
              case rStates.LOADING:
              case rStates.DONE:
                self2._onXHRProgress();
                break;
            }
          };
          if (self2._mode === "moz-chunked-arraybuffer") {
            xhr2.onprogress = function() {
              self2._onXHRProgress();
            };
          }
          xhr2.onerror = function() {
            if (self2._destroyed)
              return;
            self2.emit("error", new Error("XHR error"));
          };
          try {
            xhr2.send(body);
          } catch (err2) {
            process.nextTick(function() {
              self2.emit("error", err2);
            });
            return;
          }
        }
      };
      ClientRequest.prototype._onXHRProgress = function() {
        var self2 = this;
        if (!statusValid(self2._xhr) || self2._destroyed)
          return;
        if (!self2._response)
          self2._connect();
        self2._response._onXHRProgress();
      };
      ClientRequest.prototype._connect = function() {
        var self2 = this;
        if (self2._destroyed)
          return;
        self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode);
        self2.emit("response", self2._response);
      };
      ClientRequest.prototype._write = function(chunk, encoding, cb) {
        var self2 = this;
        self2._body.push(chunk);
        cb();
      };
      ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
        var self2 = this;
        self2._destroyed = true;
        if (self2._response)
          self2._response._destroyed = true;
        if (self2._xhr)
          self2._xhr.abort();
      };
      ClientRequest.prototype.end = function(data, encoding, cb) {
        var self2 = this;
        if (typeof data === "function") {
          cb = data;
          data = void 0;
        }
        Writable.prototype.end.call(self2, data, encoding, cb);
      };
      ClientRequest.prototype.flushHeaders = function() {
      };
      ClientRequest.prototype.setTimeout = function() {
      };
      ClientRequest.prototype.setNoDelay = function() {
      };
      ClientRequest.prototype.setSocketKeepAlive = function() {
      };
    }
  });

  // node-modules-polyfills:punycode
  function error(type2) {
    throw new RangeError(errors[type2]);
  }
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }
  function mapDomain(string, fn) {
    var parts = string.split("@");
    var result = "";
    if (parts.length > 1) {
      result = parts[0] + "@";
      string = parts[1];
    }
    string = string.replace(regexSeparators, ".");
    var labels = string.split(".");
    var encoded = map(labels, fn).join(".");
    return result + encoded;
  }
  function ucs2decode(string) {
    var output = [], counter = 0, length = string.length, value, extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < length) {
        extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  function digitToBasic(digit, flag) {
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for (; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  function encode(input) {
    var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
    input = ucs2decode(input);
    inputLength = input.length;
    n = initialN;
    delta = 0;
    bias = initialBias;
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 128) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    handledCPCount = basicLength = output.length;
    if (basicLength) {
      output.push(delimiter2);
    }
    while (handledCPCount < inputLength) {
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error("overflow");
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < n && ++delta > maxInt) {
          error("overflow");
        }
        if (currentValue == n) {
          for (q = delta, k = base; ; k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join("");
  }
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
    });
  }
  var maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter2, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode;
  var init_punycode = __esm({
    "node-modules-polyfills:punycode"() {
      init_process();
      init_buffer();
      maxInt = 2147483647;
      base = 36;
      tMin = 1;
      tMax = 26;
      skew = 38;
      damp = 700;
      initialBias = 72;
      initialN = 128;
      delimiter2 = "-";
      regexNonASCII = /[^\x20-\x7E]/;
      regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      baseMinusTMin = base - tMin;
      floor = Math.floor;
      stringFromCharCode = String.fromCharCode;
    }
  });

  // node-modules-polyfills:querystring
  function hasOwnProperty2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case "string":
        return v;
      case "boolean":
        return v ? "true" : "false";
      case "number":
        return isFinite(v) ? v : "";
      default:
        return "";
    }
  }
  function stringify(obj, sep2, eq, name2) {
    sep2 = sep2 || "&";
    eq = eq || "=";
    if (obj === null) {
      obj = void 0;
    }
    if (typeof obj === "object") {
      return map2(objectKeys2(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray3(obj[k])) {
          return map2(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep2);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep2);
    }
    if (!name2) return "";
    return encodeURIComponent(stringifyPrimitive(name2)) + eq + encodeURIComponent(stringifyPrimitive(obj));
  }
  function map2(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }
  function parse(qs, sep2, eq, options) {
    sep2 = sep2 || "&";
    eq = eq || "=";
    var obj = {};
    if (typeof qs !== "string" || qs.length === 0) {
      return obj;
    }
    var regexp = /\+/g;
    qs = qs.split(sep2);
    var maxKeys = 1e3;
    if (options && typeof options.maxKeys === "number") {
      maxKeys = options.maxKeys;
    }
    var len = qs.length;
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }
    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = "";
      }
      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);
      if (!hasOwnProperty2(obj, k)) {
        obj[k] = v;
      } else if (isArray3(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }
    return obj;
  }
  var isArray3, objectKeys2;
  var init_querystring = __esm({
    "node-modules-polyfills:querystring"() {
      init_process();
      init_buffer();
      isArray3 = Array.isArray || function(xs) {
        return Object.prototype.toString.call(xs) === "[object Array]";
      };
      objectKeys2 = Object.keys || function(obj) {
        var res = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
        }
        return res;
      };
    }
  });

  // node-modules-polyfills:url
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }
  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  function parse2(self2, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    }
    var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self2.path = rest;
        self2.href = rest;
        self2.pathname = simplePath[1];
        if (simplePath[2]) {
          self2.search = simplePath[2];
          if (parseQueryString) {
            self2.query = parse(self2.search.substr(1));
          } else {
            self2.query = self2.search.substr(1);
          }
        } else if (parseQueryString) {
          self2.search = "";
          self2.query = {};
        }
        return self2;
      }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self2.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === "//";
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self2.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      var auth, atSign;
      if (hostEnd === -1) {
        atSign = rest.lastIndexOf("@");
      } else {
        atSign = rest.lastIndexOf("@", hostEnd);
      }
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self2.auth = decodeURIComponent(auth);
      }
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      if (hostEnd === -1)
        hostEnd = rest.length;
      self2.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);
      parseHost(self2);
      self2.hostname = self2.hostname || "";
      var ipv6Hostname = self2.hostname[0] === "[" && self2.hostname[self2.hostname.length - 1] === "]";
      if (!ipv6Hostname) {
        var hostparts = self2.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = "";
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                newpart += "x";
              } else {
                newpart += part[j];
              }
            }
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = "/" + notHost.join(".") + rest;
              }
              self2.hostname = validParts.join(".");
              break;
            }
          }
        }
      }
      if (self2.hostname.length > hostnameMaxLen) {
        self2.hostname = "";
      } else {
        self2.hostname = self2.hostname.toLowerCase();
      }
      if (!ipv6Hostname) {
        self2.hostname = toASCII(self2.hostname);
      }
      p = self2.port ? ":" + self2.port : "";
      var h = self2.hostname || "";
      self2.host = h + p;
      self2.href += self2.host;
      if (ipv6Hostname) {
        self2.hostname = self2.hostname.substr(1, self2.hostname.length - 2);
        if (rest[0] !== "/") {
          rest = "/" + rest;
        }
      }
    }
    if (!unsafeProtocol[lowerProto]) {
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }
    var hash = rest.indexOf("#");
    if (hash !== -1) {
      self2.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
      self2.search = rest.substr(qm);
      self2.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self2.query = parse(self2.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      self2.search = "";
      self2.query = {};
    }
    if (rest) self2.pathname = rest;
    if (slashedProtocol[lowerProto] && self2.hostname && !self2.pathname) {
      self2.pathname = "/";
    }
    if (self2.pathname || self2.search) {
      p = self2.pathname || "";
      var s = self2.search || "";
      self2.path = p + s;
    }
    self2.href = format2(self2);
    return self2;
  }
  function format2(self2) {
    var auth = self2.auth || "";
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ":");
      auth += "@";
    }
    var protocol = self2.protocol || "", pathname = self2.pathname || "", hash = self2.hash || "", host = false, query = "";
    if (self2.host) {
      host = auth + self2.host;
    } else if (self2.hostname) {
      host = auth + (self2.hostname.indexOf(":") === -1 ? self2.hostname : "[" + this.hostname + "]");
      if (self2.port) {
        host += ":" + self2.port;
      }
    }
    if (self2.query && isObject(self2.query) && Object.keys(self2.query).length) {
      query = stringify(self2.query);
    }
    var search = self2.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    if (self2.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = "//" + (host || "");
      if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) {
      host = "";
    }
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
  }
  function parseHost(self2) {
    var host = self2.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ":") {
        self2.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) self2.hostname = host;
  }
  var protocolPattern, portPattern, simplePathPattern, delims, unwise, autoEscape, nonHostChars, hostEndingChars, hostnameMaxLen, hostnamePartPattern, hostnamePartStart, unsafeProtocol, hostlessProtocol, slashedProtocol;
  var init_url = __esm({
    "node-modules-polyfills:url"() {
      init_process();
      init_buffer();
      init_punycode();
      init_util();
      init_querystring();
      protocolPattern = /^([a-z0-9.+-]+:)/i;
      portPattern = /:[0-9]*$/;
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
      delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
      unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
      autoEscape = ["'"].concat(unwise);
      nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
      hostEndingChars = ["/", "?", "#"];
      hostnameMaxLen = 255;
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
      unsafeProtocol = {
        "javascript": true,
        "javascript:": true
      };
      hostlessProtocol = {
        "javascript": true,
        "javascript:": true
      };
      slashedProtocol = {
        "http": true,
        "https": true,
        "ftp": true,
        "gopher": true,
        "file": true,
        "http:": true,
        "https:": true,
        "ftp:": true,
        "gopher:": true,
        "file:": true
      };
      Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
        return parse2(this, url, parseQueryString, slashesDenoteHost);
      };
      Url.prototype.format = function() {
        return format2(this);
      };
      Url.prototype.resolve = function(relative2) {
        return this.resolveObject(urlParse(relative2, false, true)).format();
      };
      Url.prototype.resolveObject = function(relative2) {
        if (isString(relative2)) {
          var rel = new Url();
          rel.parse(relative2, false, true);
          relative2 = rel;
        }
        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        }
        result.hash = relative2.hash;
        if (relative2.href === "") {
          result.href = result.format();
          return result;
        }
        if (relative2.slashes && !relative2.protocol) {
          var rkeys = Object.keys(relative2);
          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== "protocol")
              result[rkey] = relative2[rkey];
          }
          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.path = result.pathname = "/";
          }
          result.href = result.format();
          return result;
        }
        var relPath;
        if (relative2.protocol && relative2.protocol !== result.protocol) {
          if (!slashedProtocol[relative2.protocol]) {
            var keys2 = Object.keys(relative2);
            for (var v = 0; v < keys2.length; v++) {
              var k = keys2[v];
              result[k] = relative2[k];
            }
            result.href = result.format();
            return result;
          }
          result.protocol = relative2.protocol;
          if (!relative2.host && !hostlessProtocol[relative2.protocol]) {
            relPath = (relative2.pathname || "").split("/");
            while (relPath.length && !(relative2.host = relPath.shift())) ;
            if (!relative2.host) relative2.host = "";
            if (!relative2.hostname) relative2.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
          } else {
            result.pathname = relative2.pathname;
          }
          result.search = relative2.search;
          result.query = relative2.query;
          result.host = relative2.host || "";
          result.auth = relative2.auth;
          result.hostname = relative2.hostname || relative2.host;
          result.port = relative2.port;
          if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
          }
          result.slashes = result.slashes || relative2.slashes;
          result.href = result.format();
          return result;
        }
        var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative2.host || relative2.pathname && relative2.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative2.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
        relPath = relative2.pathname && relative2.pathname.split("/") || [];
        if (psychotic) {
          result.hostname = "";
          result.port = null;
          if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
          }
          result.host = "";
          if (relative2.protocol) {
            relative2.hostname = null;
            relative2.port = null;
            if (relative2.host) {
              if (relPath[0] === "") relPath[0] = relative2.host;
              else relPath.unshift(relative2.host);
            }
            relative2.host = null;
          }
          mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
        }
        var authInHost;
        if (isRelAbs) {
          result.host = relative2.host || relative2.host === "" ? relative2.host : result.host;
          result.hostname = relative2.hostname || relative2.hostname === "" ? relative2.hostname : result.hostname;
          result.search = relative2.search;
          result.query = relative2.query;
          srcPath = relPath;
        } else if (relPath.length) {
          if (!srcPath) srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative2.search;
          result.query = relative2.query;
        } else if (!isNullOrUndefined(relative2.search)) {
          if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }
          result.search = relative2.search;
          result.query = relative2.query;
          if (!isNull(result.pathname) || !isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
          }
          result.href = result.format();
          return result;
        }
        if (!srcPath.length) {
          result.pathname = null;
          if (result.search) {
            result.path = "/" + result.search;
          } else {
            result.path = null;
          }
          result.href = result.format();
          return result;
        }
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (result.host || relative2.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];
          if (last === ".") {
            srcPath.splice(i, 1);
          } else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        }
        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift("..");
          }
        }
        if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
          srcPath.unshift("");
        }
        if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
          srcPath.push("");
        }
        var isAbsolute2 = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
        if (psychotic) {
          result.hostname = result.host = isAbsolute2 ? "" : srcPath.length ? srcPath.shift() : "";
          authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        mustEndAbs = mustEndAbs || result.host && srcPath.length;
        if (mustEndAbs && !isAbsolute2) {
          srcPath.unshift("");
        }
        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join("/");
        }
        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.auth = relative2.auth || result.auth;
        result.slashes = result.slashes || relative2.slashes;
        result.href = result.format();
        return result;
      };
      Url.prototype.parseHost = function() {
        return parseHost(this);
      };
    }
  });

  // node-modules-polyfills:http
  var http_exports = {};
  __export(http_exports, {
    Agent: () => Agent,
    METHODS: () => METHODS,
    STATUS_CODES: () => STATUS_CODES,
    default: () => http_default,
    get: () => get,
    request: () => request
  });
  function request(opts, cb) {
    if (typeof opts === "string")
      opts = urlParse(opts);
    var defaultProtocol = window.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    if (host && host.indexOf(":") !== -1)
      host = "[" + host + "]";
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    var req = new request_default(opts);
    if (cb)
      req.on("response", cb);
    return req;
  }
  function get(opts, cb) {
    var req = request(opts, cb);
    req.end();
    return req;
  }
  function Agent() {
  }
  var METHODS, STATUS_CODES, http_default;
  var init_http = __esm({
    "node-modules-polyfills:http"() {
      init_process();
      init_buffer();
      init_request();
      init_url();
      Agent.defaultMaxSockets = 4;
      METHODS = [
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REPORT",
        "SEARCH",
        "SUBSCRIBE",
        "TRACE",
        "UNLOCK",
        "UNSUBSCRIBE"
      ];
      STATUS_CODES = {
        100: "Continue",
        101: "Switching Protocols",
        102: "Processing",
        // RFC 2518, obsoleted by RFC 4918
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        // RFC 4918
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Moved Temporarily",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Time-out",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Request Entity Too Large",
        414: "Request-URI Too Large",
        415: "Unsupported Media Type",
        416: "Requested Range Not Satisfiable",
        417: "Expectation Failed",
        418: "I'm a teapot",
        // RFC 2324
        422: "Unprocessable Entity",
        // RFC 4918
        423: "Locked",
        // RFC 4918
        424: "Failed Dependency",
        // RFC 4918
        425: "Unordered Collection",
        // RFC 4918
        426: "Upgrade Required",
        // RFC 2817
        428: "Precondition Required",
        // RFC 6585
        429: "Too Many Requests",
        // RFC 6585
        431: "Request Header Fields Too Large",
        // RFC 6585
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Time-out",
        505: "HTTP Version Not Supported",
        506: "Variant Also Negotiates",
        // RFC 2295
        507: "Insufficient Storage",
        // RFC 4918
        509: "Bandwidth Limit Exceeded",
        510: "Not Extended",
        // RFC 2774
        511: "Network Authentication Required"
        // RFC 6585
      };
      http_default = {
        request,
        get,
        Agent,
        METHODS,
        STATUS_CODES
      };
    }
  });

  // node-modules-polyfills-commonjs:http
  var require_http = __commonJS({
    "node-modules-polyfills-commonjs:http"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_http(), __toCommonJS(http_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node-modules-polyfills:https
  var https_exports = {};
  __export(https_exports, {
    Agent: () => Agent2,
    METHODS: () => METHODS2,
    STATUS_CODES: () => STATUS_CODES2,
    default: () => https_default,
    get: () => get2,
    request: () => request2
  });
  function request2(opts, cb) {
    if (typeof opts === "string")
      opts = urlParse(opts);
    var defaultProtocol = window.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    if (host && host.indexOf(":") !== -1)
      host = "[" + host + "]";
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    var req = new request_default(opts);
    if (cb)
      req.on("response", cb);
    return req;
  }
  function get2(opts, cb) {
    var req = request2(opts, cb);
    req.end();
    return req;
  }
  function Agent2() {
  }
  var METHODS2, STATUS_CODES2, https_default;
  var init_https = __esm({
    "node-modules-polyfills:https"() {
      init_process();
      init_buffer();
      init_request();
      init_url();
      Agent2.defaultMaxSockets = 4;
      METHODS2 = [
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REPORT",
        "SEARCH",
        "SUBSCRIBE",
        "TRACE",
        "UNLOCK",
        "UNSUBSCRIBE"
      ];
      STATUS_CODES2 = {
        100: "Continue",
        101: "Switching Protocols",
        102: "Processing",
        // RFC 2518, obsoleted by RFC 4918
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        // RFC 4918
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Moved Temporarily",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Time-out",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Request Entity Too Large",
        414: "Request-URI Too Large",
        415: "Unsupported Media Type",
        416: "Requested Range Not Satisfiable",
        417: "Expectation Failed",
        418: "I'm a teapot",
        // RFC 2324
        422: "Unprocessable Entity",
        // RFC 4918
        423: "Locked",
        // RFC 4918
        424: "Failed Dependency",
        // RFC 4918
        425: "Unordered Collection",
        // RFC 4918
        426: "Upgrade Required",
        // RFC 2817
        428: "Precondition Required",
        // RFC 6585
        429: "Too Many Requests",
        // RFC 6585
        431: "Request Header Fields Too Large",
        // RFC 6585
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Time-out",
        505: "HTTP Version Not Supported",
        506: "Variant Also Negotiates",
        // RFC 2295
        507: "Insufficient Storage",
        // RFC 4918
        509: "Bandwidth Limit Exceeded",
        510: "Not Extended",
        // RFC 2774
        511: "Network Authentication Required"
        // RFC 6585
      };
      https_default = {
        request: request2,
        get: get2,
        Agent: Agent2,
        METHODS: METHODS2,
        STATUS_CODES: STATUS_CODES2
      };
    }
  });

  // node-modules-polyfills-commonjs:https
  var require_https = __commonJS({
    "node-modules-polyfills-commonjs:https"(exports, module) {
      init_process();
      init_buffer();
      var polyfill = (init_https(), __toCommonJS(https_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node_modules/winston/dist/winston/transports/http.js
  var require_http2 = __commonJS({
    "node_modules/winston/dist/winston/transports/http.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function ownKeys(e, r) {
        var t = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var o = Object.getOwnPropertySymbols(e);
          r && (o = o.filter(function(r2) {
            return Object.getOwnPropertyDescriptor(e, r2).enumerable;
          })), t.push.apply(t, o);
        }
        return t;
      }
      function _objectSpread(e) {
        for (var r = 1; r < arguments.length; r++) {
          var t = null != arguments[r] ? arguments[r] : {};
          r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
            _defineProperty(e, r2, t[r2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
            Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
          });
        }
        return e;
      }
      function _defineProperty(e, r, t) {
        return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var http = require_http();
      var https = require_https();
      var _require = require_readable_browser3();
      var Stream2 = _require.Stream;
      var TransportStream = require_dist9();
      var _require2 = require_safe_stable_stringify();
      var configure = _require2.configure;
      module.exports = /* @__PURE__ */ (function(_TransportStream) {
        function Http() {
          var _this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Http);
          _this = _callSuper(this, Http, [options]);
          _this.options = options;
          _this.name = options.name || "http";
          _this.ssl = !!options.ssl;
          _this.host = options.host || "localhost";
          _this.port = options.port;
          _this.auth = options.auth;
          _this.path = options.path || "";
          _this.maximumDepth = options.maximumDepth;
          _this.agent = options.agent;
          _this.headers = options.headers || {};
          _this.headers["content-type"] = "application/json";
          _this.batch = options.batch || false;
          _this.batchInterval = options.batchInterval || 5e3;
          _this.batchCount = options.batchCount || 10;
          _this.batchOptions = [];
          _this.batchTimeoutID = -1;
          _this.batchCallback = {};
          if (!_this.port) {
            _this.port = _this.ssl ? 443 : 80;
          }
          return _this;
        }
        _inherits(Http, _TransportStream);
        return _createClass(Http, [{
          key: "log",
          value: function log2(info, callback) {
            var _this2 = this;
            this._request(info, null, null, function(err2, res) {
              if (res && res.statusCode !== 200) {
                err2 = new Error("Invalid HTTP Status Code: ".concat(res.statusCode));
              }
              if (err2) {
                _this2.emit("warn", err2);
              } else {
                _this2.emit("logged", info);
              }
            });
            if (callback) {
              setImmediate(callback);
            }
          }
          /**
           * Query the transport. Options object is optional.
           * @param {Object} options -  Loggly-like query options for this instance.
           * @param {function} callback - Continuation to respond to when complete.
           * @returns {undefined}
           */
        }, {
          key: "query",
          value: function query(options, callback) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            options = {
              method: "query",
              params: this.normalizeQuery(options)
            };
            var auth = options.params.auth || null;
            delete options.params.auth;
            var path = options.params.path || null;
            delete options.params.path;
            this._request(options, auth, path, function(err2, res, body) {
              if (res && res.statusCode !== 200) {
                err2 = new Error("Invalid HTTP Status Code: ".concat(res.statusCode));
              }
              if (err2) {
                return callback(err2);
              }
              if (typeof body === "string") {
                try {
                  body = JSON.parse(body);
                } catch (e) {
                  return callback(e);
                }
              }
              callback(null, body);
            });
          }
          /**
           * Returns a log stream for this transport. Options object is optional.
           * @param {Object} options - Stream options for this instance.
           * @returns {Stream} - TODO: add return description
           */
        }, {
          key: "stream",
          value: function stream() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var stream2 = new Stream2();
            options = {
              method: "stream",
              params: options
            };
            var path = options.params.path || null;
            delete options.params.path;
            var auth = options.params.auth || null;
            delete options.params.auth;
            var buff = "";
            var req = this._request(options, auth, path);
            stream2.destroy = function() {
              return req.destroy();
            };
            req.on("data", function(data) {
              data = (buff + data).split(/\n+/);
              var l = data.length - 1;
              var i = 0;
              for (; i < l; i++) {
                try {
                  stream2.emit("log", JSON.parse(data[i]));
                } catch (e) {
                  stream2.emit("error", e);
                }
              }
              buff = data[l];
            });
            req.on("error", function(err2) {
              return stream2.emit("error", err2);
            });
            return stream2;
          }
          /**
           * Make a request to a winstond server or any http server which can
           * handle json-rpc.
           * @param {function} options - Options to sent the request.
           * @param {Object?} auth - authentication options
           * @param {string} path - request path
           * @param {function} callback - Continuation to respond to when complete.
           */
        }, {
          key: "_request",
          value: function _request(options, auth, path, callback) {
            options = options || {};
            auth = auth || this.auth;
            path = path || this.path || "";
            if (this.batch) {
              this._doBatch(options, callback, auth, path);
            } else {
              this._doRequest(options, callback, auth, path);
            }
          }
          /**
           * Send or memorize the options according to batch configuration
           * @param {function} options - Options to sent the request.
           * @param {function} callback - Continuation to respond to when complete.
           * @param {Object?} auth - authentication options
           * @param {string} path - request path
           */
        }, {
          key: "_doBatch",
          value: function _doBatch(options, callback, auth, path) {
            this.batchOptions.push(options);
            if (this.batchOptions.length === 1) {
              var me = this;
              this.batchCallback = callback;
              this.batchTimeoutID = setTimeout(function() {
                me.batchTimeoutID = -1;
                me._doBatchRequest(me.batchCallback, auth, path);
              }, this.batchInterval);
            }
            if (this.batchOptions.length === this.batchCount) {
              this._doBatchRequest(this.batchCallback, auth, path);
            }
          }
          /**
           * Initiate a request with the memorized batch options, stop the batch timeout
           * @param {function} callback - Continuation to respond to when complete.
           * @param {Object?} auth - authentication options
           * @param {string} path - request path
           */
        }, {
          key: "_doBatchRequest",
          value: function _doBatchRequest(callback, auth, path) {
            if (this.batchTimeoutID > 0) {
              clearTimeout(this.batchTimeoutID);
              this.batchTimeoutID = -1;
            }
            var batchOptionsCopy = this.batchOptions.slice();
            this.batchOptions = [];
            this._doRequest(batchOptionsCopy, callback, auth, path);
          }
          /**
           * Make a request to a winstond server or any http server which can
           * handle json-rpc.
           * @param {function} options - Options to sent the request.
           * @param {function} callback - Continuation to respond to when complete.
           * @param {Object?} auth - authentication options
           * @param {string} path - request path
           */
        }, {
          key: "_doRequest",
          value: function _doRequest(options, callback, auth, path) {
            var headers = Object.assign({}, this.headers);
            if (auth && auth.bearer) {
              headers.Authorization = "Bearer ".concat(auth.bearer);
            }
            var req = (this.ssl ? https : http).request(_objectSpread(_objectSpread({}, this.options), {}, {
              method: "POST",
              host: this.host,
              port: this.port,
              path: "/".concat(path.replace(/^\//, "")),
              headers,
              auth: auth && auth.username && auth.password ? "".concat(auth.username, ":").concat(auth.password) : "",
              agent: this.agent
            }));
            req.on("error", callback);
            req.on("response", function(res) {
              return res.on("end", function() {
                return callback(null, res);
              }).resume();
            });
            var jsonStringify = configure(_objectSpread({}, this.maximumDepth && {
              maximumDepth: this.maximumDepth
            }));
            req.end(Buffer2.from(jsonStringify(options, this.options.replacer), "utf8"));
          }
        }]);
      })(TransportStream);
    }
  });

  // node_modules/is-stream/index.js
  var require_is_stream = __commonJS({
    "node_modules/is-stream/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
      isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
      isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
      isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
      isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
      module.exports = isStream;
    }
  });

  // node_modules/winston/dist/winston/transports/stream.js
  var require_stream2 = __commonJS({
    "node_modules/winston/dist/winston/transports/stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var isStream = require_is_stream();
      var _require = require_triple_beam();
      var MESSAGE = _require.MESSAGE;
      var os = require_os();
      var TransportStream = require_dist9();
      module.exports = /* @__PURE__ */ (function(_TransportStream) {
        function Stream2() {
          var _this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Stream2);
          _this = _callSuper(this, Stream2, [options]);
          if (!options.stream || !isStream(options.stream)) {
            throw new Error("options.stream is required.");
          }
          _this._stream = options.stream;
          _this._stream.setMaxListeners(Infinity);
          _this.isObjectMode = options.stream._writableState.objectMode;
          _this.eol = typeof options.eol === "string" ? options.eol : os.EOL;
          return _this;
        }
        _inherits(Stream2, _TransportStream);
        return _createClass(Stream2, [{
          key: "log",
          value: function log2(info, callback) {
            var _this2 = this;
            setImmediate(function() {
              return _this2.emit("logged", info);
            });
            if (this.isObjectMode) {
              this._stream.write(info);
              if (callback) {
                callback();
              }
              return;
            }
            this._stream.write("".concat(info[MESSAGE]).concat(this.eol));
            if (callback) {
              callback();
            }
            return;
          }
        }]);
      })(TransportStream);
    }
  });

  // node_modules/winston/dist/winston/transports/index.js
  var require_transports = __commonJS({
    "node_modules/winston/dist/winston/transports/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "Console", {
        configurable: true,
        enumerable: true,
        get: function get3() {
          return require_console();
        }
      });
      Object.defineProperty(exports, "File", {
        configurable: true,
        enumerable: true,
        get: function get3() {
          return require_file();
        }
      });
      Object.defineProperty(exports, "Http", {
        configurable: true,
        enumerable: true,
        get: function get3() {
          return require_http2();
        }
      });
      Object.defineProperty(exports, "Stream", {
        configurable: true,
        enumerable: true,
        get: function get3() {
          return require_stream2();
        }
      });
    }
  });

  // node_modules/winston/dist/winston/config/index.js
  var require_config2 = __commonJS({
    "node_modules/winston/dist/winston/config/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var logform = require_browser6();
      var _require = require_triple_beam();
      var configs = _require.configs;
      exports.cli = logform.levels(configs.cli);
      exports.npm = logform.levels(configs.npm);
      exports.syslog = logform.levels(configs.syslog);
      exports.addColors = logform.levels;
    }
  });

  // node_modules/async/eachOf.js
  var require_eachOf = __commonJS({
    "node_modules/async/eachOf.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _isArrayLike = require_isArrayLike();
      var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
      var _breakLoop = require_breakLoop();
      var _breakLoop2 = _interopRequireDefault(_breakLoop);
      var _eachOfLimit = require_eachOfLimit2();
      var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
      var _once = require_once();
      var _once2 = _interopRequireDefault(_once);
      var _onlyOnce = require_onlyOnce();
      var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
      var _wrapAsync = require_wrapAsync();
      var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
      var _awaitify = require_awaitify();
      var _awaitify2 = _interopRequireDefault(_awaitify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function eachOfArrayLike(coll, iteratee, callback) {
        callback = (0, _once2.default)(callback);
        var index = 0, completed = 0, { length } = coll, canceled = false;
        if (length === 0) {
          callback(null);
        }
        function iteratorCallback(err2, value) {
          if (err2 === false) {
            canceled = true;
          }
          if (canceled === true) return;
          if (err2) {
            callback(err2);
          } else if (++completed === length || value === _breakLoop2.default) {
            callback(null);
          }
        }
        for (; index < length; index++) {
          iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
        }
      }
      function eachOfGeneric(coll, iteratee, callback) {
        return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
      }
      function eachOf(coll, iteratee, callback) {
        var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
        return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
      }
      exports.default = (0, _awaitify2.default)(eachOf, 3);
      module.exports = exports.default;
    }
  });

  // node_modules/async/internal/withoutIndex.js
  var require_withoutIndex = __commonJS({
    "node_modules/async/internal/withoutIndex.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = _withoutIndex;
      function _withoutIndex(iteratee) {
        return (value, index, callback) => iteratee(value, callback);
      }
      module.exports = exports.default;
    }
  });

  // node_modules/async/forEach.js
  var require_forEach = __commonJS({
    "node_modules/async/forEach.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _eachOf = require_eachOf();
      var _eachOf2 = _interopRequireDefault(_eachOf);
      var _withoutIndex = require_withoutIndex();
      var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
      var _wrapAsync = require_wrapAsync();
      var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
      var _awaitify = require_awaitify();
      var _awaitify2 = _interopRequireDefault(_awaitify);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function eachLimit(coll, iteratee, callback) {
        return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
      }
      exports.default = (0, _awaitify2.default)(eachLimit, 3);
      module.exports = exports.default;
    }
  });

  // node_modules/fn.name/index.js
  var require_fn = __commonJS({
    "node_modules/fn.name/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var toString4 = Object.prototype.toString;
      module.exports = function name2(fn) {
        if ("string" === typeof fn.displayName && fn.constructor.name) {
          return fn.displayName;
        } else if ("string" === typeof fn.name && fn.name) {
          return fn.name;
        }
        if ("object" === typeof fn && fn.constructor && "string" === typeof fn.constructor.name) return fn.constructor.name;
        var named = fn.toString(), type2 = toString4.call(fn).slice(8, -1);
        if ("Function" === type2) {
          named = named.substring(named.indexOf("(") + 1, named.indexOf(")"));
        } else {
          named = type2;
        }
        return named || "anonymous";
      };
    }
  });

  // node_modules/one-time/index.js
  var require_one_time = __commonJS({
    "node_modules/one-time/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var name2 = require_fn();
      module.exports = function one(fn) {
        var called = 0, value;
        function onetime() {
          if (called) return value;
          called = 1;
          value = fn.apply(this, arguments);
          fn = null;
          return value;
        }
        onetime.displayName = name2(fn);
        return onetime;
      };
    }
  });

  // node_modules/stack-trace/lib/stack-trace.js
  var require_stack_trace = __commonJS({
    "node_modules/stack-trace/lib/stack-trace.js"(exports) {
      init_process();
      init_buffer();
      exports.get = function(belowFn) {
        var oldLimit = Error.stackTraceLimit;
        Error.stackTraceLimit = Infinity;
        var dummyObject = {};
        var v8Handler = Error.prepareStackTrace;
        Error.prepareStackTrace = function(dummyObject2, v8StackTrace2) {
          return v8StackTrace2;
        };
        Error.captureStackTrace(dummyObject, belowFn || exports.get);
        var v8StackTrace = dummyObject.stack;
        Error.prepareStackTrace = v8Handler;
        Error.stackTraceLimit = oldLimit;
        return v8StackTrace;
      };
      exports.parse = function(err2) {
        if (!err2.stack) {
          return [];
        }
        var self2 = this;
        var lines = err2.stack.split("\n").slice(1);
        return lines.map(function(line) {
          if (line.match(/^\s*[-]{4,}$/)) {
            return self2._createParsedCallSite({
              fileName: line,
              lineNumber: null,
              functionName: null,
              typeName: null,
              methodName: null,
              columnNumber: null,
              "native": null
            });
          }
          var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
          if (!lineMatch) {
            return;
          }
          var object = null;
          var method = null;
          var functionName = null;
          var typeName = null;
          var methodName = null;
          var isNative = lineMatch[5] === "native";
          if (lineMatch[1]) {
            functionName = lineMatch[1];
            var methodStart = functionName.lastIndexOf(".");
            if (functionName[methodStart - 1] == ".")
              methodStart--;
            if (methodStart > 0) {
              object = functionName.substr(0, methodStart);
              method = functionName.substr(methodStart + 1);
              var objectEnd = object.indexOf(".Module");
              if (objectEnd > 0) {
                functionName = functionName.substr(objectEnd + 1);
                object = object.substr(0, objectEnd);
              }
            }
            typeName = null;
          }
          if (method) {
            typeName = object;
            methodName = method;
          }
          if (method === "<anonymous>") {
            methodName = null;
            functionName = null;
          }
          var properties = {
            fileName: lineMatch[2] || null,
            lineNumber: parseInt(lineMatch[3], 10) || null,
            functionName,
            typeName,
            methodName,
            columnNumber: parseInt(lineMatch[4], 10) || null,
            "native": isNative
          };
          return self2._createParsedCallSite(properties);
        }).filter(function(callSite) {
          return !!callSite;
        });
      };
      function CallSite(properties) {
        for (var property in properties) {
          this[property] = properties[property];
        }
      }
      var strProperties = [
        "this",
        "typeName",
        "functionName",
        "methodName",
        "fileName",
        "lineNumber",
        "columnNumber",
        "function",
        "evalOrigin"
      ];
      var boolProperties = [
        "topLevel",
        "eval",
        "native",
        "constructor"
      ];
      strProperties.forEach(function(property) {
        CallSite.prototype[property] = null;
        CallSite.prototype["get" + property[0].toUpperCase() + property.substr(1)] = function() {
          return this[property];
        };
      });
      boolProperties.forEach(function(property) {
        CallSite.prototype[property] = false;
        CallSite.prototype["is" + property[0].toUpperCase() + property.substr(1)] = function() {
          return this[property];
        };
      });
      exports._createParsedCallSite = function(properties) {
        return new CallSite(properties);
      };
    }
  });

  // node_modules/winston/dist/winston/exception-stream.js
  var require_exception_stream = __commonJS({
    "node_modules/winston/dist/winston/exception-stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var _require = require_readable_browser3();
      var Writable2 = _require.Writable;
      module.exports = /* @__PURE__ */ (function(_Writable) {
        function ExceptionStream(transport) {
          var _this;
          _classCallCheck(this, ExceptionStream);
          _this = _callSuper(this, ExceptionStream, [{
            objectMode: true
          }]);
          if (!transport) {
            throw new Error("ExceptionStream requires a TransportStream instance.");
          }
          _this.handleExceptions = true;
          _this.transport = transport;
          return _this;
        }
        _inherits(ExceptionStream, _Writable);
        return _createClass(ExceptionStream, [{
          key: "_write",
          value: function _write(info, enc, callback) {
            if (info.exception) {
              return this.transport.log(info, callback);
            }
            callback();
            return true;
          }
        }]);
      })(Writable2);
    }
  });

  // node_modules/winston/dist/winston/exception-handler.js
  var require_exception_handler = __commonJS({
    "node_modules/winston/dist/winston/exception-handler.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var os = require_os();
      var asyncForEach = require_forEach();
      var debug2 = require_browser7()("winston:exception");
      var once4 = require_one_time();
      var stackTrace = require_stack_trace();
      var ExceptionStream = require_exception_stream();
      module.exports = /* @__PURE__ */ (function() {
        function ExceptionHandler(logger) {
          _classCallCheck(this, ExceptionHandler);
          if (!logger) {
            throw new Error("Logger is required to handle exceptions");
          }
          this.logger = logger;
          this.handlers = /* @__PURE__ */ new Map();
        }
        return _createClass(ExceptionHandler, [{
          key: "handle",
          value: function handle() {
            var _this = this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            args.forEach(function(arg) {
              if (Array.isArray(arg)) {
                return arg.forEach(function(handler) {
                  return _this._addHandler(handler);
                });
              }
              _this._addHandler(arg);
            });
            if (!this.catcher) {
              this.catcher = this._uncaughtException.bind(this);
              process.on("uncaughtException", this.catcher);
            }
          }
          /**
           * Removes any handlers to `uncaughtException` events for the current
           * process. This does not modify the state of the `this.handlers` set.
           * @returns {undefined}
           */
        }, {
          key: "unhandle",
          value: function unhandle() {
            var _this2 = this;
            if (this.catcher) {
              process.removeListener("uncaughtException", this.catcher);
              this.catcher = false;
              Array.from(this.handlers.values()).forEach(function(wrapper) {
                return _this2.logger.unpipe(wrapper);
              });
            }
          }
          /**
           * TODO: add method description
           * @param {Error} err - Error to get information about.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getAllInfo",
          value: function getAllInfo(err2) {
            var message = null;
            if (err2) {
              message = typeof err2 === "string" ? err2 : err2.message;
            }
            return {
              error: err2,
              // TODO (indexzero): how do we configure this?
              level: "error",
              message: ["uncaughtException: ".concat(message || "(no error message)"), err2 && err2.stack || "  No stack trace"].join("\n"),
              stack: err2 && err2.stack,
              exception: true,
              date: (/* @__PURE__ */ new Date()).toString(),
              process: this.getProcessInfo(),
              os: this.getOsInfo(),
              trace: this.getTrace(err2)
            };
          }
          /**
           * Gets all relevant process information for the currently running process.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getProcessInfo",
          value: function getProcessInfo() {
            return {
              pid: process.pid,
              uid: process.getuid ? process.getuid() : null,
              gid: process.getgid ? process.getgid() : null,
              cwd: process.cwd(),
              execPath: process.execPath,
              version: process.version,
              argv: process.argv,
              memoryUsage: process.memoryUsage()
            };
          }
          /**
           * Gets all relevant OS information for the currently running process.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getOsInfo",
          value: function getOsInfo() {
            return {
              loadavg: os.loadavg(),
              uptime: os.uptime()
            };
          }
          /**
           * Gets a stack trace for the specified error.
           * @param {mixed} err - TODO: add param description.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getTrace",
          value: function getTrace(err2) {
            var trace = err2 ? stackTrace.parse(err2) : stackTrace.get();
            return trace.map(function(site) {
              return {
                column: site.getColumnNumber(),
                file: site.getFileName(),
                "function": site.getFunctionName(),
                line: site.getLineNumber(),
                method: site.getMethodName(),
                "native": site.isNative()
              };
            });
          }
          /**
           * Helper method to add a transport as an exception handler.
           * @param {Transport} handler - The transport to add as an exception handler.
           * @returns {void}
           */
        }, {
          key: "_addHandler",
          value: function _addHandler(handler) {
            if (!this.handlers.has(handler)) {
              handler.handleExceptions = true;
              var wrapper = new ExceptionStream(handler);
              this.handlers.set(handler, wrapper);
              this.logger.pipe(wrapper);
            }
          }
          /**
           * Logs all relevant information around the `err` and exits the current
           * process.
           * @param {Error} err - Error to handle
           * @returns {mixed} - TODO: add return description.
           * @private
           */
        }, {
          key: "_uncaughtException",
          value: function _uncaughtException(err2) {
            var info = this.getAllInfo(err2);
            var handlers = this._getExceptionHandlers();
            var doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err2) : this.logger.exitOnError;
            var timeout;
            if (!handlers.length && doExit) {
              console.warn("winston: exitOnError cannot be true with no exception handlers.");
              console.warn("winston: not exiting process.");
              doExit = false;
            }
            function gracefulExit() {
              debug2("doExit", doExit);
              debug2("process._exiting", process._exiting);
              if (doExit && !process._exiting) {
                if (timeout) {
                  clearTimeout(timeout);
                }
                process.exit(1);
              }
            }
            if (!handlers || handlers.length === 0) {
              return process.nextTick(gracefulExit);
            }
            asyncForEach(handlers, function(handler, next) {
              var done2 = once4(next);
              var transport = handler.transport || handler;
              function onDone(event) {
                return function() {
                  debug2(event);
                  done2();
                };
              }
              transport._ending = true;
              transport.once("finish", onDone("finished"));
              transport.once("error", onDone("error"));
            }, function() {
              return doExit && gracefulExit();
            });
            this.logger.log(info);
            if (doExit) {
              timeout = setTimeout(gracefulExit, 3e3);
            }
          }
          /**
           * Returns the list of transports and exceptionHandlers for this instance.
           * @returns {Array} - List of transports and exceptionHandlers for this
           * instance.
           * @private
           */
        }, {
          key: "_getExceptionHandlers",
          value: function _getExceptionHandlers() {
            return this.logger.transports.filter(function(wrap) {
              var transport = wrap.transport || wrap;
              return transport.handleExceptions;
            });
          }
        }]);
      })();
    }
  });

  // node_modules/winston/dist/winston/rejection-stream.js
  var require_rejection_stream = __commonJS({
    "node_modules/winston/dist/winston/rejection-stream.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var _require = require_readable_browser3();
      var Writable2 = _require.Writable;
      module.exports = /* @__PURE__ */ (function(_Writable) {
        function RejectionStream(transport) {
          var _this;
          _classCallCheck(this, RejectionStream);
          _this = _callSuper(this, RejectionStream, [{
            objectMode: true
          }]);
          if (!transport) {
            throw new Error("RejectionStream requires a TransportStream instance.");
          }
          _this.handleRejections = true;
          _this.transport = transport;
          return _this;
        }
        _inherits(RejectionStream, _Writable);
        return _createClass(RejectionStream, [{
          key: "_write",
          value: function _write(info, enc, callback) {
            if (info.rejection) {
              return this.transport.log(info, callback);
            }
            callback();
            return true;
          }
        }]);
      })(Writable2);
    }
  });

  // node_modules/winston/dist/winston/rejection-handler.js
  var require_rejection_handler = __commonJS({
    "node_modules/winston/dist/winston/rejection-handler.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var os = require_os();
      var asyncForEach = require_forEach();
      var debug2 = require_browser7()("winston:rejection");
      var once4 = require_one_time();
      var stackTrace = require_stack_trace();
      var RejectionStream = require_rejection_stream();
      module.exports = /* @__PURE__ */ (function() {
        function RejectionHandler(logger) {
          _classCallCheck(this, RejectionHandler);
          if (!logger) {
            throw new Error("Logger is required to handle rejections");
          }
          this.logger = logger;
          this.handlers = /* @__PURE__ */ new Map();
        }
        return _createClass(RejectionHandler, [{
          key: "handle",
          value: function handle() {
            var _this = this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            args.forEach(function(arg) {
              if (Array.isArray(arg)) {
                return arg.forEach(function(handler) {
                  return _this._addHandler(handler);
                });
              }
              _this._addHandler(arg);
            });
            if (!this.catcher) {
              this.catcher = this._unhandledRejection.bind(this);
              process.on("unhandledRejection", this.catcher);
            }
          }
          /**
           * Removes any handlers to `unhandledRejection` events for the current
           * process. This does not modify the state of the `this.handlers` set.
           * @returns {undefined}
           */
        }, {
          key: "unhandle",
          value: function unhandle() {
            var _this2 = this;
            if (this.catcher) {
              process.removeListener("unhandledRejection", this.catcher);
              this.catcher = false;
              Array.from(this.handlers.values()).forEach(function(wrapper) {
                return _this2.logger.unpipe(wrapper);
              });
            }
          }
          /**
           * TODO: add method description
           * @param {Error} err - Error to get information about.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getAllInfo",
          value: function getAllInfo(err2) {
            var message = null;
            if (err2) {
              message = typeof err2 === "string" ? err2 : err2.message;
            }
            return {
              error: err2,
              // TODO (indexzero): how do we configure this?
              level: "error",
              message: ["unhandledRejection: ".concat(message || "(no error message)"), err2 && err2.stack || "  No stack trace"].join("\n"),
              stack: err2 && err2.stack,
              rejection: true,
              date: (/* @__PURE__ */ new Date()).toString(),
              process: this.getProcessInfo(),
              os: this.getOsInfo(),
              trace: this.getTrace(err2)
            };
          }
          /**
           * Gets all relevant process information for the currently running process.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getProcessInfo",
          value: function getProcessInfo() {
            return {
              pid: process.pid,
              uid: process.getuid ? process.getuid() : null,
              gid: process.getgid ? process.getgid() : null,
              cwd: process.cwd(),
              execPath: process.execPath,
              version: process.version,
              argv: process.argv,
              memoryUsage: process.memoryUsage()
            };
          }
          /**
           * Gets all relevant OS information for the currently running process.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getOsInfo",
          value: function getOsInfo() {
            return {
              loadavg: os.loadavg(),
              uptime: os.uptime()
            };
          }
          /**
           * Gets a stack trace for the specified error.
           * @param {mixed} err - TODO: add param description.
           * @returns {mixed} - TODO: add return description.
           */
        }, {
          key: "getTrace",
          value: function getTrace(err2) {
            var trace = err2 ? stackTrace.parse(err2) : stackTrace.get();
            return trace.map(function(site) {
              return {
                column: site.getColumnNumber(),
                file: site.getFileName(),
                "function": site.getFunctionName(),
                line: site.getLineNumber(),
                method: site.getMethodName(),
                "native": site.isNative()
              };
            });
          }
          /**
           * Helper method to add a transport as an exception handler.
           * @param {Transport} handler - The transport to add as an exception handler.
           * @returns {void}
           */
        }, {
          key: "_addHandler",
          value: function _addHandler(handler) {
            if (!this.handlers.has(handler)) {
              handler.handleRejections = true;
              var wrapper = new RejectionStream(handler);
              this.handlers.set(handler, wrapper);
              this.logger.pipe(wrapper);
            }
          }
          /**
           * Logs all relevant information around the `err` and exits the current
           * process.
           * @param {Error} err - Error to handle
           * @returns {mixed} - TODO: add return description.
           * @private
           */
        }, {
          key: "_unhandledRejection",
          value: function _unhandledRejection(err2) {
            var info = this.getAllInfo(err2);
            var handlers = this._getRejectionHandlers();
            var doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err2) : this.logger.exitOnError;
            var timeout;
            if (!handlers.length && doExit) {
              console.warn("winston: exitOnError cannot be true with no rejection handlers.");
              console.warn("winston: not exiting process.");
              doExit = false;
            }
            function gracefulExit() {
              debug2("doExit", doExit);
              debug2("process._exiting", process._exiting);
              if (doExit && !process._exiting) {
                if (timeout) {
                  clearTimeout(timeout);
                }
                process.exit(1);
              }
            }
            if (!handlers || handlers.length === 0) {
              return process.nextTick(gracefulExit);
            }
            asyncForEach(handlers, function(handler, next) {
              var done2 = once4(next);
              var transport = handler.transport || handler;
              function onDone(event) {
                return function() {
                  debug2(event);
                  done2();
                };
              }
              transport._ending = true;
              transport.once("finish", onDone("finished"));
              transport.once("error", onDone("error"));
            }, function() {
              return doExit && gracefulExit();
            });
            this.logger.log(info);
            if (doExit) {
              timeout = setTimeout(gracefulExit, 3e3);
            }
          }
          /**
           * Returns the list of transports and exceptionHandlers for this instance.
           * @returns {Array} - List of transports and exceptionHandlers for this
           * instance.
           * @private
           */
        }, {
          key: "_getRejectionHandlers",
          value: function _getRejectionHandlers() {
            return this.logger.transports.filter(function(wrap) {
              var transport = wrap.transport || wrap;
              return transport.handleRejections;
            });
          }
        }]);
      })();
    }
  });

  // node_modules/winston-transport/modern.js
  var require_modern2 = __commonJS({
    "node_modules/winston-transport/modern.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var util = require_util();
      var Writable2 = require_stream_writable3();
      var { LEVEL } = require_triple_beam();
      var TransportStream = module.exports = function TransportStream2(options = {}) {
        Writable2.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
        this.format = options.format;
        this.level = options.level;
        this.handleExceptions = options.handleExceptions;
        this.handleRejections = options.handleRejections;
        this.silent = options.silent;
        if (options.log) this.log = options.log;
        if (options.logv) this.logv = options.logv;
        if (options.close) this.close = options.close;
        this.once("pipe", (logger) => {
          this.levels = logger.levels;
          this.parent = logger;
        });
        this.once("unpipe", (src) => {
          if (src === this.parent) {
            this.parent = null;
            if (this.close) {
              this.close();
            }
          }
        });
      };
      util.inherits(TransportStream, Writable2);
      TransportStream.prototype._write = function _write(info, enc, callback) {
        if (this.silent || info.exception === true && !this.handleExceptions) {
          return callback(null);
        }
        const level = this.level || this.parent && this.parent.level;
        if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
          if (info && !this.format) {
            return this.log(info, callback);
          }
          let errState;
          let transformed;
          try {
            transformed = this.format.transform(Object.assign({}, info), this.format.options);
          } catch (err2) {
            errState = err2;
          }
          if (errState || !transformed) {
            callback();
            if (errState) throw errState;
            return;
          }
          return this.log(transformed, callback);
        }
        this._writableState.sync = false;
        return callback(null);
      };
      TransportStream.prototype._writev = function _writev(chunks, callback) {
        if (this.logv) {
          const infos = chunks.filter(this._accept, this);
          if (!infos.length) {
            return callback(null);
          }
          return this.logv(infos, callback);
        }
        for (let i = 0; i < chunks.length; i++) {
          if (!this._accept(chunks[i])) continue;
          if (chunks[i].chunk && !this.format) {
            this.log(chunks[i].chunk, chunks[i].callback);
            continue;
          }
          let errState;
          let transformed;
          try {
            transformed = this.format.transform(
              Object.assign({}, chunks[i].chunk),
              this.format.options
            );
          } catch (err2) {
            errState = err2;
          }
          if (errState || !transformed) {
            chunks[i].callback();
            if (errState) {
              callback(null);
              throw errState;
            }
          } else {
            this.log(transformed, chunks[i].callback);
          }
        }
        return callback(null);
      };
      TransportStream.prototype._accept = function _accept(write4) {
        const info = write4.chunk;
        if (this.silent) {
          return false;
        }
        const level = this.level || this.parent && this.parent.level;
        if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
          if (this.handleExceptions || info.exception !== true) {
            return true;
          }
        }
        return false;
      };
      TransportStream.prototype._nop = function _nop() {
        return void 0;
      };
    }
  });

  // node_modules/winston-transport/legacy.js
  var require_legacy2 = __commonJS({
    "node_modules/winston-transport/legacy.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var util = require_util();
      var { LEVEL } = require_triple_beam();
      var TransportStream = require_modern2();
      var LegacyTransportStream = module.exports = function LegacyTransportStream2(options = {}) {
        TransportStream.call(this, options);
        if (!options.transport || typeof options.transport.log !== "function") {
          throw new Error("Invalid transport, must be an object with a log method.");
        }
        this.transport = options.transport;
        this.level = this.level || options.transport.level;
        this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
        this._deprecated();
        function transportError(err2) {
          this.emit("error", err2, this.transport);
        }
        if (!this.transport.__winstonError) {
          this.transport.__winstonError = transportError.bind(this);
          this.transport.on("error", this.transport.__winstonError);
        }
      };
      util.inherits(LegacyTransportStream, TransportStream);
      LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
        if (this.silent || info.exception === true && !this.handleExceptions) {
          return callback(null);
        }
        if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
          this.transport.log(info[LEVEL], info.message, info, this._nop);
        }
        callback(null);
      };
      LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
        for (let i = 0; i < chunks.length; i++) {
          if (this._accept(chunks[i])) {
            this.transport.log(
              chunks[i].chunk[LEVEL],
              chunks[i].chunk.message,
              chunks[i].chunk,
              this._nop
            );
            chunks[i].callback();
          }
        }
        return callback(null);
      };
      LegacyTransportStream.prototype._deprecated = function _deprecated() {
        console.error([
          `${this.transport.name} is a legacy winston transport. Consider upgrading: `,
          "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"
        ].join("\n"));
      };
      LegacyTransportStream.prototype.close = function close() {
        if (this.transport.close) {
          this.transport.close();
        }
        if (this.transport.__winstonError) {
          this.transport.removeListener("error", this.transport.__winstonError);
          this.transport.__winstonError = null;
        }
      };
    }
  });

  // node_modules/winston/dist/winston/profiler.js
  var require_profiler = __commonJS({
    "node_modules/winston/dist/winston/profiler.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var Profiler = /* @__PURE__ */ (function() {
        function Profiler2(logger) {
          _classCallCheck(this, Profiler2);
          var Logger = require_logger();
          if (_typeof(logger) !== "object" || Array.isArray(logger) || !(logger instanceof Logger)) {
            throw new Error("Logger is required for profiling");
          } else {
            this.logger = logger;
            this.start = Date.now();
          }
        }
        return _createClass(Profiler2, [{
          key: "done",
          value: function done2() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (typeof args[args.length - 1] === "function") {
              console.warn("Callback function no longer supported as of winston@3.0.0");
              args.pop();
            }
            var info = _typeof(args[args.length - 1]) === "object" ? args.pop() : {};
            info.level = info.level || "info";
            info.durationMs = Date.now() - this.start;
            return this.logger.write(info);
          }
        }]);
      })();
      module.exports = Profiler;
    }
  });

  // node_modules/logform/format.js
  var require_format2 = __commonJS({
    "node_modules/logform/format.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var InvalidFormatError = class _InvalidFormatError extends Error {
        constructor(formatFn) {
          super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}
`);
          Error.captureStackTrace(this, _InvalidFormatError);
        }
      };
      module.exports = (formatFn) => {
        if (formatFn.length > 2) {
          throw new InvalidFormatError(formatFn);
        }
        function Format(options = {}) {
          this.options = options;
        }
        Format.prototype.transform = formatFn;
        function createFormatWrap(opts) {
          return new Format(opts);
        }
        createFormatWrap.Format = Format;
        return createFormatWrap;
      };
    }
  });

  // node_modules/logform/json.js
  var require_json2 = __commonJS({
    "node_modules/logform/json.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      var format3 = require_format2();
      var { MESSAGE } = require_triple_beam();
      var stringify2 = require_safe_stable_stringify();
      function replacer(key, value) {
        if (typeof value === "bigint")
          return value.toString();
        return value;
      }
      module.exports = format3((info, opts) => {
        const jsonStringify = stringify2.configure(opts);
        info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
        return info;
      });
    }
  });

  // node_modules/winston/dist/winston/logger.js
  var require_logger = __commonJS({
    "node_modules/winston/dist/winston/logger.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _defineProperty(e, r, t) {
        return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
      }
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var _require = require_readable_browser3();
      var Stream2 = _require.Stream;
      var Transform2 = _require.Transform;
      var asyncForEach = require_forEach();
      var _require2 = require_triple_beam();
      var LEVEL = _require2.LEVEL;
      var SPLAT = _require2.SPLAT;
      var isStream = require_is_stream();
      var ExceptionHandler = require_exception_handler();
      var RejectionHandler = require_rejection_handler();
      var LegacyTransportStream = require_legacy2();
      var Profiler = require_profiler();
      var _require3 = require_common3();
      var warn = _require3.warn;
      var config3 = require_config2();
      var formatRegExp2 = /%[scdjifoO%]/g;
      var Logger = /* @__PURE__ */ (function(_Transform) {
        function Logger2(options) {
          var _this;
          _classCallCheck(this, Logger2);
          _this = _callSuper(this, Logger2, [{
            objectMode: true
          }]);
          _this.configure(options);
          return _this;
        }
        _inherits(Logger2, _Transform);
        return _createClass(Logger2, [{
          key: "child",
          value: function child(defaultRequestMetadata) {
            var logger = this;
            return Object.create(logger, {
              write: {
                value: function value(info) {
                  var infoClone = Object.assign({}, defaultRequestMetadata, info);
                  if (info instanceof Error) {
                    infoClone.stack = info.stack;
                    infoClone.message = info.message;
                  }
                  logger.write(infoClone);
                }
              }
            });
          }
          /**
           * This will wholesale reconfigure this instance by:
           * 1. Resetting all transports. Older transports will be removed implicitly.
           * 2. Set all other options including levels, colors, rewriters, filters,
           *    exceptionHandlers, etc.
           * @param {!Object} options - TODO: add param description.
           * @returns {undefined}
           */
        }, {
          key: "configure",
          value: function configure() {
            var _this2 = this;
            var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, silent = _ref.silent, format3 = _ref.format, defaultMeta = _ref.defaultMeta, levels = _ref.levels, _ref$level = _ref.level, level = _ref$level === void 0 ? "info" : _ref$level, _ref$exitOnError = _ref.exitOnError, exitOnError = _ref$exitOnError === void 0 ? true : _ref$exitOnError, transports = _ref.transports, colors = _ref.colors, emitErrs = _ref.emitErrs, formatters = _ref.formatters, padLevels = _ref.padLevels, rewriters = _ref.rewriters, stripColors = _ref.stripColors, exceptionHandlers = _ref.exceptionHandlers, rejectionHandlers = _ref.rejectionHandlers;
            if (this.transports.length) {
              this.clear();
            }
            this.silent = silent;
            this.format = format3 || this.format || require_json2()();
            this.defaultMeta = defaultMeta || null;
            this.levels = levels || this.levels || config3.npm.levels;
            this.level = level;
            if (this.exceptions) {
              this.exceptions.unhandle();
            }
            if (this.rejections) {
              this.rejections.unhandle();
            }
            this.exceptions = new ExceptionHandler(this);
            this.rejections = new RejectionHandler(this);
            this.profilers = {};
            this.exitOnError = exitOnError;
            if (transports) {
              transports = Array.isArray(transports) ? transports : [transports];
              transports.forEach(function(transport) {
                return _this2.add(transport);
              });
            }
            if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {
              throw new Error(["{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.", "Use a custom winston.format(function) instead.", "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));
            }
            if (exceptionHandlers) {
              this.exceptions.handle(exceptionHandlers);
            }
            if (rejectionHandlers) {
              this.rejections.handle(rejectionHandlers);
            }
          }
          /* eslint-disable valid-jsdoc */
          /**
           * Helper method to get the highest logging level associated with a logger
           *
           * @returns { number | null } - The highest configured logging level, null
           * for invalid configuration
           */
        }, {
          key: "getHighestLogLevel",
          value: function getHighestLogLevel() {
            var _this3 = this;
            var configuredLevelValue = getLevelValue(this.levels, this.level);
            if (!this.transports || this.transports.length === 0) {
              return configuredLevelValue;
            }
            return this.transports.reduce(function(max, transport) {
              var levelValue = getLevelValue(_this3.levels, transport.level);
              return levelValue !== null && levelValue > max ? levelValue : max;
            }, configuredLevelValue);
          }
        }, {
          key: "isLevelEnabled",
          value: function isLevelEnabled(level) {
            var _this4 = this;
            var givenLevelValue = getLevelValue(this.levels, level);
            if (givenLevelValue === null) {
              return false;
            }
            var configuredLevelValue = getLevelValue(this.levels, this.level);
            if (configuredLevelValue === null) {
              return false;
            }
            if (!this.transports || this.transports.length === 0) {
              return configuredLevelValue >= givenLevelValue;
            }
            var index = this.transports.findIndex(function(transport) {
              var transportLevelValue = getLevelValue(_this4.levels, transport.level);
              if (transportLevelValue === null) {
                transportLevelValue = configuredLevelValue;
              }
              return transportLevelValue >= givenLevelValue;
            });
            return index !== -1;
          }
          /* eslint-disable valid-jsdoc */
          /**
           * Ensure backwards compatibility with a `log` method
           * @param {mixed} level - Level the log message is written at.
           * @param {mixed} msg - TODO: add param description.
           * @param {mixed} meta - TODO: add param description.
           * @returns {Logger} - TODO: add return description.
           *
           * @example
           *    // Supports the existing API:
           *    logger.log('info', 'Hello world', { custom: true });
           *    logger.log('info', new Error('Yo, it\'s on fire'));
           *
           *    // Requires winston.format.splat()
           *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });
           *
           *    // And the new API with a single JSON literal:
           *    logger.log({ level: 'info', message: 'Hello world', custom: true });
           *    logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
           *
           *    // Also requires winston.format.splat()
           *    logger.log({
           *      level: 'info',
           *      message: '%s %d%%',
           *      [SPLAT]: ['A string', 50],
           *      meta: { thisIsMeta: true }
           *    });
           *
           */
          /* eslint-enable valid-jsdoc */
        }, {
          key: "log",
          value: function log2(level, msg) {
            for (var _len = arguments.length, splat = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              splat[_key - 2] = arguments[_key];
            }
            if (arguments.length === 1) {
              level[LEVEL] = level.level;
              this._addDefaultMeta(level);
              this.write(level);
              return this;
            }
            if (arguments.length === 2) {
              if (msg && _typeof(msg) === "object") {
                msg[LEVEL] = msg.level = level;
                this._addDefaultMeta(msg);
                this.write(msg);
                return this;
              }
              msg = _defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), "level", level), "message", msg);
              this._addDefaultMeta(msg);
              this.write(msg);
              return this;
            }
            var meta = splat[0];
            if (_typeof(meta) === "object" && meta !== null) {
              var tokens = msg && msg.match && msg.match(formatRegExp2);
              if (!tokens) {
                var info = Object.assign({}, this.defaultMeta, meta, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), SPLAT, splat), "level", level), "message", msg));
                if (meta.message) info.message = "".concat(info.message, " ").concat(meta.message);
                if (meta.stack) info.stack = meta.stack;
                if (meta.cause) info.cause = meta.cause;
                this.write(info);
                return this;
              }
            }
            this.write(Object.assign({}, this.defaultMeta, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LEVEL, level), SPLAT, splat), "level", level), "message", msg)));
            return this;
          }
          /**
           * Pushes data so that it can be picked up by all of our pipe targets.
           * @param {mixed} info - TODO: add param description.
           * @param {mixed} enc - TODO: add param description.
           * @param {mixed} callback - Continues stream processing.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_transform",
          value: function _transform(info, enc, callback) {
            if (this.silent) {
              return callback();
            }
            if (!info[LEVEL]) {
              info[LEVEL] = info.level;
            }
            if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {
              console.error("[winston] Unknown logger level: %s", info[LEVEL]);
            }
            if (!this._readableState.pipes) {
              console.error("[winston] Attempt to write logs with no transports, which can increase memory usage: %j", info);
            }
            try {
              this.push(this.format.transform(info, this.format.options));
            } finally {
              this._writableState.sync = false;
              callback();
            }
          }
          /**
           * Delays the 'finish' event until all transport pipe targets have
           * also emitted 'finish' or are already finished.
           * @param {mixed} callback - Continues stream processing.
           */
        }, {
          key: "_final",
          value: function _final(callback) {
            var transports = this.transports.slice();
            asyncForEach(transports, function(transport, next) {
              if (!transport || transport.finished) return setImmediate(next);
              transport.once("finish", next);
              transport.end();
            }, callback);
          }
          /**
           * Adds the transport to this logger instance by piping to it.
           * @param {mixed} transport - TODO: add param description.
           * @returns {Logger} - TODO: add return description.
           */
        }, {
          key: "add",
          value: function add(transport) {
            var target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({
              transport
            }) : transport;
            if (!target._writableState || !target._writableState.objectMode) {
              throw new Error("Transports must WritableStreams in objectMode. Set { objectMode: true }.");
            }
            this._onEvent("error", target);
            this._onEvent("warn", target);
            this.pipe(target);
            if (transport.handleExceptions) {
              this.exceptions.handle();
            }
            if (transport.handleRejections) {
              this.rejections.handle();
            }
            return this;
          }
          /**
           * Removes the transport from this logger instance by unpiping from it.
           * @param {mixed} transport - TODO: add param description.
           * @returns {Logger} - TODO: add return description.
           */
        }, {
          key: "remove",
          value: function remove(transport) {
            if (!transport) return this;
            var target = transport;
            if (!isStream(transport) || transport.log.length > 2) {
              target = this.transports.filter(function(match) {
                return match.transport === transport;
              })[0];
            }
            if (target) {
              this.unpipe(target);
            }
            return this;
          }
          /**
           * Removes all transports from this logger instance.
           * @returns {Logger} - TODO: add return description.
           */
        }, {
          key: "clear",
          value: function clear() {
            this.unpipe();
            return this;
          }
          /**
           * Cleans up resources (streams, event listeners) for all transports
           * associated with this instance (if necessary).
           * @returns {Logger} - TODO: add return description.
           */
        }, {
          key: "close",
          value: function close() {
            this.exceptions.unhandle();
            this.rejections.unhandle();
            this.clear();
            this.emit("close");
            return this;
          }
          /**
           * Sets the `target` levels specified on this instance.
           * @param {Object} Target levels to use on this instance.
           */
        }, {
          key: "setLevels",
          value: function setLevels() {
            warn.deprecated("setLevels");
          }
          /**
           * Queries the all transports for this instance with the specified `options`.
           * This will aggregate each transport's results into one object containing
           * a property per transport.
           * @param {Object} options - Query options for this instance.
           * @param {function} callback - Continuation to respond to when complete.
           */
        }, {
          key: "query",
          value: function query(options, callback) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            options = options || {};
            var results = {};
            var queryObject = Object.assign({}, options.query || {});
            function queryTransport(transport, next) {
              if (options.query && typeof transport.formatQuery === "function") {
                options.query = transport.formatQuery(queryObject);
              }
              transport.query(options, function(err2, res) {
                if (err2) {
                  return next(err2);
                }
                if (typeof transport.formatResults === "function") {
                  res = transport.formatResults(res, options.format);
                }
                next(null, res);
              });
            }
            function addResults(transport, next) {
              queryTransport(transport, function(err2, result) {
                if (next) {
                  result = err2 || result;
                  if (result) {
                    results[transport.name] = result;
                  }
                  next();
                }
                next = null;
              });
            }
            asyncForEach(this.transports.filter(function(transport) {
              return !!transport.query;
            }), addResults, function() {
              return callback(null, results);
            });
          }
          /**
           * Returns a log stream for all transports. Options object is optional.
           * @param{Object} options={} - Stream options for this instance.
           * @returns {Stream} - TODO: add return description.
           */
        }, {
          key: "stream",
          value: function stream() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var out = new Stream2();
            var streams = [];
            out._streams = streams;
            out.destroy = function() {
              var i = streams.length;
              while (i--) {
                streams[i].destroy();
              }
            };
            this.transports.filter(function(transport) {
              return !!transport.stream;
            }).forEach(function(transport) {
              var str = transport.stream(options);
              if (!str) {
                return;
              }
              streams.push(str);
              str.on("log", function(log2) {
                log2.transport = log2.transport || [];
                log2.transport.push(transport.name);
                out.emit("log", log2);
              });
              str.on("error", function(err2) {
                err2.transport = err2.transport || [];
                err2.transport.push(transport.name);
                out.emit("error", err2);
              });
            });
            return out;
          }
          /**
           * Returns an object corresponding to a specific timing. When done is called
           * the timer will finish and log the duration. e.g.:
           * @returns {Profile} - TODO: add return description.
           * @example
           *    const timer = winston.startTimer()
           *    setTimeout(() => {
           *      timer.done({
           *        message: 'Logging message'
           *      });
           *    }, 1000);
           */
        }, {
          key: "startTimer",
          value: function startTimer() {
            return new Profiler(this);
          }
          /**
           * Tracks the time inbetween subsequent calls to this method with the same
           * `id` parameter. The second call to this method will log the difference in
           * milliseconds along with the message.
           * @param {string} id Unique id of the profiler
           * @returns {Logger} - TODO: add return description.
           */
        }, {
          key: "profile",
          value: function profile(id) {
            var time = Date.now();
            if (this.profilers[id]) {
              var timeEnd = this.profilers[id];
              delete this.profilers[id];
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              if (typeof args[args.length - 2] === "function") {
                console.warn("Callback function no longer supported as of winston@3.0.0");
                args.pop();
              }
              var info = _typeof(args[args.length - 1]) === "object" ? args.pop() : {};
              info.level = info.level || "info";
              info.durationMs = time - timeEnd;
              info.message = info.message || id;
              return this.write(info);
            }
            this.profilers[id] = time;
            return this;
          }
          /**
           * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
           * @returns {undefined}
           * @deprecated
           */
        }, {
          key: "handleExceptions",
          value: function handleExceptions() {
            var _this$exceptions;
            console.warn("Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()");
            (_this$exceptions = this.exceptions).handle.apply(_this$exceptions, arguments);
          }
          /**
           * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
           * @returns {undefined}
           * @deprecated
           */
        }, {
          key: "unhandleExceptions",
          value: function unhandleExceptions() {
            var _this$exceptions2;
            console.warn("Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()");
            (_this$exceptions2 = this.exceptions).unhandle.apply(_this$exceptions2, arguments);
          }
          /**
           * Throw a more meaningful deprecation notice
           * @throws {Error} - TODO: add throws description.
           */
        }, {
          key: "cli",
          value: function cli() {
            throw new Error(["Logger.cli() was removed in winston@3.0.0", "Use a custom winston.formats.cli() instead.", "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));
          }
          /**
           * Bubbles the `event` that occured on the specified `transport` up
           * from this instance.
           * @param {string} event - The event that occured
           * @param {Object} transport - Transport on which the event occured
           * @private
           */
        }, {
          key: "_onEvent",
          value: function _onEvent(event, transport) {
            function transportEvent(err2) {
              if (event === "error" && !this.transports.includes(transport)) {
                this.add(transport);
              }
              this.emit(event, err2, transport);
            }
            if (!transport["__winston" + event]) {
              transport["__winston" + event] = transportEvent.bind(this);
              transport.on(event, transport["__winston" + event]);
            }
          }
        }, {
          key: "_addDefaultMeta",
          value: function _addDefaultMeta(msg) {
            if (this.defaultMeta) {
              Object.assign(msg, this.defaultMeta);
            }
          }
        }]);
      })(Transform2);
      function getLevelValue(levels, level) {
        var value = levels[level];
        if (!value && value !== 0) {
          return null;
        }
        return value;
      }
      Object.defineProperty(Logger.prototype, "transports", {
        configurable: false,
        enumerable: true,
        get: function get3() {
          var pipes = this._readableState.pipes;
          return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
        }
      });
      module.exports = Logger;
    }
  });

  // node_modules/winston/dist/winston/create-logger.js
  var require_create_logger = __commonJS({
    "node_modules/winston/dist/winston/create-logger.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _callSuper(t, o, e) {
        return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
      }
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (t2) {
        }
        return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
          return !!t;
        })();
      }
      function _getPrototypeOf(t) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
          return t2.__proto__ || Object.getPrototypeOf(t2);
        }, _getPrototypeOf(t);
      }
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
      }
      function _setPrototypeOf(t, e) {
        return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
          return t2.__proto__ = e2, t2;
        }, _setPrototypeOf(t, e);
      }
      var _require = require_triple_beam();
      var LEVEL = _require.LEVEL;
      var config3 = require_config2();
      var Logger = require_logger();
      var debug2 = require_browser7()("winston:create-logger");
      function isLevelEnabledFunctionName(level) {
        return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
      }
      module.exports = function() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        opts.levels = opts.levels || config3.npm.levels;
        var DerivedLogger = /* @__PURE__ */ (function(_Logger) {
          function DerivedLogger2(options) {
            _classCallCheck(this, DerivedLogger2);
            return _callSuper(this, DerivedLogger2, [options]);
          }
          _inherits(DerivedLogger2, _Logger);
          return _createClass(DerivedLogger2);
        })(Logger);
        var logger = new DerivedLogger(opts);
        Object.keys(opts.levels).forEach(function(level) {
          debug2('Define prototype method for "%s"', level);
          if (level === "log") {
            console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
            return;
          }
          DerivedLogger.prototype[level] = function() {
            var self2 = this || logger;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (args.length === 1) {
              var msg = args[0];
              var info = msg && msg.message && msg || {
                message: msg
              };
              info.level = info[LEVEL] = level;
              self2._addDefaultMeta(info);
              self2.write(info);
              return this || logger;
            }
            if (args.length === 0) {
              self2.log(level, "");
              return self2;
            }
            return self2.log.apply(self2, [level].concat(args));
          };
          DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {
            return (this || logger).isLevelEnabled(level);
          };
        });
        return logger;
      };
    }
  });

  // node_modules/winston/dist/winston/container.js
  var require_container = __commonJS({
    "node_modules/winston/dist/winston/container.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
        for (var t = 0; t < r.length; t++) {
          var o = r[t];
          o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
      }
      function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: false }), e;
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
        if ("object" != _typeof(t) || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r || "default");
          if ("object" != _typeof(i)) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      var createLogger = require_create_logger();
      module.exports = /* @__PURE__ */ (function() {
        function Container() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Container);
          this.loggers = /* @__PURE__ */ new Map();
          this.options = options;
        }
        return _createClass(Container, [{
          key: "add",
          value: function add(id, options) {
            var _this = this;
            if (!this.loggers.has(id)) {
              options = Object.assign({}, options || this.options);
              var existing = options.transports || this.options.transports;
              if (existing) {
                options.transports = Array.isArray(existing) ? existing.slice() : [existing];
              } else {
                options.transports = [];
              }
              var logger = createLogger(options);
              logger.on("close", function() {
                return _this._delete(id);
              });
              this.loggers.set(id, logger);
            }
            return this.loggers.get(id);
          }
          /**
           * Retreives a `winston.Logger` instance for the specified `id`. If
           * an instance does not exist, one is created.
           * @param {!string} id - The id of the Logger to get.
           * @param {?Object} [options] - Options for the Logger instance.
           * @returns {Logger} - A configured Logger instance with a specified id.
           */
        }, {
          key: "get",
          value: function get3(id, options) {
            return this.add(id, options);
          }
          /**
           * Check if the container has a logger with the id.
           * @param {?string} id - The id of the Logger instance to find.
           * @returns {boolean} - Boolean value indicating if this instance has a
           * logger with the specified `id`.
           */
        }, {
          key: "has",
          value: function has(id) {
            return !!this.loggers.has(id);
          }
          /**
           * Closes a `Logger` instance with the specified `id` if it exists.
           * If no `id` is supplied then all Loggers are closed.
           * @param {?string} id - The id of the Logger instance to close.
           * @returns {undefined}
           */
        }, {
          key: "close",
          value: function close(id) {
            var _this2 = this;
            if (id) {
              return this._removeLogger(id);
            }
            this.loggers.forEach(function(val, key) {
              return _this2._removeLogger(key);
            });
          }
          /**
           * Remove a logger based on the id.
           * @param {!string} id - The id of the logger to remove.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_removeLogger",
          value: function _removeLogger(id) {
            if (!this.loggers.has(id)) {
              return;
            }
            var logger = this.loggers.get(id);
            logger.close();
            this._delete(id);
          }
          /**
           * Deletes a `Logger` instance with the specified `id`.
           * @param {!string} id - The id of the Logger instance to delete from
           * container.
           * @returns {undefined}
           * @private
           */
        }, {
          key: "_delete",
          value: function _delete(id) {
            this.loggers["delete"](id);
          }
        }]);
      })();
    }
  });

  // node_modules/winston/dist/winston.js
  var require_winston = __commonJS({
    "node_modules/winston/dist/winston.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var logform = require_browser6();
      var _require = require_common3();
      var warn = _require.warn;
      exports.version = require_package3().version;
      exports.transports = require_transports();
      exports.config = require_config2();
      exports.addColors = logform.levels;
      exports.format = logform.format;
      exports.createLogger = require_create_logger();
      exports.Logger = require_logger();
      exports.ExceptionHandler = require_exception_handler();
      exports.RejectionHandler = require_rejection_handler();
      exports.Container = require_container();
      exports.Transport = require_dist9();
      exports.loggers = new exports.Container();
      var defaultLogger = exports.createLogger();
      Object.keys(exports.config.npm.levels).concat(["log", "query", "stream", "add", "remove", "clear", "profile", "startTimer", "handleExceptions", "unhandleExceptions", "handleRejections", "unhandleRejections", "configure", "child"]).forEach(function(method) {
        return exports[method] = function() {
          return defaultLogger[method].apply(defaultLogger, arguments);
        };
      });
      Object.defineProperty(exports, "level", {
        get: function get3() {
          return defaultLogger.level;
        },
        set: function set(val) {
          defaultLogger.level = val;
        }
      });
      Object.defineProperty(exports, "exceptions", {
        get: function get3() {
          return defaultLogger.exceptions;
        }
      });
      Object.defineProperty(exports, "rejections", {
        get: function get3() {
          return defaultLogger.rejections;
        }
      });
      ["exitOnError"].forEach(function(prop) {
        Object.defineProperty(exports, prop, {
          get: function get3() {
            return defaultLogger[prop];
          },
          set: function set(val) {
            defaultLogger[prop] = val;
          }
        });
      });
      Object.defineProperty(exports, "default", {
        get: function get3() {
          return {
            exceptionHandlers: defaultLogger.exceptionHandlers,
            rejectionHandlers: defaultLogger.rejectionHandlers,
            transports: defaultLogger.transports
          };
        }
      });
      warn.deprecated(exports, "setLevels");
      warn.forFunctions(exports, "useFormat", ["cli"]);
      warn.forProperties(exports, "useFormat", ["padLevels", "stripColors"]);
      warn.forFunctions(exports, "deprecated", ["addRewriter", "addFilter", "clone", "extend"]);
      warn.forProperties(exports, "deprecated", ["emitErrs", "levelLength"]);
    }
  });

  // node_modules/@opengsn/provider/dist/ClientWinstonLogger.js
  var require_ClientWinstonLogger = __commonJS({
    "node_modules/@opengsn/provider/dist/ClientWinstonLogger.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var loglevel_1 = __importDefault(require_loglevel());
      var winston_1 = __importDefault(require_winston());
      var Version_1 = require_Version();
      var format3 = winston_1.default.format.combine(winston_1.default.format.uncolorize(), winston_1.default.format.timestamp(), winston_1.default.format.simple());
      var service = "gsn-client";
      var userIdKey = "gsnuser";
      var isBrowser = typeof window !== "undefined";
      function getOrCreateUserId() {
        let userId = window.localStorage[userIdKey];
        if (userId == null) {
          userId = `${userIdKey}${Date.now() % 1e6}`;
          window.localStorage[userIdKey] = userId;
        }
        return userId;
      }
      function createClientLogger(loggerConfiguration) {
        var _a;
        loggerConfiguration = loggerConfiguration !== null && loggerConfiguration !== void 0 ? loggerConfiguration : { logLevel: "info" };
        if (loggerConfiguration.loggerUrl == null || typeof window === "undefined" || window.localStorage == null) {
          loglevel_1.default.setLevel(loggerConfiguration.logLevel);
          return loglevel_1.default;
        }
        const url = new URL(loggerConfiguration.loggerUrl);
        const host = url.host;
        const path = url.pathname;
        const ssl = url.protocol === "https:";
        const headers = { "content-type": "text/plain" };
        const httpTransportOptions = {
          ssl,
          format: format3,
          host,
          path,
          headers
        };
        const transports = [
          new winston_1.default.transports.Console({
            format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())
          }),
          new winston_1.default.transports.Http(httpTransportOptions)
        ];
        let userId;
        if (loggerConfiguration.userId != null) {
          userId = loggerConfiguration.userId;
        } else {
          userId = getOrCreateUserId();
        }
        const localhostRegExp = /http:\/\/(localhost)|\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/;
        let applicationId = loggerConfiguration.applicationId;
        if (loggerConfiguration.applicationId == null && ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href) != null && window.location.href.match(localhostRegExp) == null) {
          applicationId = window.location.href;
        }
        const logger = winston_1.default.createLogger({
          level: loggerConfiguration.logLevel,
          defaultMeta: {
            version: Version_1.gsnRuntimeVersion,
            service,
            isBrowser,
            applicationId,
            userId
          },
          transports
        });
        logger.debug(`Created remote logs collecting logger for userId: ${userId} and applicationId: ${applicationId}`);
        if (applicationId == null) {
          logger.warn("application ID is not set!");
        }
        return logger;
      }
      exports.createClientLogger = createClientLogger;
    }
  });

  // node_modules/decimal.js/decimal.js
  var require_decimal = __commonJS({
    "node_modules/decimal.js/decimal.js"(exports, module) {
      init_process();
      init_buffer();
      (function(globalScope) {
        "use strict";
        var EXP_LIMIT = 9e15, MAX_DIGITS = 1e9, NUMERALS = "0123456789abcdef", LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", DEFAULTS = {
          // These values must be integers within the stated ranges (inclusive).
          // Most of these values can be changed at run-time using the `Decimal.config` method.
          // The maximum number of significant digits of the result of a calculation or base conversion.
          // E.g. `Decimal.config({ precision: 20 });`
          precision: 20,
          // 1 to MAX_DIGITS
          // The rounding mode used when rounding to `precision`.
          //
          // ROUND_UP         0 Away from zero.
          // ROUND_DOWN       1 Towards zero.
          // ROUND_CEIL       2 Towards +Infinity.
          // ROUND_FLOOR      3 Towards -Infinity.
          // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          //
          // E.g.
          // `Decimal.rounding = 4;`
          // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
          rounding: 4,
          // 0 to 8
          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP         0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
          // FLOOR      3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN  6 The IEEE 754 remainder function.
          // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
          //
          // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
          // division (9) are commonly used for the modulus operation. The other rounding modes can also
          // be used, but they may not give useful results.
          modulo: 1,
          // 0 to 9
          // The exponent value at and beneath which `toString` returns exponential notation.
          // JavaScript numbers: -7
          toExpNeg: -7,
          // 0 to -EXP_LIMIT
          // The exponent value at and above which `toString` returns exponential notation.
          // JavaScript numbers: 21
          toExpPos: 21,
          // 0 to EXP_LIMIT
          // The minimum exponent value, beneath which underflow to zero occurs.
          // JavaScript numbers: -324  (5e-324)
          minE: -EXP_LIMIT,
          // -1 to -EXP_LIMIT
          // The maximum exponent value, above which overflow to Infinity occurs.
          // JavaScript numbers: 308  (1.7976931348623157e+308)
          maxE: EXP_LIMIT,
          // 1 to EXP_LIMIT
          // Whether to use cryptographically-secure random number generation, if available.
          crypto: false
          // true/false
        }, Decimal, inexact, noConflict, quadrant, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", precisionLimitExceeded = decimalError + "Precision limit exceeded", cryptoUnavailable = decimalError + "crypto unavailable", tag = "[object Decimal]", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, P = { toStringTag: tag };
        P.absoluteValue = P.abs = function() {
          var x = new this.constructor(this);
          if (x.s < 0) x.s = 1;
          return finalise(x);
        };
        P.ceil = function() {
          return finalise(new this.constructor(this), this.e + 1, 2);
        };
        P.clampedTo = P.clamp = function(min2, max2) {
          var k, x = this, Ctor = x.constructor;
          min2 = new Ctor(min2);
          max2 = new Ctor(max2);
          if (!min2.s || !max2.s) return new Ctor(NaN);
          if (min2.gt(max2)) throw Error(invalidArgument + max2);
          k = x.cmp(min2);
          return k < 0 ? min2 : x.cmp(max2) > 0 ? max2 : new Ctor(x);
        };
        P.comparedTo = P.cmp = function(y) {
          var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
          if (!xd || !yd) {
            return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
          }
          if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;
          if (xs !== ys) return xs;
          if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
          xdL = xd.length;
          ydL = yd.length;
          for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
            if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
          }
          return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
        };
        P.cosine = P.cos = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (!x.d) return new Ctor(NaN);
          if (!x.d[0]) return new Ctor(1);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
          Ctor.rounding = 1;
          x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
        };
        P.cubeRoot = P.cbrt = function() {
          var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
          if (!x.isFinite() || x.isZero()) return new Ctor(x);
          external = false;
          s = x.s * mathpow(x.s * x, 1 / 3);
          if (!s || Math.abs(s) == 1 / 0) {
            n = digitsToString(x.d);
            e = x.e;
            if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? "0" : "00";
            s = mathpow(n, 1 / 3);
            e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new Ctor(n);
            r.s = x.s;
          } else {
            r = new Ctor(s.toString());
          }
          sd = (e = Ctor.precision) + 3;
          for (; ; ) {
            t = r;
            t3 = t.times(t).times(t);
            t3plusx = t3.plus(x);
            r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
              n = n.slice(sd - 3, sd + 1);
              if (n == "9999" || !rep && n == "4999") {
                if (!rep) {
                  finalise(t, e + 1, 0);
                  if (t.times(t).times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }
                sd += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                  finalise(r, e + 1, 1);
                  m = !r.times(r).times(r).eq(x);
                }
                break;
              }
            }
          }
          external = true;
          return finalise(r, e, Ctor.rounding, m);
        };
        P.decimalPlaces = P.dp = function() {
          var w, d = this.d, n = NaN;
          if (d) {
            w = d.length - 1;
            n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
            w = d[w];
            if (w) for (; w % 10 == 0; w /= 10) n--;
            if (n < 0) n = 0;
          }
          return n;
        };
        P.dividedBy = P.div = function(y) {
          return divide(this, new this.constructor(y));
        };
        P.dividedToIntegerBy = P.divToInt = function(y) {
          var x = this, Ctor = x.constructor;
          return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
        };
        P.equals = P.eq = function(y) {
          return this.cmp(y) === 0;
        };
        P.floor = function() {
          return finalise(new this.constructor(this), this.e + 1, 3);
        };
        P.greaterThan = P.gt = function(y) {
          return this.cmp(y) > 0;
        };
        P.greaterThanOrEqualTo = P.gte = function(y) {
          var k = this.cmp(y);
          return k == 1 || k === 0;
        };
        P.hyperbolicCosine = P.cosh = function() {
          var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
          if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
          if (x.isZero()) return one;
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
          Ctor.rounding = 1;
          len = x.d.length;
          if (len < 32) {
            k = Math.ceil(len / 3);
            n = (1 / tinyPow(4, k)).toString();
          } else {
            k = 16;
            n = "2.3283064365386962890625e-10";
          }
          x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
          var cosh2_x, i = k, d8 = new Ctor(8);
          for (; i--; ) {
            cosh2_x = x.times(x);
            x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
          }
          return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
        };
        P.hyperbolicSine = P.sinh = function() {
          var k, pr, rm, len, x = this, Ctor = x.constructor;
          if (!x.isFinite() || x.isZero()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
          Ctor.rounding = 1;
          len = x.d.length;
          if (len < 3) {
            x = taylorSeries(Ctor, 2, x, x, true);
          } else {
            k = 1.4 * Math.sqrt(len);
            k = k > 16 ? 16 : k | 0;
            x = x.times(1 / tinyPow(5, k));
            x = taylorSeries(Ctor, 2, x, x, true);
            var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
            for (; k--; ) {
              sinh2_x = x.times(x);
              x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
            }
          }
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return finalise(x, pr, rm, true);
        };
        P.hyperbolicTangent = P.tanh = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (!x.isFinite()) return new Ctor(x.s);
          if (x.isZero()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + 7;
          Ctor.rounding = 1;
          return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
        };
        P.inverseCosine = P.acos = function() {
          var x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
          if (k !== -1) {
            return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
          }
          if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);
          Ctor.precision = pr + 6;
          Ctor.rounding = 1;
          x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return x.times(2);
        };
        P.inverseHyperbolicCosine = P.acosh = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
          if (!x.isFinite()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
          Ctor.rounding = 1;
          external = false;
          x = x.times(x).minus(1).sqrt().plus(x);
          external = true;
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return x.ln();
        };
        P.inverseHyperbolicSine = P.asinh = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (!x.isFinite() || x.isZero()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
          Ctor.rounding = 1;
          external = false;
          x = x.times(x).plus(1).sqrt().plus(x);
          external = true;
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return x.ln();
        };
        P.inverseHyperbolicTangent = P.atanh = function() {
          var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
          if (!x.isFinite()) return new Ctor(NaN);
          if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          xsd = x.sd();
          if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
          Ctor.precision = wpr = xsd - x.e;
          x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
          Ctor.precision = pr + 4;
          Ctor.rounding = 1;
          x = x.ln();
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return x.times(0.5);
        };
        P.inverseSine = P.asin = function() {
          var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
          if (x.isZero()) return new Ctor(x);
          k = x.abs().cmp(1);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          if (k !== -1) {
            if (k === 0) {
              halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
              halfPi.s = x.s;
              return halfPi;
            }
            return new Ctor(NaN);
          }
          Ctor.precision = pr + 6;
          Ctor.rounding = 1;
          x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return x.times(2);
        };
        P.inverseTangent = P.atan = function() {
          var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
          if (!x.isFinite()) {
            if (!x.s) return new Ctor(NaN);
            if (pr + 4 <= PI_PRECISION) {
              r = getPi(Ctor, pr + 4, rm).times(0.5);
              r.s = x.s;
              return r;
            }
          } else if (x.isZero()) {
            return new Ctor(x);
          } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.25);
            r.s = x.s;
            return r;
          }
          Ctor.precision = wpr = pr + 10;
          Ctor.rounding = 1;
          k = Math.min(28, wpr / LOG_BASE + 2 | 0);
          for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));
          external = false;
          j = Math.ceil(wpr / LOG_BASE);
          n = 1;
          x2 = x.times(x);
          r = new Ctor(x);
          px = x;
          for (; i !== -1; ) {
            px = px.times(x2);
            t = r.minus(px.div(n += 2));
            px = px.times(x2);
            r = t.plus(px.div(n += 2));
            if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--; ) ;
          }
          if (k) r = r.times(2 << k - 1);
          external = true;
          return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
        };
        P.isFinite = function() {
          return !!this.d;
        };
        P.isInteger = P.isInt = function() {
          return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = P.isNeg = function() {
          return this.s < 0;
        };
        P.isPositive = P.isPos = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.d && this.d[0] === 0;
        };
        P.lessThan = P.lt = function(y) {
          return this.cmp(y) < 0;
        };
        P.lessThanOrEqualTo = P.lte = function(y) {
          return this.cmp(y) < 1;
        };
        P.logarithm = P.log = function(base2) {
          var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
          if (base2 == null) {
            base2 = new Ctor(10);
            isBase10 = true;
          } else {
            base2 = new Ctor(base2);
            d = base2.d;
            if (base2.s < 0 || !d || !d[0] || base2.eq(1)) return new Ctor(NaN);
            isBase10 = base2.eq(10);
          }
          d = arg.d;
          if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
            return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
          }
          if (isBase10) {
            if (d.length > 1) {
              inf = true;
            } else {
              for (k = d[0]; k % 10 === 0; ) k /= 10;
              inf = k !== 1;
            }
          }
          external = false;
          sd = pr + guard;
          num = naturalLogarithm(arg, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base2, sd);
          r = divide(num, denominator, sd, 1);
          if (checkRoundingDigits(r.d, k = pr, rm)) {
            do {
              sd += 10;
              num = naturalLogarithm(arg, sd);
              denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base2, sd);
              r = divide(num, denominator, sd, 1);
              if (!inf) {
                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                  r = finalise(r, pr + 1, 0);
                }
                break;
              }
            } while (checkRoundingDigits(r.d, k += 10, rm));
          }
          external = true;
          return finalise(r, pr, rm);
        };
        P.minus = P.sub = function(y) {
          var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
          y = new Ctor(y);
          if (!x.d || !y.d) {
            if (!x.s || !y.s) y = new Ctor(NaN);
            else if (x.d) y.s = -y.s;
            else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
            return y;
          }
          if (x.s != y.s) {
            y.s = -y.s;
            return x.plus(y);
          }
          xd = x.d;
          yd = y.d;
          pr = Ctor.precision;
          rm = Ctor.rounding;
          if (!xd[0] || !yd[0]) {
            if (yd[0]) y.s = -y.s;
            else if (xd[0]) y = new Ctor(x);
            else return new Ctor(rm === 3 ? -0 : 0);
            return external ? finalise(y, pr, rm) : y;
          }
          e = mathfloor(y.e / LOG_BASE);
          xe = mathfloor(x.e / LOG_BASE);
          xd = xd.slice();
          k = xe - e;
          if (k) {
            xLTy = k < 0;
            if (xLTy) {
              d = xd;
              k = -k;
              len = yd.length;
            } else {
              d = yd;
              e = xe;
              len = xd.length;
            }
            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
            if (k > i) {
              k = i;
              d.length = 1;
            }
            d.reverse();
            for (i = k; i--; ) d.push(0);
            d.reverse();
          } else {
            i = xd.length;
            len = yd.length;
            xLTy = i < len;
            if (xLTy) len = i;
            for (i = 0; i < len; i++) {
              if (xd[i] != yd[i]) {
                xLTy = xd[i] < yd[i];
                break;
              }
            }
            k = 0;
          }
          if (xLTy) {
            d = xd;
            xd = yd;
            yd = d;
            y.s = -y.s;
          }
          len = xd.length;
          for (i = yd.length - len; i > 0; --i) xd[len++] = 0;
          for (i = yd.length; i > k; ) {
            if (xd[--i] < yd[i]) {
              for (j = i; j && xd[--j] === 0; ) xd[j] = BASE - 1;
              --xd[j];
              xd[i] += BASE;
            }
            xd[i] -= yd[i];
          }
          for (; xd[--len] === 0; ) xd.pop();
          for (; xd[0] === 0; xd.shift()) --e;
          if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
          y.d = xd;
          y.e = getBase10Exponent(xd, e);
          return external ? finalise(y, pr, rm) : y;
        };
        P.modulo = P.mod = function(y) {
          var q, x = this, Ctor = x.constructor;
          y = new Ctor(y);
          if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);
          if (!y.d || x.d && !x.d[0]) {
            return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
          }
          external = false;
          if (Ctor.modulo == 9) {
            q = divide(x, y.abs(), 0, 3, 1);
            q.s *= y.s;
          } else {
            q = divide(x, y, 0, Ctor.modulo, 1);
          }
          q = q.times(y);
          external = true;
          return x.minus(q);
        };
        P.naturalExponential = P.exp = function() {
          return naturalExponential(this);
        };
        P.naturalLogarithm = P.ln = function() {
          return naturalLogarithm(this);
        };
        P.negated = P.neg = function() {
          var x = new this.constructor(this);
          x.s = -x.s;
          return finalise(x);
        };
        P.plus = P.add = function(y) {
          var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
          y = new Ctor(y);
          if (!x.d || !y.d) {
            if (!x.s || !y.s) y = new Ctor(NaN);
            else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
            return y;
          }
          if (x.s != y.s) {
            y.s = -y.s;
            return x.minus(y);
          }
          xd = x.d;
          yd = y.d;
          pr = Ctor.precision;
          rm = Ctor.rounding;
          if (!xd[0] || !yd[0]) {
            if (!yd[0]) y = new Ctor(x);
            return external ? finalise(y, pr, rm) : y;
          }
          k = mathfloor(x.e / LOG_BASE);
          e = mathfloor(y.e / LOG_BASE);
          xd = xd.slice();
          i = k - e;
          if (i) {
            if (i < 0) {
              d = xd;
              i = -i;
              len = yd.length;
            } else {
              d = yd;
              e = k;
              len = xd.length;
            }
            k = Math.ceil(pr / LOG_BASE);
            len = k > len ? k + 1 : len + 1;
            if (i > len) {
              i = len;
              d.length = 1;
            }
            d.reverse();
            for (; i--; ) d.push(0);
            d.reverse();
          }
          len = xd.length;
          i = yd.length;
          if (len - i < 0) {
            i = len;
            d = yd;
            yd = xd;
            xd = d;
          }
          for (carry = 0; i; ) {
            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
            xd[i] %= BASE;
          }
          if (carry) {
            xd.unshift(carry);
            ++e;
          }
          for (len = xd.length; xd[--len] == 0; ) xd.pop();
          y.d = xd;
          y.e = getBase10Exponent(xd, e);
          return external ? finalise(y, pr, rm) : y;
        };
        P.precision = P.sd = function(z) {
          var k, x = this;
          if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
          if (x.d) {
            k = getPrecision(x.d);
            if (z && x.e + 1 > k) k = x.e + 1;
          } else {
            k = NaN;
          }
          return k;
        };
        P.round = function() {
          var x = this, Ctor = x.constructor;
          return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
        };
        P.sine = P.sin = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (!x.isFinite()) return new Ctor(NaN);
          if (x.isZero()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
          Ctor.rounding = 1;
          x = sine(Ctor, toLessThanHalfPi(Ctor, x));
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
          if (s !== 1 || !d || !d[0]) {
            return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
          }
          external = false;
          s = Math.sqrt(+x);
          if (s == 0 || s == 1 / 0) {
            n = digitsToString(d);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(n);
            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new Ctor(n);
          } else {
            r = new Ctor(s.toString());
          }
          sd = (e = Ctor.precision) + 3;
          for (; ; ) {
            t = r;
            r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
            if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
              n = n.slice(sd - 3, sd + 1);
              if (n == "9999" || !rep && n == "4999") {
                if (!rep) {
                  finalise(t, e + 1, 0);
                  if (t.times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }
                sd += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                  finalise(r, e + 1, 1);
                  m = !r.times(r).eq(x);
                }
                break;
              }
            }
          }
          external = true;
          return finalise(r, e, Ctor.rounding, m);
        };
        P.tangent = P.tan = function() {
          var pr, rm, x = this, Ctor = x.constructor;
          if (!x.isFinite()) return new Ctor(NaN);
          if (x.isZero()) return new Ctor(x);
          pr = Ctor.precision;
          rm = Ctor.rounding;
          Ctor.precision = pr + 10;
          Ctor.rounding = 1;
          x = x.sin();
          x.s = 1;
          x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
          Ctor.precision = pr;
          Ctor.rounding = rm;
          return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
        };
        P.times = P.mul = function(y) {
          var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
          y.s *= x.s;
          if (!xd || !xd[0] || !yd || !yd[0]) {
            return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
          }
          e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
          xdL = xd.length;
          ydL = yd.length;
          if (xdL < ydL) {
            r = xd;
            xd = yd;
            yd = r;
            rL = xdL;
            xdL = ydL;
            ydL = rL;
          }
          r = [];
          rL = xdL + ydL;
          for (i = rL; i--; ) r.push(0);
          for (i = ydL; --i >= 0; ) {
            carry = 0;
            for (k = xdL + i; k > i; ) {
              t = r[k] + yd[i] * xd[k - i - 1] + carry;
              r[k--] = t % BASE | 0;
              carry = t / BASE | 0;
            }
            r[k] = (r[k] + carry) % BASE | 0;
          }
          for (; !r[--rL]; ) r.pop();
          if (carry) ++e;
          else r.shift();
          y.d = r;
          y.e = getBase10Exponent(r, e);
          return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
        };
        P.toBinary = function(sd, rm) {
          return toStringBinary(this, 2, sd, rm);
        };
        P.toDecimalPlaces = P.toDP = function(dp, rm) {
          var x = this, Ctor = x.constructor;
          x = new Ctor(x);
          if (dp === void 0) return x;
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          return finalise(x, dp + x.e + 1, rm);
        };
        P.toExponential = function(dp, rm) {
          var str, x = this, Ctor = x.constructor;
          if (dp === void 0) {
            str = finiteToString(x, true);
          } else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x = finalise(new Ctor(x), dp + 1, rm);
            str = finiteToString(x, true, dp + 1);
          }
          return x.isNeg() && !x.isZero() ? "-" + str : str;
        };
        P.toFixed = function(dp, rm) {
          var str, y, x = this, Ctor = x.constructor;
          if (dp === void 0) {
            str = finiteToString(x);
          } else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            y = finalise(new Ctor(x), dp + x.e + 1, rm);
            str = finiteToString(y, false, dp + y.e + 1);
          }
          return x.isNeg() && !x.isZero() ? "-" + str : str;
        };
        P.toFraction = function(maxD) {
          var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
          if (!xd) return new Ctor(x);
          n1 = d0 = new Ctor(1);
          d1 = n0 = new Ctor(0);
          d = new Ctor(d1);
          e = d.e = getPrecision(xd) - x.e - 1;
          k = e % LOG_BASE;
          d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
          if (maxD == null) {
            maxD = e > 0 ? d : n1;
          } else {
            n = new Ctor(maxD);
            if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
            maxD = n.gt(d) ? e > 0 ? d : n1 : n;
          }
          external = false;
          n = new Ctor(digitsToString(xd));
          pr = Ctor.precision;
          Ctor.precision = e = xd.length * LOG_BASE * 2;
          for (; ; ) {
            q = divide(n, d, 0, 1, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.cmp(maxD) == 1) break;
            d0 = d1;
            d1 = d2;
            d2 = n1;
            n1 = n0.plus(q.times(d2));
            n0 = d2;
            d2 = d;
            d = n.minus(q.times(d2));
            n = d2;
          }
          d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
          Ctor.precision = pr;
          external = true;
          return r;
        };
        P.toHexadecimal = P.toHex = function(sd, rm) {
          return toStringBinary(this, 16, sd, rm);
        };
        P.toNearest = function(y, rm) {
          var x = this, Ctor = x.constructor;
          x = new Ctor(x);
          if (y == null) {
            if (!x.d) return x;
            y = new Ctor(1);
            rm = Ctor.rounding;
          } else {
            y = new Ctor(y);
            if (rm === void 0) {
              rm = Ctor.rounding;
            } else {
              checkInt32(rm, 0, 8);
            }
            if (!x.d) return y.s ? x : y;
            if (!y.d) {
              if (y.s) y.s = x.s;
              return y;
            }
          }
          if (y.d[0]) {
            external = false;
            x = divide(x, y, 0, rm, 1).times(y);
            external = true;
            finalise(x);
          } else {
            y.s = x.s;
            x = y;
          }
          return x;
        };
        P.toNumber = function() {
          return +this;
        };
        P.toOctal = function(sd, rm) {
          return toStringBinary(this, 8, sd, rm);
        };
        P.toPower = P.pow = function(y) {
          var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
          if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
          x = new Ctor(x);
          if (x.eq(1)) return x;
          pr = Ctor.precision;
          rm = Ctor.rounding;
          if (y.eq(1)) return finalise(x, pr, rm);
          e = mathfloor(y.e / LOG_BASE);
          if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
            r = intPow(Ctor, x, k, pr);
            return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
          }
          s = x.s;
          if (s < 0) {
            if (e < y.d.length - 1) return new Ctor(NaN);
            if ((y.d[e] & 1) == 0) s = 1;
            if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
              x.s = s;
              return x;
            }
          }
          k = mathpow(+x, yn);
          e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log("0." + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + "").e;
          if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
          external = false;
          Ctor.rounding = x.s = 1;
          k = Math.min(12, (e + "").length);
          r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
          if (r.d) {
            r = finalise(r, pr + 5, 1);
            if (checkRoundingDigits(r.d, pr, rm)) {
              e = pr + 10;
              r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
              if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
                r = finalise(r, pr + 1, 0);
              }
            }
          }
          r.s = s;
          external = true;
          Ctor.rounding = rm;
          return finalise(r, pr, rm);
        };
        P.toPrecision = function(sd, rm) {
          var str, x = this, Ctor = x.constructor;
          if (sd === void 0) {
            str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x = finalise(new Ctor(x), sd, rm);
            str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
          }
          return x.isNeg() && !x.isZero() ? "-" + str : str;
        };
        P.toSignificantDigits = P.toSD = function(sd, rm) {
          var x = this, Ctor = x.constructor;
          if (sd === void 0) {
            sd = Ctor.precision;
            rm = Ctor.rounding;
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
          }
          return finalise(new Ctor(x), sd, rm);
        };
        P.toString = function() {
          var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
          return x.isNeg() && !x.isZero() ? "-" + str : str;
        };
        P.truncated = P.trunc = function() {
          return finalise(new this.constructor(this), this.e + 1, 1);
        };
        P.valueOf = P.toJSON = function() {
          var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
          return x.isNeg() ? "-" + str : str;
        };
        function digitsToString(d) {
          var i, k, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
          if (indexOfLastWord > 0) {
            str += w;
            for (i = 1; i < indexOfLastWord; i++) {
              ws = d[i] + "";
              k = LOG_BASE - ws.length;
              if (k) str += getZeroString(k);
              str += ws;
            }
            w = d[i];
            ws = w + "";
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
          } else if (w === 0) {
            return "0";
          }
          for (; w % 10 === 0; ) w /= 10;
          return str + w;
        }
        function checkInt32(i, min2, max2) {
          if (i !== ~~i || i < min2 || i > max2) {
            throw Error(invalidArgument + i);
          }
        }
        function checkRoundingDigits(d, i, rm, repeating) {
          var di, k, r, rd;
          for (k = d[0]; k >= 10; k /= 10) --i;
          if (--i < 0) {
            i += LOG_BASE;
            di = 0;
          } else {
            di = Math.ceil((i + 1) / LOG_BASE);
            i %= LOG_BASE;
          }
          k = mathpow(10, LOG_BASE - i);
          rd = d[di] % k | 0;
          if (repeating == null) {
            if (i < 3) {
              if (i == 0) rd = rd / 100 | 0;
              else if (i == 1) rd = rd / 10 | 0;
              r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;
            } else {
              r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
            }
          } else {
            if (i < 4) {
              if (i == 0) rd = rd / 1e3 | 0;
              else if (i == 1) rd = rd / 100 | 0;
              else if (i == 2) rd = rd / 10 | 0;
              r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
            } else {
              r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;
            }
          }
          return r;
        }
        function convertBase(str, baseIn, baseOut) {
          var j, arr = [0], arrL, i = 0, strL = str.length;
          for (; i < strL; ) {
            for (arrL = arr.length; arrL--; ) arr[arrL] *= baseIn;
            arr[0] += NUMERALS.indexOf(str.charAt(i++));
            for (j = 0; j < arr.length; j++) {
              if (arr[j] > baseOut - 1) {
                if (arr[j + 1] === void 0) arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
              }
            }
          }
          return arr.reverse();
        }
        function cosine(Ctor, x) {
          var k, len, y;
          if (x.isZero()) return x;
          len = x.d.length;
          if (len < 32) {
            k = Math.ceil(len / 3);
            y = (1 / tinyPow(4, k)).toString();
          } else {
            k = 16;
            y = "2.3283064365386962890625e-10";
          }
          Ctor.precision += k;
          x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
          for (var i = k; i--; ) {
            var cos2x = x.times(x);
            x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
          }
          Ctor.precision -= k;
          return x;
        }
        var divide = /* @__PURE__ */ (function() {
          function multiplyInteger(x, k, base2) {
            var temp, carry = 0, i = x.length;
            for (x = x.slice(); i--; ) {
              temp = x[i] * k + carry;
              x[i] = temp % base2 | 0;
              carry = temp / base2 | 0;
            }
            if (carry) x.unshift(carry);
            return x;
          }
          function compare6(a, b, aL, bL) {
            var i, r;
            if (aL != bL) {
              r = aL > bL ? 1 : -1;
            } else {
              for (i = r = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  r = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return r;
          }
          function subtract(a, b, aL, base2) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base2 + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; ) a.shift();
          }
          return function(x, y, pr, rm, dp, base2) {
            var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
            if (!xd || !xd[0] || !yd || !yd[0]) {
              return new Ctor(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : (
                  // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
                  xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0
                )
              );
            }
            if (base2) {
              logBase = 1;
              e = x.e - y.e;
            } else {
              base2 = BASE;
              logBase = LOG_BASE;
              e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
            }
            yL = yd.length;
            xL = xd.length;
            q = new Ctor(sign2);
            qd = q.d = [];
            for (i = 0; yd[i] == (xd[i] || 0); i++) ;
            if (yd[i] > (xd[i] || 0)) e--;
            if (pr == null) {
              sd = pr = Ctor.precision;
              rm = Ctor.rounding;
            } else if (dp) {
              sd = pr + (x.e - y.e) + 1;
            } else {
              sd = pr;
            }
            if (sd < 0) {
              qd.push(1);
              more = true;
            } else {
              sd = sd / logBase + 2 | 0;
              i = 0;
              if (yL == 1) {
                k = 0;
                yd = yd[0];
                sd++;
                for (; (i < xL || k) && sd--; i++) {
                  t = k * base2 + (xd[i] || 0);
                  qd[i] = t / yd | 0;
                  k = t % yd | 0;
                }
                more = k || i < xL;
              } else {
                k = base2 / (yd[0] + 1) | 0;
                if (k > 1) {
                  yd = multiplyInteger(yd, k, base2);
                  xd = multiplyInteger(xd, k, base2);
                  yL = yd.length;
                  xL = xd.length;
                }
                xi = yL;
                rem = xd.slice(0, yL);
                remL = rem.length;
                for (; remL < yL; ) rem[remL++] = 0;
                yz = yd.slice();
                yz.unshift(0);
                yd0 = yd[0];
                if (yd[1] >= base2 / 2) ++yd0;
                do {
                  k = 0;
                  cmp = compare6(yd, rem, yL, remL);
                  if (cmp < 0) {
                    rem0 = rem[0];
                    if (yL != remL) rem0 = rem0 * base2 + (rem[1] || 0);
                    k = rem0 / yd0 | 0;
                    if (k > 1) {
                      if (k >= base2) k = base2 - 1;
                      prod = multiplyInteger(yd, k, base2);
                      prodL = prod.length;
                      remL = rem.length;
                      cmp = compare6(prod, rem, prodL, remL);
                      if (cmp == 1) {
                        k--;
                        subtract(prod, yL < prodL ? yz : yd, prodL, base2);
                      }
                    } else {
                      if (k == 0) cmp = k = 1;
                      prod = yd.slice();
                    }
                    prodL = prod.length;
                    if (prodL < remL) prod.unshift(0);
                    subtract(rem, prod, remL, base2);
                    if (cmp == -1) {
                      remL = rem.length;
                      cmp = compare6(yd, rem, yL, remL);
                      if (cmp < 1) {
                        k++;
                        subtract(rem, yL < remL ? yz : yd, remL, base2);
                      }
                    }
                    remL = rem.length;
                  } else if (cmp === 0) {
                    k++;
                    rem = [0];
                  }
                  qd[i++] = k;
                  if (cmp && rem[0]) {
                    rem[remL++] = xd[xi] || 0;
                  } else {
                    rem = [xd[xi]];
                    remL = 1;
                  }
                } while ((xi++ < xL || rem[0] !== void 0) && sd--);
                more = rem[0] !== void 0;
              }
              if (!qd[0]) qd.shift();
            }
            if (logBase == 1) {
              q.e = e;
              inexact = more;
            } else {
              for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
              q.e = i + e * logBase - 1;
              finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
            }
            return q;
          };
        })();
        function finalise(x, sd, rm, isTruncated) {
          var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
          out: if (sd != null) {
            xd = x.d;
            if (!xd) return x;
            for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
            i = sd - digits;
            if (i < 0) {
              i += LOG_BASE;
              j = sd;
              w = xd[xdi = 0];
              rd = w / mathpow(10, digits - j - 1) % 10 | 0;
            } else {
              xdi = Math.ceil((i + 1) / LOG_BASE);
              k = xd.length;
              if (xdi >= k) {
                if (isTruncated) {
                  for (; k++ <= xdi; ) xd.push(0);
                  w = rd = 0;
                  digits = 1;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + 1;
                } else {
                  break out;
                }
              } else {
                w = k = xd[xdi];
                for (digits = 1; k >= 10; k /= 10) digits++;
                i %= LOG_BASE;
                j = i - LOG_BASE + digits;
                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
              }
            }
            isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
            roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
            (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
            if (sd < 1 || !xd[0]) {
              xd.length = 0;
              if (roundUp) {
                sd -= x.e + 1;
                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
                x.e = -sd || 0;
              } else {
                xd[0] = x.e = 0;
              }
              return x;
            }
            if (i == 0) {
              xd.length = xdi;
              k = 1;
              xdi--;
            } else {
              xd.length = xdi + 1;
              k = mathpow(10, LOG_BASE - i);
              xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
            }
            if (roundUp) {
              for (; ; ) {
                if (xdi == 0) {
                  for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
                  j = xd[0] += k;
                  for (k = 1; j >= 10; j /= 10) k++;
                  if (i != k) {
                    x.e++;
                    if (xd[0] == BASE) xd[0] = 1;
                  }
                  break;
                } else {
                  xd[xdi] += k;
                  if (xd[xdi] != BASE) break;
                  xd[xdi--] = 0;
                  k = 1;
                }
              }
            }
            for (i = xd.length; xd[--i] === 0; ) xd.pop();
          }
          if (external) {
            if (x.e > Ctor.maxE) {
              x.d = null;
              x.e = NaN;
            } else if (x.e < Ctor.minE) {
              x.e = 0;
              x.d = [0];
            }
          }
          return x;
        }
        function finiteToString(x, isExp, sd) {
          if (!x.isFinite()) return nonFiniteToString(x);
          var k, e = x.e, str = digitsToString(x.d), len = str.length;
          if (isExp) {
            if (sd && (k = sd - len) > 0) {
              str = str.charAt(0) + "." + str.slice(1) + getZeroString(k);
            } else if (len > 1) {
              str = str.charAt(0) + "." + str.slice(1);
            }
            str = str + (x.e < 0 ? "e" : "e+") + x.e;
          } else if (e < 0) {
            str = "0." + getZeroString(-e - 1) + str;
            if (sd && (k = sd - len) > 0) str += getZeroString(k);
          } else if (e >= len) {
            str += getZeroString(e + 1 - len);
            if (sd && (k = sd - e - 1) > 0) str = str + "." + getZeroString(k);
          } else {
            if ((k = e + 1) < len) str = str.slice(0, k) + "." + str.slice(k);
            if (sd && (k = sd - len) > 0) {
              if (e + 1 === len) str += ".";
              str += getZeroString(k);
            }
          }
          return str;
        }
        function getBase10Exponent(digits, e) {
          var w = digits[0];
          for (e *= LOG_BASE; w >= 10; w /= 10) e++;
          return e;
        }
        function getLn10(Ctor, sd, pr) {
          if (sd > LN10_PRECISION) {
            external = true;
            if (pr) Ctor.precision = pr;
            throw Error(precisionLimitExceeded);
          }
          return finalise(new Ctor(LN10), sd, 1, true);
        }
        function getPi(Ctor, sd, rm) {
          if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
          return finalise(new Ctor(PI), sd, rm, true);
        }
        function getPrecision(digits) {
          var w = digits.length - 1, len = w * LOG_BASE + 1;
          w = digits[w];
          if (w) {
            for (; w % 10 == 0; w /= 10) len--;
            for (w = digits[0]; w >= 10; w /= 10) len++;
          }
          return len;
        }
        function getZeroString(k) {
          var zs = "";
          for (; k--; ) zs += "0";
          return zs;
        }
        function intPow(Ctor, x, n, pr) {
          var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
          external = false;
          for (; ; ) {
            if (n % 2) {
              r = r.times(x);
              if (truncate2(r.d, k)) isTruncated = true;
            }
            n = mathfloor(n / 2);
            if (n === 0) {
              n = r.d.length - 1;
              if (isTruncated && r.d[n] === 0) ++r.d[n];
              break;
            }
            x = x.times(x);
            truncate2(x.d, k);
          }
          external = true;
          return r;
        }
        function isOdd(n) {
          return n.d[n.d.length - 1] & 1;
        }
        function maxOrMin(Ctor, args, n) {
          var k, y, x = new Ctor(args[0]), i = 0;
          for (; ++i < args.length; ) {
            y = new Ctor(args[i]);
            if (!y.s) {
              x = y;
              break;
            }
            k = x.cmp(y);
            if (k === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function naturalExponential(x, sd) {
          var denominator, guard, j, pow2, sum2, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
          if (!x.d || !x.d[0] || x.e > 17) {
            return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
          }
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          t = new Ctor(0.03125);
          while (x.e > -2) {
            x = x.times(t);
            k += 5;
          }
          guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
          wpr += guard;
          denominator = pow2 = sum2 = new Ctor(1);
          Ctor.precision = wpr;
          for (; ; ) {
            pow2 = finalise(pow2.times(x), wpr, 1);
            denominator = denominator.times(++i);
            t = sum2.plus(divide(pow2, denominator, wpr, 1));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
              j = k;
              while (j--) sum2 = finalise(sum2.times(sum2), wpr, 1);
              if (sd == null) {
                if (rep < 3 && checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
                  Ctor.precision = wpr += 10;
                  denominator = pow2 = t = new Ctor(1);
                  i = 0;
                  rep++;
                } else {
                  return finalise(sum2, Ctor.precision = pr, rm, external = true);
                }
              } else {
                Ctor.precision = pr;
                return sum2;
              }
            }
            sum2 = t;
          }
        }
        function naturalLogarithm(y, sd) {
          var c, c0, denominator, e, numerator, rep, sum2, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
          if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
            return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
          }
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          Ctor.precision = wpr += guard;
          c = digitsToString(xd);
          c0 = c.charAt(0);
          if (Math.abs(e = x.e) < 15e14) {
            while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
              x = x.times(y);
              c = digitsToString(x.d);
              c0 = c.charAt(0);
              n++;
            }
            e = x.e;
            if (c0 > 1) {
              x = new Ctor("0." + c);
              e++;
            } else {
              x = new Ctor(c0 + "." + c.slice(1));
            }
          } else {
            t = getLn10(Ctor, wpr + 2, pr).times(e + "");
            x = naturalLogarithm(new Ctor(c0 + "." + c.slice(1)), wpr - guard).plus(t);
            Ctor.precision = pr;
            return sd == null ? finalise(x, pr, rm, external = true) : x;
          }
          x1 = x;
          sum2 = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
          x2 = finalise(x.times(x), wpr, 1);
          denominator = 3;
          for (; ; ) {
            numerator = finalise(numerator.times(x2), wpr, 1);
            t = sum2.plus(divide(numerator, new Ctor(denominator), wpr, 1));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
              sum2 = sum2.times(2);
              if (e !== 0) sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
              sum2 = divide(sum2, new Ctor(n), wpr, 1);
              if (sd == null) {
                if (checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
                  Ctor.precision = wpr += guard;
                  t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                  x2 = finalise(x.times(x), wpr, 1);
                  denominator = rep = 1;
                } else {
                  return finalise(sum2, Ctor.precision = pr, rm, external = true);
                }
              } else {
                Ctor.precision = pr;
                return sum2;
              }
            }
            sum2 = t;
            denominator += 2;
          }
        }
        function nonFiniteToString(x) {
          return String(x.s * x.s / 0);
        }
        function parseDecimal(x, str) {
          var e, i, len;
          if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
          if ((i = str.search(/e/i)) > 0) {
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {
            e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(len - 1) === 48; --len) ;
          str = str.slice(i, len);
          if (str) {
            len -= i;
            x.e = e = e - i - 1;
            x.d = [];
            i = (e + 1) % LOG_BASE;
            if (e < 0) i += LOG_BASE;
            if (i < len) {
              if (i) x.d.push(+str.slice(0, i));
              for (len -= LOG_BASE; i < len; ) x.d.push(+str.slice(i, i += LOG_BASE));
              str = str.slice(i);
              i = LOG_BASE - str.length;
            } else {
              i -= len;
            }
            for (; i--; ) str += "0";
            x.d.push(+str);
            if (external) {
              if (x.e > x.constructor.maxE) {
                x.d = null;
                x.e = NaN;
              } else if (x.e < x.constructor.minE) {
                x.e = 0;
                x.d = [0];
              }
            }
          } else {
            x.e = 0;
            x.d = [0];
          }
          return x;
        }
        function parseOther(x, str) {
          var base2, Ctor, divisor, i, isFloat, len, p, xd, xe;
          if (str.indexOf("_") > -1) {
            str = str.replace(/(\d)_(?=\d)/g, "$1");
            if (isDecimal.test(str)) return parseDecimal(x, str);
          } else if (str === "Infinity" || str === "NaN") {
            if (!+str) x.s = NaN;
            x.e = NaN;
            x.d = null;
            return x;
          }
          if (isHex.test(str)) {
            base2 = 16;
            str = str.toLowerCase();
          } else if (isBinary.test(str)) {
            base2 = 2;
          } else if (isOctal.test(str)) {
            base2 = 8;
          } else {
            throw Error(invalidArgument + str);
          }
          i = str.search(/p/i);
          if (i > 0) {
            p = +str.slice(i + 1);
            str = str.substring(2, i);
          } else {
            str = str.slice(2);
          }
          i = str.indexOf(".");
          isFloat = i >= 0;
          Ctor = x.constructor;
          if (isFloat) {
            str = str.replace(".", "");
            len = str.length;
            i = len - i;
            divisor = intPow(Ctor, new Ctor(base2), i, i * 2);
          }
          xd = convertBase(str, base2, BASE);
          xe = xd.length - 1;
          for (i = xe; xd[i] === 0; --i) xd.pop();
          if (i < 0) return new Ctor(x.s * 0);
          x.e = getBase10Exponent(xd, xe);
          x.d = xd;
          external = false;
          if (isFloat) x = divide(x, divisor, len * 4);
          if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
          external = true;
          return x;
        }
        function sine(Ctor, x) {
          var k, len = x.d.length;
          if (len < 3) {
            return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
          }
          k = 1.4 * Math.sqrt(len);
          k = k > 16 ? 16 : k | 0;
          x = x.times(1 / tinyPow(5, k));
          x = taylorSeries(Ctor, 2, x, x);
          var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
          for (; k--; ) {
            sin2_x = x.times(x);
            x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
          }
          return x;
        }
        function taylorSeries(Ctor, n, x, y, isHyperbolic) {
          var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
          external = false;
          x2 = x.times(x);
          u = new Ctor(y);
          for (; ; ) {
            t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
            u = isHyperbolic ? y.plus(t) : y.minus(t);
            y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
            t = u.plus(y);
            if (t.d[k] !== void 0) {
              for (j = k; t.d[j] === u.d[j] && j--; ) ;
              if (j == -1) break;
            }
            j = u;
            u = y;
            y = t;
            t = j;
            i++;
          }
          external = true;
          t.d.length = k + 1;
          return t;
        }
        function tinyPow(b, e) {
          var n = b;
          while (--e) n *= b;
          return n;
        }
        function toLessThanHalfPi(Ctor, x) {
          var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
          x = x.abs();
          if (x.lte(halfPi)) {
            quadrant = isNeg ? 4 : 1;
            return x;
          }
          t = x.divToInt(pi);
          if (t.isZero()) {
            quadrant = isNeg ? 3 : 2;
          } else {
            x = x.minus(t.times(pi));
            if (x.lte(halfPi)) {
              quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
              return x;
            }
            quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
          }
          return x.minus(pi).abs();
        }
        function toStringBinary(x, baseOut, sd, rm) {
          var base2, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
          if (isExp) {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
          } else {
            sd = Ctor.precision;
            rm = Ctor.rounding;
          }
          if (!x.isFinite()) {
            str = nonFiniteToString(x);
          } else {
            str = finiteToString(x);
            i = str.indexOf(".");
            if (isExp) {
              base2 = 2;
              if (baseOut == 16) {
                sd = sd * 4 - 3;
              } else if (baseOut == 8) {
                sd = sd * 3 - 2;
              }
            } else {
              base2 = baseOut;
            }
            if (i >= 0) {
              str = str.replace(".", "");
              y = new Ctor(1);
              y.e = str.length - i;
              y.d = convertBase(finiteToString(y), 10, base2);
              y.e = y.d.length;
            }
            xd = convertBase(str, 10, base2);
            e = len = xd.length;
            for (; xd[--len] == 0; ) xd.pop();
            if (!xd[0]) {
              str = isExp ? "0p+0" : "0";
            } else {
              if (i < 0) {
                e--;
              } else {
                x = new Ctor(x);
                x.d = xd;
                x.e = e;
                x = divide(x, y, sd, rm, 0, base2);
                xd = x.d;
                e = x.e;
                roundUp = inexact;
              }
              i = xd[sd];
              k = base2 / 2;
              roundUp = roundUp || xd[sd + 1] !== void 0;
              roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
              xd.length = sd;
              if (roundUp) {
                for (; ++xd[--sd] > base2 - 1; ) {
                  xd[sd] = 0;
                  if (!sd) {
                    ++e;
                    xd.unshift(1);
                  }
                }
              }
              for (len = xd.length; !xd[len - 1]; --len) ;
              for (i = 0, str = ""; i < len; i++) str += NUMERALS.charAt(xd[i]);
              if (isExp) {
                if (len > 1) {
                  if (baseOut == 16 || baseOut == 8) {
                    i = baseOut == 16 ? 4 : 3;
                    for (--len; len % i; len++) str += "0";
                    xd = convertBase(str, base2, baseOut);
                    for (len = xd.length; !xd[len - 1]; --len) ;
                    for (i = 1, str = "1."; i < len; i++) str += NUMERALS.charAt(xd[i]);
                  } else {
                    str = str.charAt(0) + "." + str.slice(1);
                  }
                }
                str = str + (e < 0 ? "p" : "p+") + e;
              } else if (e < 0) {
                for (; ++e; ) str = "0" + str;
                str = "0." + str;
              } else {
                if (++e > len) for (e -= len; e--; ) str += "0";
                else if (e < len) str = str.slice(0, e) + "." + str.slice(e);
              }
            }
            str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
          }
          return x.s < 0 ? "-" + str : str;
        }
        function truncate2(arr, len) {
          if (arr.length > len) {
            arr.length = len;
            return true;
          }
        }
        function abs(x) {
          return new this(x).abs();
        }
        function acos(x) {
          return new this(x).acos();
        }
        function acosh(x) {
          return new this(x).acosh();
        }
        function add(x, y) {
          return new this(x).plus(y);
        }
        function asin(x) {
          return new this(x).asin();
        }
        function asinh(x) {
          return new this(x).asinh();
        }
        function atan(x) {
          return new this(x).atan();
        }
        function atanh(x) {
          return new this(x).atanh();
        }
        function atan2(y, x) {
          y = new this(y);
          x = new this(x);
          var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
          if (!y.s || !x.s) {
            r = new this(NaN);
          } else if (!y.d && !x.d) {
            r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
            r.s = y.s;
          } else if (!x.d || y.isZero()) {
            r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
            r.s = y.s;
          } else if (!y.d || x.isZero()) {
            r = getPi(this, wpr, 1).times(0.5);
            r.s = y.s;
          } else if (x.s < 0) {
            this.precision = wpr;
            this.rounding = 1;
            r = this.atan(divide(y, x, wpr, 1));
            x = getPi(this, wpr, 1);
            this.precision = pr;
            this.rounding = rm;
            r = y.s < 0 ? r.minus(x) : r.plus(x);
          } else {
            r = this.atan(divide(y, x, wpr, 1));
          }
          return r;
        }
        function cbrt(x) {
          return new this(x).cbrt();
        }
        function ceil(x) {
          return finalise(x = new this(x), x.e + 1, 2);
        }
        function clamp(x, min2, max2) {
          return new this(x).clamp(min2, max2);
        }
        function config3(obj) {
          if (!obj || typeof obj !== "object") throw Error(decimalError + "Object expected");
          var i, p, v, useDefaults = obj.defaults === true, ps = [
            "precision",
            1,
            MAX_DIGITS,
            "rounding",
            0,
            8,
            "toExpNeg",
            -EXP_LIMIT,
            0,
            "toExpPos",
            0,
            EXP_LIMIT,
            "maxE",
            0,
            EXP_LIMIT,
            "minE",
            -EXP_LIMIT,
            0,
            "modulo",
            0,
            9
          ];
          for (i = 0; i < ps.length; i += 3) {
            if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
            if ((v = obj[p]) !== void 0) {
              if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
              else throw Error(invalidArgument + p + ": " + v);
            }
          }
          if (p = "crypto", useDefaults) this[p] = DEFAULTS[p];
          if ((v = obj[p]) !== void 0) {
            if (v === true || v === false || v === 0 || v === 1) {
              if (v) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  this[p] = true;
                } else {
                  throw Error(cryptoUnavailable);
                }
              } else {
                this[p] = false;
              }
            } else {
              throw Error(invalidArgument + p + ": " + v);
            }
          }
          return this;
        }
        function cos(x) {
          return new this(x).cos();
        }
        function cosh(x) {
          return new this(x).cosh();
        }
        function clone(obj) {
          var i, p, ps;
          function Decimal2(v) {
            var e, i2, t, x = this;
            if (!(x instanceof Decimal2)) return new Decimal2(v);
            x.constructor = Decimal2;
            if (isDecimalInstance(v)) {
              x.s = v.s;
              if (external) {
                if (!v.d || v.e > Decimal2.maxE) {
                  x.e = NaN;
                  x.d = null;
                } else if (v.e < Decimal2.minE) {
                  x.e = 0;
                  x.d = [0];
                } else {
                  x.e = v.e;
                  x.d = v.d.slice();
                }
              } else {
                x.e = v.e;
                x.d = v.d ? v.d.slice() : v.d;
              }
              return;
            }
            t = typeof v;
            if (t === "number") {
              if (v === 0) {
                x.s = 1 / v < 0 ? -1 : 1;
                x.e = 0;
                x.d = [0];
                return;
              }
              if (v < 0) {
                v = -v;
                x.s = -1;
              } else {
                x.s = 1;
              }
              if (v === ~~v && v < 1e7) {
                for (e = 0, i2 = v; i2 >= 10; i2 /= 10) e++;
                if (external) {
                  if (e > Decimal2.maxE) {
                    x.e = NaN;
                    x.d = null;
                  } else if (e < Decimal2.minE) {
                    x.e = 0;
                    x.d = [0];
                  } else {
                    x.e = e;
                    x.d = [v];
                  }
                } else {
                  x.e = e;
                  x.d = [v];
                }
                return;
              }
              if (v * 0 !== 0) {
                if (!v) x.s = NaN;
                x.e = NaN;
                x.d = null;
                return;
              }
              return parseDecimal(x, v.toString());
            }
            if (t === "string") {
              if ((i2 = v.charCodeAt(0)) === 45) {
                v = v.slice(1);
                x.s = -1;
              } else {
                if (i2 === 43) v = v.slice(1);
                x.s = 1;
              }
              return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
            }
            if (t === "bigint") {
              if (v < 0) {
                v = -v;
                x.s = -1;
              } else {
                x.s = 1;
              }
              return parseDecimal(x, v.toString());
            }
            throw Error(invalidArgument + v);
          }
          Decimal2.prototype = P;
          Decimal2.ROUND_UP = 0;
          Decimal2.ROUND_DOWN = 1;
          Decimal2.ROUND_CEIL = 2;
          Decimal2.ROUND_FLOOR = 3;
          Decimal2.ROUND_HALF_UP = 4;
          Decimal2.ROUND_HALF_DOWN = 5;
          Decimal2.ROUND_HALF_EVEN = 6;
          Decimal2.ROUND_HALF_CEIL = 7;
          Decimal2.ROUND_HALF_FLOOR = 8;
          Decimal2.EUCLID = 9;
          Decimal2.config = Decimal2.set = config3;
          Decimal2.clone = clone;
          Decimal2.isDecimal = isDecimalInstance;
          Decimal2.abs = abs;
          Decimal2.acos = acos;
          Decimal2.acosh = acosh;
          Decimal2.add = add;
          Decimal2.asin = asin;
          Decimal2.asinh = asinh;
          Decimal2.atan = atan;
          Decimal2.atanh = atanh;
          Decimal2.atan2 = atan2;
          Decimal2.cbrt = cbrt;
          Decimal2.ceil = ceil;
          Decimal2.clamp = clamp;
          Decimal2.cos = cos;
          Decimal2.cosh = cosh;
          Decimal2.div = div;
          Decimal2.exp = exp;
          Decimal2.floor = floor2;
          Decimal2.hypot = hypot;
          Decimal2.ln = ln;
          Decimal2.log = log2;
          Decimal2.log10 = log10;
          Decimal2.log2 = log22;
          Decimal2.max = max;
          Decimal2.min = min;
          Decimal2.mod = mod;
          Decimal2.mul = mul;
          Decimal2.pow = pow;
          Decimal2.random = random;
          Decimal2.round = round;
          Decimal2.sign = sign;
          Decimal2.sin = sin;
          Decimal2.sinh = sinh;
          Decimal2.sqrt = sqrt;
          Decimal2.sub = sub;
          Decimal2.sum = sum;
          Decimal2.tan = tan;
          Decimal2.tanh = tanh;
          Decimal2.trunc = trunc;
          if (obj === void 0) obj = {};
          if (obj) {
            if (obj.defaults !== true) {
              ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
              for (i = 0; i < ps.length; ) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
            }
          }
          Decimal2.config(obj);
          return Decimal2;
        }
        function div(x, y) {
          return new this(x).div(y);
        }
        function exp(x) {
          return new this(x).exp();
        }
        function floor2(x) {
          return finalise(x = new this(x), x.e + 1, 3);
        }
        function hypot() {
          var i, n, t = new this(0);
          external = false;
          for (i = 0; i < arguments.length; ) {
            n = new this(arguments[i++]);
            if (!n.d) {
              if (n.s) {
                external = true;
                return new this(1 / 0);
              }
              t = n;
            } else if (t.d) {
              t = t.plus(n.times(n));
            }
          }
          external = true;
          return t.sqrt();
        }
        function isDecimalInstance(obj) {
          return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
        }
        function ln(x) {
          return new this(x).ln();
        }
        function log2(x, y) {
          return new this(x).log(y);
        }
        function log22(x) {
          return new this(x).log(2);
        }
        function log10(x) {
          return new this(x).log(10);
        }
        function max() {
          return maxOrMin(this, arguments, -1);
        }
        function min() {
          return maxOrMin(this, arguments, 1);
        }
        function mod(x, y) {
          return new this(x).mod(y);
        }
        function mul(x, y) {
          return new this(x).mul(y);
        }
        function pow(x, y) {
          return new this(x).pow(y);
        }
        function random(sd) {
          var d, e, k, n, i = 0, r = new this(1), rd = [];
          if (sd === void 0) sd = this.precision;
          else checkInt32(sd, 1, MAX_DIGITS);
          k = Math.ceil(sd / LOG_BASE);
          if (!this.crypto) {
            for (; i < k; ) rd[i++] = Math.random() * 1e7 | 0;
          } else if (crypto.getRandomValues) {
            d = crypto.getRandomValues(new Uint32Array(k));
            for (; i < k; ) {
              n = d[i];
              if (n >= 429e7) {
                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
              } else {
                rd[i++] = n % 1e7;
              }
            }
          } else if (crypto.randomBytes) {
            d = crypto.randomBytes(k *= 4);
            for (; i < k; ) {
              n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);
              if (n >= 214e7) {
                crypto.randomBytes(4).copy(d, i);
              } else {
                rd.push(n % 1e7);
                i += 4;
              }
            }
            i = k / 4;
          } else {
            throw Error(cryptoUnavailable);
          }
          k = rd[--i];
          sd %= LOG_BASE;
          if (k && sd) {
            n = mathpow(10, LOG_BASE - sd);
            rd[i] = (k / n | 0) * n;
          }
          for (; rd[i] === 0; i--) rd.pop();
          if (i < 0) {
            e = 0;
            rd = [0];
          } else {
            e = -1;
            for (; rd[0] === 0; e -= LOG_BASE) rd.shift();
            for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;
            if (k < LOG_BASE) e -= LOG_BASE - k;
          }
          r.e = e;
          r.d = rd;
          return r;
        }
        function round(x) {
          return finalise(x = new this(x), x.e + 1, this.rounding);
        }
        function sign(x) {
          x = new this(x);
          return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
        }
        function sin(x) {
          return new this(x).sin();
        }
        function sinh(x) {
          return new this(x).sinh();
        }
        function sqrt(x) {
          return new this(x).sqrt();
        }
        function sub(x, y) {
          return new this(x).sub(y);
        }
        function sum() {
          var i = 0, args = arguments, x = new this(args[i]);
          external = false;
          for (; x.s && ++i < args.length; ) x = x.plus(args[i]);
          external = true;
          return finalise(x, this.precision, this.rounding);
        }
        function tan(x) {
          return new this(x).tan();
        }
        function tanh(x) {
          return new this(x).tanh();
        }
        function trunc(x) {
          return finalise(x = new this(x), x.e + 1, 1);
        }
        Decimal = clone(DEFAULTS);
        Decimal.prototype.constructor = Decimal;
        Decimal["default"] = Decimal.Decimal = Decimal;
        LN10 = new Decimal(LN10);
        PI = new Decimal(PI);
        if (typeof define == "function" && define.amd) {
          define(function() {
            return Decimal;
          });
        } else if (typeof module != "undefined" && module.exports) {
          if (typeof Symbol == "function" && typeof Symbol.iterator == "symbol") {
            P[Symbol["for"]("nodejs.util.inspect.custom")] = P.toString;
            P[Symbol.toStringTag] = "Decimal";
          }
          module.exports = Decimal;
        } else {
          if (!globalScope) {
            globalScope = typeof self != "undefined" && self && self.self == self ? self : window;
          }
          noConflict = globalScope.Decimal;
          Decimal.noConflict = function() {
            globalScope.Decimal = noConflict;
            return Decimal;
          };
          globalScope.Decimal = Decimal;
        }
      })(exports);
    }
  });

  // node_modules/ethval/dist/index.js
  var require_dist10 = __commonJS({
    "node_modules/ethval/dist/index.js"(exports, module) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _createClass = /* @__PURE__ */ (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      })();
      var _decimal = require_decimal();
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var PreciseDecimal = _decimal.Decimal.clone({ defaults: true, toExpPos: 33 });
      var toDecimal = function toDecimal2(a) {
        if (a) {
          if (a._hex) {
            a = a._hex;
          } else if (a._isBigNumber) {
            a = a.toString(10);
          }
        }
        return new PreciseDecimal("" + a);
      };
      var input2Dec = function input2Dec2(original, input) {
        return input._n ? input.to(original._unit)._n : toDecimal(input);
      };
      var EthVal = (function() {
        function EthVal2(src) {
          var _this = this;
          var unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "wei";
          _classCallCheck(this, EthVal2);
          if (src instanceof EthVal2) {
            this._n = toDecimal(src._n);
            this._unit = src._unit;
          } else {
            this._n = toDecimal(src);
            this._unit = unit;
          }
          ["mul", "sub", "div", "add"].forEach(function(method) {
            _this[method] = function(v) {
              return new EthVal2(_this._n[method].call(_this._n, input2Dec(_this, v)), _this._unit);
            };
          });
          ["gt", "gte", "lt", "lte", "eq"].forEach(function(method) {
            _this[method] = function(v) {
              return _this._n[method].call(_this._n, input2Dec(_this, v));
            };
          });
        }
        _createClass(EthVal2, [{
          key: "scaleDown",
          value: function scaleDown(v) {
            return this.mul(toDecimal(10).pow(toDecimal(v)));
          }
        }, {
          key: "scaleUp",
          value: function scaleUp(v) {
            return this.div(toDecimal(10).pow(toDecimal(v)));
          }
        }, {
          key: "round",
          value: function round() {
            return new EthVal2(this._n.toDecimalPlaces(0));
          }
        }, {
          key: "toWei",
          value: function toWei() {
            if (this.isWei) {
              return new EthVal2(this);
            }
            if (this.isGwei) {
              var v = this.scaleDown(9);
              v._unit = "wei";
              return v;
            }
            if (this.isEth) {
              var _v = this.scaleDown(18);
              _v._unit = "wei";
              return _v;
            }
            throw new Error("Unit of measurement uncertain");
          }
        }, {
          key: "toGwei",
          value: function toGwei() {
            if (this.isWei) {
              var v = this.scaleUp(9);
              v._unit = "gwei";
              return v;
            }
            if (this.isGwei) {
              return new EthVal2(this);
            }
            if (this.isEth) {
              var _v2 = this.scaleDown(9);
              _v2._unit = "gwei";
              return _v2;
            }
            throw new Error("Unit of measurement uncertain");
          }
        }, {
          key: "toEth",
          value: function toEth() {
            if (this.isWei) {
              var v = this.scaleUp(18);
              v._unit = "eth";
              return v;
            }
            if (this.isGwei) {
              var _v3 = this.scaleUp(9);
              _v3._unit = "eth";
              return _v3;
            }
            if (this.isEth) {
              return new EthVal2(this);
            }
            throw new Error("Unit of measurement uncertain");
          }
        }, {
          key: "to",
          value: function to(unit) {
            switch (unit) {
              case "wei":
                return this.toWei();
              case "gwei":
                return this.toGwei();
              case "eth":
                return this.toEth();
              default:
                throw new Error("Unrecognized unit: " + unit);
            }
          }
        }, {
          key: "toString",
          value: function toString4(v) {
            switch (v) {
              case 2: {
                var str = this._n.toBinary();
                str = str.substr(str.indexOf("b") + 1);
                return str;
              }
              case 16:
                return this._n.toHexadecimal();
              default:
                return this._n.toString();
            }
          }
        }, {
          key: "toFixed",
          value: function toFixed(v) {
            return this._n.toFixed(v);
          }
        }, {
          key: "toNumber",
          value: function toNumber() {
            return this._n.toNumber();
          }
        }, {
          key: "isWei",
          get: function get3() {
            return "wei" === this._unit;
          }
        }, {
          key: "isGwei",
          get: function get3() {
            return "gwei" === this._unit;
          }
        }, {
          key: "isEth",
          get: function get3() {
            return "eth" === this._unit;
          }
        }, {
          key: "unit",
          get: function get3() {
            return this._unit;
          }
        }]);
        return EthVal2;
      })();
      exports.default = EthVal;
      module.exports = exports.default;
    }
  });

  // node_modules/@opengsn/common/dist/AmountRequired.js
  var require_AmountRequired = __commonJS({
    "node_modules/@opengsn/common/dist/AmountRequired.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethval_1 = __importDefault(require_dist10());
      var web3_utils_1 = require_src4();
      var Utils_1 = require_Utils();
      var AmountRequired = class {
        constructor(name2, requiredValue, logger, listener) {
          this._currentValue = web3_utils_1.toBN(0);
          this._requiredValue = web3_utils_1.toBN(0);
          this.logger = logger;
          this._name = name2;
          this._requiredValue = requiredValue;
          this._listener = listener;
        }
        get currentValue() {
          return this._currentValue;
        }
        set currentValue(newValue) {
          const didChange = !this._currentValue.eq(newValue);
          const wasSatisfied = this.isSatisfied;
          this._currentValue = newValue;
          if (didChange) {
            this._onChange(wasSatisfied);
          }
        }
        get requiredValue() {
          return this._requiredValue;
        }
        set requiredValue(newValue) {
          const didChange = !this._requiredValue.eq(newValue);
          const wasSatisfied = this.isSatisfied;
          this._requiredValue = newValue;
          if (didChange) {
            this._onChange(wasSatisfied);
          }
        }
        _onChange(wasSatisfied) {
          let changeString;
          if (wasSatisfied === this.isSatisfied) {
            changeString = `still${this.isSatisfied ? "" : " not"}`;
          } else if (this.isSatisfied) {
            changeString = "now";
          } else {
            changeString = "no longer";
          }
          const message = `${this._name} requirement is ${changeString} satisfied
${this.description}`;
          this.logger.warn(message);
          if (this._listener != null) {
            this._listener();
          }
        }
        get isSatisfied() {
          return this._currentValue.gte(this._requiredValue);
        }
        get description() {
          const status2 = Utils_1.boolString(this.isSatisfied);
          const actual = new ethval_1.default(this._currentValue).toEth().toFixed(4);
          const required = new ethval_1.default(this._requiredValue).toEth().toFixed(4);
          return `${this._name.padEnd(14)} | ${status2.padEnd(14)} | actual: ${actual.padStart(12)} ETH | required: ${required.padStart(12)} ETH`;
        }
      };
      exports.AmountRequired = AmountRequired;
    }
  });

  // node_modules/@opengsn/common/dist/Constants.js
  var require_Constants = __commonJS({
    "node_modules/@opengsn/common/dist/Constants.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var bn_js_1 = __importDefault(require_bn5());
      var web3_utils_1 = require_src4();
      var dayInSec = 24 * 60 * 60;
      var weekInSec = dayInSec * 7;
      var oneEther = web3_utils_1.toBN(1e18);
      exports.constants = {
        dayInSec,
        weekInSec,
        oneEther,
        ZERO_ADDRESS: "0x0000000000000000000000000000000000000000",
        ZERO_BYTES32: "0x0000000000000000000000000000000000000000000000000000000000000000",
        MAX_UINT256: new bn_js_1.default("2").pow(new bn_js_1.default("256")).sub(new bn_js_1.default("1")),
        MAX_UINT96: new bn_js_1.default("2").pow(new bn_js_1.default("96")).sub(new bn_js_1.default("1")),
        MAX_INT256: new bn_js_1.default("2").pow(new bn_js_1.default("255")).sub(new bn_js_1.default("1")),
        MIN_INT256: new bn_js_1.default("2").pow(new bn_js_1.default("255")).mul(new bn_js_1.default("-1"))
      };
    }
  });

  // node_modules/@opengsn/common/dist/VersionRegistry.js
  var require_VersionRegistry = __commonJS({
    "node_modules/@opengsn/common/dist/VersionRegistry.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ethereumjs_util_1 = require_dist3();
      function string32(s) {
        return ethereumjs_util_1.bufferToHex(Buffer2.from(s)).padEnd(66, "0");
      }
      exports.string32 = string32;
      function bytes32toString(s) {
        return Buffer2.from(s.replace(/^(?:0x)?(.*?)(00)*$/, "$1"), "hex").toString();
      }
      exports.bytes32toString = bytes32toString;
      var VersionRegistry = class {
        constructor(fromBlock, contractInteractor) {
          this.fromBlock = fromBlock;
          this.contractInteractor = contractInteractor;
        }
        async isValid() {
          const versionRegistryAddress = this.contractInteractor.getDeployment().versionRegistryAddress;
          if (versionRegistryAddress == null) {
            throw new Error("Version Registry address is not provided.");
          }
          if (await this.contractInteractor.getCode(versionRegistryAddress) === "0x") {
            return false;
          }
          return true;
        }
        /**
         * return the latest "mature" version from the registry
         *
         * @dev: current time is last block's timestamp. This resolves any client time-zone discrepancies,
         *  but on local ganache, note that the time doesn't advance unless you mine transactions.
         *
         * @param id object id to return a version for
         * @param delayPeriod - don't return entries younger than that (in seconds)
         * @param optInVersion - if set, return this version even if it is young
         * @return version info that include actual version used, its timestamp and value.
         */
        async getVersion(id, delayPeriod, optInVersion = "") {
          const [versions3, now] = await Promise.all([
            this.getAllVersions(id),
            this.contractInteractor.getBlock("latest").then((b) => b.timestamp)
          ]);
          const ver = versions3.find((v) => !v.canceled && (v.time + delayPeriod <= now || v.version === optInVersion));
          if (ver == null) {
            throw new Error(`getVersion(${id}) - no version found`);
          }
          return ver;
        }
        /**
         * return all version history of the given id
         * @param id object id to return version history for
         */
        async getAllVersions(id) {
          const events = await this.contractInteractor.getPastEventsForVersionRegistry(["VersionAdded", "VersionCanceled"], [string32(id)], { fromBlock: this.fromBlock });
          const cancelReasons = events.filter((e) => e.event === "VersionCanceled").reduce((set, e) => Object.assign(Object.assign({}, set), { [e.returnValues.version]: e.returnValues.reason }), {});
          const found = /* @__PURE__ */ new Set();
          return events.filter((e) => e.event === "VersionAdded").map((e) => ({
            version: bytes32toString(e.returnValues.version),
            canceled: cancelReasons[e.returnValues.version] != null,
            cancelReason: cancelReasons[e.returnValues.version],
            value: e.returnValues.value,
            time: parseInt(e.returnValues.time)
          })).filter((e) => {
            if (found.has(e.version)) {
              return false;
            } else {
              found.add(e.version);
              return true;
            }
          }).reverse();
        }
        // return all IDs registered
        async listIds() {
          const events = await this.contractInteractor.getPastEventsForVersionRegistry(["VersionAdded"], [], { fromBlock: this.fromBlock });
          const ids = new Set(events.map((e) => bytes32toString(e.returnValues.id)));
          return Array.from(ids);
        }
        async addVersion(id, version3, value, transactionDetails) {
          await this.checkVersion(id, version3, false);
          await this.contractInteractor.addVersionInVersionRegistry(string32(id), string32(version3), value, transactionDetails);
        }
        async cancelVersion(id, version3, cancelReason, transactionDetails) {
          await this.checkVersion(id, version3, true);
          await this.contractInteractor.cancelVersionInVersionRegistry(string32(id), string32(version3), cancelReason, transactionDetails);
        }
        async checkVersion(id, version3, validateExists) {
          const versions3 = await this.getAllVersions(id).catch(() => []);
          if (versions3.find((v) => v.version === version3) != null !== validateExists) {
            throw new Error(`version ${validateExists ? "does not exist" : "already exists"}: ${id} @ ${version3}`);
          }
        }
      };
      exports.VersionRegistry = VersionRegistry;
    }
  });

  // node_modules/@opengsn/common/dist/index.js
  var require_dist11 = __commonJS({
    "node_modules/@opengsn/common/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      function __export2(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      __export2(require_AmountRequired());
      __export2(require_Constants());
      __export2(require_ContractInteractor());
      __export2(require_Environments());
      __export2(require_HttpClient());
      __export2(require_HttpWrapper());
      __export2(require_LightTruffleContract());
      __export2(require_Utils());
      __export2(require_Version());
      __export2(require_VersionRegistry());
      __export2(require_VersionsManager());
    }
  });

  // node_modules/@opengsn/provider/dist/GSNConfigurator.js
  var require_GSNConfigurator = __commonJS({
    "node_modules/@opengsn/provider/dist/GSNConfigurator.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dist_1 = require_dist11();
      var GAS_PRICE_PERCENT = 20;
      var MAX_RELAY_NONCE_GAP = 3;
      var DEFAULT_RELAY_TIMEOUT_GRACE_SEC = 1800;
      var DEFAULT_LOOKUP_WINDOW_BLOCKS = 6e4;
      exports.defaultLoggerConfiguration = {
        logLevel: "info"
      };
      exports.defaultGsnConfig = {
        preferredRelays: [],
        relayLookupWindowBlocks: DEFAULT_LOOKUP_WINDOW_BLOCKS,
        relayRegistrationLookupBlocks: Number.MAX_SAFE_INTEGER,
        pastEventsQueryMaxPageSize: Number.MAX_SAFE_INTEGER,
        gasPriceFactorPercent: GAS_PRICE_PERCENT,
        gasPriceOracleUrl: "",
        gasPriceOraclePath: "",
        minGasPrice: 0,
        maxRelayNonceGap: MAX_RELAY_NONCE_GAP,
        sliceSize: 3,
        relayTimeoutGrace: DEFAULT_RELAY_TIMEOUT_GRACE_SEC,
        methodSuffix: "_v4",
        requiredVersionRange: dist_1.gsnRequiredVersion,
        jsonStringifyRequest: true,
        auditorsCount: 1,
        clientId: "1"
      };
    }
  });

  // node_modules/@opengsn/provider/dist/GsnEvents.js
  var require_GsnEvents = __commonJS({
    "node_modules/@opengsn/provider/dist/GsnEvents.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var TOTAL_EVENTS = 7;
      var GsnEvent = class {
        constructor(event, step) {
          this.event = event;
          this.step = step;
          this.total = TOTAL_EVENTS;
        }
      };
      exports.GsnEvent = GsnEvent;
      var GsnInitEvent = class extends GsnEvent {
        constructor() {
          super("init", 0);
        }
      };
      exports.GsnInitEvent = GsnInitEvent;
      var GsnRefreshRelaysEvent = class extends GsnEvent {
        constructor() {
          super("refresh-relays", 1);
        }
      };
      exports.GsnRefreshRelaysEvent = GsnRefreshRelaysEvent;
      var GsnDoneRefreshRelaysEvent = class extends GsnEvent {
        constructor(relaysCount) {
          super("refreshed-relays", 2);
          this.relaysCount = relaysCount;
        }
      };
      exports.GsnDoneRefreshRelaysEvent = GsnDoneRefreshRelaysEvent;
      var GsnNextRelayEvent = class extends GsnEvent {
        constructor(relayUrl) {
          super("next-relay", 3);
          this.relayUrl = relayUrl;
        }
      };
      exports.GsnNextRelayEvent = GsnNextRelayEvent;
      var GsnSignRequestEvent = class extends GsnEvent {
        constructor() {
          super("sign-request", 4);
        }
      };
      exports.GsnSignRequestEvent = GsnSignRequestEvent;
      var GsnValidateRequestEvent = class extends GsnEvent {
        constructor() {
          super("validate-request", 5);
        }
      };
      exports.GsnValidateRequestEvent = GsnValidateRequestEvent;
      var GsnSendToRelayerEvent = class extends GsnEvent {
        constructor(relayUrl) {
          super("send-to-relayer", 6);
          this.relayUrl = relayUrl;
        }
      };
      exports.GsnSendToRelayerEvent = GsnSendToRelayerEvent;
      var GsnRelayerResponseEvent = class extends GsnEvent {
        constructor(success) {
          super("relayer-response", 7);
          this.success = success;
        }
      };
      exports.GsnRelayerResponseEvent = GsnRelayerResponseEvent;
    }
  });

  // node_modules/@opengsn/provider/dist/RelayClient.js
  var require_RelayClient = __commonJS({
    "node_modules/@opengsn/provider/dist/RelayClient.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      Object.defineProperty(exports, "__esModule", { value: true });
      var events_1 = require_events();
      var tx_1 = require_dist5();
      var ethereumjs_util_1 = require_dist3();
      var ContractInteractor_1 = require_ContractInteractor();
      var VersionsManager_1 = require_VersionsManager();
      var Utils_1 = require_Utils();
      var Version_1 = require_Version();
      var AccountManager_1 = require_AccountManager();
      var HttpClient_1 = require_HttpClient();
      var HttpWrapper_1 = require_HttpWrapper();
      var RelaySelectionManager_1 = require_RelaySelectionManager();
      var RelayedTransactionValidator_1 = require_RelayedTransactionValidator();
      var KnownRelaysManager_1 = require_KnownRelaysManager();
      var ClientWinstonLogger_1 = require_ClientWinstonLogger();
      var GSNConfigurator_1 = require_GSNConfigurator();
      var GsnEvents_1 = require_GsnEvents();
      var REQUEST_VALID_BLOCKS = 6e3;
      exports.EmptyDataCallback = async () => {
        return "0x";
      };
      exports.GasPricePingFilter = (pingResponse, gsnTransactionDetails) => {
        if (gsnTransactionDetails.gasPrice != null && parseInt(pingResponse.minGasPrice) > parseInt(gsnTransactionDetails.gasPrice)) {
          throw new Error(`Proposed gas price: ${gsnTransactionDetails.gasPrice}; relay's MinGasPrice: ${pingResponse.minGasPrice}`);
        }
      };
      var RelayClient = class {
        constructor(rawConstructorInput) {
          var _a, _b, _c, _d;
          this.emitter = new events_1.EventEmitter();
          this.initialized = false;
          if (arguments[0] == null || arguments[0].send != null || arguments[2] != null) {
            throw new Error('Sorry, but the constructor parameters of the RelayClient class have changed. See "GSNUnresolvedConstructorInput" interface for details.');
          }
          this.rawConstructorInput = rawConstructorInput;
          this.logger = (_b = (_a = rawConstructorInput.overrideDependencies) === null || _a === void 0 ? void 0 : _a.logger) !== null && _b !== void 0 ? _b : ClientWinstonLogger_1.createClientLogger((_d = (_c = rawConstructorInput.config) === null || _c === void 0 ? void 0 : _c.loggerConfiguration) !== null && _d !== void 0 ? _d : GSNConfigurator_1.defaultLoggerConfiguration);
        }
        async init() {
          if (this.initialized) {
            throw new Error("init() already called");
          }
          this.initializingPromise = this._initInternal();
          await this.initializingPromise;
          this.initialized = true;
          return this;
        }
        async _initInternal() {
          this.emit(new GsnEvents_1.GsnInitEvent());
          this.config = await this._resolveConfiguration(this.rawConstructorInput);
          this.dependencies = await this._resolveDependencies(this.rawConstructorInput);
        }
        /**
         * register a listener for GSN events
         * @see GsnEvent and its subclasses for emitted events
         * @param handler callback function to handle events
         */
        registerEventListener(handler) {
          this.emitter.on("gsn", handler);
        }
        /**
         * unregister previously registered event listener
         * @param handler callback function to unregister
         */
        unregisterEventListener(handler) {
          this.emitter.off("gsn", handler);
        }
        emit(event) {
          this.emitter.emit("gsn", event);
        }
        /**
         * In case Relay Server does not broadcast the signed transaction to the network,
         * client also broadcasts the same transaction. If the transaction fails with nonce
         * error, it indicates Relay may have signed multiple transactions with same nonce,
         * causing a DoS attack.
         *
         * @param {*} transaction - actual Ethereum transaction, signed by a relay
         */
        async _broadcastRawTx(transaction) {
          const rawTx = "0x" + transaction.serialize().toString("hex");
          const txHash = "0x" + transaction.hash().toString("hex");
          this.logger.info(`Broadcasting raw transaction signed by relay. TxHash: ${txHash}`);
          try {
            if (await this._isAlreadySubmitted(txHash)) {
              return { hasReceipt: true };
            }
            await this.dependencies.contractInteractor.sendSignedTransaction(rawTx);
            return { hasReceipt: true };
          } catch (broadcastError) {
            if ((broadcastError === null || broadcastError === void 0 ? void 0 : broadcastError.message.match(/the tx doesn't have the correct nonce|known transaction/)) != null) {
              return {
                hasReceipt: false,
                wrongNonce: true,
                broadcastError
              };
            }
            return { hasReceipt: false, broadcastError };
          }
        }
        async _isAlreadySubmitted(txHash) {
          const [txMinedReceipt, pendingBlock] = await Promise.all([
            this.dependencies.contractInteractor.web3.eth.getTransactionReceipt(txHash),
            // mempool transactions
            this.dependencies.contractInteractor.web3.eth.getBlock("pending")
          ]);
          if (txMinedReceipt != null) {
            return true;
          }
          return pendingBlock.transactions.includes(txHash);
        }
        async relayTransaction(gsnTransactionDetails) {
          var _a, _b, _c;
          if (!this.initialized) {
            if (this.initializingPromise == null) {
              this._warn("suggestion: call RelayProvider.init()/RelayClient.init() in advance (to make first request faster)");
            }
            await this.init();
          }
          this.emit(new GsnEvents_1.GsnRefreshRelaysEvent());
          await this.dependencies.knownRelaysManager.refresh();
          gsnTransactionDetails.gasPrice = (_a = gsnTransactionDetails.forceGasPrice) !== null && _a !== void 0 ? _a : await this._calculateGasPrice();
          if (gsnTransactionDetails.gas == null) {
            const estimated = await this.dependencies.contractInteractor.estimateGas(gsnTransactionDetails);
            gsnTransactionDetails.gas = `0x${estimated.toString(16)}`;
          }
          const relaySelectionManager = await new RelaySelectionManager_1.RelaySelectionManager(gsnTransactionDetails, this.dependencies.knownRelaysManager, this.dependencies.httpClient, this.dependencies.pingFilter, this.logger, this.config).init();
          const count = relaySelectionManager.relaysLeft().length;
          this.emit(new GsnEvents_1.GsnDoneRefreshRelaysEvent(count));
          if (count === 0) {
            throw new Error("no registered relayers");
          }
          const relayingErrors = /* @__PURE__ */ new Map();
          const auditPromises = [];
          const paymaster = this.dependencies.contractInteractor.getDeployment().paymasterAddress;
          while (true) {
            let relayingAttempt;
            const activeRelay = await relaySelectionManager.selectNextRelay(paymaster);
            if (activeRelay != null) {
              this.emit(new GsnEvents_1.GsnNextRelayEvent(activeRelay.relayInfo.relayUrl));
              relayingAttempt = await this._attemptRelay(activeRelay, gsnTransactionDetails).catch((error2) => ({ error: error2 }));
              if (relayingAttempt.auditPromise != null) {
                auditPromises.push(relayingAttempt.auditPromise);
              }
              if (relayingAttempt.transaction == null) {
                relayingErrors.set(activeRelay.relayInfo.relayUrl, (_b = relayingAttempt.error) !== null && _b !== void 0 ? _b : new Error("No error reason was given"));
                if ((_c = relayingAttempt.isRelayError) !== null && _c !== void 0 ? _c : false) {
                  continue;
                }
              }
            }
            return {
              transaction: relayingAttempt === null || relayingAttempt === void 0 ? void 0 : relayingAttempt.transaction,
              relayingErrors,
              auditPromises,
              pingErrors: relaySelectionManager.errors
            };
          }
        }
        _warn(msg) {
          this.logger.warn(msg);
        }
        async _calculateGasPrice() {
          const pct = this.config.gasPriceFactorPercent;
          const networkGasPrice = await this.dependencies.contractInteractor.getGasPrice();
          let gasPrice = Math.round(parseInt(networkGasPrice) * (pct + 100) / 100);
          if (this.config.minGasPrice != null && gasPrice < this.config.minGasPrice) {
            gasPrice = this.config.minGasPrice;
          }
          return `0x${gasPrice.toString(16)}`;
        }
        async _attemptRelay(relayInfo, gsnTransactionDetails) {
          this.logger.info(`attempting relay: ${JSON.stringify(relayInfo)} transaction: ${JSON.stringify(gsnTransactionDetails)}`);
          const maxAcceptanceBudget = parseInt(relayInfo.pingResponse.maxAcceptanceBudget);
          const httpRequest = await this._prepareRelayHttpRequest(relayInfo, gsnTransactionDetails);
          this.emit(new GsnEvents_1.GsnValidateRequestEvent());
          const acceptRelayCallResult = await this.dependencies.contractInteractor.validateRelayCall(maxAcceptanceBudget, httpRequest.relayRequest, httpRequest.metadata.signature, httpRequest.metadata.approvalData, this.config.maxViewableGasLimit);
          if (!acceptRelayCallResult.paymasterAccepted) {
            let message;
            if (acceptRelayCallResult.reverted) {
              message = "local view call to 'relayCall()' reverted";
            } else {
              message = "paymaster rejected in local view call to 'relayCall()' ";
            }
            return { error: new Error(`${message}: ${Utils_1.decodeRevertReason(acceptRelayCallResult.returnValue)}`) };
          }
          let hexTransaction;
          let transaction;
          let auditPromise;
          this.emit(new GsnEvents_1.GsnSendToRelayerEvent(relayInfo.relayInfo.relayUrl));
          try {
            hexTransaction = await this.dependencies.httpClient.relayTransaction(relayInfo.relayInfo.relayUrl, httpRequest);
            transaction = tx_1.Transaction.fromSerializedTx(ethereumjs_util_1.toBuffer(hexTransaction), this.dependencies.contractInteractor.getRawTxOptions());
            auditPromise = this.auditTransaction(hexTransaction, relayInfo.relayInfo.relayUrl).then((penalizeResponse) => {
              if (penalizeResponse.commitTxHash != null) {
                const txHash = ethereumjs_util_1.bufferToHex(transaction.hash());
                this.logger.error(`The transaction with id: ${txHash} was penalized! Penalization commitment tx id: ${penalizeResponse.commitTxHash}`);
              }
              return penalizeResponse;
            });
          } catch (error2) {
            if ((error2 === null || error2 === void 0 ? void 0 : error2.message) == null || error2.message.indexOf("timeout") !== -1) {
              this.dependencies.knownRelaysManager.saveRelayFailure((/* @__PURE__ */ new Date()).getTime(), relayInfo.relayInfo.relayManager, relayInfo.relayInfo.relayUrl);
            }
            this.logger.info(`relayTransaction: ${JSON.stringify(httpRequest)}`);
            return { error: error2, isRelayError: true };
          }
          let validationError;
          try {
            if (!this.dependencies.transactionValidator.validateRelayResponse(httpRequest, maxAcceptanceBudget, hexTransaction)) {
              validationError = new Error("Returned transaction did not pass validation");
            }
          } catch (e) {
            validationError = e;
          }
          if (validationError != null) {
            this.emit(new GsnEvents_1.GsnRelayerResponseEvent(false));
            this.dependencies.knownRelaysManager.saveRelayFailure((/* @__PURE__ */ new Date()).getTime(), relayInfo.relayInfo.relayManager, relayInfo.relayInfo.relayUrl);
            return {
              auditPromise,
              isRelayError: true,
              error: validationError
            };
          }
          this.emit(new GsnEvents_1.GsnRelayerResponseEvent(true));
          await this._broadcastRawTx(transaction);
          return {
            auditPromise,
            transaction
          };
        }
        async _prepareRelayHttpRequest(relayInfo, gsnTransactionDetails) {
          var _a;
          const relayHubAddress = this.dependencies.contractInteractor.getDeployment().relayHubAddress;
          const forwarder = this.dependencies.contractInteractor.getDeployment().forwarderAddress;
          const paymaster = this.dependencies.contractInteractor.getDeployment().paymasterAddress;
          if (relayHubAddress == null || paymaster == null || forwarder == null) {
            throw new Error("Contract addresses are not initialized!");
          }
          const validUntilPromise = this.dependencies.contractInteractor.getBlockNumber().then((num) => (num + REQUEST_VALID_BLOCKS).toString());
          const senderNonce = await this.dependencies.contractInteractor.getSenderNonce(gsnTransactionDetails.from, forwarder);
          const relayWorker = relayInfo.pingResponse.relayWorkerAddress;
          const gasPriceHex = gsnTransactionDetails.gasPrice;
          const gasLimitHex = gsnTransactionDetails.gas;
          if (gasPriceHex == null || gasLimitHex == null) {
            throw new Error("RelayClient internal exception. Gas price or gas limit still not calculated. Cannot happen.");
          }
          if (gasPriceHex.indexOf("0x") !== 0) {
            throw new Error(`Invalid gasPrice hex string: ${gasPriceHex}`);
          }
          if (gasLimitHex.indexOf("0x") !== 0) {
            throw new Error(`Invalid gasLimit hex string: ${gasLimitHex}`);
          }
          const gasLimit = parseInt(gasLimitHex, 16).toString();
          const gasPrice = parseInt(gasPriceHex, 16).toString();
          const value = (_a = gsnTransactionDetails.value) !== null && _a !== void 0 ? _a : "0";
          const relayRequest = {
            request: {
              to: gsnTransactionDetails.to,
              data: gsnTransactionDetails.data,
              from: gsnTransactionDetails.from,
              value,
              nonce: senderNonce,
              gas: gasLimit,
              validUntil: await validUntilPromise
            },
            relayData: {
              pctRelayFee: relayInfo.relayInfo.pctRelayFee,
              baseRelayFee: relayInfo.relayInfo.baseRelayFee,
              gasPrice,
              paymaster,
              paymasterData: "",
              clientId: this.config.clientId,
              forwarder,
              relayWorker
            }
          };
          relayRequest.relayData.paymasterData = await this.dependencies.asyncPaymasterData(relayRequest);
          this.emit(new GsnEvents_1.GsnSignRequestEvent());
          const signature = await this.dependencies.accountManager.sign(relayRequest);
          const approvalData = await this.dependencies.asyncApprovalData(relayRequest);
          const transactionCount = await this.dependencies.contractInteractor.getTransactionCount(relayWorker);
          const relayMaxNonce = transactionCount + this.config.maxRelayNonceGap;
          const metadata = {
            relayHubAddress,
            signature,
            approvalData,
            relayMaxNonce
          };
          const httpRequest = {
            relayRequest,
            metadata
          };
          this.logger.info(`Created HTTP relay request: ${JSON.stringify(httpRequest)}`);
          return httpRequest;
        }
        newAccount() {
          this._verifyInitialized();
          return this.dependencies.accountManager.newAccount();
        }
        addAccount(privateKey) {
          this._verifyInitialized();
          this.dependencies.accountManager.addAccount(privateKey);
        }
        _verifyInitialized() {
          if (!this.initialized) {
            throw new Error("not initialized. must call RelayClient.init()");
          }
        }
        async auditTransaction(hexTransaction, sourceRelayUrl) {
          const auditors = this.dependencies.knownRelaysManager.getAuditors([sourceRelayUrl]);
          let failedAuditorsCount = 0;
          for (const auditor of auditors) {
            try {
              const penalizeResponse = await this.dependencies.httpClient.auditTransaction(auditor, hexTransaction);
              if (penalizeResponse.commitTxHash != null) {
                return penalizeResponse;
              }
            } catch (e) {
              failedAuditorsCount++;
              this.logger.info(`Audit call failed for relay at URL: ${auditor}. Failed audit calls: ${failedAuditorsCount}/${auditors.length}`);
            }
          }
          if (auditors.length === failedAuditorsCount && failedAuditorsCount !== 0) {
            this.logger.error("All auditors failed!");
          }
          return {
            message: `Transaction was not audited. Failed audit calls: ${failedAuditorsCount}/${auditors.length}`
          };
        }
        getUnderlyingProvider() {
          return this.rawConstructorInput.provider;
        }
        async _resolveConfiguration({ provider, config: config3 = {} }) {
          return Object.assign(Object.assign({}, GSNConfigurator_1.defaultGsnConfig), config3);
        }
        async _resolveDependencies({ provider, config: config3 = {}, overrideDependencies = {} }) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
          const versionManager = new VersionsManager_1.VersionsManager(Version_1.gsnRuntimeVersion, (_a = config3.requiredVersionRange) !== null && _a !== void 0 ? _a : Version_1.gsnRequiredVersion);
          const contractInteractor = (_b = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.contractInteractor) !== null && _b !== void 0 ? _b : await new ContractInteractor_1.ContractInteractor({
            provider,
            versionManager,
            logger: this.logger,
            maxPageSize: this.config.pastEventsQueryMaxPageSize,
            deployment: { paymasterAddress: config3 === null || config3 === void 0 ? void 0 : config3.paymasterAddress }
          }).init();
          const accountManager = (_c = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.accountManager) !== null && _c !== void 0 ? _c : new AccountManager_1.AccountManager(provider, contractInteractor.chainId, this.config);
          const httpClient = (_d = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.httpClient) !== null && _d !== void 0 ? _d : new HttpClient_1.HttpClient(new HttpWrapper_1.HttpWrapper(), this.logger);
          const pingFilter = (_e = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.pingFilter) !== null && _e !== void 0 ? _e : exports.GasPricePingFilter;
          const relayFilter = (_f = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.relayFilter) !== null && _f !== void 0 ? _f : KnownRelaysManager_1.EmptyFilter;
          const asyncApprovalData = (_g = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.asyncApprovalData) !== null && _g !== void 0 ? _g : exports.EmptyDataCallback;
          const asyncPaymasterData = (_h = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.asyncPaymasterData) !== null && _h !== void 0 ? _h : exports.EmptyDataCallback;
          const scoreCalculator = (_j = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.scoreCalculator) !== null && _j !== void 0 ? _j : KnownRelaysManager_1.DefaultRelayScore;
          const knownRelaysManager = (_k = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.knownRelaysManager) !== null && _k !== void 0 ? _k : new KnownRelaysManager_1.KnownRelaysManager(contractInteractor, this.logger, this.config, relayFilter);
          const transactionValidator = (_l = overrideDependencies === null || overrideDependencies === void 0 ? void 0 : overrideDependencies.transactionValidator) !== null && _l !== void 0 ? _l : new RelayedTransactionValidator_1.RelayedTransactionValidator(contractInteractor, this.logger, this.config);
          return {
            logger: this.logger,
            httpClient,
            contractInteractor,
            knownRelaysManager,
            accountManager,
            transactionValidator,
            pingFilter,
            relayFilter,
            asyncApprovalData,
            asyncPaymasterData,
            scoreCalculator
          };
        }
      };
      exports.RelayClient = RelayClient;
      function _dumpRelayingResult(relayingResult) {
        let str = "";
        if (relayingResult.pingErrors.size > 0) {
          str += `Ping errors (${relayingResult.pingErrors.size}):`;
          Array.from(relayingResult.pingErrors.keys()).forEach((e) => {
            var _a, _b;
            const err2 = relayingResult.pingErrors.get(e);
            const error2 = (_b = (_a = err2 === null || err2 === void 0 ? void 0 : err2.message) !== null && _a !== void 0 ? _a : err2 === null || err2 === void 0 ? void 0 : err2.toString()) !== null && _b !== void 0 ? _b : "";
            str += `
${e} => ${error2}
`;
          });
        }
        if (relayingResult.relayingErrors.size > 0) {
          str += `Relaying errors (${relayingResult.relayingErrors.size}):
`;
          Array.from(relayingResult.relayingErrors.keys()).forEach((e) => {
            var _a, _b;
            const err2 = relayingResult.relayingErrors.get(e);
            const error2 = (_b = (_a = err2 === null || err2 === void 0 ? void 0 : err2.message) !== null && _a !== void 0 ? _a : err2 === null || err2 === void 0 ? void 0 : err2.toString()) !== null && _b !== void 0 ? _b : "";
            str += `${e} => ${error2}`;
          });
        }
        return str;
      }
      exports._dumpRelayingResult = _dumpRelayingResult;
    }
  });

  // node_modules/@opengsn/provider/dist/RelayProvider.js
  var require_RelayProvider = __commonJS({
    "node_modules/@opengsn/provider/dist/RelayProvider.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var abi_decoder_1 = __importDefault(require_abi_decoder());
      var IRelayHub_json_1 = __importDefault(require_IRelayHub());
      var RelayClient_1 = require_RelayClient();
      abi_decoder_1.default.addABI(IRelayHub_json_1.default);
      var RelayProvider2 = class _RelayProvider {
        constructor(relayClient) {
          if (relayClient.send != null) {
            throw new Error("Using new RelayProvider() constructor directly is deprecated.\nPlease create provider using RelayProvider.newProvider({})");
          }
          this.relayClient = relayClient;
          this.origProvider = this.relayClient.getUnderlyingProvider();
          this.host = this.origProvider.host;
          this.connected = this.origProvider.connected;
          if (typeof this.origProvider.sendAsync === "function") {
            this.origProviderSend = this.origProvider.sendAsync.bind(this.origProvider);
          } else {
            this.origProviderSend = this.origProvider.send.bind(this.origProvider);
          }
          this._delegateEventsApi();
        }
        static newProvider(input) {
          return new _RelayProvider(new RelayClient_1.RelayClient(input));
        }
        async init() {
          await this.relayClient.init();
          this.config = this.relayClient.config;
          this.logger = this.relayClient.logger;
          return this;
        }
        registerEventListener(handler) {
          this.relayClient.registerEventListener(handler);
        }
        unregisterEventListener(handler) {
          this.relayClient.unregisterEventListener(handler);
        }
        _delegateEventsApi() {
          ["on", "removeListener", "removeAllListeners", "reset", "disconnect", "addDefaultEvents", "once", "reconnect"].forEach((func) => {
            if (this.origProvider[func] !== void 0) {
              this[func] = this.origProvider[func].bind(this.origProvider);
            }
          });
        }
        send(payload, callback) {
          if (this._useGSN(payload)) {
            if (payload.method === "eth_sendTransaction") {
              if (payload.params[0].to === void 0) {
                throw new Error("GSN cannot relay contract deployment transactions. Add {from: accountWithEther, useGSN: false}.");
              }
              this._ethSendTransaction(payload, callback);
              return;
            }
            if (payload.method === "eth_getTransactionReceipt") {
              this._ethGetTransactionReceipt(payload, callback);
              return;
            }
            if (payload.method === "eth_accounts") {
              this._getAccounts(payload, callback);
            }
          }
          this.origProviderSend(payload, (error2, result) => {
            callback(error2, result);
          });
        }
        _ethGetTransactionReceipt(payload, callback) {
          this.logger.info("calling sendAsync" + JSON.stringify(payload));
          this.origProviderSend(payload, (error2, rpcResponse) => {
            if (error2) {
              callback(error2, rpcResponse);
              return;
            }
            if (rpcResponse == null || rpcResponse.result == null) {
              callback(error2, rpcResponse);
              return;
            }
            rpcResponse.result = this._getTranslatedGsnResponseResult(rpcResponse.result);
            callback(error2, rpcResponse);
          });
        }
        _ethSendTransaction(payload, callback) {
          this.logger.info("calling sendAsync" + JSON.stringify(payload));
          const gsnTransactionDetails = payload.params[0];
          this.relayClient.relayTransaction(gsnTransactionDetails).then((relayingResult) => {
            if (relayingResult.transaction != null) {
              const jsonRpcSendResult = this._convertTransactionToRpcSendResponse(relayingResult.transaction, payload);
              callback(null, jsonRpcSendResult);
            } else {
              const message = `Failed to relay call. Results:
${RelayClient_1._dumpRelayingResult(relayingResult)}`;
              this.logger.error(message);
              callback(new Error(message));
            }
          }, (reason) => {
            const reasonStr = reason instanceof Error ? reason.message : JSON.stringify(reason);
            const msg = `Rejected relayTransaction call with reason: ${reasonStr}`;
            this.logger.info(msg);
            callback(new Error(msg));
          });
        }
        _convertTransactionToRpcSendResponse(transaction, request3) {
          var _a;
          const txHash = transaction.hash().toString("hex");
          const hash = `0x${txHash}`;
          const id = (_a = typeof request3.id === "string" ? parseInt(request3.id) : request3.id) !== null && _a !== void 0 ? _a : -1;
          return {
            jsonrpc: "2.0",
            id,
            result: hash
          };
        }
        _getTranslatedGsnResponseResult(respResult) {
          const fixedTransactionReceipt = Object.assign({}, respResult);
          if (respResult.logs.length === 0) {
            return fixedTransactionReceipt;
          }
          const logs = abi_decoder_1.default.decodeLogs(respResult.logs);
          const paymasterRejectedEvents = logs.find((e) => e != null && e.name === "TransactionRejectedByPaymaster");
          if (paymasterRejectedEvents !== null && paymasterRejectedEvents !== void 0) {
            const paymasterRejectionReason = paymasterRejectedEvents.events.find((e) => e.name === "reason");
            if (paymasterRejectionReason !== void 0) {
              this.logger.info(`Paymaster rejected on-chain: ${paymasterRejectionReason.value}. changing status to zero`);
              fixedTransactionReceipt.status = "0";
            }
            return fixedTransactionReceipt;
          }
          const transactionRelayed = logs.find((e) => e != null && e.name === "TransactionRelayed");
          if (transactionRelayed != null) {
            const transactionRelayedStatus = transactionRelayed.events.find((e) => e.name === "status");
            if (transactionRelayedStatus !== void 0) {
              const status2 = transactionRelayedStatus.value.toString();
              if (status2 !== "0") {
                this.logger.info(`reverted relayed transaction, status code ${status2}. changing status to zero`);
                fixedTransactionReceipt.status = "0";
              }
            }
          }
          return fixedTransactionReceipt;
        }
        _useGSN(payload) {
          var _a;
          if (payload.method === "eth_accounts") {
            return true;
          }
          if (payload.params[0] === void 0) {
            return false;
          }
          const gsnTransactionDetails = payload.params[0];
          return (_a = gsnTransactionDetails === null || gsnTransactionDetails === void 0 ? void 0 : gsnTransactionDetails.useGSN) !== null && _a !== void 0 ? _a : true;
        }
        supportsSubscriptions() {
          return this.origProvider.supportsSubscriptions();
        }
        disconnect() {
          return this.origProvider.disconnect();
        }
        newAccount() {
          return this.relayClient.newAccount();
        }
        addAccount(privateKey) {
          this.relayClient.addAccount(privateKey);
        }
        _getAccounts(payload, callback) {
          this.origProviderSend(payload, (error2, rpcResponse) => {
            if (rpcResponse != null && Array.isArray(rpcResponse.result)) {
              const ephemeralAccounts = this.relayClient.dependencies.accountManager.getAccounts();
              rpcResponse.result = rpcResponse.result.concat(ephemeralAccounts);
            }
            callback(error2, rpcResponse);
          });
        }
      };
      exports.RelayProvider = RelayProvider2;
    }
  });

  // node_modules/@opengsn/provider/dist/index.js
  var require_dist12 = __commonJS({
    "node_modules/@opengsn/provider/dist/index.js"(exports) {
      "use strict";
      init_process();
      init_buffer();
      function __export2(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      __export2(require_RelayProvider());
      __export2(require_RelayClient());
      __export2(require_GsnEvents());
      __export2(require_GSNConfigurator());
    }
  });

  // expose-gsn.js
  init_process();
  init_buffer();
  var import_provider = __toESM(require_dist12(), 1);
  window.gsn = window.gsn || {};
  window.gsn.RelayProvider = import_provider.RelayProvider;
  window.RelayProvider = import_provider.RelayProvider;
})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/punycode v1.4.1 by @mathias */
/*! Bundled license information:

@esbuild-plugins/node-globals-polyfill/Buffer.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

utf8/utf8.js:
  (*! https://mths.be/utf8js v3.0.0 by @mathias *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.5.7
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2016
   * @license MIT
   *)

crc-32/crc32.js:
  (*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com *)

decimal.js/decimal.js:
  (*!
   *  decimal.js v10.6.0
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   *)
*/
